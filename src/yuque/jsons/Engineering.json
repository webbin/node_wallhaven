{
    "meta": {
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "latestReviewStatus": -1
    },
    "data": {
        "id": 31505648,
        "space_id": 0,
        "type": "Doc",
        "sub_type": null,
        "title": "前端面试题之前端工程化篇",
        "tag": null,
        "slug": "hx0sf2",
        "user_id": 1500604,
        "book_id": 6862641,
        "cover": "https://cdn.nlark.com/yuque/0/2021/png/1500604/1615908675152-69682ae3-d0b3-4552-a32e-39c2022b1db0.png?x-oss-process=image%2Fresize%2Cw_1500",
        "description": "一、Git1. git 和 svn 的区别git 和 svn 最大的区别在于 git 是分布式的，而 svn 是集中式的。因此我们不能再离线的情况下使用 svn。如果服务器出现问题，就没有办法使用 svn 来提交代码。svn 中的分支是整个版本库的复制的一份完整目录，而 git 的分支是指针指...",
        "custom_description": null,
        "body_asl": "",
        "format": "lake",
        "origin_format": "lake",
        "status": 1,
        "read_status": 1,
        "view_status": 0,
        "public": 1,
        "draft_version": 22,
        "comments_count": 14,
        "likes_count": 76,
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "content_updated_at": "2023-01-16T18:53:44.000Z",
        "created_at": "2021-02-15T15:39:38.000Z",
        "updated_at": "2023-07-21T02:05:51.000Z",
        "published_at": "2023-01-16T18:53:44.000Z",
        "first_published_at": "2021-02-15T15:42:37.000Z",
        "pinned_at": null,
        "word_count": 4638,
        "content": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"adapt\" /><h2 data-lake-id=\"OUYAp\" id=\"OUYAp\"><span data-lake-id=\"u0c8e8058\" id=\"u0c8e8058\">一、Git</span></h2><h3 data-lake-id=\"I7LCH\" id=\"I7LCH\"><span data-lake-id=\"u207b7a9a\" id=\"u207b7a9a\">1. git 和 svn 的区别</span></h3><ul list=\"u4667ce7e\"><li fid=\"ue6135b56\" data-lake-id=\"e4fe6f9d845660fce224caa9272ee83d\" id=\"e4fe6f9d845660fce224caa9272ee83d\"><span data-lake-id=\"u3cbd7d02\" id=\"u3cbd7d02\">git 和 svn 最大的区别在于 git 是分布式的，而 svn 是集中式的。因此我们不能再离线的情况下使用 svn。如果服务器出现问题，就没有办法使用 svn 来提交代码。</span></li><li fid=\"ue6135b56\" data-lake-id=\"e46570bf5b6ef0ab6b76a2316f8afcfa\" id=\"e46570bf5b6ef0ab6b76a2316f8afcfa\"><span data-lake-id=\"u1930e4fa\" id=\"u1930e4fa\">svn 中的分支是整个版本库的复制的一份完整目录，而 git 的分支是指针指向某次提交，因此 git 的分支创建更加开销更小并且分支上的变化不会影响到其他人。svn 的分支变化会影响到所有的人。</span></li><li fid=\"ue6135b56\" data-lake-id=\"e51ba5d8f911926ef08122ec91f875f6\" id=\"e51ba5d8f911926ef08122ec91f875f6\"><span data-lake-id=\"u791d7e18\" id=\"u791d7e18\">svn 的指令相对于 git 来说要简单一些，比 git 更容易上手。</span></li><li fid=\"ue6135b56\" data-lake-id=\"u9e090fa7\" id=\"u9e090fa7\"><strong><span data-lake-id=\"u9ab3ec2a\" id=\"u9ab3ec2a\">GIT把内容按元数据方式存储，而SVN是按文件：</span></strong><span data-lake-id=\"ue8b0829e\" id=\"ue8b0829e\">因为git目录是处于个人机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。</span></li><li fid=\"ue6135b56\" data-lake-id=\"u3b1f7455\" id=\"u3b1f7455\"><strong><span data-lake-id=\"ue144ebaa\" id=\"ue144ebaa\">GIT分支和SVN的分支不同：</span></strong><span data-lake-id=\"u749675f2\" id=\"u749675f2\">svn会发生分支遗漏的情况，而git可以同一个工作目录下快速的在几个分支间切换，很容易发现未被合并的分支，简单而快捷的合并这些文件。</span></li><li fid=\"ue6135b56\" data-lake-id=\"u8b29adf9\" id=\"u8b29adf9\"><strong><span data-lake-id=\"u0ed042a1\" id=\"u0ed042a1\">GIT没有一个全局的版本号，而SVN有</span></strong></li><li fid=\"ue6135b56\" data-lake-id=\"u14dc8bd3\" id=\"u14dc8bd3\"><strong><span data-lake-id=\"u80178dd5\" id=\"u80178dd5\">GIT的内容完整性要优于SVN：</span></strong><span data-lake-id=\"ud655d107\" id=\"ud655d107\">GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏</span></li></ul><h3 data-lake-id=\"szAy7\" id=\"szAy7\"><span data-lake-id=\"u5391de77\" id=\"u5391de77\">2. 经常使用的 git 命令？</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22git%20init%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%96%B0%E5%BB%BA%20git%20%E4%BB%A3%E7%A0%81%E5%BA%93%5Cngit%20add%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%B7%BB%E5%8A%A0%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6%E5%88%B0%E6%9A%82%E5%AD%98%E5%8C%BA%5Cngit%20rm%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%A0%E9%99%A4%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B9%B6%E4%B8%94%E5%B0%86%E8%BF%99%E6%AC%A1%E5%88%A0%E9%99%A4%E6%94%BE%E5%85%A5%E6%9A%82%E5%AD%98%E5%8C%BA%5Cngit%20commit%20-m%20%5Bmessage%5D%20%20%20%20%20%20%2F%2F%20%E6%8F%90%E4%BA%A4%E6%9A%82%E5%AD%98%E5%8C%BA%E5%88%B0%E4%BB%93%E5%BA%93%E5%8C%BA%5Cngit%20branch%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%97%E5%87%BA%E6%89%80%E6%9C%89%E5%88%86%E6%94%AF%5Cngit%20checkout%20-b%20%5Bbranch%5D%20%20%20%20%20%2F%2F%20%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%EF%BC%8C%E5%B9%B6%E5%88%87%E6%8D%A2%E5%88%B0%E8%AF%A5%E5%88%86%E6%94%AF%5Cngit%20status%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%98%BE%E7%A4%BA%E6%9C%89%E5%8F%98%E6%9B%B4%E6%96%87%E4%BB%B6%E7%9A%84%E7%8A%B6%E6%80%81%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22oIizL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"DKT6I\" id=\"DKT6I\"><span data-lake-id=\"u3a772e20\" id=\"u3a772e20\">3. git pull 和 git fetch 的区别</span></h3><ul list=\"u10d27afe\"><li fid=\"u690f040a\" data-lake-id=\"283a5a50d3003539991c3b66f68943a3\" id=\"283a5a50d3003539991c3b66f68943a3\"><span data-lake-id=\"u943fa1b4\" id=\"u943fa1b4\">git fetch 只是将远程仓库的变化下载下来，并没有和本地分支合并。</span></li><li fid=\"u690f040a\" data-lake-id=\"11fc68531fd6842e6a66bbe130196193\" id=\"11fc68531fd6842e6a66bbe130196193\"><span data-lake-id=\"u6737f734\" id=\"u6737f734\">git pull 会将远程仓库的变化下载下来，并和当前分支合并。</span></li></ul><h3 data-lake-id=\"TZIlI\" id=\"TZIlI\"><span data-lake-id=\"ud2cf3e0e\" id=\"ud2cf3e0e\">4. git rebase 和 git merge 的区别</span></h3><p data-lake-id=\"df2b02b904f5311d0ecc53773bd5bfb5\" id=\"df2b02b904f5311d0ecc53773bd5bfb5\"><span data-lake-id=\"u5dbbc512\" id=\"u5dbbc512\">git merge 和 git rebase 都是用于分支合并，关键</span><strong><span data-lake-id=\"u1b47e37a\" id=\"u1b47e37a\">在 </span></strong><strong><span data-lake-id=\"u6e9673f0\" id=\"u6e9673f0\">commit 记录的处理上不同</span></strong><span data-lake-id=\"uaaf2be9b\" id=\"uaaf2be9b\">：</span></p><ul list=\"u060f386f\"><li fid=\"u73f9c957\" data-lake-id=\"055295e9b1a8a2ff14cac1493e249f15\" id=\"055295e9b1a8a2ff14cac1493e249f15\"><span data-lake-id=\"u4d39b6d3\" id=\"u4d39b6d3\">git merge 会新建一个新的 commit 对象，然后两个分支以前的 commit 记录都指向这个新 commit 记录。这种方法会保留之前每个分支的 commit 历史。</span></li><li fid=\"u73f9c957\" data-lake-id=\"faf9c8d4c071af38e75fb1112ae355fe\" id=\"faf9c8d4c071af38e75fb1112ae355fe\"><span data-lake-id=\"u05e175e5\" id=\"u05e175e5\">git rebase 会先找到两个分支的第一个共同的 commit 祖先记录，然后将提取当前分支这之后的所有 commit 记录，然后将这个 commit 记录添加到目标分支的最新提交后面。经过这个合并后，两个分支合并后的 commit 记录就变为了线性的记录了。</span></li></ul><h2 data-lake-id=\"1TNOX\" id=\"1TNOX\"><span data-lake-id=\"u452f9e35\" id=\"u452f9e35\">二、Webpack</span></h2><h3 data-lake-id=\"u0I7p\" id=\"u0I7p\"><span data-lake-id=\"u74b5acb3\" id=\"u74b5acb3\">1. </span><strong><span data-lake-id=\"u3acbfdb7\" id=\"u3acbfdb7\">webpack</span></strong><span data-lake-id=\"udf6ef0fa\" id=\"udf6ef0fa\">与</span><strong><span data-lake-id=\"u4f7588c9\" id=\"u4f7588c9\">grunt</span></strong><span data-lake-id=\"u755c26ea\" id=\"u755c26ea\">、</span><strong><span data-lake-id=\"ub9f5bb85\" id=\"ub9f5bb85\">gulp</span></strong><span data-lake-id=\"u3c8361cf\" id=\"u3c8361cf\">的不同？ </span></h3><p data-lake-id=\"3e207df6b1799ff2f64dd5c48d6fee43\" id=\"3e207df6b1799ff2f64dd5c48d6fee43\"><strong><span data-lake-id=\"u726a0674\" id=\"u726a0674\">Grunt</span></strong><strong><span data-lake-id=\"uea54b1d3\" id=\"uea54b1d3\">、Gulp是基于任务运⾏的⼯具</span></strong><span data-lake-id=\"u3b349234\" id=\"u3b349234\">： 它们会⾃动执⾏指定的任务，就像流⽔线，把资源放上去然后通过不同插件进⾏加⼯，它们包含活跃的社区，丰富的插件，能⽅便的打造各种⼯作流。 </span></p><p data-lake-id=\"5f2d129d0ec2569fc5c54a000a1e3e8d\" id=\"5f2d129d0ec2569fc5c54a000a1e3e8d\"><br></p><p data-lake-id=\"ec6ec61919746e51eb48a794cbd25c7d\" id=\"ec6ec61919746e51eb48a794cbd25c7d\"><strong><span data-lake-id=\"u01aff1d4\" id=\"u01aff1d4\">Webpack是基于模块化打包的⼯具: </span></strong><span data-lake-id=\"u285a1ff9\" id=\"u285a1ff9\">⾃动化处理模块，webpack把⼀切当成模块，当 webpack 处理应⽤程序时，它会递归地构建⼀个依赖关系图 (dependency graph)，其中包含应⽤程序需要的每个模块，然后将所有这些模块打包成⼀个或多个 bundle。 </span></p><p data-lake-id=\"ae24c733ef5a14dedd71737b77d0ea03\" id=\"ae24c733ef5a14dedd71737b77d0ea03\"><br></p><p data-lake-id=\"5963303263a46c6385c89998bc99997f\" id=\"5963303263a46c6385c89998bc99997f\"><span data-lake-id=\"u04da1dfe\" id=\"u04da1dfe\">因此这是完全不同的两类⼯具</span><span data-lake-id=\"u7320eb19\" id=\"u7320eb19\">,</span><span data-lake-id=\"uad7f95e4\" id=\"uad7f95e4\">⽽现在主流的⽅式是⽤</span><span data-lake-id=\"u3e3d4e36\" id=\"u3e3d4e36\">npm script</span><span data-lake-id=\"uf18e93d5\" id=\"uf18e93d5\">代替</span><span data-lake-id=\"u7f1048e6\" id=\"u7f1048e6\">Grunt</span><span data-lake-id=\"u8ab9ceb5\" id=\"u8ab9ceb5\">、</span><span data-lake-id=\"u69fbaaaf\" id=\"u69fbaaaf\">Gulp，npm script</span><span data-lake-id=\"u447dc5f7\" id=\"u447dc5f7\">同样可以打造任务流。</span></p><h3 data-lake-id=\"FPFVN\" id=\"FPFVN\"><span data-lake-id=\"u3dc5733f\" id=\"u3dc5733f\">2. </span><strong><span data-lake-id=\"ud87e3c0c\" id=\"ud87e3c0c\">webpack</span></strong><span data-lake-id=\"uc2e102a0\" id=\"uc2e102a0\">、</span><strong><span data-lake-id=\"ue5ca8b7d\" id=\"ue5ca8b7d\">rollup</span></strong><span data-lake-id=\"u393c50da\" id=\"u393c50da\">、</span><strong><span data-lake-id=\"ue66f6e66\" id=\"ue66f6e66\">parcel</span></strong><span data-lake-id=\"ua9b5e43a\" id=\"ua9b5e43a\">优劣？ </span></h3><ul list=\"u32122983\"><li fid=\"u7a2509c6\" data-lake-id=\"62edc627ce7d09e6eda70c70c5668331\" id=\"62edc627ce7d09e6eda70c70c5668331\"><span data-lake-id=\"u33ca63a6\" id=\"u33ca63a6\">webpack</span><span data-lake-id=\"u3a2d4675\" id=\"u3a2d4675\">适⽤于⼤型复杂的前端站点构建</span><span data-lake-id=\"ufda280ab\" id=\"ufda280ab\">: webpack</span><span data-lake-id=\"u6926b38b\" id=\"u6926b38b\">有强⼤的</span><span data-lake-id=\"ubcc21f35\" id=\"ubcc21f35\">loader</span><span data-lake-id=\"u5d5244c7\" id=\"u5d5244c7\">和插件⽣态,打包后的⽂件实际上就是⼀个⽴即执⾏函数，这个⽴即执⾏函数接收⼀个参数，这个参数是模块对象，键为各个模块的路径，值为模块内容。⽴即执⾏函数内部则处理模块之间的引⽤，执⾏模块等</span><span data-lake-id=\"u3972b787\" id=\"u3972b787\">,</span><span data-lake-id=\"u208faf26\" id=\"u208faf26\">这种情况更适合⽂件依赖复杂的应⽤开发。</span><span data-lake-id=\"uf18044d0\" id=\"uf18044d0\"> </span></li><li fid=\"u7a2509c6\" data-lake-id=\"0ebb22f642c548cbe4ab2f8cff253c41\" id=\"0ebb22f642c548cbe4ab2f8cff253c41\"><span data-lake-id=\"u269f3f80\" id=\"u269f3f80\">rollup</span><span data-lake-id=\"u23d0a4b7\" id=\"u23d0a4b7\">适⽤于基础库的打包，如</span><span data-lake-id=\"uad8b558e\" id=\"uad8b558e\">vue</span><span data-lake-id=\"u6cbeb4c2\" id=\"u6cbeb4c2\">、</span><span data-lake-id=\"u6df80b92\" id=\"u6df80b92\">d3</span><span data-lake-id=\"u4120e443\" id=\"u4120e443\">等</span><span data-lake-id=\"ud90d42e1\" id=\"ud90d42e1\">: Rollup </span><span data-lake-id=\"u6c29b7eb\" id=\"u6c29b7eb\">就是将各个模块打包进⼀个⽂件中，并且通过 </span><span data-lake-id=\"u93544645\" id=\"u93544645\">Tree-shaking 来删除⽆⽤的代码</span><span data-lake-id=\"u6fb43ed7\" id=\"u6fb43ed7\">,</span><span data-lake-id=\"ueee93e48\" id=\"ueee93e48\">可以最⼤程度上降低代码体积</span><span data-lake-id=\"u89dfc468\" id=\"u89dfc468\">,</span><span data-lake-id=\"u1bc21ff6\" id=\"u1bc21ff6\">但是</span><span data-lake-id=\"ufd5b8ae8\" id=\"ufd5b8ae8\">rollup</span><span data-lake-id=\"uad4ce1ce\" id=\"uad4ce1ce\">没有</span><span data-lake-id=\"ude2e0e78\" id=\"ude2e0e78\">webpack如此多的的如代码分割、按需加载等⾼级功能，其更聚焦于库的打包，因此更适合库的开发</span><span data-lake-id=\"u7f4c8bb5\" id=\"u7f4c8bb5\">。</span></li><li fid=\"u7a2509c6\" data-lake-id=\"0334a3a6b33e8377eab70158a7086c80\" id=\"0334a3a6b33e8377eab70158a7086c80\"><span data-lake-id=\"uff7781aa\" id=\"uff7781aa\">parcel</span><span data-lake-id=\"ud0b2db1f\" id=\"ud0b2db1f\">适⽤于简单的实验性项⽬</span><span data-lake-id=\"uaa7e21ef\" id=\"uaa7e21ef\">: </span><span data-lake-id=\"u4107081c\" id=\"u4107081c\">他可以满⾜低⻔槛的快速看到效果</span><span data-lake-id=\"uf5928089\" id=\"uf5928089\">,但是⽣态差、报错信息不够全⾯都是他的硬伤，除了⼀些玩具项⽬或者实验项⽬不建议使⽤。</span></li></ul><h3 data-lake-id=\"g8pqX\" id=\"g8pqX\"><span data-lake-id=\"u406960d1\" id=\"u406960d1\">3. </span><span data-lake-id=\"u8595f451\" id=\"u8595f451\">有哪些常⻅的</span><strong><span data-lake-id=\"u9f420eb4\" id=\"u9f420eb4\">Loader</span></strong><span data-lake-id=\"ueec6995d\" id=\"ueec6995d\">？ </span></h3><ul list=\"u799c4b22\"><li fid=\"u5fb8e987\" data-lake-id=\"908608b8e546b2337a3bf9c59aac5a5b\" id=\"908608b8e546b2337a3bf9c59aac5a5b\"><span data-lake-id=\"ub0d0ac09\" id=\"ub0d0ac09\">file-loader</span><span data-lake-id=\"ua16db034\" id=\"ua16db034\">：把⽂件输出到⼀个⽂件夹中，在代码中通过相对 </span><span data-lake-id=\"uaf3dd6bc\" id=\"uaf3dd6bc\">URL </span><span data-lake-id=\"u6c3f0efd\" id=\"u6c3f0efd\">去引⽤输出的⽂件 </span></li><li fid=\"u5fb8e987\" data-lake-id=\"d7a3e5a20c9f67d69422a16bfca75ce5\" id=\"d7a3e5a20c9f67d69422a16bfca75ce5\"><span data-lake-id=\"u8d53190b\" id=\"u8d53190b\">url-loader</span><span data-lake-id=\"u524035b7\" id=\"u524035b7\">：和 </span><span data-lake-id=\"u9c07db02\" id=\"u9c07db02\">file-loader </span><span data-lake-id=\"u4963dff4\" id=\"u4963dff4\">类似，但是能在⽂件很⼩的情况下以 </span><span data-lake-id=\"u71d52ca3\" id=\"u71d52ca3\">base64 </span><span data-lake-id=\"ufd7c9d75\" id=\"ufd7c9d75\">的⽅式把⽂件内容注⼊到代码中去 </span></li><li fid=\"u5fb8e987\" data-lake-id=\"f8f4506c6f29c466175232d0e32f95c0\" id=\"f8f4506c6f29c466175232d0e32f95c0\"><span data-lake-id=\"u5728fe74\" id=\"u5728fe74\">source-map-loader</span><span data-lake-id=\"uc83b12c8\" id=\"uc83b12c8\">：加载额外的 </span><span data-lake-id=\"u9c6b14e7\" id=\"u9c6b14e7\">Source Map </span><span data-lake-id=\"u5e4421af\" id=\"u5e4421af\">⽂件，以⽅便断点调试 </span></li><li fid=\"u5fb8e987\" data-lake-id=\"c27877ae744db4b2157f7322e6a77cb0\" id=\"c27877ae744db4b2157f7322e6a77cb0\"><span data-lake-id=\"ub5f8110d\" id=\"ub5f8110d\">image-loader</span><span data-lake-id=\"ua1da46d5\" id=\"ua1da46d5\">：加载并且压缩图⽚⽂件 </span></li><li fid=\"u5fb8e987\" data-lake-id=\"4fccc2e40944ece8ba7c14836cfcc939\" id=\"4fccc2e40944ece8ba7c14836cfcc939\"><span data-lake-id=\"ub8ee2bfd\" id=\"ub8ee2bfd\">babel-loader</span><span data-lake-id=\"ud4d1748a\" id=\"ud4d1748a\">：把 </span><span data-lake-id=\"u6d7a6fc1\" id=\"u6d7a6fc1\">ES6 </span><span data-lake-id=\"u54b84ee4\" id=\"u54b84ee4\">转换成 </span><span data-lake-id=\"u9fbab734\" id=\"u9fbab734\">ES5 </span></li><li fid=\"u5fb8e987\" data-lake-id=\"9a3ae490b8f1d45351a7cee2a03f6429\" id=\"9a3ae490b8f1d45351a7cee2a03f6429\"><span data-lake-id=\"u8b02e954\" id=\"u8b02e954\">css-loader</span><span data-lake-id=\"ucd44ddf4\" id=\"ucd44ddf4\">：加载 </span><span data-lake-id=\"ubc2275c3\" id=\"ubc2275c3\">CSS</span><span data-lake-id=\"u7b6bbc42\" id=\"u7b6bbc42\">，⽀持模块化、压缩、⽂件导⼊等特性 </span></li><li fid=\"u5fb8e987\" data-lake-id=\"14d74916ce6580f0be09e30124525abf\" id=\"14d74916ce6580f0be09e30124525abf\"><span data-lake-id=\"u2b5ac788\" id=\"u2b5ac788\">style-loader</span><span data-lake-id=\"ud8121d32\" id=\"ud8121d32\">：把 </span><span data-lake-id=\"u1d67cbce\" id=\"u1d67cbce\">CSS </span><span data-lake-id=\"u84bf7ab3\" id=\"u84bf7ab3\">代码注⼊到 </span><span data-lake-id=\"ucf48b6e6\" id=\"ucf48b6e6\">JavaScript </span><span data-lake-id=\"u91c60d2b\" id=\"u91c60d2b\">中，通过 </span><span data-lake-id=\"u1d365a5b\" id=\"u1d365a5b\">DOM </span><span data-lake-id=\"ud93b687f\" id=\"ud93b687f\">操作去加载 </span><span data-lake-id=\"uaa15d564\" id=\"uaa15d564\">CSS</span><span data-lake-id=\"ud91be62f\" id=\"ud91be62f\">。 </span></li><li fid=\"u5fb8e987\" data-lake-id=\"3134d5e4c0c6664e90b6d1c32371e909\" id=\"3134d5e4c0c6664e90b6d1c32371e909\"><span data-lake-id=\"u0c315581\" id=\"u0c315581\">eslint-loader</span><span data-lake-id=\"u3e3b48b3\" id=\"u3e3b48b3\">：通过 </span><span data-lake-id=\"uf9c00b29\" id=\"uf9c00b29\">ESLint </span><span data-lake-id=\"uf3f0df4e\" id=\"uf3f0df4e\">检查 </span><span data-lake-id=\"uca0354ad\" id=\"uca0354ad\">JavaScript </span><span data-lake-id=\"u03ba95a7\" id=\"u03ba95a7\">代码 </span></li></ul><p data-lake-id=\"u480a5180\" id=\"u480a5180\"><br></p><p data-lake-id=\"ud467231a\" id=\"ud467231a\"><strong><span data-lake-id=\"u7bda762a\" id=\"u7bda762a\">注意：</span></strong><span data-lake-id=\"u55eb8a8c\" id=\"u55eb8a8c\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">在Webpack中，loader的执行顺序是</span><strong><span data-lake-id=\"u13bfe449\" id=\"u13bfe449\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">从右向左</span></strong><span data-lake-id=\"u907e94d2\" id=\"u907e94d2\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">执行的。因为webpack选择了</span><strong><span data-lake-id=\"ue980f9e1\" id=\"ue980f9e1\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">compose这样的函数式编程方式</span></strong><span data-lake-id=\"uc47c798d\" id=\"uc47c798d\" class=\"lake-fontsize-12\" style=\"color: rgb(77, 77, 77)\">，这种方式的表达式执行是从右向左的。</span></p><h3 data-lake-id=\"Tztcn\" id=\"Tztcn\"><span data-lake-id=\"uf39f85ab\" id=\"uf39f85ab\">4. </span><span data-lake-id=\"u766b4b7d\" id=\"u766b4b7d\">有哪些常⻅的</span><strong><span data-lake-id=\"u5b9afc44\" id=\"u5b9afc44\">Plugin</span></strong><span data-lake-id=\"u8838e3b2\" id=\"u8838e3b2\">？ </span></h3><ul list=\"u5384e432\"><li fid=\"udbc01e14\" data-lake-id=\"9d68ef331f3a5ab3ce99312a620b6230\" id=\"9d68ef331f3a5ab3ce99312a620b6230\"><span data-lake-id=\"ubbce4e65\" id=\"ubbce4e65\">define-plugin：定义环境变量 </span></li><li fid=\"udbc01e14\" data-lake-id=\"e089d0d4863b46b49811cc1f39f5ee6b\" id=\"e089d0d4863b46b49811cc1f39f5ee6b\"><span data-lake-id=\"u8aabadad\" id=\"u8aabadad\">html-webpack-plugin</span><span data-lake-id=\"ud1989c12\" id=\"ud1989c12\">：简化</span><span data-lake-id=\"ub7e03fb5\" id=\"ub7e03fb5\">html⽂件创建 </span></li><li fid=\"udbc01e14\" data-lake-id=\"1729e27927b5c199f954c249ec1f1227\" id=\"1729e27927b5c199f954c249ec1f1227\"><span data-lake-id=\"u3e694222\" id=\"u3e694222\">uglifyjs-webpack-plugin</span><span data-lake-id=\"u1a72b6d9\" id=\"u1a72b6d9\">：通过 </span><span data-lake-id=\"u5c06f0ad\" id=\"u5c06f0ad\">UglifyES </span><span data-lake-id=\"u769c7128\" id=\"u769c7128\">压缩 </span><span data-lake-id=\"u6d8d0011\" id=\"u6d8d0011\">ES6 代码 </span></li><li fid=\"udbc01e14\" data-lake-id=\"85ddd2a0f2aabd857ad3480be746e832\" id=\"85ddd2a0f2aabd857ad3480be746e832\"><span data-lake-id=\"u81681952\" id=\"u81681952\">webpack-parallel-uglify-plugin: </span><span data-lake-id=\"u94649f07\" id=\"u94649f07\">多核压缩</span><span data-lake-id=\"u5dffbcf9\" id=\"u5dffbcf9\">，提⾼压缩速度 </span></li><li fid=\"udbc01e14\" data-lake-id=\"4b271d90a9067663d6050f711f09320a\" id=\"4b271d90a9067663d6050f711f09320a\"><span data-lake-id=\"ufa2eaea4\" id=\"ufa2eaea4\">webpack-bundle-analyzer: </span><span data-lake-id=\"ucfb87de6\" id=\"ucfb87de6\">可视化</span><span data-lake-id=\"u75dba964\" id=\"u75dba964\">webpack输出⽂件的体积 </span></li><li fid=\"udbc01e14\" data-lake-id=\"b361c0d34bc41f5760af8f87be759a89\" id=\"b361c0d34bc41f5760af8f87be759a89\"><span data-lake-id=\"ubb43c2f5\" id=\"ubb43c2f5\">mini-css-extract-plugin: CSS</span><span data-lake-id=\"u763e55dd\" id=\"u763e55dd\">提取到单独的⽂件中</span><span data-lake-id=\"uc4e7aaaa\" id=\"uc4e7aaaa\">，</span><span data-lake-id=\"u8f109b20\" id=\"u8f109b20\">⽀持按需加载 </span></li></ul><h3 data-lake-id=\"6qtSv\" id=\"6qtSv\"><span data-lake-id=\"u366882af\" id=\"u366882af\">5. </span><strong><span data-lake-id=\"u0bc5d02e\" id=\"u0bc5d02e\">bundle</span></strong><span data-lake-id=\"u6b1605cf\" id=\"u6b1605cf\">，</span><strong><span data-lake-id=\"uebd128c6\" id=\"uebd128c6\">chunk</span></strong><span data-lake-id=\"u01dd6409\" id=\"u01dd6409\">，</span><strong><span data-lake-id=\"u7492c323\" id=\"u7492c323\">module</span></strong><span data-lake-id=\"u683bbe70\" id=\"u683bbe70\">是什么？</span></h3><ul list=\"u0c787f18\"><li fid=\"ued68cff6\" data-lake-id=\"0e266f8c1ed165e503a35bc4e7f6bf06\" id=\"0e266f8c1ed165e503a35bc4e7f6bf06\"><span data-lake-id=\"u9f274a70\" id=\"u9f274a70\">bundle</span><span data-lake-id=\"u23112b98\" id=\"u23112b98\">：是由</span><span data-lake-id=\"u0a43321f\" id=\"u0a43321f\">webpack</span><span data-lake-id=\"u5205d7fc\" id=\"u5205d7fc\">打包出来的⽂件； </span></li><li fid=\"ued68cff6\" data-lake-id=\"c995496167938cf53f655a6817b53613\" id=\"c995496167938cf53f655a6817b53613\"><span data-lake-id=\"u883c3b71\" id=\"u883c3b71\">chunk</span><span data-lake-id=\"ud0564415\" id=\"ud0564415\">：代码块，⼀个</span><span data-lake-id=\"u0d13daae\" id=\"u0d13daae\">chunk</span><span data-lake-id=\"uaef292d3\" id=\"uaef292d3\">由多个模块组合⽽成，⽤于代码的合并和分割；</span></li><li fid=\"ued68cff6\" data-lake-id=\"7f8b088faa2a468c4bdcf17e4f67c152\" id=\"7f8b088faa2a468c4bdcf17e4f67c152\"><span data-lake-id=\"u797475ec\" id=\"u797475ec\">module</span><span data-lake-id=\"uc9933b18\" id=\"uc9933b18\">：是开发中的单个模块，在</span><span data-lake-id=\"uf149d838\" id=\"uf149d838\">webpack</span><span data-lake-id=\"u4315f714\" id=\"u4315f714\">的世界，⼀切皆模块，⼀个模块对应⼀个⽂件，</span><span data-lake-id=\"ua5f3d692\" id=\"ua5f3d692\">webpack会从配置的 entry</span><span data-lake-id=\"ue93786c7\" id=\"ue93786c7\">中递归开始找出所有依赖的模块。</span></li></ul><h3 data-lake-id=\"8pat9\" id=\"8pat9\"><span data-lake-id=\"u034a868e\" id=\"u034a868e\">6. </span><strong><span data-lake-id=\"uc91764df\" id=\"uc91764df\">Loader</span></strong><span data-lake-id=\"u4b06e3ad\" id=\"u4b06e3ad\">和</span><strong><span data-lake-id=\"u71d30408\" id=\"u71d30408\">Plugin</span></strong><span data-lake-id=\"u48a55d41\" id=\"u48a55d41\">的不同？ </span></h3><p data-lake-id=\"f8a62ae2e3a529d2bd7f9d954b402d55\" id=\"f8a62ae2e3a529d2bd7f9d954b402d55\"><span data-lake-id=\"u079f8f82\" id=\"u079f8f82\">不同的作⽤</span><span data-lake-id=\"u76435931\" id=\"u76435931\">: </span></p><ul list=\"ufea1ca47\"><li fid=\"u8995e236\" data-lake-id=\"89b1c58336e5522c16c048bf7a80e780\" id=\"89b1c58336e5522c16c048bf7a80e780\"><strong><span data-lake-id=\"u8ad69e32\" id=\"u8ad69e32\">Loader</span></strong><span data-lake-id=\"uc06d5d7f\" id=\"uc06d5d7f\">直译为&quot;加载器&quot;。Webpack将⼀切⽂件视为模块，但是webpack原⽣是只能解析js⽂件，如果想将其他⽂件也打包的话，就会⽤到 loader 。 所以Loader的作⽤是让webpack拥有了加载和解析⾮</span><span data-lake-id=\"uea70249e\" id=\"uea70249e\">JavaScript</span><span data-lake-id=\"uc48c8194\" id=\"uc48c8194\">⽂件的能⼒。 </span></li><li fid=\"u8995e236\" data-lake-id=\"330105cc6ed58a3ba4017c3af839aa5a\" id=\"330105cc6ed58a3ba4017c3af839aa5a\"><strong><span data-lake-id=\"u487d1605\" id=\"u487d1605\">Plugin</span></strong><span data-lake-id=\"uccc483f0\" id=\"uccc483f0\">直译为</span><span data-lake-id=\"u5bfebb31\" id=\"u5bfebb31\">&quot;</span><span data-lake-id=\"uf275832d\" id=\"uf275832d\">插件</span><span data-lake-id=\"uef5ad48a\" id=\"uef5ad48a\">&quot;</span><span data-lake-id=\"u89a810c7\" id=\"u89a810c7\">。</span><span data-lake-id=\"uf7d36318\" id=\"uf7d36318\">Plugin</span><span data-lake-id=\"u0f5b3374\" id=\"u0f5b3374\">可以扩展</span><span data-lake-id=\"u85858188\" id=\"u85858188\">webpack</span><span data-lake-id=\"uc47eb1a9\" id=\"uc47eb1a9\">的功能，让</span><span data-lake-id=\"u2d9ef1ee\" id=\"u2d9ef1ee\">webpack</span><span data-lake-id=\"ue819bfa5\" id=\"ue819bfa5\">具有更多的灵活性。 在 </span><span data-lake-id=\"ue7e59a0c\" id=\"ue7e59a0c\">Webpack 运⾏的⽣命周期中会⼴播出许多事件，</span><span data-lake-id=\"ua9713767\" id=\"ua9713767\">Plugin </span><span data-lake-id=\"u1e1f04f1\" id=\"u1e1f04f1\">可以监听这些事件，在合适的时机通过 </span><span data-lake-id=\"u27ca7967\" id=\"u27ca7967\">Webpack </span><span data-lake-id=\"u57159be9\" id=\"u57159be9\">提供的 </span><span data-lake-id=\"u11b300b5\" id=\"u11b300b5\">API </span><span data-lake-id=\"ue23d67ec\" id=\"ue23d67ec\">改变输出结果。</span></li></ul><p data-lake-id=\"f51b6aef79885563d49eacf032cb9bf6\" id=\"f51b6aef79885563d49eacf032cb9bf6\"><br></p><p data-lake-id=\"8a1306e7dee2e6dd06d9755fd9d64753\" id=\"8a1306e7dee2e6dd06d9755fd9d64753\"><strong><span data-lake-id=\"u3cc9d071\" id=\"u3cc9d071\">不同的⽤法</span></strong><strong><span data-lake-id=\"uc2504279\" id=\"uc2504279\">: </span></strong></p><ul list=\"u8ceffb4b\"><li fid=\"uc07dbdc1\" data-lake-id=\"004c5e38031e08667715f343a40efb87\" id=\"004c5e38031e08667715f343a40efb87\"><strong><span data-lake-id=\"u5d11a245\" id=\"u5d11a245\">Loader</span></strong><span data-lake-id=\"uac95208c\" id=\"uac95208c\">在 </span><span data-lake-id=\"u7d101e61\" id=\"u7d101e61\">module.rules 中配置，也就是说他作为模块的解析规则⽽存在。 类型为数组，每⼀项都是⼀个 </span><span data-lake-id=\"ubbeac508\" id=\"ubbeac508\">Object </span><span data-lake-id=\"ue7f319ff\" id=\"ue7f319ff\">，⾥⾯描述了对于什么类型的⽂件（ </span><span data-lake-id=\"u395670ad\" id=\"u395670ad\">test </span><span data-lake-id=\"u05a92183\" id=\"u05a92183\">），使⽤什么加载</span><span data-lake-id=\"ua30a38aa\" id=\"ua30a38aa\">( </span><span data-lake-id=\"uf24062f0\" id=\"uf24062f0\">loader </span><span data-lake-id=\"u46f93792\" id=\"u46f93792\">)</span><span data-lake-id=\"u94406dc9\" id=\"u94406dc9\">和使⽤的参数（ </span><span data-lake-id=\"u3313439f\" id=\"u3313439f\">options </span><span data-lake-id=\"u427a8b61\" id=\"u427a8b61\">） </span></li><li fid=\"uc07dbdc1\" data-lake-id=\"9c9dc5068c455b088c68a8f3fed85665\" id=\"9c9dc5068c455b088c68a8f3fed85665\"><strong><span data-lake-id=\"ud0a26036\" id=\"ud0a26036\">Plugin</span></strong><span data-lake-id=\"uba27a22a\" id=\"uba27a22a\">在 </span><span data-lake-id=\"u470622a6\" id=\"u470622a6\">plugins </span><span data-lake-id=\"ufb3d3f75\" id=\"ufb3d3f75\">中单独配置。 类型为数组，每⼀项是⼀个 </span><span data-lake-id=\"u9060f614\" id=\"u9060f614\">plugin </span><span data-lake-id=\"u41fcd436\" id=\"u41fcd436\">的实例，参数都通过构造函数传⼊。</span></li></ul><h3 data-lake-id=\"MZFqU\" id=\"MZFqU\"><span data-lake-id=\"u70f772cd\" id=\"u70f772cd\">7. </span><strong><span data-lake-id=\"u7eb8e3c9\" id=\"u7eb8e3c9\">webpack</span></strong><span data-lake-id=\"u5e22b547\" id=\"u5e22b547\">的构建流程</span><strong><span data-lake-id=\"u358387f1\" id=\"u358387f1\">? </span></strong></h3><p data-lake-id=\"72a3bae3420f02275fea13cd968f106a\" id=\"72a3bae3420f02275fea13cd968f106a\"><span data-lake-id=\"u52b1fdf8\" id=\"u52b1fdf8\">Webpack </span><span data-lake-id=\"u08911adc\" id=\"u08911adc\">的运⾏流程是⼀个串⾏的过程，从启动到结束会依次执⾏以下流程： </span></p><ol list=\"ub4a36171\"><li fid=\"uc73f1c18\" data-lake-id=\"0a1e0891259c986825782ae3ddf9dcc4\" id=\"0a1e0891259c986825782ae3ddf9dcc4\"><span data-lake-id=\"uc0a82f52\" id=\"uc0a82f52\">初始化参数：从配置⽂件和 </span><span data-lake-id=\"u230e5a35\" id=\"u230e5a35\">Shell </span><span data-lake-id=\"u6f19ab9a\" id=\"u6f19ab9a\">语句中读取与合并参数，得出最终的参数； </span></li><li fid=\"uc73f1c18\" data-lake-id=\"d30af94e3f04764c59ce2083e3d441fd\" id=\"d30af94e3f04764c59ce2083e3d441fd\"><span data-lake-id=\"u110bbdf5\" id=\"u110bbdf5\">开始编译：⽤上⼀步得到的参数初始化 </span><span data-lake-id=\"u02fb8c6e\" id=\"u02fb8c6e\">Compiler </span><span data-lake-id=\"uf896e12a\" id=\"uf896e12a\">对象，加载所有配置的插件，执⾏对象的 </span><span data-lake-id=\"u61666f61\" id=\"u61666f61\">run ⽅法开始执⾏编译； </span></li><li fid=\"uc73f1c18\" data-lake-id=\"4c807b576389b07f1b5a107653702643\" id=\"4c807b576389b07f1b5a107653702643\"><span data-lake-id=\"u599ddd73\" id=\"u599ddd73\">确定⼊⼝：根据配置中的 </span><span data-lake-id=\"ub19ee2ff\" id=\"ub19ee2ff\">entry </span><span data-lake-id=\"u89f4f6a7\" id=\"u89f4f6a7\">找出所有的⼊⼝⽂件； </span></li><li fid=\"uc73f1c18\" data-lake-id=\"fa840d6d7811ff97524bbadd02a5fbeb\" id=\"fa840d6d7811ff97524bbadd02a5fbeb\"><span data-lake-id=\"u950aec3f\" id=\"u950aec3f\">编译模块：从⼊⼝⽂件出发，调⽤所有配置的 </span><span data-lake-id=\"u513c1da3\" id=\"u513c1da3\">Loader 对模块进⾏翻译，再找出该模块依赖的模块，再递归本步骤直到所有⼊⼝依赖的⽂件都经过了本步骤的处理； </span></li><li fid=\"uc73f1c18\" data-lake-id=\"981a341201ca949f74f5233bed8b8ef0\" id=\"981a341201ca949f74f5233bed8b8ef0\"><span data-lake-id=\"uaf49b5e5\" id=\"uaf49b5e5\">完成模块编译：在经过第</span><span data-lake-id=\"u15416d16\" id=\"u15416d16\">4</span><span data-lake-id=\"uf6490002\" id=\"uf6490002\">步使⽤ </span><span data-lake-id=\"ufd6fe7d3\" id=\"ufd6fe7d3\">Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系； </span></li><li fid=\"uc73f1c18\" data-lake-id=\"7a298f57727f270a0f84459d73844bf8\" id=\"7a298f57727f270a0f84459d73844bf8\"><span data-lake-id=\"u1351a4fe\" id=\"u1351a4fe\">输出资源：根据⼊⼝和模块之间的依赖关系，组装成⼀个个包含多个模块的 </span><span data-lake-id=\"u503373d8\" id=\"u503373d8\">Chunk</span><span data-lake-id=\"u1320fb03\" id=\"u1320fb03\">，再把每个 </span><span data-lake-id=\"u9b3e4646\" id=\"u9b3e4646\">Chunk 转换成⼀个单独的⽂件加⼊到输出列表，这步是可以修改输出内容的最后机会； </span></li><li fid=\"uc73f1c18\" data-lake-id=\"df545f7081a564b8c12095d209bb2d59\" id=\"df545f7081a564b8c12095d209bb2d59\"><span data-lake-id=\"u71e344b3\" id=\"u71e344b3\">输出完成：在确定好输出内容后，根据配置确定输出的路径和⽂件名，把⽂件内容写⼊到⽂件系统。</span></li></ol><p data-lake-id=\"93b82ad6ffaf995016b942d60cb87bdc\" id=\"93b82ad6ffaf995016b942d60cb87bdc\"><br></p><p data-lake-id=\"27440bb66260df15ed70b4a3a299d13d\" id=\"27440bb66260df15ed70b4a3a299d13d\"><span data-lake-id=\"u48ac9fef\" id=\"u48ac9fef\">在以上过程中，</span><span data-lake-id=\"ub5ae3390\" id=\"ub5ae3390\">Webpack 会在特定的时间点⼴播出特定的事件，插件在监听到感兴趣的事件后会执⾏特定的逻辑，并且插件可以调⽤ </span><span data-lake-id=\"u40c73a11\" id=\"u40c73a11\">Webpack </span><span data-lake-id=\"u1b045949\" id=\"u1b045949\">提供的 </span><span data-lake-id=\"u7a1dd386\" id=\"u7a1dd386\">API </span><span data-lake-id=\"u4535f81e\" id=\"u4535f81e\">改变 </span><span data-lake-id=\"uf2a3275c\" id=\"uf2a3275c\">Webpack </span><span data-lake-id=\"ua750c676\" id=\"ua750c676\">的运⾏结果。 </span></p><h3 data-lake-id=\"kgnHu\" id=\"kgnHu\"><span data-lake-id=\"u42e75515\" id=\"u42e75515\">8. </span><span data-lake-id=\"uec4b5c69\" id=\"uec4b5c69\">编写</span><strong><span data-lake-id=\"u08339348\" id=\"u08339348\">loader</span></strong><span data-lake-id=\"u0d66370e\" id=\"u0d66370e\">或</span><strong><span data-lake-id=\"u262a334e\" id=\"u262a334e\">plugin</span></strong><span data-lake-id=\"u10de8245\" id=\"u10de8245\">的思路？</span></h3><p data-lake-id=\"5a87ba6d52df8741ea68c62cab2d3d23\" id=\"5a87ba6d52df8741ea68c62cab2d3d23\"><span data-lake-id=\"u1bda88d4\" id=\"u1bda88d4\">Loader</span><span data-lake-id=\"u8d8f375a\" id=\"u8d8f375a\">像⼀个</span><span data-lake-id=\"ua3c435a7\" id=\"ua3c435a7\">&quot;</span><span data-lake-id=\"u170cc463\" id=\"u170cc463\">翻译官</span><span data-lake-id=\"u8f180bb1\" id=\"u8f180bb1\">&quot;</span><span data-lake-id=\"u0342f492\" id=\"u0342f492\">把读到的源⽂件内容转义成新的⽂件内容，并且每个</span><span data-lake-id=\"u233e430d\" id=\"u233e430d\">Loader通过链式操作，将源⽂件⼀步步翻译成想要的样⼦。 </span></p><p data-lake-id=\"43a020dd2044ce9aed770a6800fa87bd\" id=\"43a020dd2044ce9aed770a6800fa87bd\"><br></p><p data-lake-id=\"676cf53caa69cc5bab9ffe50ca9be702\" id=\"676cf53caa69cc5bab9ffe50ca9be702\"><span data-lake-id=\"ud9af104f\" id=\"ud9af104f\">编写Loader时要遵循单⼀原则，每个Loader只做⼀种&quot;转义&quot;⼯作。 每个Loader的拿到的是源⽂件内容（source），可以通过返回值的⽅式将处理后的内容输出，也可以调⽤ this.callback() ⽅法，将内容返回给webpack。 还可以通过this.async() ⽣成⼀个 callback 函数，再⽤这个callback将处理后的内容输出出去。 此外 webpack 还为开发者准备了开发loader的⼯具函数集——loader-utils 。 </span></p><p data-lake-id=\"685b4194630cfed76f6b71f1d6f7c84e\" id=\"685b4194630cfed76f6b71f1d6f7c84e\"><br></p><p data-lake-id=\"d5223d158c8c43ee0b68608b58fdac4c\" id=\"d5223d158c8c43ee0b68608b58fdac4c\"><span data-lake-id=\"ud16b384f\" id=\"ud16b384f\">相对于</span><span data-lake-id=\"u8a726b8e\" id=\"u8a726b8e\">Loader</span><span data-lake-id=\"uec74fc3d\" id=\"uec74fc3d\">⽽⾔，</span><span data-lake-id=\"u81a20404\" id=\"u81a20404\">Plugin</span><span data-lake-id=\"u7e6b833c\" id=\"u7e6b833c\">的编写就灵活了许多。 </span><span data-lake-id=\"u81bcd570\" id=\"u81bcd570\">webpack</span><span data-lake-id=\"u75d00c80\" id=\"u75d00c80\">在运⾏的⽣命周期中会⼴播出许多事件，</span><span data-lake-id=\"u92985175\" id=\"u92985175\">Plugin 可以监听这些事件，在合适的时机通过 </span><span data-lake-id=\"u655c68a7\" id=\"u655c68a7\">Webpack </span><span data-lake-id=\"ub759b0f8\" id=\"ub759b0f8\">提供的 </span><span data-lake-id=\"u6bca06c3\" id=\"u6bca06c3\">API </span><span data-lake-id=\"u0fc0ceec\" id=\"u0fc0ceec\">改变输出结果。</span></p><h3 data-lake-id=\"m7Wxf\" id=\"m7Wxf\"><span data-lake-id=\"ue68f2043\" id=\"ue68f2043\">9. </span><strong><span data-lake-id=\"u898f0ffe\" id=\"u898f0ffe\">webpack</span></strong><span data-lake-id=\"u7cc6451d\" id=\"u7cc6451d\"> 热更新的实现原理？ </span></h3><p data-lake-id=\"0ec92f24b136baee633335c5c708a049\" id=\"0ec92f24b136baee633335c5c708a049\"><span data-lake-id=\"u56c99d86\" id=\"u56c99d86\">webpack的热更新⼜称热替换（Hot Module Replacement），缩写为HMR。 这个机制可以做到不⽤刷新浏览器⽽将新变更的模块替换掉旧的模块。 </span></p><p data-lake-id=\"e1ba6cfc6d70268adc9453f6c2a28bfa\" id=\"e1ba6cfc6d70268adc9453f6c2a28bfa\"><br></p><p data-lake-id=\"9de2e6a5acc5868bbff47d478ddccfac\" id=\"9de2e6a5acc5868bbff47d478ddccfac\"><span data-lake-id=\"uff858e18\" id=\"uff858e18\">原理： </span></p><p data-lake-id=\"143101d3223910aa29ffa2cf1cb63c4a\" id=\"143101d3223910aa29ffa2cf1cb63c4a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615910527011-339c57ce-22b2-4660-bcb5-93a7c6ec113b.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A787%2C%22height%22%3A834%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A1438696%2C%22originWidth%22%3A1574%2C%22originHeight%22%3A1668%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22HOTModuLeReplacement%2011%2010%20Runtime%205%20Webpack%2F%20Webpack-dev-server%20App%2Fupdated%20hot%2F%207%20LcLient%20dev-server%20JsonpMainTemplate%20Runtime%20Browser%20manifes%20Ajax%209%20SockJs%20Jsonp%20modules%20Wedpack-dev-server%20Watch%20Webpack-dev-middleware%20File%2Fmodule%20changed%20Watchr%201%20Compile%20Wedpack%20Server%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A736.5649%2C%22y%22%3A105.00886%2C%22width%22%3A412.4207%2C%22height%22%3A35.84469999999999%2C%22text%22%3A%22HOTModuLeReplacement%22%7D%2C%7B%22x%22%3A1350.2665%2C%22y%22%3A122.6069%2C%22width%22%3A47.25030000000015%2C%22height%22%3A32.65810999999999%2C%22text%22%3A%2211%22%7D%2C%7B%22x%22%3A1246.3109%2C%22y%22%3A124.09655%2C%22width%22%3A46.8261%2C%22height%22%3A29.21799%2C%22text%22%3A%2210%22%7D%2C%7B%22x%22%3A869.852%2C%22y%22%3A147.385%2C%22width%22%3A142.28356000000008%2C%22height%22%3A30.747479999999996%2C%22text%22%3A%22Runtime%22%7D%2C%7B%22x%22%3A493.40875%2C%22y%22%3A260.0933%2C%22width%22%3A38.974920000000054%2C%22height%22%3A38.974920000000054%2C%22text%22%3A%225%22%7D%2C%7B%22x%22%3A574.727%2C%22y%22%3A272.0402%2C%22width%22%3A187.2536%2C%22height%22%3A43.37083999999999%2C%22text%22%3A%22Webpack%2F%22%7D%2C%7B%22x%22%3A81.18182%2C%22y%22%3A293.61023%2C%22width%22%3A390.68838%2C%22height%22%3A48.16097000000002%2C%22text%22%3A%22Webpack-dev-server%22%7D%2C%7B%22x%22%3A1144.4773%2C%22y%22%3A313.42737%2C%22width%22%3A253.3904%2C%22height%22%3A47.38855000000001%2C%22text%22%3A%22App%2Fupdated%22%7D%2C%7B%22x%22%3A625.10016%2C%22y%22%3A320.02664%2C%22width%22%3A85.10994000000005%2C%22height%22%3A38.835019999999986%2C%22text%22%3A%22hot%2F%22%7D%2C%7B%22x%22%3A919.06274%2C%22y%22%3A321.55322%2C%22width%22%3A34.41431%2C%22height%22%3A34.41431%2C%22text%22%3A%227%22%7D%2C%7B%22x%22%3A213.00046%2C%22y%22%3A342.42056%2C%22width%22%3A124.14349000000001%2C%22height%22%3A38.73470999999995%2C%22text%22%3A%22LcLient%22%7D%2C%7B%22x%22%3A569.97266%2C%22y%22%3A368.6914%2C%22width%22%3A201.07739000000004%2C%22height%22%3A31.91543999999999%2C%22text%22%3A%22dev-server%22%7D%2C%7B%22x%22%3A756.72064%2C%22y%22%3A498.51755%2C%22width%22%3A372.77366000000006%2C%22height%22%3A39.05239999999992%2C%22text%22%3A%22JsonpMainTemplate%22%7D%2C%7B%22x%22%3A867.62286%2C%22y%22%3A546.3902%2C%22width%22%3A154.90834000000007%2C%22height%22%3A33.91204999999991%2C%22text%22%3A%22Runtime%22%7D%2C%7B%22x%22%3A1259.0089%2C%22y%22%3A649.7603%2C%22width%22%3A215.63179999999988%2C%22height%22%3A45.007600000000025%2C%22text%22%3A%22Browser%22%7D%2C%7B%22x%22%3A582.6153%2C%22y%22%3A762.893%2C%22width%22%3A141.42689999999993%2C%22height%22%3A31.466999999999985%2C%22text%22%3A%22manifes%22%7D%2C%7B%22x%22%3A783.217%2C%22y%22%3A762.48267%2C%22width%22%3A69.96055000000001%2C%22height%22%3A38.07063000000005%2C%22text%22%3A%22Ajax%22%7D%2C%7B%22x%22%3A929.2277%2C%22y%22%3A820.9344%2C%22width%22%3A34.42179999999996%2C%22height%22%3A34.42179999999996%2C%22text%22%3A%229%22%7D%2C%7B%22x%22%3A188.65471%2C%22y%22%3A837.6362%2C%22width%22%3A147.49976999999998%2C%22height%22%3A38.70999999999992%2C%22text%22%3A%22SockJs%22%7D%2C%7B%22x%22%3A978.8987%2C%22y%22%3A902.44995%2C%22width%22%3A100.52150000000006%2C%22height%22%3A35.963350000000105%2C%22text%22%3A%22Jsonp%22%7D%2C%7B%22x%22%3A777.3501%2C%22y%22%3A905.6301%2C%22width%22%3A129.88059999999996%2C%22height%22%3A26.44906000000003%2C%22text%22%3A%22modules%22%7D%2C%7B%22x%22%3A306.178%2C%22y%22%3A1112.6677%2C%22width%22%3A454.1363%2C%22height%22%3A47.0458000000001%2C%22text%22%3A%22Wedpack-dev-server%22%7D%2C%7B%22x%22%3A1046.6448%2C%22y%22%3A1120.2958%2C%22width%22%3A113.82320000000004%2C%22height%22%3A33.00469999999996%2C%22text%22%3A%22Watch%22%7D%2C%7B%22x%22%3A256.32697%2C%22y%22%3A1163.766%2C%22width%22%3A560.0695800000001%2C%22height%22%3A45.67529999999988%2C%22text%22%3A%22Webpack-dev-middleware%22%7D%2C%7B%22x%22%3A1194.9131%2C%22y%22%3A1255.7114%2C%22width%22%3A251.91139999999996%2C%22height%22%3A45.631000000000085%2C%22text%22%3A%22File%2Fmodule%22%7D%2C%7B%22x%22%3A1231.5896%2C%22y%22%3A1311.1421%2C%22width%22%3A179.03019999999992%2C%22height%22%3A45.66380000000004%2C%22text%22%3A%22changed%22%7D%2C%7B%22x%22%3A951.3659%2C%22y%22%3A1335.4454%2C%22width%22%3A168.22939999999994%2C%22height%22%3A31.01319999999987%2C%22text%22%3A%22Watchr%22%7D%2C%7B%22x%22%3A1051.1403%2C%22y%22%3A1379.7363%2C%22width%22%3A35.57310000000007%2C%22height%22%3A35.57310000000007%2C%22text%22%3A%221%22%7D%2C%7B%22x%22%3A1063.8538%2C%22y%22%3A1430.8754%2C%22width%22%3A154.42719999999986%2C%22height%22%3A37.73260000000005%2C%22text%22%3A%22Compile%22%7D%2C%7B%22x%22%3A434.53574%2C%22y%22%3A1443.5608%2C%22width%22%3A200.03689000000003%2C%22height%22%3A42.88920000000007%2C%22text%22%3A%22Wedpack%22%7D%2C%7B%22x%22%3A1269.6063%2C%22y%22%3A1554.3123%2C%22width%22%3A182.36710000000016%2C%22height%22%3A47.80099999999993%2C%22text%22%3A%22Server%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23b9f5b8%22%2C%22id%22%3A%22KBmEI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"6aa8b248675ff0fc408451797eaabfc7\" id=\"6aa8b248675ff0fc408451797eaabfc7\"><span data-lake-id=\"u2719accb\" id=\"u2719accb\">⾸先要知道</span><span data-lake-id=\"ue519392c\" id=\"ue519392c\">server</span><span data-lake-id=\"ue108c988\" id=\"ue108c988\">端和</span><span data-lake-id=\"ue531a72a\" id=\"ue531a72a\">client</span><span data-lake-id=\"u3ff894c4\" id=\"u3ff894c4\">端都做了处理⼯作：</span></p><ol list=\"ue7a75d91\"><li fid=\"u6af9bd58\" data-lake-id=\"1de61c6cded877601ab1ae01549a4068\" id=\"1de61c6cded877601ab1ae01549a4068\"><span data-lake-id=\"u7a9c8118\" id=\"u7a9c8118\">第⼀步，在 </span><span data-lake-id=\"uaf9e390d\" id=\"uaf9e390d\">webpack </span><span data-lake-id=\"u715cfc52\" id=\"u715cfc52\">的 </span><span data-lake-id=\"u2023b8cb\" id=\"u2023b8cb\">watch </span><span data-lake-id=\"uec1a0afa\" id=\"uec1a0afa\">模式下，⽂件系统中某⼀个⽂件发⽣修改，</span><span data-lake-id=\"ua26d65be\" id=\"ua26d65be\">webpack </span><span data-lake-id=\"uc4a20009\" id=\"uc4a20009\">监听到⽂件变化，根据配置⽂ </span></li></ol><p data-lake-id=\"18ebc90a983074361253b2902679d3ca\" id=\"18ebc90a983074361253b2902679d3ca\"><span data-lake-id=\"uf2649150\" id=\"uf2649150\">件对模块重新编译打包，并将打包后的代码通过简单的 </span><span data-lake-id=\"uf5ff26bc\" id=\"uf5ff26bc\">JavaScript </span><span data-lake-id=\"u194410ae\" id=\"u194410ae\">对象保存在内存中。 </span></p><ol list=\"u6e49276a\" start=\"2\"><li fid=\"uee91c22b\" data-lake-id=\"4fbd38d857147cf49473a723d78d7479\" id=\"4fbd38d857147cf49473a723d78d7479\"><span data-lake-id=\"u6c909c57\" id=\"u6c909c57\">第⼆步是 </span><span data-lake-id=\"u6834e56b\" id=\"u6834e56b\">webpack-dev-server </span><span data-lake-id=\"ub46323fe\" id=\"ub46323fe\">和 </span><span data-lake-id=\"u7cae04e5\" id=\"u7cae04e5\">webpack </span><span data-lake-id=\"u28badaeb\" id=\"u28badaeb\">之间的接⼝交互，⽽在这⼀步，主要是 </span><span data-lake-id=\"ub14e3444\" id=\"ub14e3444\">dev-server </span><span data-lake-id=\"u33de929c\" id=\"u33de929c\">的中间件 webpack- dev-middleware </span><span data-lake-id=\"uc8d29548\" id=\"uc8d29548\">和 </span><span data-lake-id=\"ud78be0bf\" id=\"ud78be0bf\">webpack </span><span data-lake-id=\"ue0e134ec\" id=\"ue0e134ec\">之间的交互，</span><span data-lake-id=\"u04ff8dc4\" id=\"u04ff8dc4\">webpack-dev-middleware </span><span data-lake-id=\"ubc691a00\" id=\"ubc691a00\">调⽤ </span><span data-lake-id=\"u4b0ead34\" id=\"u4b0ead34\">webpack </span><span data-lake-id=\"ufc96bcc7\" id=\"ufc96bcc7\">暴露的 </span><span data-lake-id=\"u9e814f02\" id=\"u9e814f02\">API对代码变化进⾏监 控，并且告诉 </span><span data-lake-id=\"u27783aec\" id=\"u27783aec\">webpack</span><span data-lake-id=\"ub7faaeb7\" id=\"ub7faaeb7\">，将代码打包到内存中。 </span></li><li fid=\"uee91c22b\" data-lake-id=\"2dc191a2fb011ddd63f23b06e1712336\" id=\"2dc191a2fb011ddd63f23b06e1712336\"><span data-lake-id=\"ucf2f888c\" id=\"ucf2f888c\">第三步是 </span><span data-lake-id=\"u169f0bb6\" id=\"u169f0bb6\">webpack-dev-server 对⽂件变化的⼀个监控，这⼀步不同于第⼀步，并不是监控代码变化重新打包。当我们在配置⽂件中配置了</span><span data-lake-id=\"u4bbbf5c1\" id=\"u4bbbf5c1\">devServer.watchContentBase </span><span data-lake-id=\"ucc5e43fb\" id=\"ucc5e43fb\">为 </span><span data-lake-id=\"u5173d0ad\" id=\"u5173d0ad\">true </span><span data-lake-id=\"uaa50dec3\" id=\"uaa50dec3\">的时候，</span><span data-lake-id=\"uae57fc00\" id=\"uae57fc00\">Server 会监听这些配置⽂件夹中静态⽂件的变化，变化后会通知浏览器端对应⽤进⾏ </span><span data-lake-id=\"ua340a98f\" id=\"ua340a98f\">live reload</span><span data-lake-id=\"ucdd73850\" id=\"ucdd73850\">。注意，这⼉是浏览器刷新，和 </span><span data-lake-id=\"u5271fa14\" id=\"u5271fa14\">HMR </span><span data-lake-id=\"u71b3540d\" id=\"u71b3540d\">是两个概念。 </span></li><li fid=\"uee91c22b\" data-lake-id=\"71ca4a5d2d54834286a3f28052dfd777\" id=\"71ca4a5d2d54834286a3f28052dfd777\"><span data-lake-id=\"ua388a468\" id=\"ua388a468\">第四步也是 </span><span data-lake-id=\"ud7239b02\" id=\"ud7239b02\">webpack-dev-server </span><span data-lake-id=\"u87206972\" id=\"u87206972\">代码的⼯作，该步骤主要是通过 </span><span data-lake-id=\"u689d7a09\" id=\"u689d7a09\">sockjs</span><span data-lake-id=\"ud150cdf9\" id=\"ud150cdf9\">（</span><span data-lake-id=\"u4abd811b\" id=\"u4abd811b\">webpack-dev-server 的依赖）在浏览器端和服务端之间建⽴⼀个 </span><span data-lake-id=\"u42b4e9ce\" id=\"u42b4e9ce\">websocket </span><span data-lake-id=\"u2e1e2b28\" id=\"u2e1e2b28\">⻓连接，将 </span><span data-lake-id=\"uf4aa819e\" id=\"uf4aa819e\">webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 </span><span data-lake-id=\"u87d32f49\" id=\"u87d32f49\">Server </span><span data-lake-id=\"udabb4dd1\" id=\"udabb4dd1\">监听静态⽂件变化的信息。浏览器端根据这些 </span><span data-lake-id=\"ua748fd53\" id=\"ua748fd53\">socket 消息进⾏不同的操作。当然服务端传递的最主要信息还是新模块的 </span><span data-lake-id=\"u7e920043\" id=\"u7e920043\">hash </span><span data-lake-id=\"ud4b93155\" id=\"ud4b93155\">值，后⾯的步骤根据这⼀ </span><span data-lake-id=\"u921b94e2\" id=\"u921b94e2\">hash </span><span data-lake-id=\"ua80150b1\" id=\"ua80150b1\">值来进⾏模块热替换。 </span></li><li fid=\"uee91c22b\" data-lake-id=\"208dc8284f7678bea06d93fa0cf5aa72\" id=\"208dc8284f7678bea06d93fa0cf5aa72\"><span data-lake-id=\"u388544f1\" id=\"u388544f1\">webpack-dev-server/client 端并不能够请求更新的代码，也不会执⾏热更模块操作，⽽把这些⼯作⼜交回给了webpack</span><span data-lake-id=\"u35848d37\" id=\"u35848d37\">，</span><span data-lake-id=\"ue0ef9a2c\" id=\"ue0ef9a2c\">webpack/hot/dev-server </span><span data-lake-id=\"ud4bc5b35\" id=\"ud4bc5b35\">的⼯作就是根据 </span><span data-lake-id=\"u6270c7cf\" id=\"u6270c7cf\">webpack-dev-server/client </span><span data-lake-id=\"u7de10980\" id=\"u7de10980\">传给它的信息以及 </span><span data-lake-id=\"u72cb33e8\" id=\"u72cb33e8\">dev-server 的配置决定是刷新浏览器呢还是进⾏模块热更新。当然如果仅仅是刷新浏览器，也就没有后⾯那些步骤了。 </span></li><li fid=\"uee91c22b\" data-lake-id=\"80434a9dc8ed9491cbef2b09d71afd0d\" id=\"80434a9dc8ed9491cbef2b09d71afd0d\"><span data-lake-id=\"u3da476a4\" id=\"u3da476a4\">HotModuleReplacement.runtime </span><span data-lake-id=\"u98af4f7b\" id=\"u98af4f7b\">是客户端 </span><span data-lake-id=\"ue87d1a0f\" id=\"ue87d1a0f\">HMR </span><span data-lake-id=\"u263a8d58\" id=\"u263a8d58\">的中枢，它接收到上⼀步传递给他的新模块的 </span><span data-lake-id=\"ud11bc01f\" id=\"ud11bc01f\">hash 值，它通过JsonpMainTemplate.runtime </span><span data-lake-id=\"uf1c7ed16\" id=\"uf1c7ed16\">向 </span><span data-lake-id=\"u503ff246\" id=\"u503ff246\">server </span><span data-lake-id=\"ua89df873\" id=\"ua89df873\">端发送 </span><span data-lake-id=\"ucfae89ae\" id=\"ucfae89ae\">Ajax </span><span data-lake-id=\"ube5f3a0d\" id=\"ube5f3a0d\">请求，服务端返回⼀个 </span><span data-lake-id=\"u8a85644a\" id=\"u8a85644a\">json</span><span data-lake-id=\"u4802f493\" id=\"u4802f493\">，该 </span><span data-lake-id=\"u0334ff63\" id=\"u0334ff63\">json 包含了所有要更新的模块的 </span><span data-lake-id=\"u07935785\" id=\"u07935785\">hash </span><span data-lake-id=\"u33caca5a\" id=\"u33caca5a\">值，获取到更新列表后，该模块再次通过 </span><span data-lake-id=\"u3fecd27e\" id=\"u3fecd27e\">jsonp </span><span data-lake-id=\"uc0e3d977\" id=\"uc0e3d977\">请求，获取到最新的模块代码。这就是上图中 </span><span data-lake-id=\"u50461795\" id=\"u50461795\">7</span><span data-lake-id=\"ua30862cc\" id=\"ua30862cc\">、</span><span data-lake-id=\"udcd27ae3\" id=\"udcd27ae3\">8</span><span data-lake-id=\"ub2dcd444\" id=\"ub2dcd444\">、</span><span data-lake-id=\"u894db7c7\" id=\"u894db7c7\">9 步骤。 </span></li><li fid=\"uee91c22b\" data-lake-id=\"77d20520637699d20741c8e48964231e\" id=\"77d20520637699d20741c8e48964231e\"><span data-lake-id=\"u996b41e6\" id=\"u996b41e6\">⽽第 </span><span data-lake-id=\"ub674afdc\" id=\"ub674afdc\">10 </span><span data-lake-id=\"ucc973952\" id=\"ucc973952\">步是决定 </span><span data-lake-id=\"ue0652dc0\" id=\"ue0652dc0\">HMR </span><span data-lake-id=\"u9d92730e\" id=\"u9d92730e\">成功与否的关键步骤，在该步骤中，</span><span data-lake-id=\"udd5c01cf\" id=\"udd5c01cf\">HotModulePlugin 将会对新旧模块进⾏对⽐，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引⽤。 </span></li><li fid=\"uee91c22b\" data-lake-id=\"4e8cde113f2b9f9f9ea441b8c4e4d0b9\" id=\"4e8cde113f2b9f9f9ea441b8c4e4d0b9\"><span data-lake-id=\"ua67e110c\" id=\"ua67e110c\">最后⼀步，当 </span><span data-lake-id=\"u8b791c76\" id=\"u8b791c76\">HMR </span><span data-lake-id=\"u064bd394\" id=\"u064bd394\">失败后，回退到 </span><span data-lake-id=\"u6ef8d218\" id=\"u6ef8d218\">live reload </span><span data-lake-id=\"u42ba8d3a\" id=\"u42ba8d3a\">操作，也就是进⾏浏览器刷新来获取最新打包代码。</span></li></ol><h3 data-lake-id=\"tHJwF\" id=\"tHJwF\"><span data-lake-id=\"uefb246d0\" id=\"uefb246d0\">10. </span><span data-lake-id=\"ub585719e\" id=\"ub585719e\">如何⽤</span><strong><span data-lake-id=\"ue1171759\" id=\"ue1171759\">webpack</span></strong><span data-lake-id=\"uc4c3919b\" id=\"uc4c3919b\">来优化前端性能？ </span></h3><p data-lake-id=\"6c7685541352f7d6c7f0b81f78e764bc\" id=\"6c7685541352f7d6c7f0b81f78e764bc\"><span data-lake-id=\"u1254fb16\" id=\"u1254fb16\">⽤</span><span data-lake-id=\"u3d0434fa\" id=\"u3d0434fa\">webpack</span><span data-lake-id=\"u3b92a9cf\" id=\"u3b92a9cf\">优化前端性能是指优化</span><span data-lake-id=\"uba0537e4\" id=\"uba0537e4\">webpack</span><span data-lake-id=\"u7ba1bb17\" id=\"u7ba1bb17\">的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。 </span></p><ul list=\"ued87e042\"><li fid=\"u8ba815f2\" data-lake-id=\"d59bb57943157ca789861b4bc2ebe7dd\" id=\"d59bb57943157ca789861b4bc2ebe7dd\"><strong><span data-lake-id=\"uc512d811\" id=\"uc512d811\">压缩代码</span></strong><span data-lake-id=\"u4c24d9f8\" id=\"u4c24d9f8\">：</span><span data-lake-id=\"u12df2978\" id=\"u12df2978\">删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 </span><span data-lake-id=\"u8d7ef11c\" id=\"u8d7ef11c\">UglifyJsPlugin </span><span data-lake-id=\"ucca2873d\" id=\"ucca2873d\">和 </span><span data-lake-id=\"ubd604781\" id=\"ubd604781\">ParallelUglifyPlugin </span><span data-lake-id=\"ufdfc9f27\" id=\"ufdfc9f27\">来压缩</span><span data-lake-id=\"u291a7566\" id=\"u291a7566\">JS</span><span data-lake-id=\"u9b069aba\" id=\"u9b069aba\">⽂件， 利⽤ </span><span data-lake-id=\"u2e2769e6\" id=\"u2e2769e6\">cssnano </span><span data-lake-id=\"u1f2417e7\" id=\"u1f2417e7\">（</span><span data-lake-id=\"u0d220a5e\" id=\"u0d220a5e\">css-loader?minimize</span><span data-lake-id=\"uc26ec456\" id=\"uc26ec456\">）来压缩</span><span data-lake-id=\"u5f5403e2\" id=\"u5f5403e2\">css </span></li><li fid=\"u8ba815f2\" data-lake-id=\"97a8ae5cd4c08e16e899abc132c04ee4\" id=\"97a8ae5cd4c08e16e899abc132c04ee4\"><strong><span data-lake-id=\"u35def558\" id=\"u35def558\">利⽤</span></strong><strong><span data-lake-id=\"u8657c872\" id=\"u8657c872\">CDN</span></strong><strong><span data-lake-id=\"u11867e3a\" id=\"u11867e3a\">加速</span></strong><span data-lake-id=\"ucdda379d\" id=\"ucdda379d\">: </span><span data-lake-id=\"u7b5902d9\" id=\"u7b5902d9\">在构建过程中，将引⽤的静态资源路径修改为</span><span data-lake-id=\"u5845eddd\" id=\"u5845eddd\">CDN</span><span data-lake-id=\"uc81e9924\" id=\"uc81e9924\">上对应的路径。可以利⽤</span><span data-lake-id=\"uea4fba87\" id=\"uea4fba87\">webpack对于 </span><span data-lake-id=\"ucf5564e5\" id=\"ucf5564e5\">output </span><span data-lake-id=\"u8252f21d\" id=\"u8252f21d\">参数和各</span><span data-lake-id=\"ud4a13c68\" id=\"ud4a13c68\">loader</span><span data-lake-id=\"u064fdd79\" id=\"u064fdd79\">的 </span><span data-lake-id=\"u9f1a97a0\" id=\"u9f1a97a0\">publicPath </span><span data-lake-id=\"u4c736fc8\" id=\"u4c736fc8\">参数来修改资源路径 </span></li><li fid=\"u8ba815f2\" data-lake-id=\"b1e7ca88ef662c67640c60e4aec95365\" id=\"b1e7ca88ef662c67640c60e4aec95365\"><strong><span data-lake-id=\"u4a517533\" id=\"u4a517533\">Tree Shaking</span></strong><span data-lake-id=\"u0c5ebeb7\" id=\"u0c5ebeb7\">: </span><span data-lake-id=\"ub2bf4d6e\" id=\"ub2bf4d6e\">将代码中永远不会⾛到的⽚段删除掉。可以通过在启动</span><span data-lake-id=\"u255b181e\" id=\"u255b181e\">webpack</span><span data-lake-id=\"u3baec39f\" id=\"u3baec39f\">时追加参数 </span><span data-lake-id=\"ue2d3bf49\" id=\"ue2d3bf49\">--optimize-minimize 来实现</span></li><li fid=\"u8ba815f2\" data-lake-id=\"1b3dbd7d9ce6e3f4561a3ca3c58245f2\" id=\"1b3dbd7d9ce6e3f4561a3ca3c58245f2\"><strong><span data-lake-id=\"u2f245df5\" id=\"u2f245df5\">Code Splitting:</span></strong><span data-lake-id=\"u755e7957\" id=\"u755e7957\"> </span><span data-lake-id=\"u59233d1d\" id=\"u59233d1d\">将代码按路由维度或者组件分块</span><span data-lake-id=\"u589ae711\" id=\"u589ae711\">(chunk),</span><span data-lake-id=\"u7ddebbde\" id=\"u7ddebbde\">这样做到按需加载</span><span data-lake-id=\"u979340c9\" id=\"u979340c9\">,</span><span data-lake-id=\"u12af5ad1\" id=\"u12af5ad1\">同时可以充分利⽤浏览器缓存 </span></li><li fid=\"u8ba815f2\" data-lake-id=\"69adc6a0afd8244fb9d71d0c93355a43\" id=\"69adc6a0afd8244fb9d71d0c93355a43\"><strong><span data-lake-id=\"u6fabeee3\" id=\"u6fabeee3\">提取公共第三⽅库</span></strong><span data-lake-id=\"u5f1c14ec\" id=\"u5f1c14ec\">: SplitChunksPlugin</span><span data-lake-id=\"ubc2e1eea\" id=\"ubc2e1eea\">插件来进⾏公共模块抽取</span><span data-lake-id=\"u6dd2c600\" id=\"u6dd2c600\">,利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码 </span></li></ul><h3 data-lake-id=\"HDdOM\" id=\"HDdOM\"><span data-lake-id=\"u7d8c1efc\" id=\"u7d8c1efc\">11. </span><span data-lake-id=\"u72700fdd\" id=\"u72700fdd\">如何提⾼</span><strong><span data-lake-id=\"uadf4a892\" id=\"uadf4a892\">webpack</span></strong><span data-lake-id=\"u88e7ccb5\" id=\"u88e7ccb5\">的打包速度</span><strong><span data-lake-id=\"u1fb8e384\" id=\"u1fb8e384\">? </span></strong></h3><ul list=\"u1dddae13\"><li fid=\"u39c41ab4\" data-lake-id=\"2a7ae7c18a4375db31ac63381a0e46f2\" id=\"2a7ae7c18a4375db31ac63381a0e46f2\"><span data-lake-id=\"u39db7664\" id=\"u39db7664\">happypack: </span><span data-lake-id=\"u752c7e3c\" id=\"u752c7e3c\">利⽤进程并⾏编译</span><span data-lake-id=\"u97e123db\" id=\"u97e123db\">loader,</span><span data-lake-id=\"ud7bd5cda\" id=\"ud7bd5cda\">利⽤缓存来使得 </span><span data-lake-id=\"u41999e58\" id=\"u41999e58\">rebuild </span><span data-lake-id=\"u9ec5ff13\" id=\"u9ec5ff13\">更快</span><span data-lake-id=\"u0508b0db\" id=\"u0508b0db\">,</span><span data-lake-id=\"ubeb9b91a\" id=\"ubeb9b91a\">遗憾的是作者表示已经不会继续开发此项⽬</span><span data-lake-id=\"uab8ebfd7\" id=\"uab8ebfd7\">,类似的替代者是</span><span data-lake-id=\"ub5639620\" id=\"ub5639620\">thread-loader </span></li><li fid=\"u39c41ab4\" data-lake-id=\"50387417f06c79507f94f8590eab355e\" id=\"50387417f06c79507f94f8590eab355e\"><span data-lake-id=\"u0af1793b\" id=\"u0af1793b\">外部扩展(externals): </span><span data-lake-id=\"u08f4053d\" id=\"u08f4053d\">将不怎么需要更新的第三⽅库脱离</span><span data-lake-id=\"uc57a191c\" id=\"uc57a191c\">webpack</span><span data-lake-id=\"u97e00345\" id=\"u97e00345\">打包，不被打⼊</span><span data-lake-id=\"ufa3348ae\" id=\"ufa3348ae\">bundle</span><span data-lake-id=\"u32eec756\" id=\"u32eec756\">中，从⽽减少打包时间，</span><span data-lake-id=\"u1ff22fb9\" id=\"u1ff22fb9\">⽐如</span><span data-lake-id=\"uf5608c6e\" id=\"uf5608c6e\">jQuery</span><span data-lake-id=\"u6b4a9215\" id=\"u6b4a9215\">⽤</span><span data-lake-id=\"ud752517d\" id=\"ud752517d\">script</span><span data-lake-id=\"udc82a87d\" id=\"udc82a87d\">标签引⼊ </span></li><li fid=\"u39c41ab4\" data-lake-id=\"b5ba144fe0522aacb63e367e9847ea47\" id=\"b5ba144fe0522aacb63e367e9847ea47\"><span data-lake-id=\"u90473888\" id=\"u90473888\">dll: </span><span data-lake-id=\"u29374e4c\" id=\"u29374e4c\">采⽤</span><span data-lake-id=\"u212d6fad\" id=\"u212d6fad\">webpack</span><span data-lake-id=\"u5f210774\" id=\"u5f210774\">的 </span><span data-lake-id=\"u5a417b28\" id=\"u5a417b28\">DllPlugin </span><span data-lake-id=\"u884713d9\" id=\"u884713d9\">和 </span><span data-lake-id=\"u44915623\" id=\"u44915623\">DllReferencePlugin </span><span data-lake-id=\"u10729266\" id=\"u10729266\">引⼊</span><span data-lake-id=\"ubc8197af\" id=\"ubc8197af\">dll</span><span data-lake-id=\"ufad5b0ed\" id=\"ufad5b0ed\">，让⼀些基本不会改动的代码先打包成静态资源，</span><span data-lake-id=\"ua4f5eeab\" id=\"ua4f5eeab\">避免反复编译浪费时间 </span></li><li fid=\"u39c41ab4\" data-lake-id=\"700696c72bcf88d547430f035bfb53ed\" id=\"700696c72bcf88d547430f035bfb53ed\"><span data-lake-id=\"uadbdd97a\" id=\"uadbdd97a\">利⽤缓存</span><span data-lake-id=\"u15ba488f\" id=\"u15ba488f\">: </span><span data-lake-id=\"u1c73f6fa\" id=\"u1c73f6fa\">webpack.cache </span><span data-lake-id=\"u92aaf598\" id=\"u92aaf598\">、</span><span data-lake-id=\"u3b9141e0\" id=\"u3b9141e0\">babel-loader.cacheDirectory</span><span data-lake-id=\"u974b2e73\" id=\"u974b2e73\">、 </span><span data-lake-id=\"u2fb89f92\" id=\"u2fb89f92\">HappyPack.cache </span><span data-lake-id=\"ucedf283f\" id=\"ucedf283f\">都可以利⽤缓存提⾼</span><span data-lake-id=\"u21d44ec3\" id=\"u21d44ec3\">rebuild效率缩⼩⽂件搜索范围</span><span data-lake-id=\"u5660f17f\" id=\"u5660f17f\">: </span><span data-lake-id=\"u3c444f39\" id=\"u3c444f39\">⽐如</span><span data-lake-id=\"u84303639\" id=\"u84303639\">babel-loader</span><span data-lake-id=\"ua696ab0b\" id=\"ua696ab0b\">插件</span><span data-lake-id=\"u8f24c5ea\" id=\"u8f24c5ea\">,</span><span data-lake-id=\"ucd0cfc91\" id=\"ucd0cfc91\">如果你的⽂件仅存在于</span><span data-lake-id=\"u3bf521e5\" id=\"u3bf521e5\">src</span><span data-lake-id=\"udee62d1f\" id=\"udee62d1f\">中</span><span data-lake-id=\"u71bef42c\" id=\"u71bef42c\">,</span><span data-lake-id=\"u03b8622a\" id=\"u03b8622a\">那么可以 include: path.resolve(__dirname,'src') </span><span data-lake-id=\"u4f501ba6\" id=\"u4f501ba6\">,</span><span data-lake-id=\"uf77309dc\" id=\"uf77309dc\">当然绝⼤多数情况下这种操作的提升有限</span><span data-lake-id=\"u328d0bab\" id=\"u328d0bab\">，</span><span data-lake-id=\"u32a7fb9b\" id=\"u32a7fb9b\">除⾮不⼩⼼</span><span data-lake-id=\"ufe95f7a1\" id=\"ufe95f7a1\">build</span><span data-lake-id=\"u5e7e9803\" id=\"u5e7e9803\">了</span><span data-lake-id=\"u9c19f3fe\" id=\"u9c19f3fe\">node_modules</span><span data-lake-id=\"ucf020538\" id=\"ucf020538\">⽂件 </span></li></ul><h3 data-lake-id=\"Sr4pO\" id=\"Sr4pO\"><span data-lake-id=\"u96c4611c\" id=\"u96c4611c\">12. </span><span data-lake-id=\"ue2437906\" id=\"ue2437906\">如何提⾼</span><strong><span data-lake-id=\"u0efe886c\" id=\"u0efe886c\">webpack</span></strong><span data-lake-id=\"ue2f3554d\" id=\"ue2f3554d\">的构建速度？ </span></h3><ol list=\"u569a049d\"><li fid=\"u27d9269f\" data-lake-id=\"b79ee9b7d070d93ebb71e32e5c193274\" id=\"b79ee9b7d070d93ebb71e32e5c193274\"><span data-lake-id=\"u399fb1d7\" id=\"u399fb1d7\">多⼊⼝情况下，使⽤ </span><span data-lake-id=\"ubf8e3965\" id=\"ubf8e3965\">CommonsChunkPlugin </span><span data-lake-id=\"uc9cdc2e0\" id=\"uc9cdc2e0\">来提取公共代码 </span></li><li fid=\"u27d9269f\" data-lake-id=\"73a5ed77696836c37dcf041190496972\" id=\"73a5ed77696836c37dcf041190496972\"><span data-lake-id=\"u116bd330\" id=\"u116bd330\">通过 </span><span data-lake-id=\"u597f71f5\" id=\"u597f71f5\">externals </span><span data-lake-id=\"u6aaaf6af\" id=\"u6aaaf6af\">配置来提取常⽤库 </span></li><li fid=\"u27d9269f\" data-lake-id=\"34d52628574460ed1343368a6b2eb2ee\" id=\"34d52628574460ed1343368a6b2eb2ee\"><span data-lake-id=\"u2c8b879a\" id=\"u2c8b879a\">利⽤ </span><span data-lake-id=\"u3abdfed1\" id=\"u3abdfed1\">DllPlugin </span><span data-lake-id=\"ua1e46f78\" id=\"ua1e46f78\">和 </span><span data-lake-id=\"u8a0d013c\" id=\"u8a0d013c\">DllReferencePlugin </span><span data-lake-id=\"u3cf1f929\" id=\"u3cf1f929\">预编译资源模块 通过 </span><span data-lake-id=\"uddf4db5a\" id=\"uddf4db5a\">DllPlugin </span><span data-lake-id=\"ufadcec5b\" id=\"ufadcec5b\">来对那些我们引⽤但是绝对不会修改的npm包来进⾏预编译，再通过 </span><span data-lake-id=\"u0dd48ac0\" id=\"u0dd48ac0\">DllReferencePlugin </span><span data-lake-id=\"ua23080e8\" id=\"ua23080e8\">将预编译的模块加载进来。 </span></li><li fid=\"u27d9269f\" data-lake-id=\"c1acab6bb7633f4a363a9d9e4efa241f\" id=\"c1acab6bb7633f4a363a9d9e4efa241f\"><span data-lake-id=\"ued426e4c\" id=\"ued426e4c\">使⽤ </span><span data-lake-id=\"u210a3b1e\" id=\"u210a3b1e\">Happypack </span><span data-lake-id=\"uae9f044a\" id=\"uae9f044a\">实现多线程加速编译 </span></li><li fid=\"u27d9269f\" data-lake-id=\"788e5d22d61db7707e2e0cd01d598997\" id=\"788e5d22d61db7707e2e0cd01d598997\"><span data-lake-id=\"u302e614c\" id=\"u302e614c\">使⽤ </span><span data-lake-id=\"ufa091797\" id=\"ufa091797\">webpack-uglify-parallel </span><span data-lake-id=\"u64e07f5d\" id=\"u64e07f5d\">来提升 </span><span data-lake-id=\"ucbe926f2\" id=\"ucbe926f2\">uglifyPlugin </span><span data-lake-id=\"u76cb0323\" id=\"u76cb0323\">的压缩速度。 原理上 </span><span data-lake-id=\"u2cffaa1f\" id=\"u2cffaa1f\">webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度 </span></li><li fid=\"u27d9269f\" data-lake-id=\"3dd5afe3500f70d67028f4f486d59c29\" id=\"3dd5afe3500f70d67028f4f486d59c29\"><span data-lake-id=\"u680ed168\" id=\"u680ed168\">使⽤ </span><span data-lake-id=\"u6f8af71e\" id=\"u6f8af71e\">Tree-shaking </span><span data-lake-id=\"u1c86507f\" id=\"u1c86507f\">和 </span><span data-lake-id=\"u6c7f12a8\" id=\"u6c7f12a8\">Scope Hoisting </span><span data-lake-id=\"ua9557bf9\" id=\"ua9557bf9\">来剔除多余代码 </span></li></ol><h3 data-lake-id=\"X779u\" id=\"X779u\"><span data-lake-id=\"u3fb13c41\" id=\"u3fb13c41\">13. </span><span data-lake-id=\"u76b3b017\" id=\"u76b3b017\">怎么配置单⻚应⽤？怎么配置多⻚应⽤？ </span></h3><p data-lake-id=\"13baa879dd48424f60e702829c9c1ce8\" id=\"13baa879dd48424f60e702829c9c1ce8\"><span data-lake-id=\"u62905f82\" id=\"u62905f82\">单⻚应⽤可以理解为</span><span data-lake-id=\"u16d24b5c\" id=\"u16d24b5c\">webpack</span><span data-lake-id=\"ua5fdc280\" id=\"ua5fdc280\">的标准模式，直接在 </span><span data-lake-id=\"u599a434e\" id=\"u599a434e\">entry 中指定单⻚应⽤的⼊⼝即可，这⾥不再赘述多⻚应⽤的话，可以使⽤</span><span data-lake-id=\"u50085083\" id=\"u50085083\">webpack</span><span data-lake-id=\"u66930079\" id=\"u66930079\">的 </span><span data-lake-id=\"ud7104f95\" id=\"ud7104f95\">AutoWebPlugin 来完成简单⾃动化的构建，但是前提是项⽬的⽬录结构必须遵守他预设的规范。 多⻚应⽤中要注意的是： </span></p><ul list=\"ubb640572\"><li fid=\"uf6f9b93c\" data-lake-id=\"822190089eae5859cd819d256ee10f01\" id=\"822190089eae5859cd819d256ee10f01\"><span data-lake-id=\"u70b640df\" id=\"u70b640df\">每个⻚⾯都有公共的代码，可以将这些代码抽离出来，避免重复的加载。⽐如，每个⻚⾯都引⽤了同⼀套</span><span data-lake-id=\"u1df68ab8\" id=\"u1df68ab8\">css样式表</span></li><li fid=\"uf6f9b93c\" data-lake-id=\"c2cd7e249fa428a428db290c1a7a2eba\" id=\"c2cd7e249fa428a428db290c1a7a2eba\"><span data-lake-id=\"u14f11bef\" id=\"u14f11bef\">随着业务的不断扩展，⻚⾯可能会不断的追加，所以⼀定要让⼊⼝的配置⾜够灵活，避免每次添加新⻚⾯还需要修改构建配置 </span></li></ul><h2 data-lake-id=\"XQZFb\" id=\"XQZFb\"><span data-lake-id=\"ua0233cb1\" id=\"ua0233cb1\">三、其他</span></h2><h3 data-lake-id=\"Vq3V4\" id=\"Vq3V4\"><strong><span data-lake-id=\"u3bf19207\" id=\"u3bf19207\">1. Babel</span></strong><span data-lake-id=\"u839cbeb8\" id=\"u839cbeb8\">的原理是什么</span><strong><span data-lake-id=\"u8c7c756d\" id=\"u8c7c756d\">? </span></strong></h3><p data-lake-id=\"a9ebd562cb7c57397d42628824abfb38\" id=\"a9ebd562cb7c57397d42628824abfb38\"><span data-lake-id=\"u9d63beec\" id=\"u9d63beec\">babel </span><span data-lake-id=\"uf271e2d8\" id=\"uf271e2d8\">的转译过程也分为三个阶段，这三步具体是： </span></p><ul list=\"u8ab0db9d\"><li fid=\"u171efbe6\" data-lake-id=\"9049ea0b1afef15884cc79a29b79582f\" id=\"9049ea0b1afef15884cc79a29b79582f\"><strong><span data-lake-id=\"u6fa94dad\" id=\"u6fa94dad\">解析 Parse</span></strong><span data-lake-id=\"u42384968\" id=\"u42384968\">: 将代码解析⽣成抽象语法树（AST），即词法分析与语法分析的过程；</span></li><li fid=\"u171efbe6\" data-lake-id=\"59627e4406f1a206f7a5081a1fdbc0bf\" id=\"59627e4406f1a206f7a5081a1fdbc0bf\"><strong><span data-lake-id=\"u835d4437\" id=\"u835d4437\">转换 Transform</span></strong><span data-lake-id=\"u898eb4a8\" id=\"u898eb4a8\">: 对于 AST 进⾏变换⼀系列的操作，babel 接受得到 AST 并通过 babel-traverse 对其进⾏遍历，在此过程中进⾏添加、更新及移除等操作；</span></li><li fid=\"u171efbe6\" data-lake-id=\"ce6efccd674211db6dca355eb667b49c\" id=\"ce6efccd674211db6dca355eb667b49c\"><strong><span data-lake-id=\"ude267b5e\" id=\"ude267b5e\">⽣成 Generate</span></strong><span data-lake-id=\"ua16fd463\" id=\"ua16fd463\">: 将变换后的 AST 再转换为 JS 代码, 使⽤到的模块是 babel-generator。</span></li></ul><p data-lake-id=\"4932368db4e9d58361485f069620fe6c\" id=\"4932368db4e9d58361485f069620fe6c\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615908675152-69682ae3-d0b3-4552-a32e-39c2022b1db0.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A806%2C%22height%22%3A256%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A259299%2C%22originWidth%22%3A1612%2C%22originHeight%22%3A512%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22AST%20AST%20Transform%20Parse%20Generator%20Code%20Code%20babel-generator%20babel-traverse%20babylon%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A527.0051%2C%22y%22%3A58.241173%2C%22width%22%3A81.91950000000008%2C%22height%22%3A35.526657%2C%22text%22%3A%22AST%22%7D%2C%7B%22x%22%3A987.73047%2C%22y%22%3A57.89303%2C%22width%22%3A80.40382999999997%2C%22height%22%3A36.27017%2C%22text%22%3A%22AST%22%7D%2C%7B%22x%22%3A710.7144%2C%22y%22%3A209.7432%2C%22width%22%3A212.4091400000001%2C%22height%22%3A36.41460000000001%2C%22text%22%3A%22Transform%22%7D%2C%7B%22x%22%3A303.4164%2C%22y%22%3A209.9504%2C%22width%22%3A117.26029999999997%2C%22height%22%3A35.41703000000001%2C%22text%22%3A%22Parse%22%7D%2C%7B%22x%22%3A1122.0826%2C%22y%22%3A215.03992%2C%22width%22%3A210.04500000000007%2C%22height%22%3A32.73779000000002%2C%22text%22%3A%22Generator%22%7D%2C%7B%22x%22%3A1406.8782%2C%22y%22%3A264.38486%2C%22width%22%3A111.69659999999999%2C%22height%22%3A41.51695999999998%2C%22text%22%3A%22Code%22%7D%2C%7B%22x%22%3A84.53313%2C%22y%22%3A266.24774%2C%22width%22%3A108.49661%2C%22height%22%3A36.895159999999976%2C%22text%22%3A%22Code%22%7D%2C%7B%22x%22%3A1079.8226%2C%22y%22%3A297.18652%2C%22width%22%3A340.7835%2C%22height%22%3A40.47688000000005%2C%22text%22%3A%22babel-generator%22%7D%2C%7B%22x%22%3A661.7887%2C%22y%22%3A306.2931%2C%22width%22%3A309.1704000000001%2C%22height%22%3A37.12304%2C%22text%22%3A%22babel-traverse%22%7D%2C%7B%22x%22%3A281.21738%2C%22y%22%3A310.1666%2C%22width%22%3A164.34320000000002%2C%22height%22%3A37.25264999999996%2C%22text%22%3A%22babylon%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fafbf7%22%2C%22id%22%3A%22gaolm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u3e5cca3e\" id=\"u3e5cca3e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673895219931-8323e5ce-f533-4b58-b924-e0555c224691.png%22%2C%22taskId%22%3A%22uc70dd92b-f089-44bf-8ddc-073a324cee1%22%2C%22clientId%22%3A%22u16a9e183-bb91-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u9e654861%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
        "selected_at": null,
        "editor_meta": "{\"viewport\":\"adapt\",\"typography\":\"classic\",\"codeblock\":1,\"image\":3}",
        "editor_meta_draft": "{\"viewport\":\"adapt\",\"typography\":\"classic\",\"codeblock\":1,\"image\":3}",
        "meta": {
            "privacy_migrated": true
        },
        "marked": true,
        "mark": {
            "action_name": "mark_doc",
            "id": 110320310610,
            "created_at": "2023-07-03T08:58:56.000Z",
            "updated_at": "2023-07-03T08:58:56.000Z",
            "space_id": 0,
            "action_type": "mark",
            "action_option": "doc",
            "action_setting_type": "default",
            "user_id": 38384436,
            "organization_id": 0,
            "target_type": "Doc",
            "target_id": 31505648,
            "target_book_id": 6862641,
            "target_group_id": 1500604,
            "title": "前端面试题之前端工程化篇"
        },
        "region": "河北",
        "indexed_level": 1,
        "privacy_migrated": true,
        "user": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T04:53:35.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "last_editor": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T04:53:35.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "_serializer": "web.doc_detail"
    }
}