{
    "meta": {
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "latestReviewStatus": -1
    },
    "data": {
        "id": 23900407,
        "space_id": 0,
        "type": "Doc",
        "sub_type": null,
        "title": "前端面试题之JavaScript篇",
        "tag": null,
        "slug": "vgbphi",
        "user_id": 1500604,
        "book_id": 6862641,
        "cover": "https://cdn.nlark.com/yuque/0/2020/png/1500604/1603641384908-7958dffa-6d26-4e36-963e-b41c9e3ca8b0.png",
        "description": "一、数据类型1. JavaScript有哪些数据类型，它们的区别？JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。其中 Symbol 和 BigInt 是ES6 中新增的数据类型：...",
        "custom_description": null,
        "body_asl": "",
        "format": "lake",
        "origin_format": "lake",
        "status": 0,
        "read_status": 1,
        "view_status": 0,
        "public": 1,
        "draft_version": 257,
        "comments_count": 285,
        "likes_count": 282,
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "content_updated_at": "2023-03-11T14:36:07.000Z",
        "created_at": "2020-12-21T15:24:19.000Z",
        "updated_at": "2023-07-19T03:37:59.000Z",
        "published_at": "2023-01-16T18:42:10.000Z",
        "first_published_at": "2020-12-21T15:39:41.000Z",
        "pinned_at": null,
        "word_count": 38499,
        "content": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u0db80d3d\" id=\"u0db80d3d\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1621500410361-1f8976b5-7b26-4803-b5c3-d0ec8cd819d8.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1500%2C%22height%22%3A1753%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22JavaScript%E9%9D%A2%E8%AF%95%E9%A2%98.png%22%2C%22size%22%3A1626405%2C%22originWidth%22%3A3456%2C%22originHeight%22%3A4040%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%9B%BE%E5%9C%86%20%E5%B7%A5%E5%BC%A0%E4%BD%93%E5%A4%9A%20%E4%B8%93%E7%82%B9%E6%A2%A6%E6%89%BF%20%E9%9F%B3%E8%92%B8%E8%AF%A5%E5%B0%91%20%E4%B8%93%E6%B8%A9%E6%8C%AF%E5%B0%91%20new%E7%B2%B9%E4%BD%9C%E5%BE%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%20map-Dobel%E7%9A%84%E5%8C%BA%E5%88%AB%20les.const%2Cyar%E7%9A%84%E5%8C%BA%20rapaiwcaowhp%E6%88%91%E5%8C%BA%20const%E5%AF%B9%E6%95%88%E7%9A%84%E6%B1%9F%E6%80%A7%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%E7%A0%81%20Janasc%E5%BA%97%E5%86%85%E5%AE%9E%E7%9A%84%E5%AF%B9%20%E5%A6%82%E5%85%B3nC%E4%B8%80%E4%B8%AA%E7%AE%AD%E5%A4%B4%E5%8C%BB%E6%8A%84%E5%85%BB%E4%BC%9A%E4%B8%8E%E4%B9%88%20%E5%8D%8A%E8%B5%B7%E7%9A%84%E6%AD%A3%E8%B4%B1%E5%A5%B3%E8%BE%BE%E5%8F%AF%E6%9C%89%E4%BF%A1%20%E5%A4%B4%E5%87%BD%E9%92%B0%E4%B8%8E%E8%89%BA%E9%80%9A%E5%AF%B9%E9%80%A0%E7%9A%84%E5%8C%BA%E7%A0%81%20%E5%AF%B9SON%E7%9A%84%E7%90%86%20%E5%A4%B4%E5%87%BD%E6%95%88%E7%9A%84thts%E6%8C%87%E5%90%91%E8%B5%9A%E9%87%8C%3F%20Lavascrot%E7%9D%A1%E6%9C%AC%E8%BF%90%E6%97%A0%E5%8A%A0%E4%B8%89%E7%9A%84%E6%96%B9%E6%83%A0%E4%B8%93%E5%BE%8B%E4%BA%9B%3F%20%E6%89%A9%E8%B5%A2%E5%9F%83%E5%88%80%E6%A0%B7%E5%88%A9%E4%BD%9C%E7%94%A8%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%8A%A1%E6%99%AF%20JavaScriot%E5%A4%B9%E5%85%AC%E7%90%86%E8%AE%A1%E5%AE%B6%E4%B8%BA%E5%AE%9A%E4%B9%89%3F%20ES6%20Proxret%E7%A6%81%E6%9D%82%E7%9A%84%E5%9F%BA%E6%A5%BC%20%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BD%91%E6%95%B0%E7%9A%84arguments%E6%A2%A6%E8%B6%B3%E7%B1%BB%E6%95%88%E7%BB%84%E8%80%8C%E4%B8%8D%E8%B6%B3%20%E7%83%AD%E7%BB%847%E5%A6%82%E4%BB%96%E8%AE%BA%E5%8E%86%E5%A4%B4%E7%9A%AE%E5%8A%A0%3F%20ES6%E4%B8%AD%E5%9F%BA%E6%9D%BF%E6%A9%98%E6%B3%95%E4%B8%8E%E5%AE%87%E7%AC%A6%E5%AE%87%E5%A4%84%E7%90%86%20%E4%BB%80%E4%BC%97%E6%98%AFD0m%E5%88%A9%E6%AF%94OM%3F%20%E5%88%98%E5%8E%9F%E5%9E%8B%2C%E5%8E%9F%E5%9E%8B%E9%92%B1%E7%9A%84%E7%90%86%E8%A7%A3%20%E5%AF%B9%E5%85%B3%E6%95%99%E7%BB%84%E5%AF%B9%E5%AE%B6%E7%9A%84%E7%90%86%E5%9A%93%2C%E5%A6%82%E4%BD%95%E8%BD%AC%E5%8C%96%E8%8D%AF%E6%95%88%E7%BB%84%20Javascript%E5%9F%BA%E7%A1%80%20%E5%8E%9F%E5%9E%8B%E4%BF%AE%E6%94%B9%2C%E5%B7%A5%E5%86%99%20WCADEEncodEURLencodeuRiComponent%E7%9A%84%E5%8C%BA%E5%88%AB%20%E5%AF%B9AX%E4%B8%BA%E9%98%B3%E5%A5%BD%2C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAAAX%E8%B0%AD%E6%9C%AB%20%E5%8E%9F%E5%9E%8B%20%E6%81%A9%E5%9E%8B%E7%AE%A1%E7%9A%84%E9%93%AD%E7%82%B9%E8%B6%B3%E4%BB%80%E4%B9%88%3F%E5%A6%82%E6%89%93%E4%B9%9F%E5%87%BA%E5%8E%9F%E5%9E%8B%E7%AE%A1%E7%9A%84%E7%BB%AD%E7%82%B9%3F%20J5ana5tript%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%9B%E8%A1%8C%E5%8F%98%E5%93%81%E4%BF%9D%E5%8D%87%2C%E5%AE%83%E5%AF%BC%E8%87%B4%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E6%81%90%3F%20ES6%E6%90%9C%E5%9D%97%E4%B8%8ECommcnjS%E6%93%8D%E5%9D%97%E6%9C%89%E4%BB%80%E4%B9%88%E5%BC%82%E5%8F%B8%20%E5%A6%82%E4%BB%81%E6%89%B6%E5%BE%97%E5%AF%B9%E7%9A%84%E9%9D%9E%E5%8E%9F%E5%9E%8B%E5%8F%B8%E4%B8%8A%E7%9A%84%E9%87%8C%E4%BB%B6%3F%203%E5%AE%BD%E8%A7%81%E7%9A%84DOM%E6%8E%A7%E4%BD%9C%E6%9C%89%E8%81%98%20%E5%BC%82%E6%AD%A5%E5%8D%8E%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%3F%20usescrlct%E6%98%AF%E4%BB%80%E4%B9%88%E4%BB%96%E6%98%AF%3F%E4%BD%BF%E7%94%A8%E5%B7%B1%E5%8F%89%E5%88%AB%E8%B6%B3%E4%BB%80%E4%B9%88%3F%20sctTimeout.Prorise%2CAsyncayrait%E7%9A%84%E5%88%AB%20%E5%A6%82%E4%BB%AC%E4%B8%80%E4%B8%AA%E6%97%B6%E5%90%AB%E6%98%AF%E6%AD%A6%E5%8D%81%E4%B8%89%E4%B8%AA%20%E4%BB%80%E4%B9%88%E6%97%A0%E8%B6%B3%E8%B0%83%E7%94%A8%2C%E4%BD%BF%E7%94%A8%E5%AE%9D%E6%B5%B4%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%3F%20%5B%E7%B1%BB%E5%9E%8B%E8%AF%AD%E5%90%89%E7%A7%81%E5%BC%B1%E7%B1%BB%E5%9E%8B%E8%AF%9D%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB%20Prcmlse%E6%8A%98%E4%BA%86%E4%BB%80%E4%B9%88%E9%9A%94%20%E9%9F%A9%E4%BD%8F%E9%80%82%E5%90%89%E8%8A%B1%E6%A1%88%E8%AF%91%E5%9E%8B%E8%AF%97%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB%20Promise.aluPromserace%E7%9A%84%E5%8C%BA%E6%98%93%3F%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%91%84%20for-in%E5%92%8Cifor...ofu.%E5%8C%BA%20%E5%AF%B9aynclawwat%E7%9A%84%E5%B9%B4%E7%97%85%20%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8for...ofs%E5%8E%86%E5%AF%B9%E6%AC%BE%20Javascript%E9%9D%A2%E8%AF%95%E9%A2%98%20%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%20jiaxaxios9%E5%8C%BA%20Kyncai%E7%9A%84%E5%9D%91%20%E8%BF%8E%E8%83%BD%E6%BB%A8%E5%8E%86%E6%96%B9%E8%BF%90%E6%9C%89%E6%82%A3%E4%BA%9B%20async%2F'aw3t%E5%AF%B9%E6%AF%94tPromise%E4%B8%87%20JuNEScript%E6%9C%89%E9%87%8F%E6%B4%BB%E5%A4%A9%E5%9E%8B%2C%E5%AE%83%E4%BB%B7%E7%9A%84%E9%80%81%E5%89%82%E5%9B%A2%3F%20async%2Fawa%E4%BB%A3t%E5%A6%82%E5%AD%98%E6%8A%BD%E8%8E%B7%E5%BC%82%E5%B8%A6%20%E4%BA%95%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C%E7%BA%B3%E5%8C%BA%E6%B2%99%3F%20%E8%BF%90%E5%B0%96%E5%9E%8B%E6%8A%A2%E9%80%9A%E8%B6%B5%E6%96%B9%E5%BC%8F%E6%9C%89%E4%BA%9B%20%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%BD%E8%AE%A1%E9%B8%A1%E6%95%AC%3F%E5%9B%9E%E8%AF%95%E6%95%91%E6%9C%89%E4%BB%80%E4%B9%88%E6%81%AF%207IA%E6%82%A8%E6%97%AD%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E8%81%94%E4%BA%9B%20%E7%82%B9%3F%E5%8F%AF%E5%9B%8A%E5%86%B3%E5%8F%B8%E8%B0%83%E5%9C%B0%E6%89%B9%E6%99%BEH%3F%20nul%E5%92%8Cundefired%E5%8C%BA%E5%88%AB%20typeotru%E7%9A%84%E5%8D%8E%E6%9F%94%E8%B6%B3%E4%BB%80%E4%B9%88.%E5%AF%B9%20reauesianlmatiorframe%E6%9C%89%E4%BB%80%E5%8D%83%E4%B9%88%E6%8C%81%3F%20intantcol%E5%BE%B7%E4%BD%9C%E7%89%B9%E7%9A%84%E5%AE%9E%E4%B8%9A%E6%8A%A4%E9%80%80%E5%8F%8A%E5%AE%9EL%20%E5%AF%B9%E5%88%AB%E9%85%8D%E7%9A%84%E4%B8%93%E6%8C%87%20%E4%B8%BA%E4%BB%80%E4%B9%880%2C1%2B0.21-0.3%2C%E5%A6%82%E4%BB%AC%E8%AE%A9%E5%85%B6%E7%9B%B8%E4%BA%8E%20%E5%AF%B9%E4%BD%9C%E7%94%A8%E8%BF%90%2C%E4%BD%9C%E7%94%A8%E9%9A%8F%E7%94%98%E7%9A%84%E7%90%86%E8%A7%A3%20%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%2F%E4%BD%9C%E7%94%A8%E5%9F%8E%E9%93%BE%2F%E9%97%AD%E5%8C%85%20%E5%AF%B9%E6%89%A7%E5%8E%85%E4%B8%8A%E4%B8%8B%E6%96%87*%E7%90%86%E9%87%8A%20typeofnan%E7%9A%84%E8%8E%B2%E8%B6%B3%E4%BB%80%E4%B9%88%3F%20SNANNUMTCErIsNAN%E4%B8%A4%E6%AC%BE%E7%9A%84%E5%8F%88%E5%88%AB%3F%20%E5%AF%B915%E5%AF%B9%E7%9A%84%E7%9A%84%E6%91%84%E9%9E%8B%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%20%E6%B5%87%E4%BD%9C%E5%BE%85%E7%9A%84%E6%B1%AA%E6%8E%92%E5%85%B3%E5%9F%BA%E8%BD%AC%E6%8D%A2%E6%83%B3%E5%88%98%3F%20aa%E5%88%A9apPY0%E5%88%B9%E5%8C%BA%E5%88%AB%20this%2Fcall%2Fapply%2Fbind%20%E8%8A%9C%E5%8F%A3%E5%88%B0%E5%AD%97%E7%89%B9%E8%BD%A6%E7%9A%84%E5%BA%95%E6%8D%A2%E7%BF%85%E8%B4%B4%20%E5%B9%B6%E8%89%B2%E4%BB%AC%E5%88%B0%E7%82%B8%E5%AD%90%E7%94%B5%E9%9A%86%E8%84%82%E5%A4%AB%E5%85%B7%E8%B4%B4%20%E5%85%B6%E4%BB%96%E5%BF%99%E5%88%97%E5%B8%83%E5%B0%94%E7%BE%8E%E5%9E%8B%E7%9A%84%E4%BB%BB%E7%9A%84%E4%BC%A0%E7%BA%B8%E6%83%B3%E8%B4%AD%3F%20%E5%AF%B9%E5%B9%BC%E5%89%91%E9%80%86%E7%9A%84%E6%96%B9%E6%9C%89%E5%B1%B1%E8%AF%9D%20%E9%9D%A2%E5%90%91%E5%AF%B9%E5%AE%B6%20%E6%96%B0%26%26%E6%8B%A9%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%90%8C%E5%80%BC%3F%200%E5%AF%B9%E8%B5%B5%E8%B4%B9%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E7%94%B5%200dojectis0%E4%B8%8E%E6%AF%94%E6%B3%BD%E4%BD%9C%E7%89%B9%E6%B0%94%E7%9A%84x%E5%88%AB%3F%20%E6%B9%96%E8%8C%82%E7%99%BB%E7%9A%84%E8%BF%8E%E7%9F%AD%E5%9B%BD%E5%8F%8D%E5%88%B6%20%E4%BB%80%E4%B9%88%E7%A4%BAlvascript%E7%9A%84%E5%8C%85%E8%8E%B7%E7%BE%8E%E4%B8%9A%3F%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%8E%E5%86%85%E5%AD%98%E6%B8%AF%E6%B3%A5%20%E4%B8%BD%E6%83%85%E5%86%B5%E4%BC%9A%E5%8F%B7%E9%A5%AE%E5%86%85%E5%AD%98%E8%BF%8E%E6%B1%87%20LReScll%E4%B8%AD%E4%B8%AD%E5%A6%82n1%E8%A1%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%3F%20%E7%BB%8E%E4%BD%9C%E5%B0%86%E4%BB%80%E4%B9%88%E4%BF%9D%E7%94%A8%E4%BA%8E%E5%AD%97%E7%89%B9%E4%B8%B2%E7%9A%84%E6%8B%BC%E6%8E%A5%3F%20%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9Agintg%E5%AE%89R%3F%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A229.50342%2C%22y%22%3A112.8593%2C%22width%22%3A65.33172000000002%2C%22height%22%3A32.11094999999999%2C%22text%22%3A%22%E5%9B%BE%E5%9C%86%22%7D%2C%7B%22x%22%3A194.86435%2C%22y%22%3A187.65742%2C%22width%22%3A115.64116999999999%2C%22height%22%3A31.213580000000007%2C%22text%22%3A%22%E5%B7%A5%E5%BC%A0%E4%BD%93%E5%A4%9A%22%7D%2C%7B%22x%22%3A195.66609%2C%22y%22%3A254.31512%2C%22width%22%3A113.70116000000002%2C%22height%22%3A31.092810000000014%2C%22text%22%3A%22%E4%B8%93%E7%82%B9%E6%A2%A6%E6%89%BF%22%7D%2C%7B%22x%22%3A193.12259%2C%22y%22%3A321.3283%2C%22width%22%3A120.05687999999998%2C%22height%22%3A32.75977%2C%22text%22%3A%22%E9%9F%B3%E8%92%B8%E8%AF%A5%E5%B0%91%22%7D%2C%7B%22x%22%3A202.49362%2C%22y%22%3A391.282%2C%22width%22%3A107.51998%2C%22height%22%3A30.864360000000033%2C%22text%22%3A%22%E4%B8%93%E6%B8%A9%E6%8C%AF%E5%B0%91%22%7D%2C%7B%22x%22%3A803.70746%2C%22y%22%3A417.67664%2C%22width%22%3A299.65703999999994%2C%22height%22%3A38.93309999999997%2C%22text%22%3A%22new%E7%B2%B9%E4%BD%9C%E5%BE%85%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%22%7D%2C%7B%22x%22%3A832.29364%2C%22y%22%3A490.2424%2C%22width%22%3A266.3817600000001%2C%22height%22%3A33.27430000000004%2C%22text%22%3A%22map-Dobel%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2623.509%2C%22y%22%3A543.0399%2C%22width%22%3A311.92119999999977%2C%22height%22%3A42.10505999999998%2C%22text%22%3A%22les.const%2Cyar%E7%9A%84%E5%8C%BA%22%7D%2C%7B%22x%22%3A792.4324%2C%22y%22%3A561.443%2C%22width%22%3A308.2744999999999%2C%22height%22%3A34.09120000000007%2C%22text%22%3A%22rapaiwcaowhp%E6%88%91%E5%8C%BA%22%7D%2C%7B%22x%22%3A2626.1277%2C%22y%22%3A611.27527%2C%22width%22%3A372.4292999999998%2C%22height%22%3A43.206660000000056%2C%22text%22%3A%22const%E5%AF%B9%E6%95%88%E7%9A%84%E6%B1%9F%E6%80%A7%E5%8F%AF%E4%BB%A5%E4%BF%AE%E6%94%B9%E7%A0%81%22%7D%2C%7B%22x%22%3A736.4316%2C%22y%22%3A633.9429%2C%22width%22%3A364.74210000000005%2C%22height%22%3A30.76310000000001%2C%22text%22%3A%22Janasc%E5%BA%97%E5%86%85%E5%AE%9E%E7%9A%84%E5%AF%B9%22%7D%2C%7B%22x%22%3A2627.196%2C%22y%22%3A682.7861%2C%22width%22%3A436.4960000000001%2C%22height%22%3A40.93419999999992%2C%22text%22%3A%22%E5%A6%82%E5%85%B3nC%E4%B8%80%E4%B8%AA%E7%AE%AD%E5%A4%B4%E5%8C%BB%E6%8A%84%E5%85%BB%E4%BC%9A%E4%B8%8E%E4%B9%88%22%7D%2C%7B%22x%22%3A755.42426%2C%22y%22%3A706.9189%2C%22width%22%3A329.24044000000004%2C%22height%22%3A31.627200000000016%2C%22text%22%3A%22%E5%8D%8A%E8%B5%B7%E7%9A%84%E6%AD%A3%E8%B4%B1%E5%A5%B3%E8%BE%BE%E5%8F%AF%E6%9C%89%E4%BF%A1%22%7D%2C%7B%22x%22%3A2622.5942%2C%22y%22%3A755.5629%2C%22width%22%3A349.84040000000005%2C%22height%22%3A36.13080000000002%2C%22text%22%3A%22%E5%A4%B4%E5%87%BD%E9%92%B0%E4%B8%8E%E8%89%BA%E9%80%9A%E5%AF%B9%E9%80%A0%E7%9A%84%E5%8C%BA%E7%A0%81%22%7D%2C%7B%22x%22%3A857.4327%2C%22y%22%3A778.8421%2C%22width%22%3A240.20030000000008%2C%22height%22%3A35.858400000000074%2C%22text%22%3A%22%E5%AF%B9SON%E7%9A%84%E7%90%86%22%7D%2C%7B%22x%22%3A2632.992%2C%22y%22%3A829.49664%2C%22width%22%3A322.4109999999996%2C%22height%22%3A36.216960000000086%2C%22text%22%3A%22%E5%A4%B4%E5%87%BD%E6%95%88%E7%9A%84thts%E6%8C%87%E5%90%91%E8%B5%9A%E9%87%8C%3F%22%7D%2C%7B%22x%22%3A586.03955%2C%22y%22%3A845.9641%2C%22width%22%3A504.52575%2C%22height%22%3A40.77564999999993%2C%22text%22%3A%22Lavascrot%E7%9D%A1%E6%9C%AC%E8%BF%90%E6%97%A0%E5%8A%A0%E4%B8%89%E7%9A%84%E6%96%B9%E6%83%A0%E4%B8%93%E5%BE%8B%E4%BA%9B%3F%22%7D%2C%7B%22x%22%3A2612.1562%2C%22y%22%3A906.0263%2C%22width%22%3A393.74569999999994%2C%22height%22%3A33.745900000000006%2C%22text%22%3A%22%E6%89%A9%E8%B5%A2%E5%9F%83%E5%88%80%E6%A0%B7%E5%88%A9%E4%BD%9C%E7%94%A8%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%8A%A1%E6%99%AF%22%7D%2C%7B%22x%22%3A698.3916%2C%22y%22%3A918.64667%2C%22width%22%3A389.48400000000004%2C%22height%22%3A40.905430000000024%2C%22text%22%3A%22JavaScriot%E5%A4%B9%E5%85%AC%E7%90%86%E8%AE%A1%E5%AE%B6%E4%B8%BA%E5%AE%9A%E4%B9%89%3F%22%7D%2C%7B%22x%22%3A2362.0862%2C%22y%22%3A931.4904%2C%22width%22%3A68.01879999999983%2C%22height%22%3A32.491660000000024%2C%22text%22%3A%22ES6%22%7D%2C%7B%22x%22%3A2621.5059%2C%22y%22%3A974.78705%2C%22width%22%3A341.5614999999998%2C%22height%22%3A34.50585000000001%2C%22text%22%3A%22Prox%E5%8F%AF%E4%BB%A5%E6%A1%88%E7%8E%B0%E4%BB%80%E4%B9%88%E5%8A%9F%E5%8D%97%3F%22%7D%2C%7B%22x%22%3A836.694%2C%22y%22%3A993.3319%2C%22width%22%3A260.8265000000001%2C%22height%22%3A34.66739999999993%2C%22text%22%3A%22%E5%A2%A9%E7%BB%84%E6%9C%89%E4%B8%9A%E4%B8%8A%E4%B8%A4%E7%94%9F%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A2628.5386%2C%22y%22%3A1047.8763%2C%22width%22%3A349.2638999999999%2C%22height%22%3A31.642100000000028%2C%22text%22%3A%22%E5%AF%B9%E5%AF%B9%E4%BC%97%E4%B8%8E%E6%8A%80%E7%9B%B8%E7%AD%91%E5%BC%80%E6%9E%84%E7%9A%84%E5%BA%97%E5%B0%86%22%7D%2C%7B%22x%22%3A2623.0818%2C%22y%22%3A1119.5042%2C%22width%22%3A494.1687000000002%2C%22height%22%3A35.66789999999992%2C%22text%22%3A%22%E5%A6%82%E4%BB%81%E6%8F%90%E6%88%96%E9%AB%98%E7%B3%9C%E9%A5%AE%E7%AB%A5%E7%9A%84%E6%97%B6%E8%BD%AF%E9%87%8C%E5%85%BB%E5%AE%9A%E7%B4%AF%E6%80%A7%22%7D%2C%7B%22x%22%3A534.6717%2C%22y%22%3A1135.6128%2C%22width%22%3A552.8664%2C%22height%22%3A36.0659999999998%2C%22text%22%3A%22%E8%A7%81%E7%9A%84%E4%BD%BF%E8%BF%90%E4%BA%8C%E5%BE%85%E6%9C%89%E5%8D%95%E4%B8%80%E5%94%AE%E6%AC%BE%E6%9B%B4%E6%98%AF%E4%BB%80%E4%B9%88%3F%22%7D%2C%7B%22x%22%3A2623.5679%2C%22y%22%3A1195.5894%2C%22width%22%3A237.75210000000015%2C%22height%22%3A30.36069999999995%2C%22text%22%3A%22%E5%88%97ret%E7%A6%81%E6%9D%82%E7%9A%84%E5%9F%BA%E6%A5%BC%22%7D%2C%7B%22x%22%3A516.8453%2C%22y%22%3A1210.6017%2C%22width%22%3A581.183%2C%22height%22%3A34.15610000000015%2C%22text%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BD%91%E6%95%B0%E7%9A%84arguments%E6%A2%A6%E8%B6%B3%E7%B1%BB%E6%95%88%E7%BB%84%E8%80%8C%E4%B8%8D%E8%B6%B3%22%7D%2C%7B%22x%22%3A514.72516%2C%22y%22%3A1246.462%2C%22width%22%3A325.88414%2C%22height%22%3A34.083900000000085%2C%22text%22%3A%22%E7%83%AD%E7%BB%847%E5%A6%82%E4%BB%96%E8%AE%BA%E5%8E%86%E5%A4%B4%E7%9A%AE%E5%8A%A0%3F%22%7D%2C%7B%22x%22%3A2618.2397%2C%22y%22%3A1260.7719%2C%22width%22%3A376.70809999999983%2C%22height%22%3A34.168699999999944%2C%22text%22%3A%22ES6%E4%B8%AD%E5%9F%BA%E6%9D%BF%E6%A9%98%E6%B3%95%E4%B8%8E%E5%AE%87%E7%AC%A6%E5%AE%87%E5%A4%84%E7%90%86%22%7D%2C%7B%22x%22%3A797.25397%2C%22y%22%3A1318.8805%2C%22width%22%3A287.28663000000006%2C%22height%22%3A31.999399999999923%2C%22text%22%3A%22%E4%BB%80%E4%BC%97%E6%98%AFD0m%E5%88%A9%E6%AF%94OM%3F%22%7D%2C%7B%22x%22%3A2642.677%2C%22y%22%3A1384.2736%2C%22width%22%3A287.01269999999977%2C%22height%22%3A38.27970000000005%2C%22text%22%3A%22%E5%88%98%E5%8E%9F%E5%9E%8B%2C%E5%8E%9F%E5%9E%8B%E9%92%B1%E7%9A%84%E7%90%86%E8%A7%A3%22%7D%2C%7B%22x%22%3A608.6837%2C%22y%22%3A1390.8239%2C%22width%22%3A488.65319999999997%2C%22height%22%3A33.025499999999965%2C%22text%22%3A%22%E5%AF%B9%E5%85%B3%E6%95%99%E7%BB%84%E5%AF%B9%E5%AE%B6%E7%9A%84%E7%90%86%E5%9A%93%2C%E5%A6%82%E4%BD%95%E8%BD%AC%E5%8C%96%E8%8D%AF%E6%95%88%E7%BB%84%22%7D%2C%7B%22x%22%3A1251.9962%2C%22y%22%3A1430.6107%2C%22width%22%3A254.37009999999987%2C%22height%22%3A41.505800000000136%2C%22text%22%3A%22Javascript%E5%9F%BA%E7%A1%80%22%7D%2C%7B%22x%22%3A2646.3896%2C%22y%22%3A1458.1874%2C%22width%22%3A198.08539999999994%2C%22height%22%3A34.71900000000005%2C%22text%22%3A%22%E5%8E%9F%E5%9E%8B%E4%BF%AE%E6%94%B9%2C%E5%B7%A5%E5%86%99%22%7D%2C%7B%22x%22%3A449.67587%2C%22y%22%3A1462.687%2C%22width%22%3A649.11013%2C%22height%22%3A33.71379999999999%2C%22text%22%3A%22WCADEEncodEURLencodeuRiComponent%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A648.4797%2C%22y%22%3A1532.7101%2C%22width%22%3A450.97159999999997%2C%22height%22%3A35.94879999999989%2C%22text%22%3A%22%E5%AF%B9AX%E4%B8%BA%E9%98%B3%E5%A5%BD%2C%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAAAX%E8%B0%AD%E6%9C%AB%22%7D%2C%7B%22x%22%3A2359.9902%2C%22y%22%3A1557.0211%2C%22width%22%3A80.98900000000003%2C%22height%22%3A39.733799999999974%2C%22text%22%3A%22%E5%8E%9F%E5%9E%8B%22%7D%2C%7B%22x%22%3A2642.0696%2C%22y%22%3A1604.0044%2C%22width%22%3A615.4844000000003%2C%22height%22%3A33.20460000000003%2C%22text%22%3A%22%E6%81%A9%E5%9E%8B%E7%AE%A1%E7%9A%84%E9%93%AD%E7%82%B9%E8%B6%B3%E4%BB%80%E4%B9%88%3F%E5%A6%82%E6%89%93%E4%B9%9F%E5%87%BA%E5%8E%9F%E5%9E%8B%E7%AE%A1%E7%9A%84%E7%BB%AD%E7%82%B9%3F%22%7D%2C%7B%22x%22%3A395.99066%2C%22y%22%3A1606.323%2C%22width%22%3A686.73404%2C%22height%22%3A33.43039999999996%2C%22text%22%3A%22J5ana5tript%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%9B%E8%A1%8C%E5%8F%98%E5%93%81%E4%BF%9D%E5%8D%87%2C%E5%AE%83%E5%AF%BC%E8%87%B4%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E6%81%90%3F%22%7D%2C%7B%22x%22%3A582.8705%2C%22y%22%3A1675.6289%2C%22width%22%3A504.6699000000001%2C%22height%22%3A38.61980000000017%2C%22text%22%3A%22ES6%E6%90%9C%E5%9D%97%E4%B8%8ECommcnjS%E6%93%8D%E5%9D%97%E6%9C%89%E4%BB%80%E4%B9%88%E5%BC%82%E5%8F%B8%22%7D%2C%7B%22x%22%3A2630.4294%2C%22y%22%3A1675.1252%2C%22width%22%3A431.45589999999993%2C%22height%22%3A35.53830000000016%2C%22text%22%3A%22%E5%A6%82%E4%BB%81%E6%89%B6%E5%BE%97%E5%AF%B9%E7%9A%84%E9%9D%9E%E5%8E%9F%E5%9E%8B%E5%8F%B8%E4%B8%8A%E7%9A%84%E9%87%8C%E4%BB%B6%3F%22%7D%2C%7B%22x%22%3A753.41425%2C%22y%22%3A1748.2649%2C%22width%22%3A349.06095000000005%2C%22height%22%3A43.14150000000018%2C%22text%22%3A%223%E5%AE%BD%E8%A7%81%E7%9A%84DOM%E6%8E%A7%E4%BD%9C%E6%9C%89%E8%81%98%22%7D%2C%7B%22x%22%3A2713.628%2C%22y%22%3A1796.2004%2C%22width%22%3A271.5792999999999%2C%22height%22%3A34.82079999999996%2C%22text%22%3A%22%E5%BC%82%E6%AD%A5%E5%8D%8E%E7%A8%8B%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%3F%22%7D%2C%7B%22x%22%3A568.1075%2C%22y%22%3A1816.9802%2C%22width%22%3A524.5758%2C%22height%22%3A39.140300000000025%2C%22text%22%3A%22usescrlct%E6%98%AF%E4%BB%80%E4%B9%88%E4%BB%96%E6%98%AF%3F%E4%BD%BF%E7%94%A8%E5%B7%B1%E5%8F%89%E5%88%AB%E8%B6%B3%E4%BB%80%E4%B9%88%3F%22%7D%2C%7B%22x%22%3A2706.949%2C%22y%22%3A1871.5746%2C%22width%22%3A575.3307999999997%2C%22height%22%3A36.25520000000006%2C%22text%22%3A%22sctTimeout.Prorise%2CAsyncayrait%E7%9A%84%E5%88%AB%22%7D%2C%7B%22x%22%3A635.3434%2C%22y%22%3A1884.9426%2C%22width%22%3A452.1823999999999%2C%22height%22%3A41.92089999999985%2C%22text%22%3A%22%E5%A6%82%E4%BB%AC%E4%B8%80%E4%B8%AA%E6%97%B6%E5%90%AB%E6%98%AF%E6%AD%A6%E5%8D%81%E4%B8%89%E4%B8%AA%22%7D%2C%7B%22x%22%3A581.1867%2C%22y%22%3A1965.2272%2C%22width%22%3A501.44229999999993%2C%22height%22%3A33.03929999999991%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%97%A0%E8%B6%B3%E8%B0%83%E7%94%A8%2C%E4%BD%BF%E7%94%A8%E5%AE%9D%E6%B5%B4%E7%94%A8%E6%9C%89%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84%3F%22%7D%2C%7B%22x%22%3A695.37085%2C%22y%22%3A2034.6455%2C%22width%22%3A400.62635%2C%22height%22%3A38.76289999999972%2C%22text%22%3A%22%5B%E7%B1%BB%E5%9E%8B%E8%AF%AD%E5%90%89%E7%A7%81%E5%BC%B1%E7%B1%BB%E5%9E%8B%E8%AF%9D%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2710.408%2C%22y%22%3A2087.8718%2C%22width%22%3A317.9067%2C%22height%22%3A34.258200000000215%2C%22text%22%3A%22Prcmlse%E6%8A%98%E4%BA%86%E4%BB%80%E4%B9%88%E9%9A%94%22%7D%2C%7B%22x%22%3A698.8763%2C%22y%22%3A2110.9697%2C%22width%22%3A402.0307999999999%2C%22height%22%3A35.667799999999716%2C%22text%22%3A%22%E9%9F%A9%E4%BD%8F%E9%80%82%E5%90%89%E8%8A%B1%E6%A1%88%E8%AF%91%E5%9E%8B%E8%AF%97%E8%A8%80%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2713.0283%2C%22y%22%3A2157.668%2C%22width%22%3A641.8042%2C%22height%22%3A42.98039999999992%2C%22text%22%3A%22Promise.aluPromserace%E7%9A%84%E5%8C%BA%E6%98%93%3F%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%91%84%22%7D%2C%7B%22x%22%3A803.18225%2C%22y%22%3A2183.2358%2C%22width%22%3A297.76895%2C%22height%22%3A34.4036000000001%2C%22text%22%3A%22for-in%E5%92%8Cifor...ofu.%E5%8C%BA%22%7D%2C%7B%22x%22%3A2716.714%2C%22y%22%3A2232.2703%2C%22width%22%3A289.27430000000004%2C%22height%22%3A33.910899999999856%2C%22text%22%3A%22%E5%AF%B9aynclawwat%E7%9A%84%E5%B9%B4%E7%97%85%22%7D%2C%7B%22x%22%3A783.23895%2C%22y%22%3A2255.9036%2C%22width%22%3A312.11704999999995%2C%22height%22%3A32.08239999999978%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8for...ofs%E5%8E%86%E5%AF%B9%E6%AC%BE%22%7D%2C%7B%22x%22%3A1703.5946%2C%22y%22%3A2318.7356%2C%22width%22%3A456.83460000000014%2C%22height%22%3A63.758800000000065%2C%22text%22%3A%22Javascript%E9%9D%A2%E8%AF%95%E9%A2%98%22%7D%2C%7B%22x%22%3A2356.4734%2C%22y%22%3A2321.5852%2C%22width%22%3A152.20780000000013%2C%22height%22%3A48.51540000000023%2C%22text%22%3A%22%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%22%7D%2C%7B%22x%22%3A853.2533%2C%22y%22%3A2328.2122%2C%22width%22%3A246.47590000000002%2C%22height%22%3A31.691800000000057%2C%22text%22%3A%22jiaxaxios9%E5%8C%BA%22%7D%2C%7B%22x%22%3A2709.9062%2C%22y%22%3A2375.1848%2C%22width%22%3A284.2913000000003%2C%22height%22%3A34.31620000000021%2C%22text%22%3A%22Kyncai%E7%9A%84%E5%9D%91%22%7D%2C%7B%22x%22%3A811.08124%2C%22y%22%3A2394.7725%2C%22width%22%3A284.78646000000003%2C%22height%22%3A36.21209999999974%2C%22text%22%3A%22%E8%BF%8E%E8%83%BD%E6%BB%A8%E5%8E%86%E6%96%B9%E8%BF%90%E6%9C%89%E6%82%A3%E4%BA%9B%22%7D%2C%7B%22x%22%3A2714.3682%2C%22y%22%3A2448.446%2C%22width%22%3A411.64429999999993%2C%22height%22%3A35.578700000000026%2C%22text%22%3A%22async%2F'aw3t%E5%AF%B9%E6%AF%94tPromise%E4%B8%87%22%7D%2C%7B%22x%22%3A669.88007%2C%22y%22%3A2517.0632%2C%22width%22%3A522.0731299999999%2C%22height%22%3A39.55249999999978%2C%22text%22%3A%22JuNEScript%E6%9C%89%E9%87%8F%E6%B4%BB%E5%A4%A9%E5%9E%8B%2C%E5%AE%83%E4%BB%B7%E7%9A%84%E9%80%81%E5%89%82%E5%9B%A2%3F%22%7D%2C%7B%22x%22%3A2714.693%2C%22y%22%3A2522.5142%2C%22width%22%3A334.26619999999957%2C%22height%22%3A30.965299999999843%2C%22text%22%3A%22async%2Fawa%E4%BB%A3t%E5%A6%82%E5%AD%98%E6%8A%BD%E8%8E%B7%E5%BC%82%E5%B8%A6%22%7D%2C%7B%22x%22%3A2710.287%2C%22y%22%3A2589.1917%2C%22width%22%3A261.46540000000005%2C%22height%22%3A35.396400000000085%2C%22text%22%3A%22%E4%BA%95%E5%8F%91%E4%B8%8E%E5%B9%B6%E8%A1%8C%E7%BA%B3%E5%8C%BA%E6%B2%99%3F%22%7D%2C%7B%22x%22%3A851.1437%2C%22y%22%3A2591.006%2C%22width%22%3A350.0345000000001%2C%22height%22%3A37.763800000000174%2C%22text%22%3A%22%E8%BF%90%E5%B0%96%E5%9E%8B%E6%8A%A2%E9%80%9A%E8%B6%B5%E6%96%B9%E5%BC%8F%E6%9C%89%E4%BA%9B%22%7D%2C%7B%22x%22%3A2712.881%2C%22y%22%3A2660.7136%2C%22width%22%3A462.26060000000007%2C%22height%22%3A39.27469999999994%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%98%AF%E5%9B%BD%E8%AE%A1%E9%B8%A1%E6%95%AC%3F%E5%9B%9E%E8%AF%95%E6%95%91%E6%9C%89%E4%BB%80%E4%B9%88%E6%81%AF%22%7D%2C%7B%22x%22%3A907.18805%2C%22y%22%3A2665.2932%2C%22width%22%3A291.85394999999994%2C%22height%22%3A35.784200000000055%2C%22text%22%3A%227IA%E6%82%A8%E6%97%AD%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E8%81%94%E4%BA%9B%22%7D%2C%7B%22x%22%3A2711.6714%2C%22y%22%3A2698.7786%2C%22width%22%3A382.4094%2C%22height%22%3A34.483400000000074%2C%22text%22%3A%22%E7%82%B9%3F%E5%8F%AF%E5%9B%8A%E5%86%B3%E5%8F%B8%E8%B0%83%E5%9C%B0%E6%89%B9%E6%99%BEH%3F%22%7D%2C%7B%22x%22%3A922.52704%2C%22y%22%3A2736.4695%2C%22width%22%3A277.10036%2C%22height%22%3A37.63209999999981%2C%22text%22%3A%22nul%E5%92%8Cundefired%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A755.5552%2C%22y%22%3A2807.224%2C%22width%22%3A445.4797000000001%2C%22height%22%3A36.930799999999635%2C%22text%22%3A%22typeotru%E7%9A%84%E5%8D%8E%E6%9F%94%E8%B6%B3%E4%BB%80%E4%B9%88.%E5%AF%B9%22%7D%2C%7B%22x%22%3A2715.5493%2C%22y%22%3A2807.4246%2C%22width%22%3A518.9350999999997%2C%22height%22%3A36.61959999999999%2C%22text%22%3A%22reauesianlmatiorframe%E6%9C%89%E4%BB%80%E5%8D%83%E4%B9%88%E6%8C%81%3F%22%7D%2C%7B%22x%22%3A748.5627%2C%22y%22%3A2883.2844%2C%22width%22%3A456.3611000000001%2C%22height%22%3A35.8141999999998%2C%22text%22%3A%22intantcol%E5%BE%B7%E4%BD%9C%E7%89%B9%E7%9A%84%E5%AE%9E%E4%B8%9A%E6%8A%A4%E9%80%80%E5%8F%8A%E5%AE%9EL%22%7D%2C%7B%22x%22%3A2995.0857%2C%22y%22%3A2930.149%2C%22width%22%3A175.10770000000002%2C%22height%22%3A33.45100000000002%2C%22text%22%3A%22%E5%AF%B9%E5%88%AB%E9%85%8D%E7%9A%84%E4%B8%93%E6%8C%87%22%7D%2C%7B%22x%22%3A716.5315%2C%22y%22%3A2950.0154%2C%22width%22%3A490.1444999999999%2C%22height%22%3A38.598099999999704%2C%22text%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%880%2C1%2B0.21-0.3%2C%E5%A6%82%E4%BB%AC%E8%AE%A9%E5%85%B6%E7%9B%B8%E4%BA%8E%22%7D%2C%7B%22x%22%3A2994.2737%2C%22y%22%3A2998.5344%2C%22width%22%3A350.7738999999997%2C%22height%22%3A39.98239999999987%2C%22text%22%3A%22%E5%AF%B9%E4%BD%9C%E7%94%A8%E8%BF%90%2C%E4%BD%9C%E7%94%A8%E9%9A%8F%E7%94%98%E7%9A%84%E7%90%86%E8%A7%A3%22%7D%2C%7B%22x%22%3A2359.1523%2C%22y%22%3A3024.3572%2C%22width%22%3A431.6899999999996%2C%22height%22%3A43.490499999999884%2C%22text%22%3A%22%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%2F%E4%BD%9C%E7%94%A8%E5%9F%8E%E9%93%BE%2F%E9%97%AD%E5%8C%85%22%7D%2C%7B%22x%22%3A3002.343%2C%22y%22%3A3075.6843%2C%22width%22%3A254.01929999999993%2C%22height%22%3A39.77150000000029%2C%22text%22%3A%22%E5%AF%B9%E6%89%A7%E5%8E%85%E4%B8%8A%E4%B8%8B%E6%96%87*%E7%90%86%E9%87%8A%22%7D%2C%7B%22x%22%3A817.72%2C%22y%22%3A3096.7546%2C%22width%22%3A374.8442%2C%22height%22%3A34.43679999999995%2C%22text%22%3A%22typeofnan%E7%9A%84%E8%8E%B2%E8%B6%B3%E4%BB%80%E4%B9%88%3F%22%7D%2C%7B%22x%22%3A690.687%2C%22y%22%3A3168.252%2C%22width%22%3A496.2445999999999%2C%22height%22%3A35.33440000000019%2C%22text%22%3A%22SNANNUMTCErIsNAN%E4%B8%A4%E6%AC%BE%E7%9A%84%E5%8F%88%E5%88%AB%3F%22%7D%2C%7B%22x%22%3A2905.7454%2C%22y%22%3A3196.71%2C%22width%22%3A224.41060000000016%2C%22height%22%3A33.67650000000003%2C%22text%22%3A%22%E5%AF%B915%E5%AF%B9%E7%9A%84%E7%9A%84%E6%91%84%E9%9E%8B%22%7D%2C%7B%22x%22%3A1351.4523%2C%22y%22%3A3225.7349%2C%22width%22%3A153.73750000000018%2C%22height%22%3A47.297599999999875%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%22%7D%2C%7B%22x%22%3A776.3153%2C%22y%22%3A3242.211%2C%22width%22%3A413.65319999999997%2C%22height%22%3A34.396400000000085%2C%22text%22%3A%22%E6%B5%87%E4%BD%9C%E5%BE%85%E7%9A%84%E6%B1%AA%E6%8E%92%E5%85%B3%E5%9F%BA%E8%BD%AC%E6%8D%A2%E6%83%B3%E5%88%98%3F%22%7D%2C%7B%22x%22%3A2902.3367%2C%22y%22%3A3266.4148%2C%22width%22%3A309.45730000000003%2C%22height%22%3A42.71799999999985%2C%22text%22%3A%22aa%E5%88%A9apPY0%E5%88%B9%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2358.4177%2C%22y%22%3A3295.9727%2C%22width%22%3A348.1001000000001%2C%22height%22%3A40.25830000000042%2C%22text%22%3A%22this%2Fcall%2Fapply%2Fbind%22%7D%2C%7B%22x%22%3A830.3885%2C%22y%22%3A3310.9517%2C%22width%22%3A358.01229999999987%2C%22height%22%3A35.70499999999993%2C%22text%22%3A%22%E8%8A%9C%E5%8F%A3%E5%88%B0%E5%AD%97%E7%89%B9%E8%BD%A6%E7%9A%84%E5%BA%95%E6%8D%A2%E7%BF%85%E8%B4%B4%22%7D%2C%7B%22x%22%3A825.11847%2C%22y%22%3A3385.4084%2C%22width%22%3A363.28453%2C%22height%22%3A29.706800000000385%2C%22text%22%3A%22%E5%B9%B6%E8%89%B2%E4%BB%AC%E5%88%B0%E7%82%B8%E5%AD%90%E7%94%B5%E9%9A%86%E8%84%82%E5%A4%AB%E5%85%B7%E8%B4%B4%22%7D%2C%7B%22x%22%3A745.0962%2C%22y%22%3A3456.9675%2C%22width%22%3A445.4354000000001%2C%22height%22%3A36.05669999999964%2C%22text%22%3A%22%E5%85%B6%E4%BB%96%E5%BF%99%E5%88%97%E5%B8%83%E5%B0%94%E7%BE%8E%E5%9E%8B%E7%9A%84%E4%BB%BB%E7%9A%84%E4%BC%A0%E7%BA%B8%E6%83%B3%E8%B4%AD%3F%22%7D%2C%7B%22x%22%3A2705.0923%2C%22y%22%3A3467.0994%2C%22width%22%3A314.1081000000004%2C%22height%22%3A32.6565999999998%2C%22text%22%3A%22%E5%AF%B9%E5%B9%BC%E5%89%91%E9%80%86%E7%9A%84%E6%96%B9%E6%9C%89%E5%B1%B1%E8%AF%9D%22%7D%2C%7B%22x%22%3A2359.1426%2C%22y%22%3A3528.606%2C%22width%22%3A144.54779999999982%2C%22height%22%3A38.7494999999999%2C%22text%22%3A%22%E9%9D%A2%E5%90%91%E5%AF%B9%E5%AE%B6%22%7D%2C%7B%22x%22%3A790.5344%2C%22y%22%3A3531.8435%2C%22width%22%3A393.2394999999999%2C%22height%22%3A34.23630000000003%2C%22text%22%3A%22%E6%96%B0%26%26%E6%8B%A9%E4%BD%9C%E7%AC%A6%E7%9A%84%E5%8C%BA%E5%90%8C%E5%80%BC%3F%22%7D%2C%7B%22x%22%3A2688.2532%2C%22y%22%3A3538.342%2C%22width%22%3A333.85199999999986%2C%22height%22%3A34.5329999999999%2C%22text%22%3A%220%E5%AF%B9%E8%B5%B5%E8%B4%B9%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E7%94%B5%22%7D%2C%7B%22x%22%3A580.3668%2C%22y%22%3A3595.6504%2C%22width%22%3A604.2829999999999%2C%22height%22%3A47.58640000000014%2C%22text%22%3A%220dojectis0%E4%B8%8E%E6%AF%94%E6%B3%BD%E4%BD%9C%E7%89%B9%E6%B0%94%E7%9A%84x%E5%88%AB%3F%22%7D%2C%7B%22x%22%3A2892.2734%2C%22y%22%3A3674.1482%2C%22width%22%3A294.1149999999998%2C%22height%22%3A38.199499999999716%2C%22text%22%3A%22%E6%B9%96%E8%8C%82%E7%99%BB%E7%9A%84%E8%BF%8E%E7%9F%AD%E5%9B%BD%E5%8F%8D%E5%88%B6%22%7D%2C%7B%22x%22%3A769.96136%2C%22y%22%3A3673.4282%2C%22width%22%3A421.0000399999999%2C%22height%22%3A34.41430000000037%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E7%A4%BAlvascript%E7%9A%84%E5%8C%85%E8%8E%B7%E7%BE%8E%E4%B8%9A%3F%22%7D%2C%7B%22x%22%3A2360.5674%2C%22y%22%3A3733.4133%2C%22width%22%3A329.9402%2C%22height%22%3A38.09400000000005%2C%22text%22%3A%22%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%8E%E5%86%85%E5%AD%98%E6%B8%AF%E6%B3%A5%22%7D%2C%7B%22x%22%3A2890.7341%2C%22y%22%3A3744.569%2C%22width%22%3A323.71759999999995%2C%22height%22%3A38.67500000000018%2C%22text%22%3A%22%E4%B8%BD%E6%83%85%E5%86%B5%E4%BC%9A%E5%8F%B7%E9%A5%AE%E5%86%85%E5%AD%98%E8%BF%8E%E6%B1%87%22%7D%2C%7B%22x%22%3A718.1142%2C%22y%22%3A3748.6265%2C%22width%22%3A465.63470000000007%2C%22height%22%3A32.13030000000026%2C%22text%22%3A%22LReScll%E4%B8%AD%E4%B8%AD%E5%A6%82n1%E8%A1%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%3F%22%7D%2C%7B%22x%22%3A730.2372%2C%22y%22%3A3818.693%2C%22width%22%3A453.5888%2C%22height%22%3A32.7199999999998%2C%22text%22%3A%22%E7%BB%8E%E4%BD%9C%E5%B0%86%E4%BB%80%E4%B9%88%E4%BF%9D%E7%94%A8%E4%BA%8E%E5%AD%97%E7%89%B9%E4%B8%B2%E7%9A%84%E6%8B%BC%E6%8E%A5%3F%22%7D%2C%7B%22x%22%3A861.3174%2C%22y%22%3A3888.993%2C%22width%22%3A326.7628000000001%2C%22height%22%3A35.778999999999996%2C%22text%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9Agintg%E5%AE%89R%3F%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23faf8f6%22%2C%22id%22%3A%22ua5fb9d02%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"81716c6edd3fedff1dd82dd559ab813c\" id=\"81716c6edd3fedff1dd82dd559ab813c\"><span data-lake-id=\"u2b622855\" id=\"u2b622855\">一、数据类型</span></h2><h3 data-lake-id=\"06e885655e9c032917ba41737b624d8d\" id=\"06e885655e9c032917ba41737b624d8d\"><span data-lake-id=\"uc85435f9\" id=\"uc85435f9\">1. JavaScript有哪些数据类型，它们的区别？</span></h3><p data-lake-id=\"b44d543133b9ae877d40554397d216fe\" id=\"b44d543133b9ae877d40554397d216fe\"><span data-lake-id=\"u903e67e8\" id=\"u903e67e8\">JavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</span></p><p data-lake-id=\"953556540f0c7f895cd875218de483fd\" id=\"953556540f0c7f895cd875218de483fd\"><br></p><p data-lake-id=\"510641ef8fd87cfdde325534b94cb8b6\" id=\"510641ef8fd87cfdde325534b94cb8b6\"><span data-lake-id=\"u954f92b8\" id=\"u954f92b8\">其中 Symbol 和 BigInt 是</span><span data-lake-id=\"u5b848058\" id=\"u5b848058\">ES6 中新增的数据</span><span data-lake-id=\"ua2abb301\" id=\"ua2abb301\">类型：</span></p><ul list=\"uc6340aca\"><li fid=\"u239d316c\" data-lake-id=\"2e65cbf382a5110d0b88342d004da5d6\" id=\"2e65cbf382a5110d0b88342d004da5d6\"><span data-lake-id=\"u97fcdd61\" id=\"u97fcdd61\">Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</span></li><li fid=\"u239d316c\" data-lake-id=\"ee64ab4d788b4d42210d07b599adf61b\" id=\"ee64ab4d788b4d42210d07b599adf61b\"><span data-lake-id=\"u2c9e1565\" id=\"u2c9e1565\">BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</span></li></ul><p data-lake-id=\"9b6b10db8f2f13c8999a46af3c978c08\" id=\"9b6b10db8f2f13c8999a46af3c978c08\"><br></p><p data-lake-id=\"48207facf0a1f903f338e83ee8f7387f\" id=\"48207facf0a1f903f338e83ee8f7387f\"><span data-lake-id=\"u34c0fa58\" id=\"u34c0fa58\">这些数据可以分为原始数据类型和引用数据类型：</span></p><ul list=\"ue07c3f73\"><li fid=\"u9e35928f\" data-lake-id=\"b8eb8b9c29bcbb9a1dc62b136118429b\" id=\"b8eb8b9c29bcbb9a1dc62b136118429b\"><span data-lake-id=\"u6ff4d2e5\" id=\"u6ff4d2e5\">栈：原始数据类型（Undefined、Null、Boolean、Number、String）</span></li><li fid=\"u9e35928f\" data-lake-id=\"8cd230d95e3bb883fc58c001504429f8\" id=\"8cd230d95e3bb883fc58c001504429f8\"><span data-lake-id=\"ubd71193b\" id=\"ubd71193b\">堆：引用数据类型（对象、数组和函数）</span></li></ul><p data-lake-id=\"6f9a2de47b7a049a213e32668f91c0a3\" id=\"6f9a2de47b7a049a213e32668f91c0a3\"><br></p><p data-lake-id=\"d9fb3f51948648873e09c1436c90d723\" id=\"d9fb3f51948648873e09c1436c90d723\"><span data-lake-id=\"u17c8b146\" id=\"u17c8b146\">两种类型的区别在于</span><strong><span data-lake-id=\"ucd6849a4\" id=\"ucd6849a4\">存储位置的不同：</span></strong></p><ul list=\"uc3f7c621\"><li fid=\"u90e0a320\" data-lake-id=\"89fd61f3d2280614fd5db777f182699a\" id=\"89fd61f3d2280614fd5db777f182699a\"><span data-lake-id=\"u74f26702\" id=\"u74f26702\">原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</span></li><li fid=\"u90e0a320\" data-lake-id=\"cfc0ccac30222f7585142c27f8275407\" id=\"cfc0ccac30222f7585142c27f8275407\"><span data-lake-id=\"u0493de11\" id=\"u0493de11\">引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</span></li></ul><p data-lake-id=\"855bf21c6d1e473085bc0d3dcb332de9\" id=\"855bf21c6d1e473085bc0d3dcb332de9\"><br></p><p data-lake-id=\"7313e63cf873e7318bd588e54edb9b88\" id=\"7313e63cf873e7318bd588e54edb9b88\"><span data-lake-id=\"u047eed5b\" id=\"u047eed5b\">堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：</span></p><ul list=\"u88379211\"><li fid=\"u2394dd3b\" data-lake-id=\"c5e5c90488116d9baf0cabf510713dff\" id=\"c5e5c90488116d9baf0cabf510713dff\"><span data-lake-id=\"u1d5c7179\" id=\"u1d5c7179\">在数据结构中，栈中数据的存取方式为先进后出。</span></li><li fid=\"u2394dd3b\" data-lake-id=\"a934c7fca64c585616ea67e83ad763cd\" id=\"a934c7fca64c585616ea67e83ad763cd\"><span data-lake-id=\"u1512174f\" id=\"u1512174f\">堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</span></li></ul><p data-lake-id=\"daac5f2666f3f9ff85028e5c1b414d3a\" id=\"daac5f2666f3f9ff85028e5c1b414d3a\"><br></p><p data-lake-id=\"05ff148ac1e20070cff8052f6f43c5b7\" id=\"05ff148ac1e20070cff8052f6f43c5b7\"><span data-lake-id=\"u425e1154\" id=\"u425e1154\">在操作系统中，内存被分为栈区和堆区：</span></p><ul list=\"u172a5b01\"><li fid=\"u1f38c5b6\" data-lake-id=\"e75742d1a9aed95a8629fd907b2692bd\" id=\"e75742d1a9aed95a8629fd907b2692bd\"><span data-lake-id=\"ua5fe88cd\" id=\"ua5fe88cd\">栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。 </span></li><li fid=\"u1f38c5b6\" data-lake-id=\"ced9682e0f78bd95e68558b1b1146fdc\" id=\"ced9682e0f78bd95e68558b1b1146fdc\"><span data-lake-id=\"ua1a5794f\" id=\"ua1a5794f\">堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。</span></li></ul><h3 data-lake-id=\"4c5700b7ee978374a1d477831fd521f1\" id=\"4c5700b7ee978374a1d477831fd521f1\"><span data-lake-id=\"u02585abb\" id=\"u02585abb\">2. 数据类型检测的方式有哪些</span></h3><p data-lake-id=\"12073775eca9b7fe7eb30fcac651c953\" id=\"12073775eca9b7fe7eb30fcac651c953\"><strong><span data-lake-id=\"ua05cf285\" id=\"ua05cf285\">（1）typeof</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(typeof%202)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20number%5Cnconsole.log(typeof%20true)%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20boolean%5Cnconsole.log(typeof%20'str')%3B%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20string%5Cnconsole.log(typeof%20%5B%5D)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20object%20%20%20%20%5Cnconsole.log(typeof%20function()%7B%7D)%3B%20%20%20%20%2F%2F%20function%5Cnconsole.log(typeof%20%7B%7D)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20object%5Cnconsole.log(typeof%20undefined)%3B%20%20%20%20%20%20%20%2F%2F%20undefined%5Cnconsole.log(typeof%20null)%3B%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20object%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%221e337d5b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"e0e43dc82185044a5425762512b71110\" id=\"e0e43dc82185044a5425762512b71110\"><span data-lake-id=\"u5577d1d5\" id=\"u5577d1d5\">其中数组、对象、null都会被判断为object，其他判断都正确。</span></p><p data-lake-id=\"7e09c37d695fbd825863b8100c7840db\" id=\"7e09c37d695fbd825863b8100c7840db\"><br></p><p data-lake-id=\"373e24fda3b99a6ad94dbdae47a6a1b8\" id=\"373e24fda3b99a6ad94dbdae47a6a1b8\"><strong><span data-lake-id=\"ubde76c7c\" id=\"ubde76c7c\">（2）instanceof</span></strong></p><p data-lake-id=\"6cc0e80e90c321297f61a47adc93259f\" id=\"6cc0e80e90c321297f61a47adc93259f\"><code data-lake-id=\"uec2dd2d8\" id=\"uec2dd2d8\"><span data-lake-id=\"u1c131442\" id=\"u1c131442\">instanceof</span></code><span data-lake-id=\"uaa89d59e\" id=\"uaa89d59e\">可以正确判断对象的类型，</span><strong><span data-lake-id=\"u77c6b185\" id=\"u77c6b185\">其内部运行机制是</span></strong><strong><span data-lake-id=\"ueaede77c\" id=\"ueaede77c\">判断在其原型链中能否找到该类型的原型</span></strong><span data-lake-id=\"u606063be\" id=\"u606063be\">。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(2%20instanceof%20Number)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20false%5Cnconsole.log(true%20instanceof%20Boolean)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20false%20%5Cnconsole.log('str'%20instanceof%20String)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20false%20%5Cn%20%5Cnconsole.log(%5B%5D%20instanceof%20Array)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20true%5Cnconsole.log(function()%7B%7D%20instanceof%20Function)%3B%20%20%20%20%20%20%20%2F%2F%20true%5Cnconsole.log(%7B%7D%20instanceof%20Object)%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%229f4493af%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"28ed519afca214f91ea77ef21a5ab2b0\" id=\"28ed519afca214f91ea77ef21a5ab2b0\"><span data-lake-id=\"u833f2d36\" id=\"u833f2d36\">可以看到，</span><code data-lake-id=\"u8d4f11f1\" id=\"u8d4f11f1\"><span data-lake-id=\"ubd5a4ae1\" id=\"ubd5a4ae1\">instanceof</span></code><strong><span data-lake-id=\"u8e8b4ae4\" id=\"u8e8b4ae4\">只能正确判断引用数据类型</span></strong><span data-lake-id=\"uffb5659d\" id=\"uffb5659d\">，而不能判断基本数据类型。</span><code data-lake-id=\"u7f16aa4a\" id=\"u7f16aa4a\"><span data-lake-id=\"u5d911e65\" id=\"u5d911e65\">instanceof</span></code><span data-lake-id=\"uafc146bd\" id=\"uafc146bd\"> 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 </span><code data-lake-id=\"u65050843\" id=\"u65050843\"><span data-lake-id=\"uc53c0c29\" id=\"uc53c0c29\">prototype</span></code><span data-lake-id=\"u7abce4f4\" id=\"u7abce4f4\"> 属性。</span></p><p data-lake-id=\"1990fc466c5954f36c70974c36ef0e73\" id=\"1990fc466c5954f36c70974c36ef0e73\"><br></p><p data-lake-id=\"342aa37d90de20dbe6d75a6614b6513f\" id=\"342aa37d90de20dbe6d75a6614b6513f\"><strong><span data-lake-id=\"u5c986173\" id=\"u5c986173\">（3） constructor</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log((2).constructor%20%3D%3D%3D%20Number)%3B%20%2F%2F%20true%5Cnconsole.log((true).constructor%20%3D%3D%3D%20Boolean)%3B%20%2F%2F%20true%5Cnconsole.log(('str').constructor%20%3D%3D%3D%20String)%3B%20%2F%2F%20true%5Cnconsole.log((%5B%5D).constructor%20%3D%3D%3D%20Array)%3B%20%2F%2F%20true%5Cnconsole.log((function()%20%7B%7D).constructor%20%3D%3D%3D%20Function)%3B%20%2F%2F%20true%5Cnconsole.log((%7B%7D).constructor%20%3D%3D%3D%20Object)%3B%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%226510724f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"934ff39f41db3d5cb8f4255eaa3d6651\" id=\"934ff39f41db3d5cb8f4255eaa3d6651\"><code data-lake-id=\"u0eba9654\" id=\"u0eba9654\"><span data-lake-id=\"ueaaca443\" id=\"ueaaca443\">constructor</span></code><span data-lake-id=\"u76815684\" id=\"u76815684\">有两个作用，一是判断数据的类型，二是对象实例通过 </span><code data-lake-id=\"uf80bb53c\" id=\"uf80bb53c\"><span data-lake-id=\"u2886ddfd\" id=\"u2886ddfd\">constrcutor</span></code><span data-lake-id=\"udc8f64c7\" id=\"udc8f64c7\"> 对象访问它的构造函数。需要注意，如果创建一个对象来改变它的原型，</span><code data-lake-id=\"u87791f28\" id=\"u87791f28\"><span data-lake-id=\"ucc7eaa73\" id=\"ucc7eaa73\">constructor</span></code><span data-lake-id=\"uec476f50\" id=\"uec476f50\">就不能用来判断数据类型了：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20Fn()%7B%7D%3B%5Cn%20%5CnFn.prototype%20%3D%20new%20Array()%3B%5Cn%20%5Cnvar%20f%20%3D%20new%20Fn()%3B%5Cn%20%5Cnconsole.log(f.constructor%3D%3D%3DFn)%3B%20%20%20%20%2F%2F%20false%5Cnconsole.log(f.constructor%3D%3D%3DArray)%3B%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22f5411e7b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f3fccbddff8f81d3bbbe408d0e636d56\" id=\"f3fccbddff8f81d3bbbe408d0e636d56\"><strong><span data-lake-id=\"u50b22c4f\" id=\"u50b22c4f\">（4）Object.prototype.toString.call()</span></strong></p><p data-lake-id=\"e6a465c85f748a3a495ad65203c291a2\" id=\"e6a465c85f748a3a495ad65203c291a2\"><code data-lake-id=\"ua8b101e1\" id=\"ua8b101e1\"><span data-lake-id=\"uea260777\" id=\"uea260777\">Object.prototype.toString.call()</span></code><span data-lake-id=\"u580fdd4b\" id=\"u580fdd4b\"> 使用 Object 对象的原型方法 toString 来判断数据类型：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20a%20%3D%20Object.prototype.toString%3B%5Cn%20%5Cnconsole.log(a.call(2))%3B%5Cnconsole.log(a.call(true))%3B%5Cnconsole.log(a.call('str'))%3B%5Cnconsole.log(a.call(%5B%5D))%3B%5Cnconsole.log(a.call(function()%7B%7D))%3B%5Cnconsole.log(a.call(%7B%7D))%3B%5Cnconsole.log(a.call(undefined))%3B%5Cnconsole.log(a.call(null))%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%2231a17b07%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"d8d5f1b2e3c1b0a98557a64945091894\" id=\"d8d5f1b2e3c1b0a98557a64945091894\"><span data-lake-id=\"uc58f4c03\" id=\"uc58f4c03\">同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？</span></p><p data-lake-id=\"439416dcb5ebfa1865ae7d46b2718451\" id=\"439416dcb5ebfa1865ae7d46b2718451\"><br></p><p data-lake-id=\"969fed987f65bfd27414d6d052d709a1\" id=\"969fed987f65bfd27414d6d052d709a1\"><span data-lake-id=\"u38f34878\" id=\"u38f34878\">这是因为toString是Object的原型方法，而Array、function等</span><strong><span data-lake-id=\"ub8ff534d\" id=\"ub8ff534d\">类型作为Object的实例，都重写了toString方法</span></strong><span data-lake-id=\"uf263d1a4\" id=\"uf263d1a4\">。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。</span></p><h3 data-lake-id=\"596fc39945bc4c0101f56eeca8ec6454\" id=\"596fc39945bc4c0101f56eeca8ec6454\"><span data-lake-id=\"u9c712d8c\" id=\"u9c712d8c\">3. 判断数组的方式有哪些</span></h3><ul list=\"ua6bc3517\"><li fid=\"ua541f847\" data-lake-id=\"40e442ca4872ae0d2727bde9bce6c00e\" id=\"40e442ca4872ae0d2727bde9bce6c00e\"><span data-lake-id=\"u409d7897\" id=\"u409d7897\">通过Object.prototype.toString.call()做判断</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Object.prototype.toString.call(obj).slice(8%2C-1)%20%3D%3D%3D%20'Array'%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MCyBN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ub07cdc5f\"><li fid=\"u680e95c0\" data-lake-id=\"c850a84564d9a8b072d433792de9ce78\" id=\"c850a84564d9a8b072d433792de9ce78\"><span data-lake-id=\"u0949631c\" id=\"u0949631c\">通过原型链做判断</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22obj.__proto__%20%3D%3D%3D%20Array.prototype%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aPehq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u9f7c7615\"><li fid=\"u6bf86b78\" data-lake-id=\"e8d3c49d1aef22a9fc0903750f669686\" id=\"e8d3c49d1aef22a9fc0903750f669686\"><span data-lake-id=\"u2df1d8c4\" id=\"u2df1d8c4\">通过ES6的Array.isArray()做判断</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.isArrray(obj)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tuJQP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u684e0548\"><li fid=\"u3d0f6fe5\" data-lake-id=\"d3bbe8309e603b2de185edadcd5902de\" id=\"d3bbe8309e603b2de185edadcd5902de\"><span data-lake-id=\"u54be3a6f\" id=\"u54be3a6f\">通过instanceof做判断</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22obj%20instanceof%20Array%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UZnkO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"uc1a03444\"><li fid=\"u5bb2f572\" data-lake-id=\"a38f4838876b648ed193cc19aad92403\" id=\"a38f4838876b648ed193cc19aad92403\"><span data-lake-id=\"u1da1aafe\" id=\"u1da1aafe\">通过Array.prototype.isPrototypeOf</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.isPrototypeOf(obj)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PHWN3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"33dc21425256d1005df165d13b094116\" id=\"33dc21425256d1005df165d13b094116\"><span data-lake-id=\"uf89ce806\" id=\"uf89ce806\">4. null和undefined区别</span></h3><p data-lake-id=\"52f3d99b9c8217522c9b2287e371caab\" id=\"52f3d99b9c8217522c9b2287e371caab\"><span data-lake-id=\"ub59fe629\" id=\"ub59fe629\">首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。</span></p><p data-lake-id=\"5f790eec14985933c624c7d4f3d847a1\" id=\"5f790eec14985933c624c7d4f3d847a1\"><br></p><p data-lake-id=\"e87fd601b3db396adb260544cccbc67b\" id=\"e87fd601b3db396adb260544cccbc67b\"><span data-lake-id=\"ud65afd97\" id=\"ud65afd97\">undefined 代表的含义是</span><strong><span data-lake-id=\"ub50ba73d\" id=\"ub50ba73d\">未定义</span></strong><span data-lake-id=\"u7e1a4f95\" id=\"u7e1a4f95\">，null 代表的含义是</span><strong><span data-lake-id=\"u60a21937\" id=\"u60a21937\">空对象</span></strong><span data-lake-id=\"u1fed4d4a\" id=\"u1fed4d4a\">。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。</span></p><p data-lake-id=\"8b9c629128698f93b36e16dfe5bb97dd\" id=\"8b9c629128698f93b36e16dfe5bb97dd\"><br></p><p data-lake-id=\"4942c4961914b036cc0ce359e36cf0b0\" id=\"4942c4961914b036cc0ce359e36cf0b0\"><span data-lake-id=\"u646fe4d3\" id=\"u646fe4d3\">undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</span></p><p data-lake-id=\"40e4f8ef12ca26e56fd9a9c83022e25c\" id=\"40e4f8ef12ca26e56fd9a9c83022e25c\"><br></p><p data-lake-id=\"3afa1c36e0fc1c5bcba28dd5a8513ddf\" id=\"3afa1c36e0fc1c5bcba28dd5a8513ddf\"><span data-lake-id=\"u5c029752\" id=\"u5c029752\">当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。</span></p><h3 data-lake-id=\"edfc412378b08258c981598d449bdc9e\" id=\"edfc412378b08258c981598d449bdc9e\"><span data-lake-id=\"ud59dece1\" id=\"ud59dece1\">5. typeof null 的结果是什么，为什么？</span></h3><p data-lake-id=\"7672798053dec34475662c780c50c0d8\" id=\"7672798053dec34475662c780c50c0d8\"><span data-lake-id=\"u04b2bd41\" id=\"u04b2bd41\">typeof null 的结果是Object。</span></p><p data-lake-id=\"6343f6d0de8566a4479014fe9d379956\" id=\"6343f6d0de8566a4479014fe9d379956\"><br></p><p data-lake-id=\"562c9b44468d4baa1a4b23bc7d30a990\" id=\"562c9b44468d4baa1a4b23bc7d30a990\"><span data-lake-id=\"u5689b37c\" id=\"u5689b37c\">在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 </span><strong><span data-lake-id=\"ub58e111c\" id=\"ub58e111c\">类型标签(1-3 bits)</span></strong><span data-lake-id=\"u2cfed712\" id=\"u2cfed712\"> 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22000%3A%20object%20%20%20-%20%E5%BD%93%E5%89%8D%E5%AD%98%E5%82%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%87%E5%90%91%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E3%80%82%5Cn%20%201%3A%20int%20%20%20%20%20%20-%20%E5%BD%93%E5%89%8D%E5%AD%98%E5%82%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E4%B8%80%E4%B8%AA%2031%20%E4%BD%8D%E7%9A%84%E6%9C%89%E7%AC%A6%E5%8F%B7%E6%95%B4%E6%95%B0%E3%80%82%5Cn010%3A%20double%20%20%20-%20%E5%BD%93%E5%89%8D%E5%AD%98%E5%82%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%87%E5%90%91%E4%B8%80%E4%B8%AA%E5%8F%8C%E7%B2%BE%E5%BA%A6%E7%9A%84%E6%B5%AE%E7%82%B9%E6%95%B0%E3%80%82%5Cn100%3A%20string%20%20%20-%20%E5%BD%93%E5%89%8D%E5%AD%98%E5%82%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8C%87%E5%90%91%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82%5Cn110%3A%20boolean%20%20-%20%E5%BD%93%E5%89%8D%E5%AD%98%E5%82%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E6%98%AF%E5%B8%83%E5%B0%94%E5%80%BC%E3%80%82%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%223335e100%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"07ce3b0d2e6329fd8af9e84b3c9238d3\" id=\"07ce3b0d2e6329fd8af9e84b3c9238d3\"><span data-lake-id=\"u12afc6c1\" id=\"u12afc6c1\">如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。</span></p><p data-lake-id=\"ac148ad3a7f4e2789b3c3345d0ba8215\" id=\"ac148ad3a7f4e2789b3c3345d0ba8215\"><br></p><p data-lake-id=\"4221714cd5c7177443de2f28e33656e8\" id=\"4221714cd5c7177443de2f28e33656e8\"><span data-lake-id=\"ub56e82f5\" id=\"ub56e82f5\">有两种特殊数据类型：</span></p><ul list=\"u50a53d85\"><li fid=\"u7975d4df\" data-lake-id=\"d3bc67a1510543d34f1d64253eed42c9\" id=\"d3bc67a1510543d34f1d64253eed42c9\"><span data-lake-id=\"u99e21567\" id=\"u99e21567\">undefined的值是 (-2)</span><sup><span data-lake-id=\"ube4a21af\" id=\"ube4a21af\">30</span></sup><span data-lake-id=\"u010dd372\" id=\"u010dd372\">(一个超出整数范围的数字)；</span></li><li fid=\"u7975d4df\" data-lake-id=\"d71364a572c39e86add3d66cebcd44f1\" id=\"d71364a572c39e86add3d66cebcd44f1\"><span data-lake-id=\"u3e5ca5de\" id=\"u3e5ca5de\">null 的值是机器码 NULL 指针(null 指针的值全是 0)</span></li></ul><p data-lake-id=\"6e61bc262be9ec0b4d24c1b4e5f7f496\" id=\"6e61bc262be9ec0b4d24c1b4e5f7f496\"><br></p><p data-lake-id=\"00bdab137c20011fda6fa736cc73e1e0\" id=\"00bdab137c20011fda6fa736cc73e1e0\"><span data-lake-id=\"u4a1ccc00\" id=\"u4a1ccc00\">那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。</span></p><h3 data-lake-id=\"7576031dedce678e8eef7cd9937d6908\" id=\"7576031dedce678e8eef7cd9937d6908\"><span data-lake-id=\"u3847f357\" id=\"u3847f357\">6. intanceof 操作符的实现原理及实现</span></h3><p data-lake-id=\"f022788597dcdb2a8d7969d8c64c0a8b\" id=\"f022788597dcdb2a8d7969d8c64c0a8b\"><span data-lake-id=\"u2f16d396\" id=\"u2f16d396\"> instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20myInstanceof(left%2C%20right)%20%7B%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%9E%8B%5Cn%20%20let%20proto%20%3D%20Object.getPrototypeOf(left)%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%20prototype%20%E5%AF%B9%E8%B1%A1%5Cn%20%20let%20prototype%20%3D%20right.prototype%3B%20%5Cn%20%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%20prototype%20%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E5%9C%A8%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E4%B8%8A%5Cn%20%20while%20(true)%20%7B%5Cn%20%20%20%20if%20(!proto)%20return%20false%3B%5Cn%20%20%20%20if%20(proto%20%3D%3D%3D%20prototype)%20return%20true%3B%5Cn%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E6%89%BE%E5%88%B0%EF%BC%8C%E5%B0%B1%E7%BB%A7%E7%BB%AD%E4%BB%8E%E5%85%B6%E5%8E%9F%E5%9E%8B%E4%B8%8A%E6%89%BE%EF%BC%8CObject.getPrototypeOf%E6%96%B9%E6%B3%95%E7%94%A8%E6%9D%A5%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%9E%8B%5Cn%20%20%20%20proto%20%3D%20Object.getPrototypeOf(proto)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TVywQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"07bd225009b56575a79bacf9c659d4e7\" id=\"07bd225009b56575a79bacf9c659d4e7\"><span data-lake-id=\"u5857651c\" id=\"u5857651c\">7. 为什么0.1+0.2 ! == 0.3，如何让其相等  </span></h3><p data-lake-id=\"0e85426750586ce27bf1620b2a00e694\" id=\"0e85426750586ce27bf1620b2a00e694\"><span data-lake-id=\"ub256850f\" id=\"ub256850f\">在开发过程中遇到类似这样的问题：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20n1%20%3D%200.1%2C%20n2%20%3D%200.2%5Cnconsole.log(n1%20%2B%20n2)%20%20%2F%2F%200.30000000000000004%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%222a2cb89f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"cce621414c5672cbc1f6997ffbde51f4\" id=\"cce621414c5672cbc1f6997ffbde51f4\"><span data-lake-id=\"u04c8b34a\" id=\"u04c8b34a\">这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22(n1%20%2B%20n2).toFixed(2)%20%2F%2F%20%E6%B3%A8%E6%84%8F%EF%BC%8CtoFixed%E4%B8%BA%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22a4939622%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"696a1281370813d04fc221d2a8b558c8\" id=\"696a1281370813d04fc221d2a8b558c8\"><code data-lake-id=\"u18d88b91\" id=\"u18d88b91\"><span data-lake-id=\"u06e43fbf\" id=\"u06e43fbf\">toFixed(num)</span></code><span data-lake-id=\"u008b7ce4\" id=\"u008b7ce4\"> 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？</span></p><p data-lake-id=\"38df41df9025690dee1fb0608c25f391\" id=\"38df41df9025690dee1fb0608c25f391\"><br></p><p data-lake-id=\"a98d3be37b4bbbcd56ede89d4bbd1b80\" id=\"a98d3be37b4bbbcd56ede89d4bbd1b80\"><span data-lake-id=\"ud841e32f\" id=\"ud841e32f\">计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是</span><code data-lake-id=\"ud4aab658\" id=\"ud4aab658\"><span data-lake-id=\"ub4db0498\" id=\"ub4db0498\">0.0001100110011001100...</span></code><span data-lake-id=\"u642062df\" id=\"u642062df\">（1100循环），0.2的二进制是：</span><code data-lake-id=\"u14548b91\" id=\"u14548b91\"><span data-lake-id=\"uda0cb460\" id=\"uda0cb460\">0.00110011001100...</span></code><span data-lake-id=\"ue554e4d9\" id=\"ue554e4d9\">（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？</span></p><p data-lake-id=\"8d6e0d5e5dbd459a315b29eddfb4fd0c\" id=\"8d6e0d5e5dbd459a315b29eddfb4fd0c\"><br></p><p data-lake-id=\"52b636bb837390d2ac61b2df831c23f4\" id=\"52b636bb837390d2ac61b2df831c23f4\"><span data-lake-id=\"u8553680a\" id=\"u8553680a\">一般我们认为数字包括整数和小数，但是</span><span data-lake-id=\"ua2129f5f\" id=\"ua2129f5f\">在 JavaScript 中</span><span data-lake-id=\"u2ed5c323\" id=\"u2ed5c323\">只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。</span></p><p data-lake-id=\"b2f9f247a3da98dd182390c79de0b14f\" id=\"b2f9f247a3da98dd182390c79de0b14f\"><br></p><p data-lake-id=\"18a51b6fb4bb98503bc547add3b89412\" id=\"18a51b6fb4bb98503bc547add3b89412\"><span data-lake-id=\"u34412fd5\" id=\"u34412fd5\">根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：</span><code data-lake-id=\"ueb31b169\" id=\"ueb31b169\"><span data-lake-id=\"u0a740899\" id=\"u0a740899\">0.30000000000000004</span></code><span data-lake-id=\"u00d333ed\" id=\"u00d333ed\">。</span></p><p data-lake-id=\"e0b0b972c7f79ab62577d95929a4bd06\" id=\"e0b0b972c7f79ab62577d95929a4bd06\"><br></p><p data-lake-id=\"2a19922e1d1fda6ff91bbea15de83bcc\" id=\"2a19922e1d1fda6ff91bbea15de83bcc\"><span data-lake-id=\"u71a6abd1\" id=\"u71a6abd1\">下面看一下</span><strong><span data-lake-id=\"u448fb2af\" id=\"u448fb2af\">双精度数是如何保存</span></strong><span data-lake-id=\"u29d66ad5\" id=\"u29d66ad5\">的：</span></p><p data-lake-id=\"b21f57a9cc219665cb0a37a6e6798bcc\" id=\"b21f57a9cc219665cb0a37a6e6798bcc\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1603641384908-7958dffa-6d26-4e36-963e-b41c9e3ca8b0.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A720%2C%22height%22%3A160%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A720%2C%22originHeight%22%3A160%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23edf0f2%22%2C%22id%22%3A%22GENeZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ul list=\"u5c4daf34\"><li fid=\"ub59a1d39\" data-lake-id=\"f1d6ce58d104f24176862073abbf4057\" id=\"f1d6ce58d104f24176862073abbf4057\"><span data-lake-id=\"u73eb34b0\" id=\"u73eb34b0\">第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位</span></li><li fid=\"ub59a1d39\" data-lake-id=\"2a75070ca22bc861a3c51cedd65e8531\" id=\"2a75070ca22bc861a3c51cedd65e8531\"><span data-lake-id=\"u256bb1c2\" id=\"u256bb1c2\">第二部分（绿色）：用来存储指数（exponent），占用11位</span></li><li fid=\"ub59a1d39\" data-lake-id=\"f3d3b621fa1734a38c23d74ee219a49d\" id=\"f3d3b621fa1734a38c23d74ee219a49d\"><span data-lake-id=\"udc252547\" id=\"udc252547\">第三部分（红色）：用来存储小数（fraction），占用52位</span></li></ul><p data-lake-id=\"ef7f258dc2c1058bff2eff8059f07585\" id=\"ef7f258dc2c1058bff2eff8059f07585\"><br></p><p data-lake-id=\"7ba2d73a805b2de7a873f3c54b0f10b3\" id=\"7ba2d73a805b2de7a873f3c54b0f10b3\"><span data-lake-id=\"u5967fb30\" id=\"u5967fb30\">对于0.1，它的二进制为：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220.00011001100110011001100110011001100110011001100110011001%2010011...%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%229fada913%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4d0cc77045857c6fea6629eb4ce43566\" id=\"4d0cc77045857c6fea6629eb4ce43566\"><span data-lake-id=\"u2d5c361a\" id=\"u2d5c361a\">转为科学计数法（科学计数法的结果就是浮点数）：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%221.1001100110011001100110011001100110011001100110011001*2%5E-4%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%227882e38e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b9b2ad4a6ad4bc10f64a83288e497bc9\" id=\"b9b2ad4a6ad4bc10f64a83288e497bc9\"><span data-lake-id=\"u229847b8\" id=\"u229847b8\">可以看出0.1的符号位为0，指数位为-4，小数位为：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%221001100110011001100110011001100110011001100110011001%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22javascript1001100110011001100110011001100110011001100110011001%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"87aca4c11908d24a3714d62dc1aa0f30\" id=\"87aca4c11908d24a3714d62dc1aa0f30\"><span data-lake-id=\"uaa6838ac\" id=\"uaa6838ac\">那么问题又来了，</span><strong><span data-lake-id=\"u6eac337e\" id=\"u6eac337e\">指数位是负数，该如何保存</span></strong><span data-lake-id=\"u962226c4\" id=\"u962226c4\">呢？</span></p><p data-lake-id=\"1f075a4509f8b190ac6786ae5a9278a4\" id=\"1f075a4509f8b190ac6786ae5a9278a4\"><br></p><p data-lake-id=\"304b8cd36d08f34fcbe3e4879aeb6fac\" id=\"304b8cd36d08f34fcbe3e4879aeb6fac\"><span data-lake-id=\"ub84321cc\" id=\"ub84321cc\">IEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定</span><strong><span data-lake-id=\"ubfd9af6e\" id=\"ubfd9af6e\">双精度数的偏移量为1023</span></strong><span data-lake-id=\"ue0f935e0\" id=\"ue0f935e0\">。</span></p><p data-lake-id=\"ca6ec37b31d26a1469ab57425d55d74e\" id=\"ca6ec37b31d26a1469ab57425d55d74e\"><br></p><ul list=\"u8b6d48c4\"><li fid=\"u00853a89\" data-lake-id=\"f8634e1996d961e28bc0aa14ccdfa3e5\" id=\"f8634e1996d961e28bc0aa14ccdfa3e5\"><span data-lake-id=\"u698f61d5\" id=\"u698f61d5\">当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023= -1022，e最大值是2046，则2046-1023=1023，可以看到，这种情况下取值范围是</span><code data-lake-id=\"u35fd75e4\" id=\"u35fd75e4\"><span data-lake-id=\"uc2d4156d\" id=\"uc2d4156d\">-1022~1013</span></code><span data-lake-id=\"u42b5d712\" id=\"u42b5d712\">。</span></li><li fid=\"u00853a89\" data-lake-id=\"97f31f0d4a1a3f6beb58b3c3d2118924\" id=\"97f31f0d4a1a3f6beb58b3c3d2118924\"><span data-lake-id=\"u8eff8bb1\" id=\"u8eff8bb1\">当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023= -1022。</span></li><li fid=\"u00853a89\" data-lake-id=\"3042bcff739ff1f6fe3cbeed6ba5c659\" id=\"3042bcff739ff1f6fe3cbeed6ba5c659\"><span data-lake-id=\"ud6b37368\" id=\"ud6b37368\">当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s=0时表示正无穷，s=1时候表示负无穷。</span></li></ul><p data-lake-id=\"96ef0432577597cc4c89ba722ae72d87\" id=\"96ef0432577597cc4c89ba722ae72d87\"><br></p><p data-lake-id=\"1cb4e1dd8bc8492e80429edab0a8dc5a\" id=\"1cb4e1dd8bc8492e80429edab0a8dc5a\"><span data-lake-id=\"ufdeacc34\" id=\"ufdeacc34\">对于上面的0.1的指数位为-4，-4+1023 = 1019 转化为二进制就是：</span><code data-lake-id=\"ub7acb6af\" id=\"ub7acb6af\"><span data-lake-id=\"uc04873f8\" id=\"uc04873f8\">1111111011</span></code><span data-lake-id=\"u02f00fc8\" id=\"u02f00fc8\">.</span></p><p data-lake-id=\"337ead88ba99346465662699b04373ad\" id=\"337ead88ba99346465662699b04373ad\"><br></p><p data-lake-id=\"458f373019a2049fd9b0fe5096c6ad6a\" id=\"458f373019a2049fd9b0fe5096c6ad6a\"><span data-lake-id=\"ub4d3b423\" id=\"ub4d3b423\">所以，0.1表示为：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220%201111111011%201001100110011001100110011001100110011001100110011001%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%221d260db9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"485bd3abfc1ba43c6213b9f87e6c2fd0\" id=\"485bd3abfc1ba43c6213b9f87e6c2fd0\"><span data-lake-id=\"u079e281b\" id=\"u079e281b\">说了这么多，是时候该最开始的问题了，如何实现0.1+0.2=0.3呢？</span></p><p data-lake-id=\"94ff45c58e43e06f6951679474bebb1d\" id=\"94ff45c58e43e06f6951679474bebb1d\"><br></p><p data-lake-id=\"ce5f63f6c454e8a38dd54fb4a0c84f6e\" id=\"ce5f63f6c454e8a38dd54fb4a0c84f6e\"><span data-lake-id=\"u820d71ef\" id=\"u820d71ef\">对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2</span><sup><span data-lake-id=\"ubc1a80e2\" id=\"ubc1a80e2\">-52</span></sup><span data-lake-id=\"u16570b8d\" id=\"u16570b8d\">，在ES6中，提供了</span><code data-lake-id=\"u39624cf7\" id=\"u39624cf7\"><span data-lake-id=\"ucf5ea301\" id=\"ucf5ea301\">Number.EPSILON</span></code><span data-lake-id=\"u1a1ed12c\" id=\"u1a1ed12c\">属性，而它的值就是2</span><sup><span data-lake-id=\"ub34a9ab0\" id=\"ub34a9ab0\">-52</span></sup><span data-lake-id=\"u8e8fda3b\" id=\"u8e8fda3b\">，只要判断</span><code data-lake-id=\"u256dc3e1\" id=\"u256dc3e1\"><span data-lake-id=\"u50bad6a4\" id=\"u50bad6a4\">0.1+0.2-0.3</span></code><span data-lake-id=\"ucff3b477\" id=\"ucff3b477\">是否小于</span><code data-lake-id=\"u2853c1b0\" id=\"u2853c1b0\"><span data-lake-id=\"u0dce4374\" id=\"u0dce4374\">Number.EPSILON</span></code><span data-lake-id=\"ub6663a9a\" id=\"ub6663a9a\">，如果小于，就可以判断为0.1+0.2 ===0.3</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20numberepsilon(arg1%2Carg2)%7B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5Cn%20%20return%20Math.abs(arg1%20-%20arg2)%20%3C%20Number.EPSILON%3B%20%20%20%20%20%20%20%20%5Cn%7D%20%20%20%20%20%20%20%20%5Cn%5Cnconsole.log(numberepsilon(0.1%20%2B%200.2%2C%200.3))%3B%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%220da3e13a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"3cda29aaf2a57fa7aa882e6f81c77f70\" id=\"3cda29aaf2a57fa7aa882e6f81c77f70\"><span data-lake-id=\"u77591646\" id=\"u77591646\">8. 如何获取安全的 undefined 值？</span></h3><p data-lake-id=\"838f052429ffb5426d6528d2be70d207\" id=\"838f052429ffb5426d6528d2be70d207\"><span data-lake-id=\"u1e3f26b6\" id=\"u1e3f26b6\">因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。表达式 void ___ 没有返回值，因此返回结果是 undefined。void 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。</span></p><h3 data-lake-id=\"04c445b5190fcd58ee16631ed86847aa\" id=\"04c445b5190fcd58ee16631ed86847aa\"><span data-lake-id=\"u80f8e21a\" id=\"u80f8e21a\">9. typeof NaN 的结果是什么？</span></h3><p data-lake-id=\"9e0655bde753cc6764f0dfc9c69f7e63\" id=\"9e0655bde753cc6764f0dfc9c69f7e63\"><span data-lake-id=\"u8e660708\" id=\"u8e660708\">NaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22typeof%20NaN%3B%20%2F%2F%20%5C%22number%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22s3hnq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"7f7776ca37689d116b4ab403f9aef93d\" id=\"7f7776ca37689d116b4ab403f9aef93d\"><span data-lake-id=\"uc58a251b\" id=\"uc58a251b\">NaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。</span></p><h3 data-lake-id=\"6a09cb8ed5ffa8e35a8ec1e70cf0ad23\" id=\"6a09cb8ed5ffa8e35a8ec1e70cf0ad23\"><span data-lake-id=\"u685d6c8f\" id=\"u685d6c8f\">10. isNaN 和 Number.isNaN 函数的区别？</span></h3><ul list=\"u4a8e1112\"><li fid=\"u8da2a841\" data-lake-id=\"a830b8cb259e9e24b32d961753910c3f\" id=\"a830b8cb259e9e24b32d961753910c3f\"><span data-lake-id=\"u1640d72a\" id=\"u1640d72a\">函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。</span></li><li fid=\"u8da2a841\" data-lake-id=\"d68db001d473ed4bfdde5b21e7d451e0\" id=\"d68db001d473ed4bfdde5b21e7d451e0\"><span data-lake-id=\"ud0558080\" id=\"ud0558080\">函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。</span></li></ul><h3 data-lake-id=\"04f31abe4c1e63ee2f90c3ecfe8ebd6a\" id=\"04f31abe4c1e63ee2f90c3ecfe8ebd6a\"><span data-lake-id=\"uc661b335\" id=\"uc661b335\">11. 其他值到字符串的转换规则？</span></h3><ul list=\"u05381b10\"><li fid=\"u8a8927c3\" data-lake-id=\"a561772e840b471cffdb5e72d0f619db\" id=\"a561772e840b471cffdb5e72d0f619db\"><span data-lake-id=\"u55e74b6f\" id=\"u55e74b6f\">Null 和 Undefined 类型 ，null 转换为 &quot;null&quot;，undefined 转换为 &quot;undefined&quot;，</span></li><li fid=\"u8a8927c3\" data-lake-id=\"15c67118d6ec2c7b3e6ec2307b46cc50\" id=\"15c67118d6ec2c7b3e6ec2307b46cc50\"><span data-lake-id=\"u578efe40\" id=\"u578efe40\">Boolean 类型，true 转换为 &quot;true&quot;，false 转换为 &quot;false&quot;。</span></li><li fid=\"u8a8927c3\" data-lake-id=\"ecef2980beb2d6b6689ae212a627409b\" id=\"ecef2980beb2d6b6689ae212a627409b\"><span data-lake-id=\"u44de8e4e\" id=\"u44de8e4e\">Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。</span></li><li fid=\"u8a8927c3\" data-lake-id=\"986b781b5f948bb3325ae241302f4076\" id=\"986b781b5f948bb3325ae241302f4076\"><span data-lake-id=\"uca5057b9\" id=\"uca5057b9\">Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。</span></li><li fid=\"u8a8927c3\" data-lake-id=\"40587799cc47044b5dd6c8ff71dc0fbc\" id=\"40587799cc47044b5dd6c8ff71dc0fbc\"><span data-lake-id=\"ua4059151\" id=\"ua4059151\">对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如&quot;[object Object]&quot;。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。</span></li></ul><h3 data-lake-id=\"599b727f30e94a672a0849706fc87295\" id=\"599b727f30e94a672a0849706fc87295\"><span data-lake-id=\"uab18ab5f\" id=\"uab18ab5f\">12. 其他值到数字值的转换规则？</span></h3><ul list=\"u2b841242\"><li fid=\"u9c60091a\" data-lake-id=\"5c76559a6572928f00f3afe7f31ac99b\" id=\"5c76559a6572928f00f3afe7f31ac99b\"><span data-lake-id=\"u588d7187\" id=\"u588d7187\">Undefined 类型的值转换为 NaN。</span></li><li fid=\"u9c60091a\" data-lake-id=\"bd4bc56fe0dc872536b823c6b5d54fe0\" id=\"bd4bc56fe0dc872536b823c6b5d54fe0\"><span data-lake-id=\"ufb3d3c33\" id=\"ufb3d3c33\">Null 类型的值转换为 0。</span></li><li fid=\"u9c60091a\" data-lake-id=\"135bb8e6a7f35aa1e7182c5e9a3db214\" id=\"135bb8e6a7f35aa1e7182c5e9a3db214\"><span data-lake-id=\"u2f45fc0f\" id=\"u2f45fc0f\">Boolean 类型的值，true 转换为 1，false 转换为 0。</span></li><li fid=\"u9c60091a\" data-lake-id=\"f6e927046b971b2422110b8ecac4ea96\" id=\"f6e927046b971b2422110b8ecac4ea96\"><span data-lake-id=\"u7bf84640\" id=\"u7bf84640\">String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。</span></li><li fid=\"u9c60091a\" data-lake-id=\"080fe13e8cefb0a09dc048b0d2f9675a\" id=\"080fe13e8cefb0a09dc048b0d2f9675a\"><span data-lake-id=\"ud579fe1a\" id=\"ud579fe1a\">Symbol 类型的值不能转换为数字，会报错。</span></li><li fid=\"u9c60091a\" data-lake-id=\"f69d8c34b2748a81232f6f309f28d164\" id=\"f69d8c34b2748a81232f6f309f28d164\"><span data-lake-id=\"u6d3ab06b\" id=\"u6d3ab06b\">对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</span></li></ul><p data-lake-id=\"1716a207d85ddf00681836cd1854192b\" id=\"1716a207d85ddf00681836cd1854192b\"><br></p><p data-lake-id=\"c722c241cd1e9d9d807180c4e0395748\" id=\"c722c241cd1e9d9d807180c4e0395748\"><span data-lake-id=\"u0a37ab36\" id=\"u0a37ab36\">为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。</span></p><p data-lake-id=\"ce81e90982e9c2a355404af4bd25a63f\" id=\"ce81e90982e9c2a355404af4bd25a63f\"><br></p><p data-lake-id=\"962f8a47ac869e560d35f3d7e2ea8dba\" id=\"962f8a47ac869e560d35f3d7e2ea8dba\"><span data-lake-id=\"u4cc9ca47\" id=\"u4cc9ca47\">如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。</span></p><h3 data-lake-id=\"c88c8cd9ece6179ab362e5f932091d91\" id=\"c88c8cd9ece6179ab362e5f932091d91\"><span data-lake-id=\"u0d8fca93\" id=\"u0d8fca93\">13. 其他值到布尔类型的值的转换规则？</span></h3><p data-lake-id=\"80e8472098d9ffa7e2eff17c1e4b75bf\" id=\"80e8472098d9ffa7e2eff17c1e4b75bf\"><span data-lake-id=\"u9c28de17\" id=\"u9c28de17\">以下这些是假值：</span></p><p data-lake-id=\"e70fffd4fdabfabdf134cf6774db00c6\" id=\"e70fffd4fdabfabdf134cf6774db00c6\"><span data-lake-id=\"uaaefaefe\" id=\"uaaefaefe\">• undefined</span></p><p data-lake-id=\"0c04577c1a9f93dfe930f57313aef516\" id=\"0c04577c1a9f93dfe930f57313aef516\"><span data-lake-id=\"u05409b69\" id=\"u05409b69\">• null</span></p><p data-lake-id=\"625ac2901aa99b015b13abfb263beaba\" id=\"625ac2901aa99b015b13abfb263beaba\"><span data-lake-id=\"udcb77f1b\" id=\"udcb77f1b\">• false</span></p><p data-lake-id=\"b50bf6b693d026454acf8642ab6cf435\" id=\"b50bf6b693d026454acf8642ab6cf435\"><span data-lake-id=\"u15340135\" id=\"u15340135\">• +0、-0 和 NaN</span></p><p data-lake-id=\"83347c7e541eb550e9972255774caee0\" id=\"83347c7e541eb550e9972255774caee0\"><span data-lake-id=\"u771059b1\" id=\"u771059b1\">• &quot;&quot;</span></p><p data-lake-id=\"38747b4c44ec83fae0862966e86dcad4\" id=\"38747b4c44ec83fae0862966e86dcad4\"><br></p><p data-lake-id=\"5d46a0bb983c395981a4dff3f6d0e205\" id=\"5d46a0bb983c395981a4dff3f6d0e205\"><span data-lake-id=\"u0a061ebb\" id=\"u0a061ebb\">假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。</span></p><h3 data-lake-id=\"1c5bfd93ef1f3e633d32b6871b57cf60\" id=\"1c5bfd93ef1f3e633d32b6871b57cf60\"><span data-lake-id=\"uc23754e9\" id=\"uc23754e9\">14. || 和 &amp;&amp; 操作符的返回值？</span></h3><p data-lake-id=\"359280ea93c46664bec7d19f349c713b\" id=\"359280ea93c46664bec7d19f349c713b\"><span data-lake-id=\"u6c6767c9\" id=\"u6c6767c9\">|| 和 &amp;&amp; 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。</span></p><p data-lake-id=\"5bd2c9a57a2714e70ad52c6a1523c023\" id=\"5bd2c9a57a2714e70ad52c6a1523c023\"><br></p><ul list=\"u8a33fb4a\"><li fid=\"u70df91f8\" data-lake-id=\"9a24aaaf597973b71da7c997138385ce\" id=\"9a24aaaf597973b71da7c997138385ce\"><span data-lake-id=\"ud73e016b\" id=\"ud73e016b\">对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。</span></li><li fid=\"u70df91f8\" data-lake-id=\"8539c733030c1b96fc77f3de15c453af\" id=\"8539c733030c1b96fc77f3de15c453af\"><span data-lake-id=\"u3d60e164\" id=\"u3d60e164\">&amp;&amp; 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。</span></li></ul><p data-lake-id=\"28d2fe8b39ef31faa20a3ab9d7b8b870\" id=\"28d2fe8b39ef31faa20a3ab9d7b8b870\"><br></p><p data-lake-id=\"2853cb6928a7c20a520ef38ee4d3e86d\" id=\"2853cb6928a7c20a520ef38ee4d3e86d\"><span data-lake-id=\"uf3b37f58\" id=\"uf3b37f58\">|| 和 &amp;&amp; 返回它们其中一个操作数的值，而非条件判断的结果</span></p><h3 data-lake-id=\"2de66af6f846c3f2f61cfac1468da066\" id=\"2de66af6f846c3f2f61cfac1468da066\"><span data-lake-id=\"ueb653861\" id=\"ueb653861\">15. Object.is() 与比较操作符 “===”、“==” 的区别？</span></h3><ul list=\"u1b50c808\"><li fid=\"u7abb7d84\" data-lake-id=\"f176ed74e58df6167dccaf00daec43f0\" id=\"f176ed74e58df6167dccaf00daec43f0\"><span data-lake-id=\"u85609038\" id=\"u85609038\">使用双等号（</span><span data-lake-id=\"u9b94efae\" id=\"u9b94efae\">==</span><span data-lake-id=\"u0931980f\" id=\"u0931980f\">）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。</span></li><li fid=\"u7abb7d84\" data-lake-id=\"1390bceba191dd6110314186fad20e92\" id=\"1390bceba191dd6110314186fad20e92\"><span data-lake-id=\"u798d2b8d\" id=\"u798d2b8d\">使用三等号（</span><span data-lake-id=\"u79ca5332\" id=\"u79ca5332\">===</span><span data-lake-id=\"uc50cd079\" id=\"uc50cd079\">）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。</span></li><li fid=\"u7abb7d84\" data-lake-id=\"efe8a807eebbb734e6121103463c2218\" id=\"efe8a807eebbb734e6121103463c2218\"><span data-lake-id=\"u121238a2\" id=\"u121238a2\">使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。</span></li></ul><h3 data-lake-id=\"6dba8d284f926a523f528f14537fa390\" id=\"6dba8d284f926a523f528f14537fa390\"><span data-lake-id=\"u70f30996\" id=\"u70f30996\">16. 什么是 JavaScript 中的包装类型？</span></h3><p data-lake-id=\"0ad660c5487f29bb0b44973a697006c7\" id=\"0ad660c5487f29bb0b44973a697006c7\"><span data-lake-id=\"u722c5101\" id=\"u722c5101\">在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20a%20%3D%20%5C%22abc%5C%22%3B%5Cna.length%3B%20%2F%2F%203%5Cna.toUpperCase()%3B%20%2F%2F%20%5C%22ABC%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22LcyMP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"7f38b313ebc637d1cb8a34d8f22b3e97\" id=\"7f38b313ebc637d1cb8a34d8f22b3e97\" style=\"text-align: justify\"><span data-lake-id=\"u6f81b72e\" id=\"u6f81b72e\">在访问</span><code data-lake-id=\"uaa53f6d9\" id=\"uaa53f6d9\"><span data-lake-id=\"u302d82d0\" id=\"u302d82d0\">'abc'.length</span></code><span data-lake-id=\"u00c5ec52\" id=\"u00c5ec52\">时，JavaScript 将</span><code data-lake-id=\"u152b87be\" id=\"u152b87be\"><span data-lake-id=\"uf4ddc597\" id=\"uf4ddc597\">'abc'</span></code><span data-lake-id=\"u4388f447\" id=\"u4388f447\">在后台转换成</span><code data-lake-id=\"ub9a2c318\" id=\"ub9a2c318\"><span data-lake-id=\"u4738550c\" id=\"u4738550c\">String('abc')</span></code><span data-lake-id=\"u13edaccf\" id=\"u13edaccf\">，然后再访问其</span><code data-lake-id=\"ub84bc8b5\" id=\"ub84bc8b5\"><span data-lake-id=\"ua2fae380\" id=\"ua2fae380\">length</span></code><span data-lake-id=\"u50d9ad34\" id=\"u50d9ad34\">属性。</span></p><p data-lake-id=\"607eaff99fd2ca439754f0149810bdef\" id=\"607eaff99fd2ca439754f0149810bdef\"><br></p><p data-lake-id=\"5d995d25ecdd2f3536690b878e151ce2\" id=\"5d995d25ecdd2f3536690b878e151ce2\" style=\"text-align: justify\"><span data-lake-id=\"u170a32de\" id=\"u170a32de\">JavaScript也可以使用</span><code data-lake-id=\"u59e7a191\" id=\"u59e7a191\"><span data-lake-id=\"ue0069984\" id=\"ue0069984\">Object</span></code><span data-lake-id=\"u935a29db\" id=\"u935a29db\">函数显式地将基本类型转换为包装类型：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20a%20%3D%20'abc'%5CnObject(a)%20%2F%2F%20String%20%7B%5C%22abc%5C%22%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22T8FEx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"5f925d5309d342daa7aace67c0d673ea\" id=\"5f925d5309d342daa7aace67c0d673ea\" style=\"text-align: justify\"><span data-lake-id=\"u8bd195cd\" id=\"u8bd195cd\">也可以使用</span><code data-lake-id=\"u914802ec\" id=\"u914802ec\"><span data-lake-id=\"u1330911c\" id=\"u1330911c\">valueOf</span></code><span data-lake-id=\"uf546628a\" id=\"uf546628a\">方法将包装类型倒转成基本类型：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20a%20%3D%20'abc'%5Cnvar%20b%20%3D%20Object(a)%5Cnvar%20c%20%3D%20b.valueOf()%20%2F%2F%20'abc'%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kbA6S%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b1785598015fbb72a44c0824e65e8cb8\" id=\"b1785598015fbb72a44c0824e65e8cb8\" style=\"text-align: justify\"><span data-lake-id=\"uea224ff9\" id=\"uea224ff9\">看看如下代码会打印出什么：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20a%20%3D%20new%20Boolean(%20false%20)%3B%5Cnif%20(!a)%20%7B%5Cn%5Ctconsole.log(%20%5C%22Oops%5C%22%20)%3B%20%2F%2F%20never%20runs%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MEDsz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f11db35196cf8c5b222560bf7ba230ff\" id=\"f11db35196cf8c5b222560bf7ba230ff\" style=\"text-align: justify\"><span data-lake-id=\"u5c33f85e\" id=\"u5c33f85e\">答案是什么都不会打印，因为虽然包裹的基本类型是</span><code data-lake-id=\"u35310b70\" id=\"u35310b70\"><span data-lake-id=\"u29af7aa2\" id=\"u29af7aa2\">false</span></code><span data-lake-id=\"ubaced14a\" id=\"ubaced14a\">，但是</span><code data-lake-id=\"ua34dd5d6\" id=\"ua34dd5d6\"><span data-lake-id=\"u7cbf9b8a\" id=\"u7cbf9b8a\">false</span></code><span data-lake-id=\"ubd098ce6\" id=\"ubd098ce6\">被包裹成包装类型后就成了对象，所以其非值为</span><code data-lake-id=\"u15fd1d56\" id=\"u15fd1d56\"><span data-lake-id=\"u26c4652c\" id=\"u26c4652c\">false</span></code><span data-lake-id=\"ua53a19bc\" id=\"ua53a19bc\">，所以循环体中的内容不会运行。</span></p><h3 data-lake-id=\"99c228f11cd3f0351a74526806f81137\" id=\"99c228f11cd3f0351a74526806f81137\"><span data-lake-id=\"u3df14964\" id=\"u3df14964\">17. JavaScript 中如何进行隐式类型转换？</span></h3><p data-lake-id=\"ef25db434f058e57d01f05b32716c9eb\" id=\"ef25db434f058e57d01f05b32716c9eb\"><span data-lake-id=\"u20080309\" id=\"u20080309\">首先要介绍</span><code data-lake-id=\"u2e49c078\" id=\"u2e49c078\"><span data-lake-id=\"u1b2287e8\" id=\"u1b2287e8\">ToPrimitive</span></code><span data-lake-id=\"u2a9bb243\" id=\"u2a9bb243\">方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F**%5Cn*%20%40obj%20%E9%9C%80%E8%A6%81%E8%BD%AC%E6%8D%A2%E7%9A%84%E5%AF%B9%E8%B1%A1%5Cn*%20%40type%20%E6%9C%9F%E6%9C%9B%E7%9A%84%E7%BB%93%E6%9E%9C%E7%B1%BB%E5%9E%8B%5Cn*%2F%5CnToPrimitive(obj%2Ctype)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GmSiQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3b86d1070a058e1dd23e86527aede8f3\" id=\"3b86d1070a058e1dd23e86527aede8f3\" style=\"text-align: justify\"><code data-lake-id=\"u2ed8dbc4\" id=\"u2ed8dbc4\"><span data-lake-id=\"ud8850e0a\" id=\"ud8850e0a\">type</span></code><span data-lake-id=\"u16bb8b65\" id=\"u16bb8b65\">的值为</span><code data-lake-id=\"u9b57030e\" id=\"u9b57030e\"><span data-lake-id=\"u1b72cf40\" id=\"u1b72cf40\">number</span></code><span data-lake-id=\"u2b80edbd\" id=\"u2b80edbd\">或者</span><code data-lake-id=\"u77372849\" id=\"u77372849\"><span data-lake-id=\"ube81a896\" id=\"ube81a896\">string</span></code><span data-lake-id=\"u0702e26f\" id=\"u0702e26f\">。</span></p><p data-lake-id=\"7d6ca1e4bb09e1bdffab276e59662bda\" id=\"7d6ca1e4bb09e1bdffab276e59662bda\"><strong><span data-lake-id=\"u9c00a894\" id=\"u9c00a894\">（1）当</span></strong><code data-lake-id=\"u92b056d0\" id=\"u92b056d0\"><strong><span data-lake-id=\"u3599201c\" id=\"u3599201c\">type</span></strong></code><strong><span data-lake-id=\"u04372eb0\" id=\"u04372eb0\">为</span></strong><code data-lake-id=\"uf12132ce\" id=\"uf12132ce\"><strong><span data-lake-id=\"ub97caf24\" id=\"ub97caf24\">number</span></strong></code><strong><span data-lake-id=\"u001fdcb7\" id=\"u001fdcb7\">时规则如下：</span></strong></p><ul list=\"ud0ce415c\"><li fid=\"ud999024c\" data-lake-id=\"facda6e4e1a1d9dfe796f35312496867\" id=\"facda6e4e1a1d9dfe796f35312496867\"><span data-lake-id=\"uedb9b21e\" id=\"uedb9b21e\">调用</span><code data-lake-id=\"uc34f9d62\" id=\"uc34f9d62\"><span data-lake-id=\"u6aa49bfa\" id=\"u6aa49bfa\">obj</span></code><span data-lake-id=\"udd158bce\" id=\"udd158bce\">的</span><code data-lake-id=\"u5ac874ae\" id=\"u5ac874ae\"><span data-lake-id=\"ud47a7962\" id=\"ud47a7962\">valueOf</span></code><span data-lake-id=\"u472990a8\" id=\"u472990a8\">方法，如果为原始值，则返回，否则下一步；</span></li><li fid=\"ud999024c\" data-lake-id=\"1931090aefa58ba35f04e361c5199141\" id=\"1931090aefa58ba35f04e361c5199141\"><span data-lake-id=\"u52b5bec9\" id=\"u52b5bec9\">调用</span><code data-lake-id=\"u9bbb55aa\" id=\"u9bbb55aa\"><span data-lake-id=\"u551dd461\" id=\"u551dd461\">obj</span></code><span data-lake-id=\"uc99cb8ab\" id=\"uc99cb8ab\">的</span><code data-lake-id=\"ud7cba710\" id=\"ud7cba710\"><span data-lake-id=\"ub6211f03\" id=\"ub6211f03\">toString</span></code><span data-lake-id=\"u41188490\" id=\"u41188490\">方法，后续同上；</span></li><li fid=\"ud999024c\" data-lake-id=\"63a380c02c086e5dce1483ada557b8e8\" id=\"63a380c02c086e5dce1483ada557b8e8\"><span data-lake-id=\"u40d3281d\" id=\"u40d3281d\">抛出</span><code data-lake-id=\"u3ac10601\" id=\"u3ac10601\"><span data-lake-id=\"u70fc5e85\" id=\"u70fc5e85\">TypeError</span></code><span data-lake-id=\"ue759f75c\" id=\"ue759f75c\"> 异常。</span></li></ul><p data-lake-id=\"4e96904f119e2c8f9552b47d1a38b26f\" id=\"4e96904f119e2c8f9552b47d1a38b26f\"><strong><span data-lake-id=\"ua1ec22fb\" id=\"ua1ec22fb\">（2）当</span></strong><code data-lake-id=\"u4d53bb5c\" id=\"u4d53bb5c\"><strong><span data-lake-id=\"u85706bd8\" id=\"u85706bd8\">type</span></strong></code><strong><span data-lake-id=\"ufd23af13\" id=\"ufd23af13\">为</span></strong><code data-lake-id=\"u16cb0a61\" id=\"u16cb0a61\"><strong><span data-lake-id=\"u95354934\" id=\"u95354934\">string</span></strong></code><strong><span data-lake-id=\"ude6f9826\" id=\"ude6f9826\">时规则如下：</span></strong></p><ul list=\"ue6c58bbe\"><li fid=\"uf39054bd\" data-lake-id=\"d937ee9a599e8f33e48d4ab18f99020f\" id=\"d937ee9a599e8f33e48d4ab18f99020f\"><span data-lake-id=\"u435dc55b\" id=\"u435dc55b\">调用</span><code data-lake-id=\"u767c522a\" id=\"u767c522a\"><span data-lake-id=\"uf8ae7842\" id=\"uf8ae7842\">obj</span></code><span data-lake-id=\"u0cf0a982\" id=\"u0cf0a982\">的</span><code data-lake-id=\"u85126ef3\" id=\"u85126ef3\"><span data-lake-id=\"ua671fbec\" id=\"ua671fbec\">toString</span></code><span data-lake-id=\"u765bcd93\" id=\"u765bcd93\">方法，如果为原始值，则返回，否则下一步；</span></li><li fid=\"uf39054bd\" data-lake-id=\"04ed1540694a5b217b94cb6a33f777d5\" id=\"04ed1540694a5b217b94cb6a33f777d5\"><span data-lake-id=\"u8eb2d3d8\" id=\"u8eb2d3d8\">调用</span><code data-lake-id=\"u17bb9207\" id=\"u17bb9207\"><span data-lake-id=\"u6e87decf\" id=\"u6e87decf\">obj</span></code><span data-lake-id=\"u20e7e6ed\" id=\"u20e7e6ed\">的</span><code data-lake-id=\"u4f83f64b\" id=\"u4f83f64b\"><span data-lake-id=\"ude05db69\" id=\"ude05db69\">valueOf</span></code><span data-lake-id=\"u3290bf11\" id=\"u3290bf11\">方法，后续同上；</span></li><li fid=\"uf39054bd\" data-lake-id=\"3d60947f00c758f6bcb9cf867446eee4\" id=\"3d60947f00c758f6bcb9cf867446eee4\"><span data-lake-id=\"u90cec953\" id=\"u90cec953\">抛出</span><code data-lake-id=\"ua1101403\" id=\"ua1101403\"><span data-lake-id=\"ud664fa29\" id=\"ud664fa29\">TypeError</span></code><span data-lake-id=\"u7fcde1c6\" id=\"u7fcde1c6\"> 异常。</span></li></ul><p data-lake-id=\"f9172afdd82551938e25624e7c01a87e\" id=\"f9172afdd82551938e25624e7c01a87e\" style=\"text-align: justify\"><br></p><p data-lake-id=\"c4ab569234f4ddc4b0a4b6600e4f5756\" id=\"c4ab569234f4ddc4b0a4b6600e4f5756\" style=\"text-align: justify\"><span data-lake-id=\"ud97f9ebb\" id=\"ud97f9ebb\">可以看出两者的主要区别在于调用</span><code data-lake-id=\"u498344fe\" id=\"u498344fe\"><span data-lake-id=\"u6f0c11e4\" id=\"u6f0c11e4\">toString</span></code><span data-lake-id=\"u6adafd0c\" id=\"u6adafd0c\">和</span><code data-lake-id=\"u5a2d666e\" id=\"u5a2d666e\"><span data-lake-id=\"u8c85c650\" id=\"u8c85c650\">valueOf</span></code><span data-lake-id=\"uce9b9bfb\" id=\"uce9b9bfb\">的先后顺序。默认情况下：</span></p><ul list=\"u5fa6d394\"><li fid=\"u8fbe883f\" data-lake-id=\"343892564cc21632a9d534a5b0bb5740\" id=\"343892564cc21632a9d534a5b0bb5740\"><span data-lake-id=\"u611affbd\" id=\"u611affbd\">如果对象为 Date 对象，则</span><code data-lake-id=\"uc952f6e2\" id=\"uc952f6e2\"><span data-lake-id=\"ubfbcc0d7\" id=\"ubfbcc0d7\">type</span></code><span data-lake-id=\"u7414967a\" id=\"u7414967a\">默认为</span><code data-lake-id=\"ub60082d6\" id=\"ub60082d6\"><span data-lake-id=\"u2d56fb71\" id=\"u2d56fb71\">string</span></code><span data-lake-id=\"u004a3881\" id=\"u004a3881\">；</span></li><li fid=\"u8fbe883f\" data-lake-id=\"3ae16902f2c787a8a4ec4f94b4aab9ad\" id=\"3ae16902f2c787a8a4ec4f94b4aab9ad\"><span data-lake-id=\"u75d38db4\" id=\"u75d38db4\">其他情况下，</span><code data-lake-id=\"u9218890d\" id=\"u9218890d\"><span data-lake-id=\"ubc680040\" id=\"ubc680040\">type</span></code><span data-lake-id=\"ufbc069d5\" id=\"ufbc069d5\">默认为</span><code data-lake-id=\"u639e0321\" id=\"u639e0321\"><span data-lake-id=\"u4831ceef\" id=\"u4831ceef\">number</span></code><span data-lake-id=\"u62fe02ee\" id=\"u62fe02ee\">。</span></li></ul><p data-lake-id=\"f59b82c45cef6de64cca9ac2f4826f5d\" id=\"f59b82c45cef6de64cca9ac2f4826f5d\" style=\"text-align: justify\"><span data-lake-id=\"udf6a4c17\" id=\"udf6a4c17\">总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20objToNumber%20%3D%20value%20%3D%3E%20Number(value.valueOf().toString())%5CnobjToNumber(%5B%5D)%20%3D%3D%3D%200%5CnobjToNumber(%7B%7D)%20%3D%3D%3D%20NaN%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Uxkdm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"28ec17ec331c094c0ac8f95e9e1a4eb7\" id=\"28ec17ec331c094c0ac8f95e9e1a4eb7\" style=\"text-align: justify\"><span data-lake-id=\"udd214e7b\" id=\"udd214e7b\">而 JavaScript 中的隐式类型转换主要发生在</span><code data-lake-id=\"u6a174bf5\" id=\"u6a174bf5\"><span data-lake-id=\"u2febf11a\" id=\"u2febf11a\">+、-、*、/</span></code><span data-lake-id=\"uc3121120\" id=\"uc3121120\">以及</span><code data-lake-id=\"u55ac24e0\" id=\"u55ac24e0\"><span data-lake-id=\"u62199629\" id=\"u62199629\">==、&gt;、&lt;</span></code><span data-lake-id=\"u9037dc0a\" id=\"u9037dc0a\">这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用</span><code data-lake-id=\"u05ddce6b\" id=\"u05ddce6b\"><span data-lake-id=\"udf678b26\" id=\"udf678b26\">ToPrimitive</span></code><span data-lake-id=\"u9153879a\" id=\"u9153879a\">转换成基本类型，再进行操作。</span></p><p data-lake-id=\"9fb8b3cb4ddd17ae0adad6230728d318\" id=\"9fb8b3cb4ddd17ae0adad6230728d318\" style=\"text-align: justify\"><br></p><p data-lake-id=\"3fc8ce71be73651b0c570fa7406042bd\" id=\"3fc8ce71be73651b0c570fa7406042bd\" style=\"text-align: justify\"><span data-lake-id=\"u83604988\" id=\"u83604988\">以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被</span><code data-lake-id=\"udee06285\" id=\"udee06285\"><span data-lake-id=\"ub90775a6\" id=\"ub90775a6\">ToPrimitive</span></code><span data-lake-id=\"ue3268dc4\" id=\"ue3268dc4\">转换成基本类型，所以最终还是要应用基本类型转换规则）：</span></p><ol list=\"u0c2bea06\"><li fid=\"u7c835e85\" data-lake-id=\"a79fd93abcb8a33eb5c9c120a5d8d245\" id=\"a79fd93abcb8a33eb5c9c120a5d8d245\"><code data-lake-id=\"ubc7e8469\" id=\"ubc7e8469\"><strong><span data-lake-id=\"u9a3cc066\" id=\"u9a3cc066\">+</span></strong></code><strong><span data-lake-id=\"u3dd900dd\" id=\"u3dd900dd\">操作符</span></strong><code data-lake-id=\"uc2e20f22\" id=\"uc2e20f22\"><span data-lake-id=\"u81f80e9a\" id=\"u81f80e9a\">+</span></code><span data-lake-id=\"ubb69d6ed\" id=\"ubb69d6ed\">操作符的两边有至少一个</span><code data-lake-id=\"ub0ad8f74\" id=\"ub0ad8f74\"><span data-lake-id=\"u557348f9\" id=\"u557348f9\">string</span></code><span data-lake-id=\"u8578ab13\" id=\"u8578ab13\">类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%221%20%2B%20'23'%20%2F%2F%20'123'%5Cn%201%20%2B%20false%20%2F%2F%201%20%5Cn%201%20%2B%20Symbol()%20%2F%2F%20Uncaught%20TypeError%3A%20Cannot%20convert%20a%20Symbol%20value%20to%20a%20number%5Cn%20'1'%20%2B%20false%20%2F%2F%20'1false'%5Cn%20false%20%2B%20true%20%2F%2F%201%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%220VjIs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"ub2f71ae3\" start=\"2\"><li fid=\"u621c084a\" data-lake-id=\"aaebc15a8ca9dae0b232a301694b9d37\" id=\"aaebc15a8ca9dae0b232a301694b9d37\"><code data-lake-id=\"uf6c5b23f\" id=\"uf6c5b23f\"><strong><span data-lake-id=\"ufb255155\" id=\"ufb255155\">-</span></strong></code><strong><span data-lake-id=\"ubd170633\" id=\"ubd170633\">、</span></strong><code data-lake-id=\"ub79cbe2b\" id=\"ub79cbe2b\"><strong><span data-lake-id=\"ue0bfcaca\" id=\"ue0bfcaca\">*</span></strong></code><strong><span data-lake-id=\"uddcc8035\" id=\"uddcc8035\">、</span></strong><code data-lake-id=\"uc64c2850\" id=\"uc64c2850\"><strong><span data-lake-id=\"u4f442f14\" id=\"u4f442f14\">\\</span></strong></code><strong><span data-lake-id=\"u7487660c\" id=\"u7487660c\">操作符</span></strong><code data-lake-id=\"u25d8343d\" id=\"u25d8343d\"><span data-lake-id=\"u8af40f09\" id=\"u8af40f09\">NaN</span></code><span data-lake-id=\"u1034b96b\" id=\"u1034b96b\">也是一个数字</span></li></ol><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%221%20*%20'23'%20%2F%2F%2023%5Cn%201%20*%20false%20%2F%2F%200%5Cn%201%20%2F%20'aa'%20%2F%2F%20NaN%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qtxDW%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u0142d05f\" start=\"3\"><li fid=\"ufe0ad40c\" data-lake-id=\"0dc7167572af4c15d0c85c416664d784\" id=\"0dc7167572af4c15d0c85c416664d784\"><strong><span data-lake-id=\"uc147acb9\" id=\"uc147acb9\">对于</span></strong><code data-lake-id=\"u161682dc\" id=\"u161682dc\"><strong><span data-lake-id=\"u4cd91338\" id=\"u4cd91338\">==</span></strong></code><strong><span data-lake-id=\"uf5bf21b1\" id=\"uf5bf21b1\">操作符</span></strong></li></ol><p data-lake-id=\"9d6f4aa775e7a24b841deba133b705ed\" id=\"9d6f4aa775e7a24b841deba133b705ed\" style=\"text-align: justify\"><span data-lake-id=\"ue059bd31\" id=\"ue059bd31\">操作符两边的值都尽量转成</span><code data-lake-id=\"u18bae02a\" id=\"u18bae02a\"><span data-lake-id=\"u89af2821\" id=\"u89af2821\">number</span></code><span data-lake-id=\"u8f994b3d\" id=\"u8f994b3d\">：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%223%20%3D%3D%20true%20%2F%2F%20false%2C%203%20%E8%BD%AC%E4%B8%BAnumber%E4%B8%BA3%EF%BC%8Ctrue%E8%BD%AC%E4%B8%BAnumber%E4%B8%BA1%5Cn'0'%20%3D%3D%20false%20%2F%2Ftrue%2C%20'0'%E8%BD%AC%E4%B8%BAnumber%E4%B8%BA0%EF%BC%8Cfalse%E8%BD%AC%E4%B8%BAnumber%E4%B8%BA0%5Cn'0'%20%3D%3D%200%20%2F%2F%20'0'%E8%BD%AC%E4%B8%BAnumber%E4%B8%BA0%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22sZL6H%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ol list=\"u42079048\" start=\"4\"><li fid=\"u576a5957\" data-lake-id=\"8787051fdaf1153e648927de490d16b6\" id=\"8787051fdaf1153e648927de490d16b6\"><strong><span data-lake-id=\"uf4979963\" id=\"uf4979963\">对于</span></strong><code data-lake-id=\"u9d358163\" id=\"u9d358163\"><strong><span data-lake-id=\"u9dcee1d4\" id=\"u9dcee1d4\">&lt;</span></strong></code><strong><span data-lake-id=\"u23964abc\" id=\"u23964abc\">和</span></strong><code data-lake-id=\"ub5807427\" id=\"ub5807427\"><strong><span data-lake-id=\"u62fae9c2\" id=\"u62fae9c2\">&gt;</span></strong></code><strong><span data-lake-id=\"u93219cff\" id=\"u93219cff\">比较符</span></strong></li></ol><p data-lake-id=\"024207303e90483efb63b2d1c561689b\" id=\"024207303e90483efb63b2d1c561689b\" style=\"text-align: justify\"><span data-lake-id=\"ua19fbaed\" id=\"ua19fbaed\">如果两边都是字符串，则比较字母表顺序：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22'ca'%20%3C%20'bd'%20%2F%2F%20false%5Cn'a'%20%3C%20'b'%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tsOvH%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"2489150faf7a65f375666b8ab4d0419e\" id=\"2489150faf7a65f375666b8ab4d0419e\" style=\"text-align: justify\"><span data-lake-id=\"u6e53e383\" id=\"u6e53e383\">其他情况下，转换为数字再比较：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22'12'%20%3C%2013%20%2F%2F%20true%5Cnfalse%20%3E%20-1%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22b9EDB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ec3f864f9849fbbf48a8b6671286f7ac\" id=\"ec3f864f9849fbbf48a8b6671286f7ac\" style=\"text-align: justify\"><span data-lake-id=\"ub3506022\" id=\"ub3506022\">以上说的是基本类型的隐式转换，而对象会被</span><code data-lake-id=\"u465ff5ac\" id=\"u465ff5ac\"><span data-lake-id=\"udd96bf09\" id=\"udd96bf09\">ToPrimitive</span></code><span data-lake-id=\"ud06ccec1\" id=\"ud06ccec1\">转换为基本类型再进行转换：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20a%20%3D%20%7B%7D%5Cna%20%3E%202%20%2F%2F%20false%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22d28Qk%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"2e0eb41f3847509729e3c477998efd15\" id=\"2e0eb41f3847509729e3c477998efd15\" style=\"text-align: justify\"><span data-lake-id=\"u838ed8bd\" id=\"u838ed8bd\">其对比过程如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22a.valueOf()%20%2F%2F%20%7B%7D%2C%20%E4%B8%8A%E9%9D%A2%E6%8F%90%E5%88%B0%E8%BF%87%EF%BC%8CToPrimitive%E9%BB%98%E8%AE%A4type%E4%B8%BAnumber%EF%BC%8C%E6%89%80%E4%BB%A5%E5%85%88valueOf%EF%BC%8C%E7%BB%93%E6%9E%9C%E8%BF%98%E6%98%AF%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%B8%8B%E4%B8%80%E6%AD%A5%5Cna.toString()%20%2F%2F%20%5C%22%5Bobject%20Object%5D%5C%22%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%98%AF%E4%B8%80%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%86%5CnNumber(a.toString())%20%2F%2F%20NaN%EF%BC%8C%E6%A0%B9%E6%8D%AE%E4%B8%8A%E9%9D%A2%20%3C%20%E5%92%8C%20%3E%20%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%9A%84%E8%A7%84%E5%88%99%EF%BC%8C%E8%A6%81%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B0%E5%AD%97%5CnNaN%20%3E%202%20%2F%2Ffalse%EF%BC%8C%E5%BE%97%E5%87%BA%E6%AF%94%E8%BE%83%E7%BB%93%E6%9E%9C%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22X2f5S%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ec84a7e5aec9b0cfd575139ce91cb8aa\" id=\"ec84a7e5aec9b0cfd575139ce91cb8aa\" style=\"text-align: justify\"><span data-lake-id=\"uccf863c6\" id=\"uccf863c6\">又比如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20a%20%3D%20%7Bname%3A'Jack'%7D%5Cnvar%20b%20%3D%20%7Bage%3A%2018%7D%5Cna%20%2B%20b%20%2F%2F%20%5C%22%5Bobject%20Object%5D%5Bobject%20Object%5D%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Bz6iq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"7b866b59c6415e2f488064bec236de3e\" id=\"7b866b59c6415e2f488064bec236de3e\" style=\"text-align: justify\"><span data-lake-id=\"ua76427d5\" id=\"ua76427d5\">运算过程如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22a.valueOf()%20%2F%2F%20%7B%7D%EF%BC%8C%E4%B8%8A%E9%9D%A2%E6%8F%90%E5%88%B0%E8%BF%87%EF%BC%8CToPrimitive%E9%BB%98%E8%AE%A4type%E4%B8%BAnumber%EF%BC%8C%E6%89%80%E4%BB%A5%E5%85%88valueOf%EF%BC%8C%E7%BB%93%E6%9E%9C%E8%BF%98%E6%98%AF%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E4%B8%8B%E4%B8%80%E6%AD%A5%5Cna.toString()%20%2F%2F%20%5C%22%5Bobject%20Object%5D%5C%22%5Cnb.valueOf()%20%2F%2F%20%E5%90%8C%E7%90%86%5Cnb.toString()%20%2F%2F%20%5C%22%5Bobject%20Object%5D%5C%22%5Cna%20%2B%20b%20%2F%2F%20%5C%22%5Bobject%20Object%5D%5Bobject%20Object%5D%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qRwAn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"47636b0cb0327cd564b05728347eae3b\" id=\"47636b0cb0327cd564b05728347eae3b\"><span data-lake-id=\"u3d1f7871\" id=\"u3d1f7871\">18. </span><code data-lake-id=\"uf95342d1\" id=\"uf95342d1\"><span data-lake-id=\"u05f8fa83\" id=\"u05f8fa83\">+</span></code><span data-lake-id=\"u22b6aafe\" id=\"u22b6aafe\"> 操作符什么时候用于字符串的拼接？</span></h3><p data-lake-id=\"8b9fbbb483916dceb477e45cbb478c60\" id=\"8b9fbbb483916dceb477e45cbb478c60\"><span data-lake-id=\"ud5e3e688\" id=\"ud5e3e688\">根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。</span></p><p data-lake-id=\"90ef31a1505a837140258e058539e28d\" id=\"90ef31a1505a837140258e058539e28d\"><br></p><p data-lake-id=\"5b1c920a61fe9e2e02e672c7d8c93bfe\" id=\"5b1c920a61fe9e2e02e672c7d8c93bfe\"><span data-lake-id=\"u72c268b8\" id=\"u72c268b8\">简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。</span></p><p data-lake-id=\"1d4ec40bc69ee57cb2b3d9af2426bed3\" id=\"1d4ec40bc69ee57cb2b3d9af2426bed3\"><br></p><p data-lake-id=\"fbad4147c18129abefa9234102798493\" id=\"fbad4147c18129abefa9234102798493\"><span data-lake-id=\"u90dc5f8f\" id=\"u90dc5f8f\">那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。</span></p><h3 data-lake-id=\"fc7a0516035eff52158101c2e0f7fd2f\" id=\"fc7a0516035eff52158101c2e0f7fd2f\"><span data-lake-id=\"u9dc9d28d\" id=\"u9dc9d28d\">19. 为什么会有</span><strong><span data-lake-id=\"u6f6e8fe2\" id=\"u6f6e8fe2\">BigInt</span></strong><span data-lake-id=\"ue0fde748\" id=\"ue0fde748\">的提案？ </span></h3><p data-lake-id=\"43887951ec27b872727f66901137a5bc\" id=\"43887951ec27b872727f66901137a5bc\"><span data-lake-id=\"uc671f156\" id=\"uc671f156\">JavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。 </span></p><h3 data-lake-id=\"pTo1M\" id=\"pTo1M\"><span data-lake-id=\"u7d47acf4\" id=\"u7d47acf4\">20. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别</span></h3><p data-lake-id=\"u17269347\" id=\"u17269347\"><span data-lake-id=\"uec511c00\" id=\"uec511c00\" style=\"color: #121212\">扩展运算符：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20outObj%20%3D%20%7B%5Cn%20%20inObj%3A%20%7Ba%3A%201%2C%20b%3A%202%7D%5Cn%7D%5Cnlet%20newObj%20%3D%20%7B...outObj%7D%5CnnewObj.inObj.a%20%3D%202%5Cnconsole.log(outObj)%20%2F%2F%20%7BinObj%3A%20%7Ba%3A%202%2C%20b%3A%202%7D%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SqCDG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u97c1710e\" id=\"u97c1710e\"><span data-lake-id=\"u8d384e30\" id=\"u8d384e30\" style=\"color: #121212\">Object.assign():</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20outObj%20%3D%20%7B%5Cn%20%20inObj%3A%20%7Ba%3A%201%2C%20b%3A%202%7D%5Cn%7D%5Cnlet%20newObj%20%3D%20Object.assign(%7B%7D%2C%20outObj)%5CnnewObj.inObj.a%20%3D%202%5Cnconsole.log(outObj)%20%2F%2F%20%7BinObj%3A%20%7Ba%3A%202%2C%20b%3A%202%7D%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mgchh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u42786622\" id=\"u42786622\"><span data-lake-id=\"u6e4e2e02\" id=\"u6e4e2e02\">可以看到，两者都是浅拷贝。</span></p><ul list=\"ub34eda36\"><li fid=\"uc69790de\" data-lake-id=\"u86d40702\" id=\"u86d40702\"><span data-lake-id=\"u01fc12a4\" id=\"u01fc12a4\">Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会</span><span data-lake-id=\"ub60b7f27\" id=\"ub60b7f27\" style=\"color: #3D464D\">修改了一个对象，因此会触发 ES6 setter。</span></li><li fid=\"uc69790de\" data-lake-id=\"uf1769cbf\" id=\"uf1769cbf\"><span data-lake-id=\"udaa79933\" id=\"udaa79933\">扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。</span></li></ul><h3 data-lake-id=\"GTRB4\" id=\"GTRB4\"><span data-lake-id=\"ubcf3b815\" id=\"ubcf3b815\">21. 如何判断一个对象是空对象</span></h3><ul list=\"u80e73a56\"><li fid=\"u1c5e91e7\" data-lake-id=\"u52f6a421\" id=\"u52f6a421\"><span data-lake-id=\"u8e57a252\" id=\"u8e57a252\">使用</span><span data-lake-id=\"u2524420a\" id=\"u2524420a\" style=\"color: #000000\">JSON自带的.stringify方法来判断：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22if(Json.stringify(Obj)%20%3D%3D%20'%7B%7D'%20)%7B%5Cn%20%20%20%20console.log('%E7%A9%BA%E5%AF%B9%E8%B1%A1')%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22O75Ek%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u526170ba\"><li fid=\"ud44908a8\" data-lake-id=\"ue7314304\" id=\"ue7314304\"><span data-lake-id=\"ubdfd3093\" id=\"ubdfd3093\">使用ES6新增的方法Object.keys()来判断：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22if(Object.keys(Obj).length%20%3C%200)%7B%5Cn%20%20%20%20console.log('%E7%A9%BA%E5%AF%B9%E8%B1%A1')%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gIydB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u9fe9258f\" id=\"u9fe9258f\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673894391198-0292b23b-8563-493a-ad53-f9da6dd15ae0.png%22%2C%22taskId%22%3A%22uc295ad4e-5318-4fcf-81a9-9d36aabccd7%22%2C%22clientId%22%3A%22ueb340ee7-bc26-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u79a76449%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"3fb2aa8bcb617ca0de8bfafd7da899e3\" id=\"3fb2aa8bcb617ca0de8bfafd7da899e3\"><span data-lake-id=\"ufeb01b10\" id=\"ufeb01b10\">二、ES6</span></h2><h3 data-lake-id=\"10f3660d793ab0b1fc214eca63a5bf8c\" id=\"10f3660d793ab0b1fc214eca63a5bf8c\"><span data-lake-id=\"u9890de66\" id=\"u9890de66\">1. let、const、var的区别</span></h3><p data-lake-id=\"59884d325047a428982e5814cdeb82f7\" id=\"59884d325047a428982e5814cdeb82f7\"><strong><span data-lake-id=\"u5daec8f0\" id=\"u5daec8f0\">（1）块级作用域：</span></strong><span data-lake-id=\"u32b74541\" id=\"u32b74541\">块作用域由 </span><code data-lake-id=\"u7bceeae2\" id=\"u7bceeae2\"><span data-lake-id=\"u396cc24c\" id=\"u396cc24c\">{ }</span></code><span data-lake-id=\"uc8bd31a0\" id=\"uc8bd31a0\">包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：</span></p><ul list=\"uff3ee99a\"><li fid=\"uf4de6097\" data-lake-id=\"2defc8c3bf71f8ba059ac0e5c7b62b7b\" id=\"2defc8c3bf71f8ba059ac0e5c7b62b7b\"><span data-lake-id=\"ua10553c4\" id=\"ua10553c4\">内层变量可能覆盖外层变量</span></li><li fid=\"uf4de6097\" data-lake-id=\"8fba65877500c70aae67e0aa5a8f1110\" id=\"8fba65877500c70aae67e0aa5a8f1110\"><span data-lake-id=\"uaefbbd4e\" id=\"uaefbbd4e\">用来计数的循环变量泄露为全局变量</span></li></ul><p data-lake-id=\"ee0ea26454c960eb7b0a97cb85cbbf2f\" id=\"ee0ea26454c960eb7b0a97cb85cbbf2f\"><strong><span data-lake-id=\"u1e202147\" id=\"u1e202147\">（2）变量提升：</span></strong><span data-lake-id=\"u3c2050cd\" id=\"u3c2050cd\">var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。</span></p><p data-lake-id=\"a9e42dbaf9b64396eefdfa40392027a2\" id=\"a9e42dbaf9b64396eefdfa40392027a2\"><strong><span data-lake-id=\"u0388f4f5\" id=\"u0388f4f5\">（3）给全局添加属性：</span></strong><span data-lake-id=\"ufd9db611\" id=\"ufd9db611\">浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。</span></p><p data-lake-id=\"a1c8f5092e25eba398fcbac3155b4a63\" id=\"a1c8f5092e25eba398fcbac3155b4a63\"><strong><span data-lake-id=\"uc13187ff\" id=\"uc13187ff\">（4）重复声明：</span></strong><span data-lake-id=\"u0503fb40\" id=\"u0503fb40\">var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。</span></p><p data-lake-id=\"01c31e3bfdbe4fbb067ba190d8dd58b1\" id=\"01c31e3bfdbe4fbb067ba190d8dd58b1\"><strong><span data-lake-id=\"u97351013\" id=\"u97351013\">（5）暂时性死区：</span></strong><span data-lake-id=\"u8ad4496c\" id=\"u8ad4496c\">在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为</span><strong><span data-lake-id=\"u55c4c04b\" id=\"u55c4c04b\">暂时性死区</span></strong><span data-lake-id=\"u0c84e568\" id=\"u0c84e568\">。使用var声明的变量不存在暂时性死区。</span></p><p data-lake-id=\"334d3bc9dc21f85aeda15f3a2b8ff811\" id=\"334d3bc9dc21f85aeda15f3a2b8ff811\"><strong><span data-lake-id=\"u1ae50bd5\" id=\"u1ae50bd5\">（6）初始值设置：</span></strong><span data-lake-id=\"u14fd5c76\" id=\"u14fd5c76\">在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。</span></p><p data-lake-id=\"b65d7661c58a232a306083d170829844\" id=\"b65d7661c58a232a306083d170829844\"><strong><span data-lake-id=\"u663684d3\" id=\"u663684d3\">（7）指针指向：</span></strong><span data-lake-id=\"u3f966344\" id=\"u3f966344\">let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。</span></p><table data-lake-id=\"LLLq9\" id=\"LLLq9\" margin=\"true\" class=\"lake-table\" style=\"width: 733px\"><colgroup><col width=\"177\"><col width=\"178\"><col width=\"186\"><col width=\"192\"></colgroup><tbody><tr data-lake-id=\"u5a9c4554\" id=\"u5a9c4554\" style=\"height: 33px\"><td data-lake-id=\"ub8a3eebb\" id=\"ub8a3eebb\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u8290c6e6\" id=\"u8290c6e6\" style=\"text-align: center\"><strong><span data-lake-id=\"uee5ae5c2\" id=\"uee5ae5c2\">区别</span></strong></p></td><td data-lake-id=\"ub8d0b896\" id=\"ub8d0b896\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u9a7119a4\" id=\"u9a7119a4\" style=\"text-align: center\"><strong><span data-lake-id=\"u89854576\" id=\"u89854576\">var</span></strong></p></td><td data-lake-id=\"ue98252ca\" id=\"ue98252ca\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u99513dff\" id=\"u99513dff\" style=\"text-align: center\"><strong><span data-lake-id=\"u18e2bd29\" id=\"u18e2bd29\">let</span></strong></p></td><td data-lake-id=\"udbe9c8d0\" id=\"udbe9c8d0\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"uc064559f\" id=\"uc064559f\" style=\"text-align: center\"><strong><span data-lake-id=\"uc67e543d\" id=\"uc67e543d\">const</span></strong></p></td></tr><tr data-lake-id=\"ue34416f4\" id=\"ue34416f4\" style=\"height: 33px\"><td data-lake-id=\"u641422ed\" id=\"u641422ed\" style=\"vertical-align: middle\"><p data-lake-id=\"uf367cd2b\" id=\"uf367cd2b\" style=\"text-align: center\"><span data-lake-id=\"uf53080ae\" id=\"uf53080ae\">是否有块级作用域</span></p></td><td data-lake-id=\"u2979684c\" id=\"u2979684c\" style=\"vertical-align: middle\"><p data-lake-id=\"ue356a2f7\" id=\"ue356a2f7\" style=\"text-align: center\"><span data-lake-id=\"u934d39a8\" id=\"u934d39a8\">×</span></p></td><td data-lake-id=\"u9946f21e\" id=\"u9946f21e\" style=\"vertical-align: middle\"><p data-lake-id=\"ua3c52c05\" id=\"ua3c52c05\" style=\"text-align: center\"><span data-lake-id=\"ubbed6c5f\" id=\"ubbed6c5f\">✔️</span></p></td><td data-lake-id=\"u4135352f\" id=\"u4135352f\" style=\"vertical-align: middle\"><p data-lake-id=\"u8e7e437c\" id=\"u8e7e437c\" style=\"text-align: center\"><span data-lake-id=\"u48075857\" id=\"u48075857\">✔️</span></p></td></tr><tr data-lake-id=\"u123c8270\" id=\"u123c8270\" style=\"height: 33px\"><td data-lake-id=\"u5afb4a6f\" id=\"u5afb4a6f\" style=\"vertical-align: middle\"><p data-lake-id=\"u59d5b85c\" id=\"u59d5b85c\" style=\"text-align: center\"><span data-lake-id=\"u8f111a38\" id=\"u8f111a38\">是否存在变量提升</span></p></td><td data-lake-id=\"u243edf80\" id=\"u243edf80\" style=\"vertical-align: middle\"><p data-lake-id=\"ucb7dd50c\" id=\"ucb7dd50c\" style=\"text-align: center\"><span data-lake-id=\"uf2be7a63\" id=\"uf2be7a63\">✔️</span></p></td><td data-lake-id=\"u68c08d1d\" id=\"u68c08d1d\" style=\"vertical-align: middle\"><p data-lake-id=\"u8ffe153d\" id=\"u8ffe153d\" style=\"text-align: center\"><span data-lake-id=\"u1bb74a96\" id=\"u1bb74a96\">×</span></p></td><td data-lake-id=\"u106d7d59\" id=\"u106d7d59\" style=\"vertical-align: middle\"><p data-lake-id=\"uef95d314\" id=\"uef95d314\" style=\"text-align: center\"><span data-lake-id=\"ucea5acd9\" id=\"ucea5acd9\">×</span></p></td></tr><tr data-lake-id=\"u94a392f6\" id=\"u94a392f6\" style=\"height: 33px\"><td data-lake-id=\"u5be81d30\" id=\"u5be81d30\" style=\"vertical-align: middle\"><p data-lake-id=\"u38762d4f\" id=\"u38762d4f\" style=\"text-align: center\"><span data-lake-id=\"uf6b89a09\" id=\"uf6b89a09\">是否添加全局属性</span></p></td><td data-lake-id=\"u4b950654\" id=\"u4b950654\" style=\"vertical-align: middle\"><p data-lake-id=\"2f3f61b92c12c8b2667194d65b2b80dc\" id=\"2f3f61b92c12c8b2667194d65b2b80dc\" style=\"text-align: center\"><span data-lake-id=\"u7f7d83ca\" id=\"u7f7d83ca\">✔️</span></p></td><td data-lake-id=\"uc7759ab7\" id=\"uc7759ab7\" style=\"vertical-align: middle\"><p data-lake-id=\"u0b72127c\" id=\"u0b72127c\" style=\"text-align: center\"><span data-lake-id=\"ub6a2d70e\" id=\"ub6a2d70e\">×</span></p></td><td data-lake-id=\"u783ce8c4\" id=\"u783ce8c4\" style=\"vertical-align: middle\"><p data-lake-id=\"u72d47693\" id=\"u72d47693\" style=\"text-align: center\"><span data-lake-id=\"u68accd24\" id=\"u68accd24\">×</span></p></td></tr><tr data-lake-id=\"ua13edf12\" id=\"ua13edf12\" style=\"height: 33px\"><td data-lake-id=\"u0444002e\" id=\"u0444002e\" style=\"vertical-align: middle\"><p data-lake-id=\"u641680a3\" id=\"u641680a3\" style=\"text-align: center\"><span data-lake-id=\"u9fce9f50\" id=\"u9fce9f50\">能否重复声明变量</span></p></td><td data-lake-id=\"uf2a379c7\" id=\"uf2a379c7\" style=\"vertical-align: middle\"><p data-lake-id=\"u39fdbc53\" id=\"u39fdbc53\" style=\"text-align: center\"><span data-lake-id=\"u64943134\" id=\"u64943134\">✔️</span></p></td><td data-lake-id=\"uf21234aa\" id=\"uf21234aa\" style=\"vertical-align: middle\"><p data-lake-id=\"u7e42c945\" id=\"u7e42c945\" style=\"text-align: center\"><span data-lake-id=\"u61eea126\" id=\"u61eea126\">×</span></p></td><td data-lake-id=\"uadf0992f\" id=\"uadf0992f\" style=\"vertical-align: middle\"><p data-lake-id=\"ueeda54ab\" id=\"ueeda54ab\" style=\"text-align: center\"><span data-lake-id=\"u370fda0b\" id=\"u370fda0b\">×</span></p></td></tr><tr data-lake-id=\"u214a599c\" id=\"u214a599c\" style=\"height: 33px\"><td data-lake-id=\"u190ad233\" id=\"u190ad233\" style=\"vertical-align: middle\"><p data-lake-id=\"u7ed60156\" id=\"u7ed60156\" style=\"text-align: center\"><span data-lake-id=\"u4f583d03\" id=\"u4f583d03\">是否存在暂时性死区</span></p></td><td data-lake-id=\"uadb2a167\" id=\"uadb2a167\" style=\"vertical-align: middle\"><p data-lake-id=\"ue8be949e\" id=\"ue8be949e\" style=\"text-align: center\"><span data-lake-id=\"ue8457b24\" id=\"ue8457b24\">×</span></p></td><td data-lake-id=\"uec6a8e6f\" id=\"uec6a8e6f\" style=\"vertical-align: middle\"><p data-lake-id=\"u4cdb7a6b\" id=\"u4cdb7a6b\" style=\"text-align: center\"><span data-lake-id=\"u445e8448\" id=\"u445e8448\">✔️</span></p></td><td data-lake-id=\"uae556631\" id=\"uae556631\" style=\"vertical-align: middle\"><p data-lake-id=\"uf9ad3a4b\" id=\"uf9ad3a4b\" style=\"text-align: center\"><span data-lake-id=\"ua941cb9f\" id=\"ua941cb9f\">✔️</span></p></td></tr><tr data-lake-id=\"ud25ad7cc\" id=\"ud25ad7cc\" style=\"height: 33px\"><td data-lake-id=\"u4266b2b7\" id=\"u4266b2b7\" style=\"vertical-align: middle\"><p data-lake-id=\"uf1a1aec5\" id=\"uf1a1aec5\" style=\"text-align: center\"><span data-lake-id=\"u88f786ad\" id=\"u88f786ad\">是否必须设置初始值</span></p></td><td data-lake-id=\"u98920410\" id=\"u98920410\" style=\"vertical-align: middle\"><p data-lake-id=\"u2c8d8d24\" id=\"u2c8d8d24\" style=\"text-align: center\"><span data-lake-id=\"ub708da06\" id=\"ub708da06\">×</span></p></td><td data-lake-id=\"ua0e20d7c\" id=\"ua0e20d7c\" style=\"vertical-align: middle\"><p data-lake-id=\"u9cea7782\" id=\"u9cea7782\" style=\"text-align: center\"><span data-lake-id=\"uec3ce867\" id=\"uec3ce867\">×</span></p></td><td data-lake-id=\"u4a838f58\" id=\"u4a838f58\" style=\"vertical-align: middle\"><p data-lake-id=\"uc1915e45\" id=\"uc1915e45\" style=\"text-align: center\"><span data-lake-id=\"uefb92f32\" id=\"uefb92f32\">✔️</span></p></td></tr><tr data-lake-id=\"u0d824bc3\" id=\"u0d824bc3\" style=\"height: 33px\"><td data-lake-id=\"u6191d595\" id=\"u6191d595\" style=\"vertical-align: middle\"><p data-lake-id=\"ufb645e14\" id=\"ufb645e14\" style=\"text-align: center\"><span data-lake-id=\"uaa9ec615\" id=\"uaa9ec615\">能否改变指针指向</span></p></td><td data-lake-id=\"u2402efc0\" id=\"u2402efc0\" style=\"vertical-align: middle\"><p data-lake-id=\"uac49e4a3\" id=\"uac49e4a3\" style=\"text-align: center\"><span data-lake-id=\"u49813dda\" id=\"u49813dda\">✔️</span></p></td><td data-lake-id=\"u7a269a44\" id=\"u7a269a44\" style=\"vertical-align: middle\"><p data-lake-id=\"u760ed2c0\" id=\"u760ed2c0\" style=\"text-align: center\"><span data-lake-id=\"ucd703a40\" id=\"ucd703a40\">✔️</span></p></td><td data-lake-id=\"ub8d1f800\" id=\"ub8d1f800\" style=\"vertical-align: middle\"><p data-lake-id=\"ud7e9e6ec\" id=\"ud7e9e6ec\" style=\"text-align: center\"><span data-lake-id=\"u95dcfbd0\" id=\"u95dcfbd0\">×</span></p></td></tr></tbody></table><h3 data-lake-id=\"df42b539c512dba5c223e1f87529466f\" id=\"df42b539c512dba5c223e1f87529466f\"><span data-lake-id=\"ub35acaba\" id=\"ub35acaba\">2. const对象的属性可以修改吗</span></h3><p data-lake-id=\"1c8ba6132ddb4304db0335273dcab1a6\" id=\"1c8ba6132ddb4304db0335273dcab1a6\"><span data-lake-id=\"u248f9940\" id=\"u248f9940\">const保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。</span></p><p data-lake-id=\"8690c528a4a619e6cadd5a29ca080d03\" id=\"8690c528a4a619e6cadd5a29ca080d03\"><br></p><p data-lake-id=\"bd3a0be714df07a99e262a4ecdc2f64a\" id=\"bd3a0be714df07a99e262a4ecdc2f64a\"><span data-lake-id=\"u8738f7f1\" id=\"u8738f7f1\">但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。</span></p><h3 data-lake-id=\"6cb297514de8a7b80acf676f6f67b674\" id=\"6cb297514de8a7b80acf676f6f67b674\"><span data-lake-id=\"ud4f20843\" id=\"ud4f20843\">3. 如果new一个箭头函数的会怎么样</span></h3><p data-lake-id=\"9253df44f8849482ed73cb21960c881d\" id=\"9253df44f8849482ed73cb21960c881d\"><span data-lake-id=\"uec0d6017\" id=\"uec0d6017\">箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。</span></p><p data-lake-id=\"c4f1f6c97cf5d5d437596a424efe571f\" id=\"c4f1f6c97cf5d5d437596a424efe571f\"><br></p><p data-lake-id=\"3940ea1b083473120dbea1a652ba9409\" id=\"3940ea1b083473120dbea1a652ba9409\"><span data-lake-id=\"ua1afda5a\" id=\"ua1afda5a\">new操作符的实现步骤如下：</span></p><ol list=\"u4d59afc0\"><li fid=\"u2a188306\" data-lake-id=\"a4a2d11277064b8f0dca4507b15f04db\" id=\"a4a2d11277064b8f0dca4507b15f04db\"><span data-lake-id=\"ua6f7fc1a\" id=\"ua6f7fc1a\">创建一个对象</span></li><li fid=\"u2a188306\" data-lake-id=\"214128b0fad6be3feeeac9d6a866bdb5\" id=\"214128b0fad6be3feeeac9d6a866bdb5\"><span data-lake-id=\"ucec526f9\" id=\"ucec526f9\">将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）</span></li><li fid=\"u2a188306\" data-lake-id=\"3a6d9f0cb73c17f8f618c5a822ce0e30\" id=\"3a6d9f0cb73c17f8f618c5a822ce0e30\"><span data-lake-id=\"ub8fcb7ef\" id=\"ub8fcb7ef\">指向构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）</span></li><li fid=\"u2a188306\" data-lake-id=\"c915b5cf32f7ab963e14e01fa4b14f2a\" id=\"c915b5cf32f7ab963e14e01fa4b14f2a\"><span data-lake-id=\"u3fdcc2ae\" id=\"u3fdcc2ae\">返回新的对象</span></li></ol><p data-lake-id=\"2efb671835994dc541232a546e6d9aec\" id=\"2efb671835994dc541232a546e6d9aec\"><br></p><p data-lake-id=\"1a8b1a28d04facd8eb8e7d119a7a0332\" id=\"1a8b1a28d04facd8eb8e7d119a7a0332\"><span data-lake-id=\"ud194305d\" id=\"ud194305d\">所以，上面的第二、三步，箭头函数都是没有办法执行的。</span></p><h3 data-lake-id=\"233f7c11eab99fd155ec5d19d5176696\" id=\"233f7c11eab99fd155ec5d19d5176696\"><span data-lake-id=\"ue13c3699\" id=\"ue13c3699\">4. 箭头函数与普通函数的区别</span></h3><p data-lake-id=\"4f2bbdace371fbd9c8084ef06f04bd30\" id=\"4f2bbdace371fbd9c8084ef06f04bd30\"><strong><span data-lake-id=\"u85652d44\" id=\"u85652d44\">（1）箭头函数比普通函数更加简洁</span></strong></p><ul list=\"u4f7e25dd\"><li fid=\"ua6ef5fb4\" data-lake-id=\"58165480f51d61c8d0513c0df11264ce\" id=\"58165480f51d61c8d0513c0df11264ce\"><span data-lake-id=\"ubee4ee58\" id=\"ubee4ee58\">如果没有参数，就直接写一个空括号即可</span></li><li fid=\"ua6ef5fb4\" data-lake-id=\"ea9c943e21c36ed2c79193efd05a23ec\" id=\"ea9c943e21c36ed2c79193efd05a23ec\"><span data-lake-id=\"u37fb54c7\" id=\"u37fb54c7\">如果只有一个参数，可以省去参数的括号</span></li><li fid=\"ua6ef5fb4\" data-lake-id=\"e2a17d608f8b0bd87ac96e11d68f4a07\" id=\"e2a17d608f8b0bd87ac96e11d68f4a07\"><span data-lake-id=\"u9c7ca65b\" id=\"u9c7ca65b\">如果有多个参数，用逗号分割</span></li><li fid=\"ua6ef5fb4\" data-lake-id=\"8a9aedf2a9d01d598ebeb201de909792\" id=\"8a9aedf2a9d01d598ebeb201de909792\"><span data-lake-id=\"u5bd59eb6\" id=\"u5bd59eb6\">如果函数体的返回值只有一句，可以省略大括号</span></li><li fid=\"ua6ef5fb4\" data-lake-id=\"b78fcf791a933ef2b2c3af5023dddc80\" id=\"b78fcf791a933ef2b2c3af5023dddc80\"><span data-lake-id=\"u20b039d9\" id=\"u20b039d9\">如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20fn%20%3D%20()%20%3D%3E%20void%20doesNotReturn()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%220d2OL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f83b4e0817753aa4707a77a5fccf6daa\" id=\"f83b4e0817753aa4707a77a5fccf6daa\"><strong><span data-lake-id=\"u4459201c\" id=\"u4459201c\">（2）箭头函数没有自己的this</span></strong></p><p data-lake-id=\"5503980a3aebebcb94e6e8ec04dcb1d4\" id=\"5503980a3aebebcb94e6e8ec04dcb1d4\"><span data-lake-id=\"u2642560e\" id=\"u2642560e\">箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。</span></p><p data-lake-id=\"cbf34008739f48a4b9d60dee08febfd2\" id=\"cbf34008739f48a4b9d60dee08febfd2\"><strong><span data-lake-id=\"ubeb710e3\" id=\"ubeb710e3\">（3）箭头函数继承来的this指向永远不会改变</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20id%20%3D%20'GLOBAL'%3B%5Cnvar%20obj%20%3D%20%7B%5Cn%20%20id%3A%20'OBJ'%2C%5Cn%20%20a%3A%20function()%7B%5Cn%20%20%20%20console.log(this.id)%3B%5Cn%20%20%7D%2C%5Cn%20%20b%3A%20()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(this.id)%3B%5Cn%20%20%7D%5Cn%7D%3B%5Cnobj.a()%3B%20%20%20%20%2F%2F%20'OBJ'%5Cnobj.b()%3B%20%20%20%20%2F%2F%20'GLOBAL'%5Cnnew%20obj.a()%20%20%2F%2F%20undefined%5Cnnew%20obj.b()%20%20%2F%2F%20Uncaught%20TypeError%3A%20obj.b%20is%20not%20a%20constructor%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Q5jVy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"584cbde93d30b08d6c52b3024472ed2d\" id=\"584cbde93d30b08d6c52b3024472ed2d\"><span data-lake-id=\"ueb4b1fb8\" id=\"ueb4b1fb8\">对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号</span><code data-lake-id=\"u7f170acb\" id=\"u7f170acb\"><span data-lake-id=\"u41db02f3\" id=\"u41db02f3\">{}</span></code><span data-lake-id=\"ub6dad9a1\" id=\"ub6dad9a1\">是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。</span></p><p data-lake-id=\"69b20b192162d0b8fcf4be68be7557f7\" id=\"69b20b192162d0b8fcf4be68be7557f7\"><strong><span data-lake-id=\"u440a0f22\" id=\"u440a0f22\">（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20id%20%3D%20'Global'%3B%5Cnlet%20fun1%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(this.id)%5Cn%7D%3B%5Cnfun1()%3B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20'Global'%5Cnfun1.call(%7Bid%3A%20'Obj'%7D)%3B%20%20%20%20%20%2F%2F%20'Global'%5Cnfun1.apply(%7Bid%3A%20'Obj'%7D)%3B%20%20%20%20%2F%2F%20'Global'%5Cnfun1.bind(%7Bid%3A%20'Obj'%7D)()%3B%20%20%20%2F%2F%20'Global'%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%223We7g%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"7062165d02b258bad78876cba7070e78\" id=\"7062165d02b258bad78876cba7070e78\"><strong><span data-lake-id=\"u6fe4633a\" id=\"u6fe4633a\">（5）箭头函数不能作为构造函数使用</span></strong></p><p data-lake-id=\"d0c08489e2a9f04d18d48d4b68e24c84\" id=\"d0c08489e2a9f04d18d48d4b68e24c84\"><span data-lake-id=\"u27952cde\" id=\"u27952cde\">构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</span></p><p data-lake-id=\"b6cacff7eca83b5baaa1fbc1f6975077\" id=\"b6cacff7eca83b5baaa1fbc1f6975077\"><strong><span data-lake-id=\"ub694b3c7\" id=\"ub694b3c7\">（6）箭头函数没有自己的arguments</span></strong></p><p data-lake-id=\"ec763622d59a3c4cfb88c72d6204c0e7\" id=\"ec763622d59a3c4cfb88c72d6204c0e7\"><span data-lake-id=\"uaf0c4607\" id=\"uaf0c4607\">箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是它外层函数的arguments值。</span></p><p data-lake-id=\"62b9e1136a3770022c56227b06ebbcbc\" id=\"62b9e1136a3770022c56227b06ebbcbc\"><strong><span data-lake-id=\"ubb83e68d\" id=\"ubb83e68d\">（7）箭头函数没有prototype</span></strong></p><p data-lake-id=\"c571db16801f897ce015553b26ce2258\" id=\"c571db16801f897ce015553b26ce2258\"><strong><span data-lake-id=\"u5e8f8f6c\" id=\"u5e8f8f6c\">（8）箭头函数不能用作Generator函数，不能使用yeild关键字</span></strong></p><h3 data-lake-id=\"25015bbbc5c6ee17108994c5d57f9bba\" id=\"25015bbbc5c6ee17108994c5d57f9bba\"><span data-lake-id=\"ud23cb783\" id=\"ud23cb783\">5. 箭头函数的</span><strong><span data-lake-id=\"u5c231a40\" id=\"u5c231a40\">this</span></strong><span data-lake-id=\"ua4eadc5a\" id=\"ua4eadc5a\">指向哪⾥？</span></h3><p data-lake-id=\"2889dbbb5065bde13408efe4b6c5676a\" id=\"2889dbbb5065bde13408efe4b6c5676a\"><span data-lake-id=\"u0a7df5da\" id=\"u0a7df5da\">箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。</span></p><p data-lake-id=\"c22af90eefd41ffb83539841f7ab3f1f\" id=\"c22af90eefd41ffb83539841f7ab3f1f\"><br></p><p data-lake-id=\"8bd1180041d69e6eed5a5c635414635f\" id=\"8bd1180041d69e6eed5a5c635414635f\"><span data-lake-id=\"ue8d0166c\" id=\"ue8d0166c\">可以⽤Babel理解⼀下箭头函数: </span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20ES6%20%5Cnconst%20obj%20%3D%20%7B%20%5Cn%20%20getArrow()%20%7B%20%5Cn%20%20%20%20return%20()%20%3D%3E%20%7B%20%5Cn%20%20%20%20%20%20console.log(this%20%3D%3D%3D%20obj)%3B%20%5Cn%20%20%20%20%7D%3B%20%5Cn%20%20%7D%20%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YpyX0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"25b29fb8608f431e52c9ac245fa2c320\" id=\"25b29fb8608f431e52c9ac245fa2c320\"><span data-lake-id=\"u6a2f8aef\" id=\"u6a2f8aef\">转化后：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20ES5%EF%BC%8C%E7%94%B1%20Babel%20%E8%BD%AC%E8%AF%91%5Cnvar%20obj%20%3D%20%7B%20%5Cn%20%20%20getArrow%3A%20function%20getArrow()%20%7B%20%5Cn%20%20%20%20%20var%20_this%20%3D%20this%3B%20%5Cn%20%20%20%20%20return%20function%20()%20%7B%20%5Cn%20%20%20%20%20%20%20%20console.log(_this%20%3D%3D%3D%20obj)%3B%20%5Cn%20%20%20%20%20%7D%3B%20%5Cn%20%20%20%7D%20%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22f1XXO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"2eca98daa24253e853762b195c608f96\" id=\"2eca98daa24253e853762b195c608f96\"><span data-lake-id=\"u883a97b8\" id=\"u883a97b8\">6. 扩展运算符的作用及使用场景</span></h3><p data-lake-id=\"8b64746b03f83656e5980b54ebb2ff20\" id=\"8b64746b03f83656e5980b54ebb2ff20\"><strong><span data-lake-id=\"ub51b909d\" id=\"ub51b909d\">（1）对象扩展运算符</span></strong></p><p data-lake-id=\"ec64c2ac7749153e47818384ca933d1a\" id=\"ec64c2ac7749153e47818384ca933d1a\"><span data-lake-id=\"u0a3f27e2\" id=\"u0a3f27e2\">对象的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20bar%20%3D%20%7B%20a%3A%201%2C%20b%3A%202%20%7D%3B%5Cnlet%20baz%20%3D%20%7B%20...bar%20%7D%3B%20%2F%2F%20%7B%20a%3A%201%2C%20b%3A%202%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GNJ7L%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"c2df73645937e4b52c353060d5a4edc4\" id=\"c2df73645937e4b52c353060d5a4edc4\"><span data-lake-id=\"u9d448bb2\" id=\"u9d448bb2\">上述方法实际上等价于:</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20bar%20%3D%20%7B%20a%3A%201%2C%20b%3A%202%20%7D%3B%5Cnlet%20baz%20%3D%20Object.assign(%7B%7D%2C%20bar)%3B%20%2F%2F%20%7B%20a%3A%201%2C%20b%3A%202%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VkEAT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ef4947f260b7c55d813fec9c328792ca\" id=\"ef4947f260b7c55d813fec9c328792ca\"><code data-lake-id=\"u9926d2da\" id=\"u9926d2da\"><span data-lake-id=\"uf7195841\" id=\"uf7195841\">Object.assign</span></code><span data-lake-id=\"u5e1a35f6\" id=\"u5e1a35f6\">方法用于对象的合并，将源对象</span><code data-lake-id=\"u5e70086a\" id=\"u5e70086a\"><span data-lake-id=\"ubd0137f4\" id=\"ubd0137f4\">（source）</span></code><span data-lake-id=\"uc544ee3f\" id=\"uc544ee3f\">的所有可枚举属性，复制到目标对象</span><code data-lake-id=\"u90abe70a\" id=\"u90abe70a\"><span data-lake-id=\"ua2669279\" id=\"ua2669279\">（target）</span></code><span data-lake-id=\"u843dc454\" id=\"u843dc454\">。</span><code data-lake-id=\"ua8f47afe\" id=\"ua8f47afe\"><span data-lake-id=\"u2b2caef9\" id=\"u2b2caef9\">Object.assign</span></code><span data-lake-id=\"u55a49177\" id=\"u55a49177\">方法的第一个参数是目标对象，后面的参数都是源对象。(</span><strong><span data-lake-id=\"u033bed21\" id=\"u033bed21\">如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性</span></strong><span data-lake-id=\"ua702adbb\" id=\"ua702adbb\">)。</span></p><p data-lake-id=\"5c8e7f357afc71b27f1ed580847db33f\" id=\"5c8e7f357afc71b27f1ed580847db33f\"><br></p><p data-lake-id=\"441982b8e0106ef1811e247a853f0999\" id=\"441982b8e0106ef1811e247a853f0999\"><span data-lake-id=\"uf5675c82\" id=\"uf5675c82\">同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20bar%20%3D%20%7Ba%3A%201%2C%20b%3A%202%7D%3B%5Cnlet%20baz%20%3D%20%7B...bar%2C%20...%7Ba%3A2%2C%20b%3A%204%7D%7D%3B%20%20%2F%2F%20%7Ba%3A%202%2C%20b%3A%204%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GJrwr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"866f70c0670bb7cb0d6db1412060a36f\" id=\"866f70c0670bb7cb0d6db1412060a36f\"><span data-lake-id=\"u943e14d8\" id=\"u943e14d8\">利用上述特性就可以很方便的修改对象的部分属性。在</span><code data-lake-id=\"uba3f1fe0\" id=\"uba3f1fe0\"><span data-lake-id=\"u7d1769c5\" id=\"u7d1769c5\">redux</span></code><span data-lake-id=\"u760f6614\" id=\"u760f6614\">中的</span><code data-lake-id=\"u1ea3e159\" id=\"u1ea3e159\"><span data-lake-id=\"ueee3586a\" id=\"ueee3586a\">reducer</span></code><span data-lake-id=\"ue07f40c3\" id=\"ue07f40c3\">函数规定必须是</span><strong><span data-lake-id=\"u6ed6be6e\" id=\"u6ed6be6e\">一个纯函数</span></strong><span data-lake-id=\"uaa66c416\" id=\"uaa66c416\">，</span><code data-lake-id=\"ub4629ccb\" id=\"ub4629ccb\"><span data-lake-id=\"uc161e025\" id=\"uc161e025\">reducer</span></code><span data-lake-id=\"u9c8fc569\" id=\"u9c8fc569\">中的</span><code data-lake-id=\"u51fc587a\" id=\"u51fc587a\"><span data-lake-id=\"ub64b60f6\" id=\"ub64b60f6\">state</span></code><span data-lake-id=\"ueac0ec45\" id=\"ueac0ec45\">对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。</span></p><p data-lake-id=\"107431ba608fc4011d885c6ed88398cd\" id=\"107431ba608fc4011d885c6ed88398cd\"><br></p><p data-lake-id=\"18c0ce51e7b440e73e278f42ee01ff77\" id=\"18c0ce51e7b440e73e278f42ee01ff77\"><span data-lake-id=\"ubf3c68e4\" id=\"ubf3c68e4\" class=\"lake-fontsize-12\">需要注意：</span><strong><span data-lake-id=\"u1e380fa7\" id=\"u1e380fa7\" class=\"lake-fontsize-12\">扩展运算符对</span></strong><strong><span data-lake-id=\"uc3b9f35f\" id=\"uc3b9f35f\" class=\"lake-fontsize-12\">对象实例的拷贝属于浅拷贝</span></strong><span data-lake-id=\"u033f944d\" id=\"u033f944d\" class=\"lake-fontsize-12\">。</span></p><p data-lake-id=\"192b6a8062975249f51b290b64533629\" id=\"192b6a8062975249f51b290b64533629\"><strong><span data-lake-id=\"u0958d321\" id=\"u0958d321\">（2）数组扩展运算符</span></strong></p><p data-lake-id=\"bedf5d56fa14839336ea5197c39d26af\" id=\"bedf5d56fa14839336ea5197c39d26af\"><span data-lake-id=\"u979cc06b\" id=\"u979cc06b\">数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log(...%5B1%2C%202%2C%203%5D)%5Cn%2F%2F%201%202%203%5Cnconsole.log(...%5B1%2C%20%5B2%2C%203%2C%204%5D%2C%205%5D)%5Cn%2F%2F%201%20%5B2%2C%203%2C%204%5D%205%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22eZuZ6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ebb5e66ee474b809158e4599d11c38b9\" id=\"ebb5e66ee474b809158e4599d11c38b9\"><span data-lake-id=\"uc8f692c4\" id=\"uc8f692c4\">下面是数组的扩展运算符的应用：</span></p><ul list=\"ud0e59c3a\"><li fid=\"u495013bd\" data-lake-id=\"12006c1311e22644cf519bce9d180888\" id=\"12006c1311e22644cf519bce9d180888\"><strong><span data-lake-id=\"u5b09fa40\" id=\"u5b09fa40\">将数组转换为参数序列</span></strong></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20add(x%2C%20y)%20%7B%5Cn%20%20return%20x%20%2B%20y%3B%5Cn%7D%5Cnconst%20numbers%20%3D%20%5B1%2C%202%5D%3B%5Cnadd(...numbers)%20%2F%2F%203%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%221Mts9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"uf24ab522\"><li fid=\"uca36c133\" data-lake-id=\"c09a03ca2489597d672e1db9d795971d\" id=\"c09a03ca2489597d672e1db9d795971d\"><strong><span data-lake-id=\"u94339dc7\" id=\"u94339dc7\">复制数组</span></strong></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20arr1%20%3D%20%5B1%2C%202%5D%3B%5Cnconst%20arr2%20%3D%20%5B...arr1%5D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22owiNd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"58c7e7e9bc460489b2c86875832d6c00\" id=\"58c7e7e9bc460489b2c86875832d6c00\"><span data-lake-id=\"ue190d19e\" id=\"ue190d19e\">要记住：</span><strong><span data-lake-id=\"ud3fa7c20\" id=\"ud3fa7c20\">扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</span></strong><span data-lake-id=\"ud9267a4a\" id=\"ud9267a4a\">，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。</span></p><ul list=\"ua80723dc\"><li fid=\"u541101a7\" data-lake-id=\"d2190307b870dc3d987d840d3ee8951b\" id=\"d2190307b870dc3d987d840d3ee8951b\"><strong><span data-lake-id=\"uf2a47854\" id=\"uf2a47854\">合并数组</span></strong></li></ul><p data-lake-id=\"89c2f3187536a77e6d707c7a8871c61b\" id=\"89c2f3187536a77e6d707c7a8871c61b\" style=\"text-align: justify\"><span data-lake-id=\"u5420e13a\" id=\"u5420e13a\">如果想在数组内合并数组，可以这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20arr1%20%3D%20%5B'two'%2C%20'three'%5D%3B%5Cnconst%20arr2%20%3D%20%5B'one'%2C%20...arr1%2C%20'four'%2C%20'five'%5D%3B%5Cn%2F%2F%20%5B%5C%22one%5C%22%2C%20%5C%22two%5C%22%2C%20%5C%22three%5C%22%2C%20%5C%22four%5C%22%2C%20%5C%22five%5C%22%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wNvHj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u2519f0b2\"><li fid=\"ufe0e2ac5\" data-lake-id=\"684c85aab53e943756b52e41dc2868d4\" id=\"684c85aab53e943756b52e41dc2868d4\"><strong><span data-lake-id=\"u051e9db6\" id=\"u051e9db6\">扩展运算符与解构赋值结合起来，用于生成数组</span></strong></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%5Bfirst%2C%20...rest%5D%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%5D%3B%5Cnfirst%20%2F%2F%201%5Cnrest%20%20%2F%2F%20%5B2%2C%203%2C%204%2C%205%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22xY4tL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"473ea612ad1858b5d65839e921bd4443\" id=\"473ea612ad1858b5d65839e921bd4443\"><span data-lake-id=\"u971ba534\" id=\"u971ba534\">需要注意：</span><strong><span data-lake-id=\"uaddb6ad3\" id=\"uaddb6ad3\">如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%5B...rest%2C%20last%5D%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%5D%3B%20%20%20%20%20%20%20%20%20%2F%2F%20%E6%8A%A5%E9%94%99%5Cnconst%20%5Bfirst%2C%20...rest%2C%20last%5D%20%3D%20%5B1%2C%202%2C%203%2C%204%2C%205%5D%3B%20%20%2F%2F%20%E6%8A%A5%E9%94%99%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ny8Ox%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"udcd0ce66\"><li fid=\"u35bdb506\" data-lake-id=\"2fd20d8da59a3f77385a5e2194721a50\" id=\"2fd20d8da59a3f77385a5e2194721a50\"><strong><span data-lake-id=\"u27faa3e1\" id=\"u27faa3e1\">将字符串转为真正的数组</span></strong></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5B...'hello'%5D%20%20%20%20%2F%2F%20%5B%20%5C%22h%5C%22%2C%20%5C%22e%5C%22%2C%20%5C%22l%5C%22%2C%20%5C%22l%5C%22%2C%20%5C%22o%5C%22%20%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ugv7x%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u07a2a347\"><li fid=\"ufc31626a\" data-lake-id=\"bddbb38f3e033f6e161e25bd8d144b76\" id=\"bddbb38f3e033f6e161e25bd8d144b76\"><strong><span data-lake-id=\"u2dd55960\" id=\"u2dd55960\">任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组</span></strong></li></ul><p data-lake-id=\"bb0c40553784be411b1f0dbca84b46b7\" id=\"bb0c40553784be411b1f0dbca84b46b7\"><span data-lake-id=\"ua52c605b\" id=\"ua52c605b\">比较常见的应用是可以将某些数据结构转为数组：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20arguments%E5%AF%B9%E8%B1%A1%5Cnfunction%20foo()%20%7B%5Cn%20%20const%20args%20%3D%20%5B...arguments%5D%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22HtB1d%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"8d62fa6c253967567bdbc9768f656204\" id=\"8d62fa6c253967567bdbc9768f656204\"><span data-lake-id=\"u5ea54acb\" id=\"u5ea54acb\">用于替换</span><code data-lake-id=\"ubaaf3b33\" id=\"ubaaf3b33\"><span data-lake-id=\"ud0f4f232\" id=\"ud0f4f232\">es5</span></code><span data-lake-id=\"u166e29c6\" id=\"u166e29c6\">中的</span><code data-lake-id=\"u26f7157f\" id=\"u26f7157f\"><span data-lake-id=\"u0bb6fcca\" id=\"u0bb6fcca\">Array.prototype.slice.call(arguments)</span></code><span data-lake-id=\"u12914d74\" id=\"u12914d74\">写法。</span></p><ul list=\"u5fbac8f7\"><li fid=\"u77941769\" data-lake-id=\"b48b5a27a394d4abaac94cee5edd0d4b\" id=\"b48b5a27a394d4abaac94cee5edd0d4b\"><strong><span data-lake-id=\"u1a761502\" id=\"u1a761502\">使用</span></strong><code data-lake-id=\"uc1d8b808\" id=\"uc1d8b808\"><strong><span data-lake-id=\"u8f87df7b\" id=\"u8f87df7b\">Math</span></strong></code><strong><span data-lake-id=\"ube075e5f\" id=\"ube075e5f\">函数获取数组中特定的值</span></strong></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20numbers%20%3D%20%5B9%2C%204%2C%207%2C%201%5D%3B%5CnMath.min(...numbers)%3B%20%2F%2F%201%5CnMath.max(...numbers)%3B%20%2F%2F%209%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22NM241%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"8b57a84861492b80a3ad181e4ff3e6b9\" id=\"8b57a84861492b80a3ad181e4ff3e6b9\"><span data-lake-id=\"u6db1cb51\" id=\"u6db1cb51\">7. . 对对象与数组的解构的理解</span></h3><p data-lake-id=\"8a7507d7d02447f64a1036b422e78010\" id=\"8a7507d7d02447f64a1036b422e78010\" style=\"text-align: justify\"><span data-lake-id=\"u9abd6b94\" id=\"u9abd6b94\">解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。</span></p><p data-lake-id=\"3cf574c970286306fb2d90d89756e0da\" id=\"3cf574c970286306fb2d90d89756e0da\"><strong><span data-lake-id=\"u640d5fd9\" id=\"u640d5fd9\">1）数组的解构</span></strong></p><p data-lake-id=\"429a3d2d17bed3787b97edfb4b34449b\" id=\"429a3d2d17bed3787b97edfb4b34449b\" style=\"text-align: justify\"><span data-lake-id=\"u3789f470\" id=\"u3789f470\">在解构数组时，以元素的位置为匹配条件来提取想要的数据的：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%5Ba%2C%20b%2C%20c%5D%20%3D%20%5B1%2C%202%2C%203%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22JgIaD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b229c816bcfcf1c73743e1ee016cb042\" id=\"b229c816bcfcf1c73743e1ee016cb042\" style=\"text-align: justify\"><span data-lake-id=\"u77eedcf9\" id=\"u77eedcf9\">最终，a、b、c分别被赋予了数组第0、1、2个索引位的值：</span></p><p data-lake-id=\"6395acf4da455626164dfc9cd32034ed\" id=\"6395acf4da455626164dfc9cd32034ed\" style=\"text-align: justify\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1616076913177-30749c84-8254-4543-a3e7-c2fb488a4228.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A200%2C%22height%22%3A246%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A456%2C%22originHeight%22%3A560%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fdfdfd%22%2C%22id%22%3A%22AiaF9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"f4cbac229f624fa403821385bf3ea53b\" id=\"f4cbac229f624fa403821385bf3ea53b\" style=\"text-align: justify\"><span data-lake-id=\"u32b54465\" id=\"u32b54465\">数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%5Ba%2C%2Cc%5D%20%3D%20%5B1%2C2%2C3%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Q2q76%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"91544d8b178cb84d2a5927d8232c3b8f\" id=\"91544d8b178cb84d2a5927d8232c3b8f\" style=\"text-align: justify\"><span data-lake-id=\"uf8ee76db\" id=\"uf8ee76db\">通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量：</span></p><p data-lake-id=\"2451855df065afb0a889a06815d2034a\" id=\"2451855df065afb0a889a06815d2034a\" style=\"text-align: justify\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1616076913186-eb8be693-9b19-48e5-bda5-9dbd7cc77ea6.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A200%2C%22height%22%3A158%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A458%2C%22originHeight%22%3A362%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fdfdfd%22%2C%22id%22%3A%22TFGBk%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ef225d76d41b58714a48733422b336f4\" id=\"ef225d76d41b58714a48733422b336f4\"><strong><span data-lake-id=\"ufea17bf4\" id=\"ufea17bf4\">2）对象的解构</span></strong></p><p data-lake-id=\"5092768dd82e6d2cccfea838155687ba\" id=\"5092768dd82e6d2cccfea838155687ba\" style=\"text-align: justify\"><span data-lake-id=\"u40621b0e\" id=\"u40621b0e\">对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20stu%20%3D%20%7B%5Cn%20%20name%3A%20'Bob'%2C%5Cn%20%20age%3A%2024%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SzU1q%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"9654a46aaa392cad5ba4331b70243f2c\" id=\"9654a46aaa392cad5ba4331b70243f2c\" style=\"text-align: justify\"><span data-lake-id=\"u1a22cb32\" id=\"u1a22cb32\">假如想要解构它的两个自有属性，可以这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20name%2C%20age%20%7D%20%3D%20stu%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jNQB6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f3cc1a0111bd9f628ea67880cbe1092f\" id=\"f3cc1a0111bd9f628ea67880cbe1092f\" style=\"text-align: justify\"><span data-lake-id=\"u8c826e47\" id=\"u8c826e47\">这样就得到了 name 和 age 两个和 stu 平级的变量：</span></p><p data-lake-id=\"4b225a18dec73850bf11f54f4bcb5eaa\" id=\"4b225a18dec73850bf11f54f4bcb5eaa\" style=\"text-align: justify\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1616076913314-53687a23-07ef-4a01-a78a-a0304f2b2826.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A200%2C%22height%22%3A149%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A538%2C%22originHeight%22%3A400%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fdfdfc%22%2C%22id%22%3A%22Ayd84%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"7120a4a1f735153d6914ae50bd5e6086\" id=\"7120a4a1f735153d6914ae50bd5e6086\" style=\"text-align: justify\"><span data-lake-id=\"u0c14aeee\" id=\"u0c14aeee\">注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20age%2C%20name%20%7D%20%3D%20stu%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bpeZG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"271b6e887f550bff5a911a489bea7435\" id=\"271b6e887f550bff5a911a489bea7435\"><span data-lake-id=\"ufdbc7a0a\" id=\"ufdbc7a0a\">8. </span><strong><span data-lake-id=\"u68253689\" id=\"u68253689\">如何提取高度嵌套的对象里的指定属性？</span></strong></h3><p data-lake-id=\"9897b4092483357189f70c1b61b5af3c\" id=\"9897b4092483357189f70c1b61b5af3c\" style=\"text-align: justify\"><span data-lake-id=\"ua835e98c\" id=\"ua835e98c\">有时会遇到一些嵌套程度非常深的对象：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20school%20%3D%20%7B%5Cn%20%20%20classes%3A%20%7B%5Cn%20%20%20%20%20%20stu%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20name%3A%20'Bob'%2C%5Cn%20%20%20%20%20%20%20%20%20age%3A%2024%2C%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%225Qlzx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"0fd2ffb7e4c0fd09ffbf278a3d6bad96\" id=\"0fd2ffb7e4c0fd09ffbf278a3d6bad96\" style=\"text-align: justify\"><span data-lake-id=\"u61f17e8a\" id=\"u61f17e8a\">像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20name%20%7D%20%3D%20school%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22xbG6q%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"23536958aee319d9c4af283e50aa5069\" id=\"23536958aee319d9c4af283e50aa5069\" style=\"text-align: justify\"><span data-lake-id=\"u71e58141\" id=\"u71e58141\">显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20classes%20%7D%20%3D%20school%5Cnconst%20%7B%20stu%20%7D%20%3D%20classes%5Cnconst%20%7B%20name%20%7D%20%3D%20stu%5Cnname%20%2F%2F%20'Bob'%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OUIzd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"944354940b1d730b4c7fa47ea916a4c2\" id=\"944354940b1d730b4c7fa47ea916a4c2\" style=\"text-align: justify\"><span data-lake-id=\"u3b692a00\" id=\"u3b692a00\">但是还有一种更标准的做法，可以用一行代码来解决这个问题：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%7B%20classes%3A%20%7B%20stu%3A%20%7B%20name%20%7D%20%7D%7D%20%3D%20school%5Cn%20%20%20%20%20%20%20%5Cnconsole.log(name)%20%20%2F%2F%20'Bob'%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22XRner%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"770381608cc9dc4d1a32ef300d32e1d3\" id=\"770381608cc9dc4d1a32ef300d32e1d3\" style=\"text-align: justify\"><span data-lake-id=\"u7b1f27ab\" id=\"u7b1f27ab\">可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。</span></p><h3 data-lake-id=\"4fa0a3b12c5a4057fa65ef2ce55eb7fa\" id=\"4fa0a3b12c5a4057fa65ef2ce55eb7fa\"><span data-lake-id=\"u20987a08\" id=\"u20987a08\">9. 对 rest 参数的理解</span></h3><p data-lake-id=\"2a6447757c57bd8ef938ba32e4a1a48c\" id=\"2a6447757c57bd8ef938ba32e4a1a48c\" style=\"text-align: justify\"><span data-lake-id=\"u2ced5b19\" id=\"u2ced5b19\">扩展运算符被用在函数形参上时，</span><strong><span data-lake-id=\"u1fe43309\" id=\"u1fe43309\">它还可以把一个分离的参数序列整合成一个数组</span></strong><span data-lake-id=\"u0f42e2aa\" id=\"u0f42e2aa\">：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20mutiple(...args)%20%7B%5Cn%20%20let%20result%20%3D%201%3B%5Cn%20%20for%20(var%20val%20of%20args)%20%7B%5Cn%20%20%20%20result%20*%3D%20val%3B%5Cn%20%20%7D%5Cn%20%20return%20result%3B%5Cn%7D%5Cnmutiple(1%2C%202%2C%203%2C%204)%20%2F%2F%2024%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PzEhT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"87f50409422d06776f26860d7b9e4973\" id=\"87f50409422d06776f26860d7b9e4973\" style=\"text-align: justify\"><span data-lake-id=\"u5848968d\" id=\"u5848968d\">这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20mutiple(...args)%20%7B%5Cn%20%20console.log(args)%5Cn%7D%5Cnmutiple(1%2C%202%2C%203%2C%204)%20%2F%2F%20%5B1%2C%202%2C%203%2C%204%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aeOtz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4e215a2ecc48c55099775e46157ab6bd\" id=\"4e215a2ecc48c55099775e46157ab6bd\" style=\"text-align: justify\"><span data-lake-id=\"ue78015e4\" id=\"ue78015e4\">这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点</span><strong><span data-lake-id=\"uca0da50c\" id=\"uca0da50c\">经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。</span></strong></p><h3 data-lake-id=\"60c7c45633efd28b67db39af2fe0a104\" id=\"60c7c45633efd28b67db39af2fe0a104\"><span data-lake-id=\"ucc6c3d51\" id=\"ucc6c3d51\">10. ES6中模板语法与字符串处理</span></h3><p data-lake-id=\"4d4fbfa0cc3399e0d72ff855d23c9596\" id=\"4d4fbfa0cc3399e0d72ff855d23c9596\" style=\"text-align: justify\"><span data-lake-id=\"u3b4d8d02\" id=\"u3b4d8d02\">ES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%20%3D%20'css'%20%20%20%5Cnvar%20career%20%3D%20'coder'%20%5Cnvar%20hobby%20%3D%20%5B'coding'%2C%20'writing'%5D%5Cnvar%20finalString%20%3D%20'my%20name%20is%20'%20%2B%20name%20%2B%20'%2C%20I%20work%20as%20a%20'%20%2B%20career%20%2B%20'%2C%20I%20love%20'%20%2B%20hobby%5B0%5D%20%2B%20'%20and%20'%20%2B%20hobby%5B1%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vakqM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"5e33290e4ec989a35d8bc08da17990b0\" id=\"5e33290e4ec989a35d8bc08da17990b0\" style=\"text-align: justify\"><span data-lake-id=\"u064b3450\" id=\"u064b3450\">仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20name%20%3D%20'css'%20%20%20%5Cnvar%20career%20%3D%20'coder'%20%5Cnvar%20hobby%20%3D%20%5B'coding'%2C%20'writing'%5D%5Cnvar%20finalString%20%3D%20%60my%20name%20is%20%24%7Bname%7D%2C%20I%20work%20as%20a%20%24%7Bcareer%7D%20I%20love%20%24%7Bhobby%5B0%5D%7D%20and%20%24%7Bhobby%5B1%5D%7D%60%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FGIjk%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"abb0d7a124ca72ef35cdc5061aeb208c\" id=\"abb0d7a124ca72ef35cdc5061aeb208c\" style=\"text-align: justify\"><span data-lake-id=\"u764429d9\" id=\"u764429d9\">字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：</span></p><ul list=\"u3f64ea3f\"><li fid=\"u24cae4ec\" data-lake-id=\"e41d678e5c87a2c9a85cc888ad3a00f0\" id=\"e41d678e5c87a2c9a85cc888ad3a00f0\"><span data-lake-id=\"ub31be816\" id=\"ub31be816\">在模板字符串中，空格、缩进、换行都会被保留</span></li><li fid=\"u24cae4ec\" data-lake-id=\"3f592c6248db3e94bb3c60cf44cba26d\" id=\"3f592c6248db3e94bb3c60cf44cba26d\"><span data-lake-id=\"u38c06dc1\" id=\"u38c06dc1\">模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算</span></li></ul><p data-lake-id=\"d1bd667bdf4d7b66e4d810d3de2a4931\" id=\"d1bd667bdf4d7b66e4d810d3de2a4931\" style=\"text-align: justify\"><br></p><p data-lake-id=\"439b94152e4e208582c62480aa61dd7f\" id=\"439b94152e4e208582c62480aa61dd7f\" style=\"text-align: justify\"><span data-lake-id=\"u1a517116\" id=\"u1a517116\">基于第一点，可以在模板字符串里无障碍地直接写 html 代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20list%20%3D%20%60%5Cn%5Ct%3Cul%3E%5Cn%5Ct%5Ct%3Cli%3E%E5%88%97%E8%A1%A8%E9%A1%B91%3C%2Fli%3E%5Cn%5Ct%5Ct%3Cli%3E%E5%88%97%E8%A1%A8%E9%A1%B92%3C%2Fli%3E%5Cn%5Ct%3C%2Ful%3E%5Cn%60%3B%5Cnconsole.log(message)%3B%20%2F%2F%20%E6%AD%A3%E7%A1%AE%E8%BE%93%E5%87%BA%EF%BC%8C%E4%B8%8D%E5%AD%98%E5%9C%A8%E6%8A%A5%E9%94%99%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22adW0q%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"a71e8ac113b8f7e0fe91a2722117d135\" id=\"a71e8ac113b8f7e0fe91a2722117d135\" style=\"text-align: justify\"><span data-lake-id=\"u86ccae83\" id=\"u86ccae83\">基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20add(a%2C%20b)%20%7B%5Cn%20%20const%20finalString%20%3D%20%60%24%7Ba%7D%20%2B%20%24%7Bb%7D%20%3D%20%24%7Ba%2Bb%7D%60%5Cn%20%20console.log(finalString)%5Cn%7D%5Cnadd(1%2C%202)%20%2F%2F%20%E8%BE%93%E5%87%BA%20'1%20%2B%202%20%3D%203'%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22N7r6l%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"daddfdcfd2313a0f4fb6dd45afdfc55a\" id=\"daddfdcfd2313a0f4fb6dd45afdfc55a\" style=\"text-align: justify\"><span data-lake-id=\"u1dc7f7dc\" id=\"u1dc7f7dc\">除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：</span></p><ul list=\"ua5f36155\"><li fid=\"u0bc85fb4\" data-lake-id=\"2d60c0ba1a98e1e6852814a15427ed01\" id=\"2d60c0ba1a98e1e6852814a15427ed01\"><strong><span data-lake-id=\"u66bf2b4e\" id=\"u66bf2b4e\">存在性判定</span></strong><span data-lake-id=\"uc29f8ea0\" id=\"uc29f8ea0\">：在过去，当判断一个字符/字符串是否在某字符串中时，只能用 indexOf &gt; -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。</span></li></ul><ul list=\"u1fa519ab\" data-lake-indent=\"1\"><li fid=\"u131769cf\" data-lake-id=\"22e79d4de4d0184c9774473fe327277d\" id=\"22e79d4de4d0184c9774473fe327277d\"><strong><span data-lake-id=\"u2b6de118\" id=\"u2b6de118\">includes</span></strong><span data-lake-id=\"u67fe4f50\" id=\"u67fe4f50\">：判断字符串与子串的包含关系：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20son%20%3D%20'haha'%20%5Cnconst%20father%20%3D%20'xixi%20haha%20hehe'%5Cnfather.includes(son)%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GMTQt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ua80a7eb1\" data-lake-indent=\"1\"><li fid=\"u18ab7fac\" data-lake-id=\"407b57656f4328baf2ec4441ac701d96\" id=\"407b57656f4328baf2ec4441ac701d96\"><strong><span data-lake-id=\"ue5638d87\" id=\"ue5638d87\">startsWith</span></strong><span data-lake-id=\"u151f6ee7\" id=\"u151f6ee7\">：判断字符串是否以某个/某串字符开头：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20father%20%3D%20'xixi%20haha%20hehe'%5Cnfather.startsWith('haha')%20%2F%2F%20false%5Cnfather.startsWith('xixi')%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22srG69%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ua6ecd0d0\" data-lake-indent=\"1\"><li fid=\"ub932dda2\" data-lake-id=\"998e89544321bc13403ef7d26f1fe444\" id=\"998e89544321bc13403ef7d26f1fe444\"><strong><span data-lake-id=\"u1f80aae0\" id=\"u1f80aae0\">endsWith</span></strong><span data-lake-id=\"u33436c75\" id=\"u33436c75\">：判断字符串是否以某个/某串字符结尾：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20father%20%3D%20'xixi%20haha%20hehe'%5Cn%20%20father.endsWith('hehe')%20%2F%2F%20true%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%2209sLj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"uc0d12d7b\"><li fid=\"u141ad8ba\" data-lake-id=\"652c2def7aa1283f69836bfbb926a236\" id=\"652c2def7aa1283f69836bfbb926a236\"><strong><span data-lake-id=\"u666b3bda\" id=\"u666b3bda\">自动重复</span></strong><span data-lake-id=\"u90c2c86b\" id=\"u90c2c86b\">：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20sourceCode%20%3D%20'repeat%20for%203%20times%3B'%5Cnconst%20repeated%20%3D%20sourceCode.repeat(3)%20%5Cnconsole.log(repeated)%20%2F%2F%20repeat%20for%203%20times%3Brepeat%20for%203%20times%3Brepeat%20for%203%20times%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22D83fq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"ZR89W\" id=\"ZR89W\"><span data-lake-id=\"u40a9f226\" id=\"u40a9f226\">三、JavaScript基础</span></h2><h3 data-lake-id=\"b379a33f489bee26164dd7b36ef6dc86\" id=\"b379a33f489bee26164dd7b36ef6dc86\"><span data-lake-id=\"u7b9e1571\" id=\"u7b9e1571\">1. </span><span data-lake-id=\"u6e1d8448\" id=\"u6e1d8448\">new操作符的实现原理</span></h3><p data-lake-id=\"4bfc8e63a9a07b3a62924d197dd596e4\" id=\"4bfc8e63a9a07b3a62924d197dd596e4\"><strong><span data-lake-id=\"u74b2fd4a\" id=\"u74b2fd4a\">new操作符的执行过程：</span></strong></p><p data-lake-id=\"75877ec1b2727294c395f4576f7fd4da\" id=\"75877ec1b2727294c395f4576f7fd4da\"><span data-lake-id=\"u64fd4e71\" id=\"u64fd4e71\">（1）首先创建了一个新的空对象</span></p><p data-lake-id=\"8da711fca492263654c09086559086d4\" id=\"8da711fca492263654c09086559086d4\"><span data-lake-id=\"uff095fc9\" id=\"uff095fc9\">（2）设置原型，将对象的原型设置为函数的 prototype 对象。</span></p><p data-lake-id=\"fc709b48c930c3ee6ba70ef41176e24a\" id=\"fc709b48c930c3ee6ba70ef41176e24a\"><span data-lake-id=\"u76487433\" id=\"u76487433\">（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</span></p><p data-lake-id=\"1ab61a68e1f8eb54575243739a3b2f87\" id=\"1ab61a68e1f8eb54575243739a3b2f87\"><span data-lake-id=\"u24c090fe\" id=\"u24c090fe\">（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</span></p><p data-lake-id=\"b3a8e0d74d2f87e66d3b5d698e0ea6d2\" id=\"b3a8e0d74d2f87e66d3b5d698e0ea6d2\"><br></p><p data-lake-id=\"3602fcae7bb66b15172291d0b666968a\" id=\"3602fcae7bb66b15172291d0b666968a\"><span data-lake-id=\"uc879da60\" id=\"uc879da60\">具体实现：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20objectFactory()%20%7B%5Cn%20%20let%20newObject%20%3D%20null%3B%5Cn%20%20let%20constructor%20%3D%20Array.prototype.shift.call(arguments)%3B%5Cn%20%20let%20result%20%3D%20null%3B%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E5%8F%82%E6%95%B0%E6%98%AF%E5%90%A6%E6%98%AF%E4%B8%80%E4%B8%AA%E5%87%BD%E6%95%B0%5Cn%20%20if%20(typeof%20constructor%20!%3D%3D%20%5C%22function%5C%22)%20%7B%5Cn%20%20%20%20console.error(%5C%22type%20error%5C%22)%3B%5Cn%20%20%20%20return%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%A9%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8E%9F%E5%9E%8B%E4%B8%BA%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E7%9A%84%20prototype%20%E5%AF%B9%E8%B1%A1%5Cn%20%20newObject%20%3D%20Object.create(constructor.prototype)%3B%5Cn%20%20%2F%2F%20%E5%B0%86%20this%20%E6%8C%87%E5%90%91%E6%96%B0%E5%BB%BA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E5%B9%B6%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%5Cn%20%20result%20%3D%20constructor.apply(newObject%2C%20arguments)%3B%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E8%BF%94%E5%9B%9E%E5%AF%B9%E8%B1%A1%5Cn%20%20let%20flag%20%3D%20result%20%26%26%20(typeof%20result%20%3D%3D%3D%20%5C%22object%5C%22%20%7C%7C%20typeof%20result%20%3D%3D%3D%20%5C%22function%5C%22)%3B%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%5Cn%20%20return%20flag%20%3F%20result%20%3A%20newObject%3B%5Cn%7D%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%5CnobjectFactory(%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%2C%20%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8F%82%E6%95%B0)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Q8jQm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"5803432b1a6213c03468c554af380c5f\" id=\"5803432b1a6213c03468c554af380c5f\"><span data-lake-id=\"uf43e2053\" id=\"uf43e2053\">2. map和Object的区别</span></h3><table data-lake-id=\"xdqXW\" id=\"xdqXW\" margin=\"true\" class=\"lake-table\" style=\"width: 935px\"><colgroup><col width=\"114\"><col width=\"415\"><col width=\"406\"></colgroup><tbody><tr data-lake-id=\"u93444465\" id=\"u93444465\" style=\"height: 33px\"><td data-lake-id=\"u125390a5\" id=\"u125390a5\" style=\"background-color: #EFF3F5; vertical-align: middle\"></td><td data-lake-id=\"ue02b599c\" id=\"ue02b599c\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u0a05b894\" id=\"u0a05b894\" style=\"text-align: center\"><span data-lake-id=\"u3a85b4d2\" id=\"u3a85b4d2\">Map</span></p></td><td data-lake-id=\"uec439c75\" id=\"uec439c75\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u4045cddd\" id=\"u4045cddd\" style=\"text-align: center\"><span data-lake-id=\"u067e0099\" id=\"u067e0099\">Object</span></p></td></tr><tr data-lake-id=\"u8af3c220\" id=\"u8af3c220\" style=\"height: 33px\"><td data-lake-id=\"u3e5d5695\" id=\"u3e5d5695\" style=\"vertical-align: middle\"><p data-lake-id=\"u84f2a67b\" id=\"u84f2a67b\" style=\"text-align: center\"><span data-lake-id=\"u3af0efe6\" id=\"u3af0efe6\">意外的键</span></p></td><td data-lake-id=\"u1f76c2d3\" id=\"u1f76c2d3\" style=\"vertical-align: middle\"><p data-lake-id=\"ubb18accf\" id=\"ubb18accf\" style=\"text-align: center\"><span data-lake-id=\"u86909cce\" id=\"u86909cce\">Map默认情况不包含任何键，只包含显式插入的键。</span></p></td><td data-lake-id=\"u7f23f394\" id=\"u7f23f394\" style=\"vertical-align: middle\"><p data-lake-id=\"u859da63d\" id=\"u859da63d\" style=\"text-align: center\"><span data-lake-id=\"u0f84bddc\" id=\"u0f84bddc\">Object 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。</span></p></td></tr><tr data-lake-id=\"u3d0962b0\" id=\"u3d0962b0\" style=\"height: 33px\"><td data-lake-id=\"uec8dde9c\" id=\"uec8dde9c\" style=\"vertical-align: middle\"><p data-lake-id=\"u498b0689\" id=\"u498b0689\" style=\"text-align: center\"><span data-lake-id=\"uba1b8da7\" id=\"uba1b8da7\">键的类型</span></p></td><td data-lake-id=\"u783fb6da\" id=\"u783fb6da\" style=\"vertical-align: middle\"><p data-lake-id=\"ucba58e6b\" id=\"ucba58e6b\" style=\"text-align: center\"><span data-lake-id=\"u620c0078\" id=\"u620c0078\">Map的键可以是任意值，包括函数、对象或任意基本类型。</span></p></td><td data-lake-id=\"u1e3b1bd0\" id=\"u1e3b1bd0\" style=\"vertical-align: middle\"><p data-lake-id=\"ue33efbf4\" id=\"ue33efbf4\" style=\"text-align: center\"><span data-lake-id=\"ue1a3c5a5\" id=\"ue1a3c5a5\">Object 的键必须是 String 或是Symbol。</span></p></td></tr><tr data-lake-id=\"u8d63ee17\" id=\"u8d63ee17\" style=\"height: 33px\"><td data-lake-id=\"u88dec026\" id=\"u88dec026\" style=\"vertical-align: middle\"><p data-lake-id=\"u90c824df\" id=\"u90c824df\" style=\"text-align: center\"><span data-lake-id=\"u0b0d37f0\" id=\"u0b0d37f0\">键的顺序</span></p></td><td data-lake-id=\"ucd42dc29\" id=\"ucd42dc29\" style=\"vertical-align: middle\"><p data-lake-id=\"udeaa3373\" id=\"udeaa3373\" style=\"text-align: center\"><span data-lake-id=\"ud41aec96\" id=\"ud41aec96\">Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。</span></p></td><td data-lake-id=\"u2225c340\" id=\"u2225c340\" style=\"vertical-align: middle\"><p data-lake-id=\"ua35af43e\" id=\"ua35af43e\" style=\"text-align: center\"><span data-lake-id=\"u3c733cfe\" id=\"u3c733cfe\">Object 的键是无序的</span></p></td></tr><tr data-lake-id=\"uc0d69341\" id=\"uc0d69341\" style=\"height: 33px\"><td data-lake-id=\"uf73f1136\" id=\"uf73f1136\" style=\"vertical-align: middle\"><p data-lake-id=\"u92190406\" id=\"u92190406\" style=\"text-align: center\"><span data-lake-id=\"u5bcf209a\" id=\"u5bcf209a\">Size</span></p></td><td data-lake-id=\"u71729402\" id=\"u71729402\" style=\"vertical-align: middle\"><p data-lake-id=\"u00c05a08\" id=\"u00c05a08\" style=\"text-align: center\"><span data-lake-id=\"ua9b2d39b\" id=\"ua9b2d39b\">Map 的键值对个数可以轻易地通过size 属性获取</span></p></td><td data-lake-id=\"u588b8998\" id=\"u588b8998\" style=\"vertical-align: middle\"><p data-lake-id=\"ub8f912a9\" id=\"ub8f912a9\" style=\"text-align: center\"><span data-lake-id=\"u8dccd588\" id=\"u8dccd588\">Object 的键值对个数只能手动计算</span></p></td></tr><tr data-lake-id=\"u552b9d74\" id=\"u552b9d74\" style=\"height: 33px\"><td data-lake-id=\"u98f7ea6d\" id=\"u98f7ea6d\" style=\"vertical-align: middle\"><p data-lake-id=\"u79b51762\" id=\"u79b51762\" style=\"text-align: center\"><span data-lake-id=\"u1490b29c\" id=\"u1490b29c\">迭代</span></p></td><td data-lake-id=\"uee622885\" id=\"uee622885\" style=\"vertical-align: middle\"><p data-lake-id=\"u2d8d142b\" id=\"u2d8d142b\" style=\"text-align: center\"><span data-lake-id=\"u2d235f66\" id=\"u2d235f66\">Map 是 iterable 的，所以可以直接被迭代。</span></p></td><td data-lake-id=\"uf546c18a\" id=\"uf546c18a\" style=\"vertical-align: middle\"><p data-lake-id=\"u42e87000\" id=\"u42e87000\" style=\"text-align: center\"><span data-lake-id=\"uc6417d2f\" id=\"uc6417d2f\">迭代Object需要以某种方式获取它的键然后才能迭代。</span></p></td></tr><tr data-lake-id=\"u90255125\" id=\"u90255125\" style=\"height: 33px\"><td data-lake-id=\"u4ad444af\" id=\"u4ad444af\" style=\"vertical-align: middle\"><p data-lake-id=\"u23024695\" id=\"u23024695\" style=\"text-align: center\"><span data-lake-id=\"ub3a8c302\" id=\"ub3a8c302\">性能</span></p></td><td data-lake-id=\"u0da31a42\" id=\"u0da31a42\" style=\"vertical-align: middle\"><p data-lake-id=\"u82ae021a\" id=\"u82ae021a\" style=\"text-align: center\"><span data-lake-id=\"u5add29be\" id=\"u5add29be\">在频繁增删键值对的场景下表现更好。</span></p></td><td data-lake-id=\"ude00ac29\" id=\"ude00ac29\" style=\"vertical-align: middle\"><p data-lake-id=\"uc0708851\" id=\"uc0708851\" style=\"text-align: center\"><span data-lake-id=\"ub75f0a21\" id=\"ub75f0a21\">在频繁添加和删除键值对的场景下未作出优化。</span></p></td></tr></tbody></table><h3 data-lake-id=\"e478c5f8fab82bfd82857da9ebfdd0d1\" id=\"e478c5f8fab82bfd82857da9ebfdd0d1\"><span data-lake-id=\"uedcc2b98\" id=\"uedcc2b98\">3. map和weakMap的区别</span></h3><p data-lake-id=\"b520a29aff0fbd560cc161b6633acab1\" id=\"b520a29aff0fbd560cc161b6633acab1\"><strong><span data-lake-id=\"uc1bf12fc\" id=\"uc1bf12fc\" class=\"lake-fontsize-12\">（1）Map</span></strong></p><p data-lake-id=\"c806e99801d1e708bb09cb560c408b3a\" id=\"c806e99801d1e708bb09cb560c408b3a\"><span data-lake-id=\"u2b0ec850\" id=\"u2b0ec850\">map本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。</span></p><p data-lake-id=\"e4295665e6a243028eb01b66d5826319\" id=\"e4295665e6a243028eb01b66d5826319\"><br></p><p data-lake-id=\"067d94ef1a75c89a8088feaad8916538\" id=\"067d94ef1a75c89a8088feaad8916538\"><span data-lake-id=\"u6de442aa\" id=\"u6de442aa\">实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20map%20%3D%20%5B%5Cn%20%20%20%20%20%5B%5C%22name%5C%22%2C%5C%22%E5%BC%A0%E4%B8%89%5C%22%5D%2C%5Cn%20%20%20%20%20%5B%5C%22age%5C%22%2C18%5D%2C%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22j7HvL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"9c448212e96410b070b6f841ac3f8bc5\" id=\"9c448212e96410b070b6f841ac3f8bc5\"><span data-lake-id=\"u590a9868\" id=\"u590a9868\">Map数据结构有以下操作方法：</span></p><ul list=\"ub467fa23\"><li fid=\"udf8f7d3d\" data-lake-id=\"2ccaa5e2bf3d572e9882c4c087e82dbb\" id=\"2ccaa5e2bf3d572e9882c4c087e82dbb\"><strong><span data-lake-id=\"ucc23f3e2\" id=\"ucc23f3e2\">size</span></strong><span data-lake-id=\"u5a2870a6\" id=\"u5a2870a6\">： </span><code data-lake-id=\"ufc71808e\" id=\"ufc71808e\"><span data-lake-id=\"u997fe561\" id=\"u997fe561\">map.size</span></code><span data-lake-id=\"u8c01b3c7\" id=\"u8c01b3c7\"> 返回Map结构的成员总数。</span></li><li fid=\"udf8f7d3d\" data-lake-id=\"77b30d625febf6e1cdb7ca78156bc71f\" id=\"77b30d625febf6e1cdb7ca78156bc71f\"><strong><span data-lake-id=\"uec65c60c\" id=\"uec65c60c\">set(key,value)</span></strong><span data-lake-id=\"u7969c7b0\" id=\"u7969c7b0\">：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</span></li><li fid=\"udf8f7d3d\" data-lake-id=\"e6d33eaa22aacca0cb059128c73f6e6c\" id=\"e6d33eaa22aacca0cb059128c73f6e6c\"><strong><span data-lake-id=\"u75664321\" id=\"u75664321\">get(key)</span></strong><span data-lake-id=\"uf3a3da4e\" id=\"uf3a3da4e\">：该方法读取key对应的键值，如果找不到key，返回undefined。</span></li><li fid=\"udf8f7d3d\" data-lake-id=\"a03c64ca6e3f96b7ef3470c09f035827\" id=\"a03c64ca6e3f96b7ef3470c09f035827\"><strong><span data-lake-id=\"ucb0a78cc\" id=\"ucb0a78cc\">has(key)</span></strong><span data-lake-id=\"u77b4ebea\" id=\"u77b4ebea\">：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</span></li><li fid=\"udf8f7d3d\" data-lake-id=\"df02138f538cea646e8dcf7c47913ec4\" id=\"df02138f538cea646e8dcf7c47913ec4\"><strong><span data-lake-id=\"uaa2ca897\" id=\"uaa2ca897\">delete(key)</span></strong><span data-lake-id=\"ua4ddefe3\" id=\"ua4ddefe3\">：该方法删除某个键，返回true，如果删除失败，返回false。</span></li><li fid=\"udf8f7d3d\" data-lake-id=\"cb3d656ed87eddd8ef4467c6212380a9\" id=\"cb3d656ed87eddd8ef4467c6212380a9\"><strong><span data-lake-id=\"u0cd81208\" id=\"u0cd81208\">clear()</span></strong><span data-lake-id=\"u76f8ed48\" id=\"u76f8ed48\">：map.clear()清除所有成员，没有返回值。</span></li></ul><p data-lake-id=\"9da72dc8a921bfb70f92de063d7e3509\" id=\"9da72dc8a921bfb70f92de063d7e3509\"><br></p><p data-lake-id=\"6a80c1d5acad692cf9474b876d92b1ea\" id=\"6a80c1d5acad692cf9474b876d92b1ea\"><span data-lake-id=\"uabdeb310\" id=\"uabdeb310\">Map结构原生提供是三个遍历器生成函数和一个遍历方法</span></p><ul list=\"u0be9b2d1\"><li fid=\"u84cb10a3\" data-lake-id=\"7c7a2e74552413a583d8b091340288c5\" id=\"7c7a2e74552413a583d8b091340288c5\"><span data-lake-id=\"u45e7b5d6\" id=\"u45e7b5d6\">keys()：返回键名的遍历器。</span></li><li fid=\"u84cb10a3\" data-lake-id=\"d239fde1247b385aba40225c78ebbd88\" id=\"d239fde1247b385aba40225c78ebbd88\"><span data-lake-id=\"u272b91f6\" id=\"u272b91f6\">values()：返回键值的遍历器。</span></li><li fid=\"u84cb10a3\" data-lake-id=\"fd223a48ea4383596ad1ca2a44320d2d\" id=\"fd223a48ea4383596ad1ca2a44320d2d\"><span data-lake-id=\"u22b29675\" id=\"u22b29675\">entries()：返回所有成员的遍历器。</span></li><li fid=\"u84cb10a3\" data-lake-id=\"0ee7bd9c6ebae2d621642773bdcab3c5\" id=\"0ee7bd9c6ebae2d621642773bdcab3c5\"><span data-lake-id=\"u5c13364b\" id=\"u5c13364b\">forEach()：遍历Map的所有成员。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20map%20%3D%20new%20Map(%5B%5Cn%20%20%20%20%20%5B%5C%22foo%5C%22%2C1%5D%2C%5Cn%20%20%20%20%20%5B%5C%22bar%5C%22%2C2%5D%2C%5Cn%5D)%5Cnfor(let%20key%20of%20map.keys())%7B%5Cn%20%20%20%20console.log(key)%3B%20%20%2F%2F%20foo%20bar%5Cn%7D%5Cnfor(let%20value%20of%20map.values())%7B%5Cn%20%20%20%20%20console.log(value)%3B%20%2F%2F%201%202%5Cn%7D%5Cnfor(let%20items%20of%20map.entries())%7B%5Cn%20%20%20%20console.log(items)%3B%20%20%2F%2F%20%5B%5C%22foo%5C%22%2C1%5D%20%20%5B%5C%22bar%5C%22%2C2%5D%5Cn%7D%5Cnmap.forEach(%20(value%2Ckey%2Cmap)%20%3D%3E%20%7B%5Cn%20%20%20%20%20console.log(key%2Cvalue)%3B%20%2F%2F%20foo%201%20%20%20%20bar%202%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hkwbs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f80b9fd9294b2c1e8f71adc6e88230e2\" id=\"f80b9fd9294b2c1e8f71adc6e88230e2\"><strong><span data-lake-id=\"uee07f89e\" id=\"uee07f89e\">（2）WeakMap</span></strong></p><p data-lake-id=\"668f13331d5566934a4ef548958ecc81\" id=\"668f13331d5566934a4ef548958ecc81\"><span data-lake-id=\"uc9619afc\" id=\"uc9619afc\">WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。</span><strong><span data-lake-id=\"u02318aa9\" id=\"u02318aa9\">其键必须是对象</span></strong><span data-lake-id=\"u3929a4f2\" id=\"u3929a4f2\">，原始数据类型不能作为key值，而值可以是任意的。</span></p><p data-lake-id=\"8dbe66cb73a2f506e3f6896988a3da1b\" id=\"8dbe66cb73a2f506e3f6896988a3da1b\"><br></p><p data-lake-id=\"52a6f63bd4e280980c331ee53b726515\" id=\"52a6f63bd4e280980c331ee53b726515\"><span data-lake-id=\"ub26752ed\" id=\"ub26752ed\">该对象也有以下几种方法：</span></p><ul list=\"u3b5ec13b\"><li fid=\"u4fad527b\" data-lake-id=\"aaa4d754bff0e44ac5c523e2d9df8626\" id=\"aaa4d754bff0e44ac5c523e2d9df8626\"><strong><span data-lake-id=\"ub0998585\" id=\"ub0998585\">set(key,value)</span></strong><span data-lake-id=\"u608fdb1f\" id=\"u608fdb1f\">：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）</span></li><li fid=\"u4fad527b\" data-lake-id=\"2a7a8bcab33c628eb91cf1aae09a1ec6\" id=\"2a7a8bcab33c628eb91cf1aae09a1ec6\"><strong><span data-lake-id=\"u4b6a72f3\" id=\"u4b6a72f3\">get(key)</span></strong><span data-lake-id=\"u905cd282\" id=\"u905cd282\">：该方法读取key对应的键值，如果找不到key，返回undefined。</span></li><li fid=\"u4fad527b\" data-lake-id=\"832d5325a86dab0c589642f3307be318\" id=\"832d5325a86dab0c589642f3307be318\"><strong><span data-lake-id=\"u653b8d24\" id=\"u653b8d24\">has(key)</span></strong><span data-lake-id=\"ud800d2da\" id=\"ud800d2da\">：该方法返回一个布尔值，表示某个键是否在当前Map对象中。</span></li><li fid=\"u4fad527b\" data-lake-id=\"89151808c8c58500874ddb7821926bb3\" id=\"89151808c8c58500874ddb7821926bb3\"><strong><span data-lake-id=\"u67859164\" id=\"u67859164\">delete(key)</span></strong><span data-lake-id=\"u4f81b4ca\" id=\"u4f81b4ca\">：该方法删除某个键，返回true，如果删除失败，返回false。</span></li></ul><p data-lake-id=\"39975facd8689db2c56744354137d809\" id=\"39975facd8689db2c56744354137d809\"><span data-lake-id=\"u25228d9b\" id=\"u25228d9b\">其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。</span></p><p data-lake-id=\"99398bf86fd7c677f01f6cb499fbc543\" id=\"99398bf86fd7c677f01f6cb499fbc543\"><br></p><p data-lake-id=\"364f85a8b0fde2d1e81b2bcc12c375c7\" id=\"364f85a8b0fde2d1e81b2bcc12c375c7\"><span data-lake-id=\"ud7bf28d4\" id=\"ud7bf28d4\">WeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</span></p><p data-lake-id=\"6168ba35a762a9a8e042cd85dc27850c\" id=\"6168ba35a762a9a8e042cd85dc27850c\"><br></p><p data-lake-id=\"e602166382a0678977ca22d8dae59377\" id=\"e602166382a0678977ca22d8dae59377\"><span data-lake-id=\"ud1829ba9\" id=\"ud1829ba9\">而WeakMap的</span><strong><span data-lake-id=\"uf178aede\" id=\"uf178aede\">键名所引用的对象都是弱引用</span></strong><span data-lake-id=\"ub723de63\" id=\"ub723de63\">，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的</span><strong><span data-lake-id=\"u86fe977a\" id=\"u86fe977a\">键名对象和所对应的键值对会自动消失，不用手动删除引用</span></strong><span data-lake-id=\"u6bc2da9a\" id=\"u6bc2da9a\">。</span></p><p data-lake-id=\"90746c11b4f852298d45a99959b21a4f\" id=\"90746c11b4f852298d45a99959b21a4f\"><br></p><p data-lake-id=\"6adf952b0c35bacbb563b7ca7bd01351\" id=\"6adf952b0c35bacbb563b7ca7bd01351\"><strong><span data-lake-id=\"uc0f09028\" id=\"uc0f09028\">总结：</span></strong></p><ul list=\"u98d27da9\"><li fid=\"u3ccba64d\" data-lake-id=\"2c57115e3c13f93b639d8c12936cccec\" id=\"2c57115e3c13f93b639d8c12936cccec\"><span data-lake-id=\"u0e7ab6ec\" id=\"u0e7ab6ec\">Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</span></li><li fid=\"u3ccba64d\" data-lake-id=\"00f9a336bc526aa13ad1a4d547b54efe\" id=\"00f9a336bc526aa13ad1a4d547b54efe\"><span data-lake-id=\"ud23cd7bd\" id=\"ud23cd7bd\">WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。</span></li></ul><h3 data-lake-id=\"ea4fdb2f08416109e5cfda9c11c15292\" id=\"ea4fdb2f08416109e5cfda9c11c15292\"><span data-lake-id=\"u095c95a2\" id=\"u095c95a2\">4. JavaScript有哪些内置对象</span></h3><p data-lake-id=\"1fa4b66f0fb8af4693e4b4760b578e90\" id=\"1fa4b66f0fb8af4693e4b4760b578e90\"><span data-lake-id=\"u8431c281\" id=\"u8431c281\">全局的对象（ global objects ）或称标准内置对象，不要和 &quot;全局对象（global object）&quot; 混淆。这里说的全局的对象是说在</span></p><p data-lake-id=\"b32cc114f4e1e6f41a970dcc6384bebb\" id=\"b32cc114f4e1e6f41a970dcc6384bebb\"><span data-lake-id=\"uf1ccf381\" id=\"uf1ccf381\">全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。</span></p><p data-lake-id=\"14d937b5c7c94ea801fd9fe496846d50\" id=\"14d937b5c7c94ea801fd9fe496846d50\"><br></p><p data-lake-id=\"973dd846c62f99f41e9ecf8d0eaf84c4\" id=\"973dd846c62f99f41e9ecf8d0eaf84c4\"><strong><span data-lake-id=\"u0b06db83\" id=\"u0b06db83\">标准内置对象的分类：</span></strong></p><p data-lake-id=\"441c5e13eb0e62bff9ae5b3df7b0b32f\" id=\"441c5e13eb0e62bff9ae5b3df7b0b32f\"><span data-lake-id=\"u38df8f4a\" id=\"u38df8f4a\">（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。</span></p><p data-lake-id=\"b4cc1334a61115e02cb14bb52123723f\" id=\"b4cc1334a61115e02cb14bb52123723f\"><span data-lake-id=\"uc6d50321\" id=\"uc6d50321\">例如 Infinity、NaN、undefined、null 字面量</span></p><p data-lake-id=\"16a880914167d1f34eb2efea97058838\" id=\"16a880914167d1f34eb2efea97058838\"><span data-lake-id=\"uad76d457\" id=\"uad76d457\">（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。</span></p><p data-lake-id=\"e30d7fe53f945a5050af2a02f858ac24\" id=\"e30d7fe53f945a5050af2a02f858ac24\"><span data-lake-id=\"uc923fd05\" id=\"uc923fd05\">例如 eval()、parseFloat()、parseInt() 等</span></p><p data-lake-id=\"e185ae315911faa3eaf45cd19bad3aa0\" id=\"e185ae315911faa3eaf45cd19bad3aa0\"><span data-lake-id=\"u55734b26\" id=\"u55734b26\">（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。</span></p><p data-lake-id=\"6eac1a70835f0ff5988ac6a3c53ed06e\" id=\"6eac1a70835f0ff5988ac6a3c53ed06e\"><span data-lake-id=\"u86642937\" id=\"u86642937\">例如 Object、Function、Boolean、Symbol、Error 等</span></p><p data-lake-id=\"3688bfa45da6d9f31388f8a668fae13f\" id=\"3688bfa45da6d9f31388f8a668fae13f\"><span data-lake-id=\"uf7db8aaf\" id=\"uf7db8aaf\">（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。</span></p><p data-lake-id=\"bc3a1ecb822ccff36bdc7df4060f39fb\" id=\"bc3a1ecb822ccff36bdc7df4060f39fb\"><span data-lake-id=\"u9c18c944\" id=\"u9c18c944\">例如 Number、Math、Date</span></p><p data-lake-id=\"5a11a9cca1d345a0390656d42f38fc02\" id=\"5a11a9cca1d345a0390656d42f38fc02\"><span data-lake-id=\"u56abfb7b\" id=\"u56abfb7b\">（5）字符串，用来表示和操作字符串的对象。</span></p><p data-lake-id=\"efd9687ad61dc09e02c4cedef09a7039\" id=\"efd9687ad61dc09e02c4cedef09a7039\"><span data-lake-id=\"u86b19f17\" id=\"u86b19f17\">例如 String、RegExp</span></p><p data-lake-id=\"ee5c55b6974f8f5a449971f9a8a86505\" id=\"ee5c55b6974f8f5a449971f9a8a86505\"><span data-lake-id=\"uf7bde9c9\" id=\"uf7bde9c9\">（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array</span></p><p data-lake-id=\"71a94dfaa85004aeebd56ba9f133d2a7\" id=\"71a94dfaa85004aeebd56ba9f133d2a7\"><span data-lake-id=\"ua32b6e02\" id=\"ua32b6e02\">（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。</span></p><p data-lake-id=\"3d1a5ee9e60b3b6f2c27fe6e3bab1ce6\" id=\"3d1a5ee9e60b3b6f2c27fe6e3bab1ce6\"><span data-lake-id=\"u3bec6ff7\" id=\"u3bec6ff7\">例如 Map、Set、WeakMap、WeakSet</span></p><p data-lake-id=\"b2ce6b26b553a5cb259d704a6ae7e373\" id=\"b2ce6b26b553a5cb259d704a6ae7e373\"><span data-lake-id=\"u700f8f1a\" id=\"u700f8f1a\">（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。</span></p><p data-lake-id=\"8bf2a23c7b3c5fddbfa9cf466312e2e3\" id=\"8bf2a23c7b3c5fddbfa9cf466312e2e3\"><span data-lake-id=\"u3d4e5651\" id=\"u3d4e5651\">例如 SIMD 等</span></p><p data-lake-id=\"447b02b8f490cff1390b390f1ca3ec1b\" id=\"447b02b8f490cff1390b390f1ca3ec1b\"><span data-lake-id=\"u17829d7e\" id=\"u17829d7e\">（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。</span></p><p data-lake-id=\"6fc5bf4738bf902646c98532fe4b7233\" id=\"6fc5bf4738bf902646c98532fe4b7233\"><span data-lake-id=\"u11089877\" id=\"u11089877\">例如 JSON 等</span></p><p data-lake-id=\"e1329893b560b22924c1133ba03ab123\" id=\"e1329893b560b22924c1133ba03ab123\"><span data-lake-id=\"u529e938f\" id=\"u529e938f\">（10）控制抽象对象</span></p><p data-lake-id=\"a61f069e61e112d239a80bd39596c467\" id=\"a61f069e61e112d239a80bd39596c467\"><span data-lake-id=\"uf6e197fd\" id=\"uf6e197fd\">例如 Promise、Generator 等</span></p><p data-lake-id=\"45361b4bde654de5e4b4ade20ece27ff\" id=\"45361b4bde654de5e4b4ade20ece27ff\"><span data-lake-id=\"u84e64ddc\" id=\"u84e64ddc\">（11）反射</span></p><p data-lake-id=\"862cc4e3ad4909ce7c7e0993fac90545\" id=\"862cc4e3ad4909ce7c7e0993fac90545\"><span data-lake-id=\"u356031de\" id=\"u356031de\">例如 Reflect、Proxy</span></p><p data-lake-id=\"e3b13322d7b264edc66dc4cc0b9778d8\" id=\"e3b13322d7b264edc66dc4cc0b9778d8\"><span data-lake-id=\"u9ef6860c\" id=\"u9ef6860c\">（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。</span></p><p data-lake-id=\"21e79052813962731638c0f7dd1bd8a3\" id=\"21e79052813962731638c0f7dd1bd8a3\"><span data-lake-id=\"ud3e1ca51\" id=\"ud3e1ca51\">例如 Intl、Intl.Collator 等</span></p><p data-lake-id=\"3d7db517ec927c2a5b1c246182d3e4e0\" id=\"3d7db517ec927c2a5b1c246182d3e4e0\"><span data-lake-id=\"uf991905a\" id=\"uf991905a\">（13）WebAssembly</span></p><p data-lake-id=\"bd026aa61760fda5065ee6a539d8ab06\" id=\"bd026aa61760fda5065ee6a539d8ab06\"><span data-lake-id=\"u5a336633\" id=\"u5a336633\">（14）其他</span></p><p data-lake-id=\"e0797ff92b3671c61a7451d28a41363d\" id=\"e0797ff92b3671c61a7451d28a41363d\"><span data-lake-id=\"u2b2b19fd\" id=\"u2b2b19fd\">例如 arguments</span></p><p data-lake-id=\"636a2807e7b3edae8197ef75b25c0cba\" id=\"636a2807e7b3edae8197ef75b25c0cba\"><br></p><p data-lake-id=\"a49b6256195c6688ee8c5e9ba98ad160\" id=\"a49b6256195c6688ee8c5e9ba98ad160\"><strong><span data-lake-id=\"u91f3cff2\" id=\"u91f3cff2\">总结：</span></strong></p><p data-lake-id=\"760f5d9613ab420f2ed82acd4bf2694c\" id=\"760f5d9613ab420f2ed82acd4bf2694c\"><span data-lake-id=\"u94a7caa3\" id=\"u94a7caa3\">js 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。</span></p><h3 data-lake-id=\"402ffcd33c20893d2c27f554577e5019\" id=\"402ffcd33c20893d2c27f554577e5019\"><span data-lake-id=\"u08021937\" id=\"u08021937\">5. 常用的正则表达式有哪些？</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%EF%BC%881%EF%BC%89%E5%8C%B9%E9%85%8D%2016%20%E8%BF%9B%E5%88%B6%E9%A2%9C%E8%89%B2%E5%80%BC%5Cnvar%20regex%20%3D%20%2F%23(%5B0-9a-fA-F%5D%7B6%7D%7C%5B0-9a-fA-F%5D%7B3%7D)%2Fg%3B%5Cn%5Cn%2F%2F%20%EF%BC%882%EF%BC%89%E5%8C%B9%E9%85%8D%E6%97%A5%E6%9C%9F%EF%BC%8C%E5%A6%82%20yyyy-mm-dd%20%E6%A0%BC%E5%BC%8F%5Cnvar%20regex%20%3D%20%2F%5E%5B0-9%5D%7B4%7D-(0%5B1-9%5D%7C1%5B0-2%5D)-(0%5B1-9%5D%7C%5B12%5D%5B0-9%5D%7C3%5B01%5D)%24%2F%3B%5Cn%5Cn%2F%2F%20%EF%BC%883%EF%BC%89%E5%8C%B9%E9%85%8D%20qq%20%E5%8F%B7%5Cnvar%20regex%20%3D%20%2F%5E%5B1-9%5D%5B0-9%5D%7B4%2C10%7D%24%2Fg%3B%5Cn%5Cn%2F%2F%20%EF%BC%884%EF%BC%89%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%A0%81%E6%AD%A3%E5%88%99%5Cnvar%20regex%20%3D%20%2F%5E1%5B34578%5D%5C%5Cd%7B9%7D%24%2Fg%3B%5Cn%5Cn%2F%2F%20%EF%BC%885%EF%BC%89%E7%94%A8%E6%88%B7%E5%90%8D%E6%AD%A3%E5%88%99%5Cnvar%20regex%20%3D%20%2F%5E%5Ba-zA-Z%5C%5C%24%5D%5Ba-zA-Z0-9_%5C%5C%24%5D%7B4%2C16%7D%24%2F%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PdZoH%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"ad1613da657375c4ba738d694fea53b9\" id=\"ad1613da657375c4ba738d694fea53b9\"><span data-lake-id=\"u350fd469\" id=\"u350fd469\">6. 对JSON的理解</span></h3><p data-lake-id=\"0b2d24e52db917d82106ce25f100d731\" id=\"0b2d24e52db917d82106ce25f100d731\"><span data-lake-id=\"u81ae7a88\" id=\"u81ae7a88\">JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。</span></p><p data-lake-id=\"1d0a08ee8440c603a60820f6310978fd\" id=\"1d0a08ee8440c603a60820f6310978fd\"><br></p><p data-lake-id=\"c09d0666a2d590f4ff46a7890969a706\" id=\"c09d0666a2d590f4ff46a7890969a706\"><span data-lake-id=\"u078ee951\" id=\"u078ee951\">在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 </span></p><p data-lake-id=\"313c254574f52782e621a93a04d16624\" id=\"313c254574f52782e621a93a04d16624\"><span data-lake-id=\"ub47084c0\" id=\"ub47084c0\">JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。</span></p><p data-lake-id=\"0c22720d12d63f4325ccc39d3e7c482d\" id=\"0c22720d12d63f4325ccc39d3e7c482d\"><br></p><p data-lake-id=\"a1a2d7e96676110c1abe154749a2aa7a\" id=\"a1a2d7e96676110c1abe154749a2aa7a\"><span data-lake-id=\"uc8bb765e\" id=\"uc8bb765e\">因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。</span></p><p data-lake-id=\"43756a2181da43c15d1d0dcf19b6001c\" id=\"43756a2181da43c15d1d0dcf19b6001c\"><br></p><p data-lake-id=\"3f80c6ec5a5c54212922e6f4c5a69b6c\" id=\"3f80c6ec5a5c54212922e6f4c5a69b6c\"><span data-lake-id=\"u72e5e7a3\" id=\"u72e5e7a3\">在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，</span></p><ul list=\"u5982505e\"><li fid=\"u5ecd1ad6\" data-lake-id=\"15c25d4438dd4d676bf91a25db6c70a0\" id=\"15c25d4438dd4d676bf91a25db6c70a0\"><span data-lake-id=\"u2c7c437e\" id=\"u2c7c437e\">JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。</span></li><li fid=\"u5ecd1ad6\" data-lake-id=\"6d9698c261be650b3f23b298be68ff00\" id=\"6d9698c261be650b3f23b298be68ff00\"><span data-lake-id=\"u601c53d6\" id=\"u601c53d6\">JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。</span></li></ul><h3 data-lake-id=\"f6372b4343787b28c76af9fcec864423\" id=\"f6372b4343787b28c76af9fcec864423\"><span data-lake-id=\"u939a7db8\" id=\"u939a7db8\">7. JavaScript脚本延迟加载的方式有哪些？</span></h3><p data-lake-id=\"6ea92a5d0b7f0a4b89c89c949e15ae2b\" id=\"6ea92a5d0b7f0a4b89c89c949e15ae2b\"><span data-lake-id=\"u91d55e84\" id=\"u91d55e84\">延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。</span></p><p data-lake-id=\"8f2447010bc6baa3dca3ddd3ec672b3d\" id=\"8f2447010bc6baa3dca3ddd3ec672b3d\"><br></p><p data-lake-id=\"79ae1a8249aa7e41b94cb4442da27444\" id=\"79ae1a8249aa7e41b94cb4442da27444\"><span data-lake-id=\"u26b70b2e\" id=\"u26b70b2e\">一般有以下几种方式：</span></p><ul list=\"u69fe1cf9\"><li fid=\"ua9baccb0\" data-lake-id=\"4330f5d91fb78cf0d6745b632604d748\" id=\"4330f5d91fb78cf0d6745b632604d748\"><strong><span data-lake-id=\"ueeadeae2\" id=\"ueeadeae2\">defer 属性：</span></strong><span data-lake-id=\"uc0ff19a7\" id=\"uc0ff19a7\">给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。</span></li><li fid=\"ua9baccb0\" data-lake-id=\"f683231c57d9fed9f03b6c40322bc550\" id=\"f683231c57d9fed9f03b6c40322bc550\"><strong><span data-lake-id=\"u02397925\" id=\"u02397925\">async 属性：</span></strong><span data-lake-id=\"u24314b7d\" id=\"u24314b7d\">给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。</span></li><li fid=\"ua9baccb0\" data-lake-id=\"26d0fd7cc48f63420df6dc2268898469\" id=\"26d0fd7cc48f63420df6dc2268898469\"><strong><span data-lake-id=\"u930c8a0b\" id=\"u930c8a0b\">动态创建 DOM 方式：</span></strong><span data-lake-id=\"ue280b890\" id=\"ue280b890\">动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。</span></li><li fid=\"ua9baccb0\" data-lake-id=\"0d256ebcffb3267a883eb31ec80269fe\" id=\"0d256ebcffb3267a883eb31ec80269fe\"><strong><span data-lake-id=\"ud0c4248f\" id=\"ud0c4248f\">使用 setTimeout 延迟方法：</span></strong><span data-lake-id=\"uae747a01\" id=\"uae747a01\">设置一个定时器来延迟加载js脚本文件</span></li><li fid=\"ua9baccb0\" data-lake-id=\"c7fa6b74738620161f637cc241617836\" id=\"c7fa6b74738620161f637cc241617836\"><strong><span data-lake-id=\"ud016b6ba\" id=\"ud016b6ba\">让 JS 最后加载：</span></strong><span data-lake-id=\"ubeb51d6a\" id=\"ubeb51d6a\">将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。</span></li></ul><h3 data-lake-id=\"36c51c4aab58c2df84e964b86d2ef7b7\" id=\"36c51c4aab58c2df84e964b86d2ef7b7\"><span data-lake-id=\"u66df9ee8\" id=\"u66df9ee8\">8. JavaScript 类数组对象的定义？</span></h3><p data-lake-id=\"0d61817f7abcfcbc52ee22cef93a436a\" id=\"0d61817f7abcfcbc52ee22cef93a436a\"><span data-lake-id=\"u0898c984\" id=\"u0898c984\">一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</span></p><p data-lake-id=\"f0f3c1e62d79574b87e11815de929d78\" id=\"f0f3c1e62d79574b87e11815de929d78\"><br></p><p data-lake-id=\"a89b0045e88d4cc3f8970950bcf6b2b3\" id=\"a89b0045e88d4cc3f8970950bcf6b2b3\"><span data-lake-id=\"ud6e8e843\" id=\"ud6e8e843\">常见的类数组转换为数组的方法有这样几种：</span></p><p data-lake-id=\"09a8a2141f532813ece1a1fa6c3f5de1\" id=\"09a8a2141f532813ece1a1fa6c3f5de1\"><span data-lake-id=\"uf5b8c2bf\" id=\"uf5b8c2bf\">（1）通过 call 调用数组的 slice 方法来实现转换</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.slice.call(arrayLike)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TnpVK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"384c76cbaf8be86ea088777a5d41d41d\" id=\"384c76cbaf8be86ea088777a5d41d41d\"><span data-lake-id=\"u3a495135\" id=\"u3a495135\">（2）通过 call 调用数组的 splice 方法来实现转换</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.splice.call(arrayLike%2C%200)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bFasF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"efd2208a6d798ccb17dc3245b9139228\" id=\"efd2208a6d798ccb17dc3245b9139228\"><span data-lake-id=\"u394bbede\" id=\"u394bbede\">（3）通过 apply 调用数组的 concat 方法来实现转换</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.concat.apply(%5B%5D%2C%20arrayLike)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22IHQNh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"867e01447a4285dcbfcc5d1e00ebb495\" id=\"867e01447a4285dcbfcc5d1e00ebb495\"><span data-lake-id=\"ubce90b85\" id=\"ubce90b85\">（4）通过 Array.from 方法来实现转换</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.from(arrayLike)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22RCwL8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"6ec5f85271cfda703fba1bc4255ea8b2\" id=\"6ec5f85271cfda703fba1bc4255ea8b2\"><span data-lake-id=\"u7a1fd49a\" id=\"u7a1fd49a\">9. 数组有哪些原生方法？</span></h3><ul list=\"u285cf4a5\"><li fid=\"u41531293\" data-lake-id=\"2696b27acceb58c71e8eab146005d747\" id=\"2696b27acceb58c71e8eab146005d747\"><span data-lake-id=\"uc52c0209\" id=\"uc52c0209\">数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。</span></li><li fid=\"u41531293\" data-lake-id=\"9a25218196936053fd3fbd50e1eafa20\" id=\"9a25218196936053fd3fbd50e1eafa20\"><span data-lake-id=\"u979b0ba8\" id=\"u979b0ba8\">数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。</span></li><li fid=\"u41531293\" data-lake-id=\"9080a91762bce64fa0416d6a6191f5d9\" id=\"9080a91762bce64fa0416d6a6191f5d9\"><span data-lake-id=\"u328b6906\" id=\"u328b6906\">数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</span></li><li fid=\"u41531293\" data-lake-id=\"0a9c4bc77ea4dd5b7e6f1a4b3fd67e74\" id=\"0a9c4bc77ea4dd5b7e6f1a4b3fd67e74\"><span data-lake-id=\"u8743cbbe\" id=\"u8743cbbe\">数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。</span></li><li fid=\"u41531293\" data-lake-id=\"0419d1cd265cad428d1251c225b8a7dc\" id=\"0419d1cd265cad428d1251c225b8a7dc\"><span data-lake-id=\"uf62da3d7\" id=\"uf62da3d7\">数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。</span></li><li fid=\"u41531293\" data-lake-id=\"c030e722baa10d53827f234ddccd5dba\" id=\"c030e722baa10d53827f234ddccd5dba\"><span data-lake-id=\"u84ff046b\" id=\"u84ff046b\">数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法</span></li><li fid=\"u41531293\" data-lake-id=\"69508758e1aa7199772f9384814b1b41\" id=\"69508758e1aa7199772f9384814b1b41\"><span data-lake-id=\"u3719b2d1\" id=\"u3719b2d1\">数组归并方法 reduce() 和 reduceRight() 方法</span></li></ul><h3 data-lake-id=\"56931d3bca718b35c48e99184c7ac84b\" id=\"56931d3bca718b35c48e99184c7ac84b\"><span data-lake-id=\"u7e423bec\" id=\"u7e423bec\">10. </span><strong><span data-lake-id=\"ua81e4d2c\" id=\"ua81e4d2c\">Unicode、UTF-8、UTF-16、UTF-32的区别？</span></strong></h3><h4 data-lake-id=\"b6a896b351578cbb49131a5ebf9eded4\" id=\"b6a896b351578cbb49131a5ebf9eded4\"><span data-lake-id=\"u0cae2b4a\" id=\"u0cae2b4a\">（1）Unicode</span></h4><p data-lake-id=\"2ebe6face94c8a0a08037b812f93164a\" id=\"2ebe6face94c8a0a08037b812f93164a\"><span data-lake-id=\"u00d0e584\" id=\"u00d0e584\">在说</span><code data-lake-id=\"u55ff2ab1\" id=\"u55ff2ab1\"><span data-lake-id=\"u8d3cfa15\" id=\"u8d3cfa15\">Unicode</span></code><span data-lake-id=\"u50c29173\" id=\"u50c29173\">之前需要先了解一下</span><code data-lake-id=\"u01a80bd9\" id=\"u01a80bd9\"><span data-lake-id=\"ua6f20dce\" id=\"ua6f20dce\">ASCII</span></code><span data-lake-id=\"u52941212\" id=\"u52941212\">码：ASCII 码（</span><code data-lake-id=\"u2dc6907a\" id=\"u2dc6907a\"><span data-lake-id=\"u29765287\" id=\"u29765287\">American Standard Code for Information Interchange</span></code><span data-lake-id=\"u4541079d\" id=\"u4541079d\">）称为美国标准信息交换码。</span></p><ul list=\"ua1b08d04\"><li fid=\"uf6f0cb4c\" data-lake-id=\"6187550361f9f4e20006255af0450ffd\" id=\"6187550361f9f4e20006255af0450ffd\"><span data-lake-id=\"u3c5a8b57\" id=\"u3c5a8b57\">它是基于拉丁字母的一套电脑编码系统。</span></li><li fid=\"uf6f0cb4c\" data-lake-id=\"eeebb9c43183e1edad7f3b87eae5afd0\" id=\"eeebb9c43183e1edad7f3b87eae5afd0\"><span data-lake-id=\"uc2e451cb\" id=\"uc2e451cb\">它定义了一个用于代表常见字符的字典。</span></li><li fid=\"uf6f0cb4c\" data-lake-id=\"642f1b390106927a445f2b569a31ad32\" id=\"642f1b390106927a445f2b569a31ad32\"><span data-lake-id=\"ua1edeb8f\" id=\"ua1edeb8f\">它包含了&quot;A-Z&quot;(包含大小写)，数据&quot;0-9&quot; 以及一些常见的符号。</span></li><li fid=\"uf6f0cb4c\" data-lake-id=\"8818d3e6388bb1d2b2f2469cf147dc70\" id=\"8818d3e6388bb1d2b2f2469cf147dc70\"><span data-lake-id=\"u010bda4c\" id=\"u010bda4c\">它是专门为英语而设计的，有128个编码，对其他语言无能为力</span></li></ul><p data-lake-id=\"f9871cce755328ed2088d80aadb08497\" id=\"f9871cce755328ed2088d80aadb08497\"><code data-lake-id=\"u258460b8\" id=\"u258460b8\"><span data-lake-id=\"u9897aa46\" id=\"u9897aa46\">ASCII</span></code><span data-lake-id=\"ud0810f95\" id=\"ud0810f95\">码可以表示的编码有限，要想表示其他语言的编码，还是要使用</span><code data-lake-id=\"ubc63bfb0\" id=\"ubc63bfb0\"><span data-lake-id=\"u8d5b0852\" id=\"u8d5b0852\">Unicode</span></code><span data-lake-id=\"u02678434\" id=\"u02678434\">来表示，可以说</span><code data-lake-id=\"ucfaa59e1\" id=\"ucfaa59e1\"><span data-lake-id=\"u7e8dcb92\" id=\"u7e8dcb92\">Unicode</span></code><span data-lake-id=\"ud7ac7e8d\" id=\"ud7ac7e8d\">是</span><code data-lake-id=\"u52243735\" id=\"u52243735\"><span data-lake-id=\"u29e7b61b\" id=\"u29e7b61b\">ASCII</span></code><span data-lake-id=\"ub6c00c55\" id=\"ub6c00c55\"> 的超集。</span></p><p data-lake-id=\"8de7ff3df3d095326511d84fc787b17e\" id=\"8de7ff3df3d095326511d84fc787b17e\"><br></p><p data-lake-id=\"fcfccd9b7c18e62792b908027b9555e1\" id=\"fcfccd9b7c18e62792b908027b9555e1\"><code data-lake-id=\"u08624c4e\" id=\"u08624c4e\"><span data-lake-id=\"uba57cb80\" id=\"uba57cb80\">Unicode</span></code><span data-lake-id=\"ude092299\" id=\"ude092299\">全称 </span><code data-lake-id=\"u70d9e5f9\" id=\"u70d9e5f9\"><span data-lake-id=\"u67a0c496\" id=\"u67a0c496\">Unicode Translation Format</span></code><span data-lake-id=\"u35761bc7\" id=\"u35761bc7\">，又叫做统一码、万国码、单一码。</span><code data-lake-id=\"ud35bd097\" id=\"ud35bd097\"><span data-lake-id=\"u61150215\" id=\"u61150215\">Unicode</span></code><span data-lake-id=\"u27cd34ba\" id=\"u27cd34ba\"> 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</span></p><p data-lake-id=\"80730fb3eb1f467d40ea44dd65b5953c\" id=\"80730fb3eb1f467d40ea44dd65b5953c\"><br></p><p data-lake-id=\"f065548450e33a17f39e95eb3f1bacbd\" id=\"f065548450e33a17f39e95eb3f1bacbd\"><code data-lake-id=\"u687845d8\" id=\"u687845d8\"><span data-lake-id=\"u910911c0\" id=\"u910911c0\">Unicode</span></code><span data-lake-id=\"u4f7d73d8\" id=\"u4f7d73d8\">的实现方式（也就是编码方式）有很多种，常见的是</span><strong><span data-lake-id=\"u3d5aa4d6\" id=\"u3d5aa4d6\">UTF-8</span></strong><span data-lake-id=\"uea7aad95\" id=\"uea7aad95\">、</span><strong><span data-lake-id=\"uf3196d9d\" id=\"uf3196d9d\">UTF-16</span></strong><span data-lake-id=\"u6f8ef031\" id=\"u6f8ef031\">、</span><strong><span data-lake-id=\"u78487a84\" id=\"u78487a84\">UTF-32</span></strong><span data-lake-id=\"u63457d31\" id=\"u63457d31\">和</span><strong><span data-lake-id=\"ubb5598b2\" id=\"ubb5598b2\">USC-2</span></strong><span data-lake-id=\"ufa1bc684\" id=\"ufa1bc684\">。</span></p><h4 data-lake-id=\"f8b36e109a9785984c3bf7f53301939d\" id=\"f8b36e109a9785984c3bf7f53301939d\"><span data-lake-id=\"ubaadf0c8\" id=\"ubaadf0c8\">（2）UTF-8</span></h4><p data-lake-id=\"51480111c2d8a9c0dda2162f61f661f9\" id=\"51480111c2d8a9c0dda2162f61f661f9\"><code data-lake-id=\"uec3d8351\" id=\"uec3d8351\"><span data-lake-id=\"u122ec02d\" id=\"u122ec02d\">UTF-8</span></code><span data-lake-id=\"uc1823ddc\" id=\"uc1823ddc\">是使用最广泛的</span><code data-lake-id=\"u8b263941\" id=\"u8b263941\"><span data-lake-id=\"udd87af16\" id=\"udd87af16\">Unicode</span></code><span data-lake-id=\"u57830693\" id=\"u57830693\">编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容</span><code data-lake-id=\"uee6d7ec3\" id=\"uee6d7ec3\"><span data-lake-id=\"u43e9fe5e\" id=\"u43e9fe5e\">ASCII</span></code><span data-lake-id=\"u26ae39a8\" id=\"u26ae39a8\">码的128个字符。</span></p><p data-lake-id=\"5c7898493628436b0f9f11841dd56adb\" id=\"5c7898493628436b0f9f11841dd56adb\"><br></p><p data-lake-id=\"73a38fad1ed4ecb230ba4f7a6c3ee891\" id=\"73a38fad1ed4ecb230ba4f7a6c3ee891\"><strong><span data-lake-id=\"udafabbcd\" id=\"udafabbcd\">注意：</span></strong><span data-lake-id=\"u4ea8120a\" id=\"u4ea8120a\"> </span><code data-lake-id=\"ue878850d\" id=\"ue878850d\"><span data-lake-id=\"ub022b3ab\" id=\"ub022b3ab\">UTF-8</span></code><span data-lake-id=\"u545b2cce\" id=\"u545b2cce\"> 是一种编码方式，</span><code data-lake-id=\"ude9cea8a\" id=\"ude9cea8a\"><span data-lake-id=\"u7baea38e\" id=\"u7baea38e\">Unicode</span></code><span data-lake-id=\"u307a3151\" id=\"u307a3151\">是一个字符集合。</span></p><p data-lake-id=\"32e106ec87a448a7bb3b97fbfeb512a7\" id=\"32e106ec87a448a7bb3b97fbfeb512a7\"><br></p><p data-lake-id=\"df2fd2eaa6eb43a929b917ff8c88c095\" id=\"df2fd2eaa6eb43a929b917ff8c88c095\"><code data-lake-id=\"u98510f26\" id=\"u98510f26\"><span data-lake-id=\"uf59127b9\" id=\"uf59127b9\">UTF-8</span></code><span data-lake-id=\"u69f7c5f6\" id=\"u69f7c5f6\">的编码规则：</span></p><ul list=\"u1e970ead\"><li fid=\"u377378dd\" data-lake-id=\"d99c44c501bb0cae288624790d1f9d6c\" id=\"d99c44c501bb0cae288624790d1f9d6c\"><span data-lake-id=\"u4a234e41\" id=\"u4a234e41\">对于</span><strong><span data-lake-id=\"u7fd3e6b6\" id=\"u7fd3e6b6\">单字节</span></strong><span data-lake-id=\"ua03c2111\" id=\"ua03c2111\">的符号，字节的第一位为0，后面的7位为这个字符的</span><code data-lake-id=\"ud9c77e93\" id=\"ud9c77e93\"><span data-lake-id=\"uaebc190d\" id=\"uaebc190d\">Unicode</span></code><span data-lake-id=\"u2a3c3fc9\" id=\"u2a3c3fc9\">编码，因此对于英文字母，它的</span><code data-lake-id=\"uc36c1346\" id=\"uc36c1346\"><span data-lake-id=\"u7d6339b1\" id=\"u7d6339b1\">Unicode</span></code><span data-lake-id=\"uc6280e8a\" id=\"uc6280e8a\">编码和</span><code data-lake-id=\"u8e2d1a56\" id=\"u8e2d1a56\"><span data-lake-id=\"u4c4c16b8\" id=\"u4c4c16b8\">ACSII</span></code><span data-lake-id=\"u1813d544\" id=\"u1813d544\">编码一样。</span></li><li fid=\"u377378dd\" data-lake-id=\"d9c07cb21aa3358ae30dde813143c2cf\" id=\"d9c07cb21aa3358ae30dde813143c2cf\"><span data-lake-id=\"uefa3e809\" id=\"uefa3e809\">对于</span><strong><span data-lake-id=\"u1178e68d\" id=\"u1178e68d\">n字节</span></strong><span data-lake-id=\"u0c6b0edd\" id=\"u0c6b0edd\">的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的</span><code data-lake-id=\"u5778f2c5\" id=\"u5778f2c5\"><span data-lake-id=\"ufd05b558\" id=\"ufd05b558\">Unicode</span></code><span data-lake-id=\"u9f4781b7\" id=\"u9f4781b7\">码 。</span></li></ul><p data-lake-id=\"952bc4710cc439dd21f729d3f3873aed\" id=\"952bc4710cc439dd21f729d3f3873aed\"><br></p><p data-lake-id=\"15240663a03119cafe710d54130f5255\" id=\"15240663a03119cafe710d54130f5255\"><span data-lake-id=\"u3b489d73\" id=\"u3b489d73\">来看一下具体的</span><code data-lake-id=\"u40ec2cc8\" id=\"u40ec2cc8\"><span data-lake-id=\"u057dbc51\" id=\"u057dbc51\">Unicode</span></code><span data-lake-id=\"ufdd838ef\" id=\"ufdd838ef\">编号范围与对应的</span><code data-lake-id=\"uc8092a13\" id=\"uc8092a13\"><span data-lake-id=\"u5d12d341\" id=\"u5d12d341\">UTF-8</span></code><span data-lake-id=\"ue0ee20a8\" id=\"ue0ee20a8\">二进制格式 ：</span></p><table data-lake-id=\"2a5e98f6\" id=\"2a5e98f6\" margin=\"true\" class=\"lake-table\" style=\"width: 814px\"><colgroup><col width=\"407\"><col width=\"407\"></colgroup><tbody><tr data-lake-id=\"ud3e3d478\" id=\"ud3e3d478\" style=\"height: 33px\"><td data-lake-id=\"ua819434a\" id=\"ua819434a\"><p data-lake-id=\"u5d783448\" id=\"u5d783448\"><span data-lake-id=\"u67663558\" id=\"u67663558\">编码范围（编号对应的十进制数）</span></p></td><td data-lake-id=\"u1b737fee\" id=\"u1b737fee\"><p data-lake-id=\"u9c14a7f6\" id=\"u9c14a7f6\"><span data-lake-id=\"u4cbbce9e\" id=\"u4cbbce9e\">二进制格式</span></p></td></tr><tr data-lake-id=\"ufee87a4b\" id=\"ufee87a4b\" style=\"height: 33px\"><td data-lake-id=\"ufe5a5d52\" id=\"ufe5a5d52\"><p data-lake-id=\"u0be9f065\" id=\"u0be9f065\"><span data-lake-id=\"u59a90620\" id=\"u59a90620\">0x00—0x7F （0-127）</span></p></td><td data-lake-id=\"u4a1229c2\" id=\"u4a1229c2\"><p data-lake-id=\"u25dd97e5\" id=\"u25dd97e5\"><span data-lake-id=\"u567b66ba\" id=\"u567b66ba\">0xxxxxxx</span></p></td></tr><tr data-lake-id=\"ub9fda46f\" id=\"ub9fda46f\" style=\"height: 33px\"><td data-lake-id=\"ubaefbc80\" id=\"ubaefbc80\"><p data-lake-id=\"u3f791d88\" id=\"u3f791d88\"><span data-lake-id=\"udca55cc4\" id=\"udca55cc4\">0x80—0x7FF （128-2047）</span></p></td><td data-lake-id=\"ud22b4188\" id=\"ud22b4188\"><p data-lake-id=\"u9cb2f3ed\" id=\"u9cb2f3ed\"><span data-lake-id=\"u2e0bfc9d\" id=\"u2e0bfc9d\">110xxxxx 10xxxxxx</span></p></td></tr><tr data-lake-id=\"u7e8c32e0\" id=\"u7e8c32e0\" style=\"height: 33px\"><td data-lake-id=\"u5907a4dd\" id=\"u5907a4dd\"><p data-lake-id=\"uecfdbcc1\" id=\"uecfdbcc1\"><span data-lake-id=\"u996d3fae\" id=\"u996d3fae\">0x800—0xFFFF  （2048-65535）</span></p></td><td data-lake-id=\"u0c6df26c\" id=\"u0c6df26c\"><p data-lake-id=\"uc0d64f85\" id=\"uc0d64f85\"><span data-lake-id=\"u8c521230\" id=\"u8c521230\">1110xxxx 10xxxxxx 10xxxxxx</span></p></td></tr><tr data-lake-id=\"u7437c6be\" id=\"u7437c6be\" style=\"height: 33px\"><td data-lake-id=\"u2b1b3cae\" id=\"u2b1b3cae\"><p data-lake-id=\"ue54e729d\" id=\"ue54e729d\"><span data-lake-id=\"u93c85dbc\" id=\"u93c85dbc\">0x10000—0x10FFFF  （65536以上）</span></p></td><td data-lake-id=\"u36906a5c\" id=\"u36906a5c\"><p data-lake-id=\"u9841f009\" id=\"u9841f009\"><span data-lake-id=\"u1879c560\" id=\"u1879c560\">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span></p></td></tr></tbody></table><p data-lake-id=\"be3c3848e8ad77b46dcc5a528a9bcafd\" id=\"be3c3848e8ad77b46dcc5a528a9bcafd\"><span data-lake-id=\"ud62d408b\" id=\"ud62d408b\">那该如何通过具体的</span><code data-lake-id=\"ubca29b4a\" id=\"ubca29b4a\"><span data-lake-id=\"uc24e5f43\" id=\"uc24e5f43\">Unicode</span></code><span data-lake-id=\"u3c79d36f\" id=\"u3c79d36f\">编码，进行具体的</span><code data-lake-id=\"u61e18087\" id=\"u61e18087\"><span data-lake-id=\"u70b6b27b\" id=\"u70b6b27b\">UTF-8</span></code><span data-lake-id=\"u1e853941\" id=\"u1e853941\">编码呢？</span><strong><span data-lake-id=\"uda49e3d8\" id=\"uda49e3d8\">步骤如下：</span></strong></p><ul list=\"ub9711eae\"><li fid=\"u4dc429d6\" data-lake-id=\"c02f1084f4bd887bfcd0815ccc67c4db\" id=\"c02f1084f4bd887bfcd0815ccc67c4db\"><span data-lake-id=\"ub47a6b05\" id=\"ub47a6b05\">找到该</span><code data-lake-id=\"u4a849081\" id=\"u4a849081\"><span data-lake-id=\"u77998d6b\" id=\"u77998d6b\">Unicode</span></code><span data-lake-id=\"u8ac67b21\" id=\"u8ac67b21\">编码的所在的编号范围，进而找到与之对应的二进制格式</span></li><li fid=\"u4dc429d6\" data-lake-id=\"a1789a19ae85429830aa1d4ed1b1c102\" id=\"a1789a19ae85429830aa1d4ed1b1c102\"><span data-lake-id=\"u6d8f1b01\" id=\"u6d8f1b01\">将</span><code data-lake-id=\"ucef028db\" id=\"ucef028db\"><span data-lake-id=\"ud160435c\" id=\"ud160435c\">Unicode</span></code><span data-lake-id=\"u3a1b53dc\" id=\"u3a1b53dc\">编码转换为二进制数（去掉最高位的0）</span></li><li fid=\"u4dc429d6\" data-lake-id=\"1fe284ec704fecb3f2e36a5761fa7404\" id=\"1fe284ec704fecb3f2e36a5761fa7404\"><span data-lake-id=\"uc011ff5c\" id=\"uc011ff5c\">将二进制数从右往左一次填入二进制格式的</span><code data-lake-id=\"u9fe192b7\" id=\"u9fe192b7\"><span data-lake-id=\"u78908577\" id=\"u78908577\">X</span></code><span data-lake-id=\"uee851a96\" id=\"uee851a96\">中，如果有</span><code data-lake-id=\"u96d73d34\" id=\"u96d73d34\"><span data-lake-id=\"u2de19f70\" id=\"u2de19f70\">X</span></code><span data-lake-id=\"u64f1400c\" id=\"u64f1400c\">未填，就设为0</span></li></ul><p data-lake-id=\"148b65a6b95920983a46abfc862b0b7d\" id=\"148b65a6b95920983a46abfc862b0b7d\"><br></p><p data-lake-id=\"75e00852864e183cd15bac1e0881680b\" id=\"75e00852864e183cd15bac1e0881680b\"><span data-lake-id=\"u74fa3301\" id=\"u74fa3301\">来看一个实际的例子：</span></p><p data-lake-id=\"2b3d2270a64fc7057185860ee7b9c856\" id=\"2b3d2270a64fc7057185860ee7b9c856\"><span data-lake-id=\"uec866ce6\" id=\"uec866ce6\">“</span><strong><span data-lake-id=\"u42b38368\" id=\"u42b38368\">马</span></strong><span data-lake-id=\"u4f2b45cc\" id=\"u4f2b45cc\">” 字的</span><code data-lake-id=\"u87e08238\" id=\"u87e08238\"><span data-lake-id=\"ua3998b1c\" id=\"ua3998b1c\">Unicode</span></code><span data-lake-id=\"u8898f739\" id=\"u8898f739\">编码是：</span><code data-lake-id=\"u70d3dc72\" id=\"u70d3dc72\"><span data-lake-id=\"u81f1e1ca\" id=\"u81f1e1ca\">0x9A6C</span></code><span data-lake-id=\"u1fe6a3ac\" id=\"u1fe6a3ac\">，整数编号是</span><code data-lake-id=\"u64a55e7b\" id=\"u64a55e7b\"><span data-lake-id=\"u6a35dce5\" id=\"u6a35dce5\">39532</span></code></p><p data-lake-id=\"c4a0a8bd74828b9e2ed8dc63c97362fe\" id=\"c4a0a8bd74828b9e2ed8dc63c97362fe\"><span data-lake-id=\"u8f1a07d3\" id=\"u8f1a07d3\">（1）首选确定了该字符在第三个范围内，它的格式是 </span><code data-lake-id=\"uea829c14\" id=\"uea829c14\"><span data-lake-id=\"u42101d36\" id=\"u42101d36\">1110xxxx 10xxxxxx 10xxxxxx</span></code></p><p data-lake-id=\"025ab99c5d4477508b2fa77bc93d5b6e\" id=\"025ab99c5d4477508b2fa77bc93d5b6e\"><span data-lake-id=\"u4bd8634f\" id=\"u4bd8634f\">（2）39532对应的二进制数为</span><code data-lake-id=\"u8f9f3932\" id=\"u8f9f3932\"><span data-lake-id=\"ucb716d29\" id=\"ucb716d29\">1001 1010 0110 1100</span></code></p><p data-lake-id=\"1144fe0c93c7b0949b1d504fc0905279\" id=\"1144fe0c93c7b0949b1d504fc0905279\"><span data-lake-id=\"u8eb24992\" id=\"u8eb24992\">（3）将二进制数填入X中，结果是：</span><code data-lake-id=\"u92724a94\" id=\"u92724a94\"><span data-lake-id=\"u20ae6bfc\" id=\"u20ae6bfc\">11101001 10101001 10101100</span></code></p><h4 data-lake-id=\"6284dbf3ba6a742743bdab7f89a729ff\" id=\"6284dbf3ba6a742743bdab7f89a729ff\"><span data-lake-id=\"uba41534b\" id=\"uba41534b\">（3）UTF-16</span></h4><p data-lake-id=\"2672750e7f2b38c14e9cfb8de7b5be35\" id=\"2672750e7f2b38c14e9cfb8de7b5be35\"><strong><span data-lake-id=\"uad6f17fe\" id=\"uad6f17fe\">1. 平面的概念</span></strong></p><p data-lake-id=\"c74cea40603d262bf7a16ddf7396125b\" id=\"c74cea40603d262bf7a16ddf7396125b\"><span data-lake-id=\"u39a989cf\" id=\"u39a989cf\">在了解</span><code data-lake-id=\"u8c032f16\" id=\"u8c032f16\"><span data-lake-id=\"uccd3d37b\" id=\"uccd3d37b\">UTF-16</span></code><span data-lake-id=\"ub83cef5b\" id=\"ub83cef5b\">之前，先看一下</span><strong><span data-lake-id=\"u56d02f50\" id=\"u56d02f50\">平面</span></strong><span data-lake-id=\"ub88c3bc0\" id=\"ub88c3bc0\">的概念：</span></p><p data-lake-id=\"e792180364c72adea889b4ce16939d92\" id=\"e792180364c72adea889b4ce16939d92\"><code data-lake-id=\"u62b40248\" id=\"u62b40248\"><span data-lake-id=\"uf0bc3f9b\" id=\"uf0bc3f9b\">Unicode</span></code><span data-lake-id=\"u0a96be77\" id=\"u0a96be77\">编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放</span><strong><span data-lake-id=\"ud025a7f8\" id=\"ud025a7f8\">65536</span></strong><span data-lake-id=\"u4f94b0b0\" id=\"u4f94b0b0\">（2</span><sup><span data-lake-id=\"u0158137c\" id=\"u0158137c\">16</span></sup><span data-lake-id=\"u9da5fefc\" id=\"u9da5fefc\">）个字符，这称为一个</span><strong><span data-lake-id=\"ud6285ed7\" id=\"ud6285ed7\">平面</span></strong><span data-lake-id=\"u729c4e58\" id=\"u729c4e58\">，目前总共有17 个平面。</span></p><p data-lake-id=\"2de42d028d5ec53b0f8f27a80fc678d3\" id=\"2de42d028d5ec53b0f8f27a80fc678d3\"><br></p><p data-lake-id=\"2587ce48dc9e62125e47684a5523656c\" id=\"2587ce48dc9e62125e47684a5523656c\"><span data-lake-id=\"uf2ba7e13\" id=\"uf2ba7e13\">最前面的一个平面称为</span><strong><span data-lake-id=\"ue2ab160d\" id=\"ue2ab160d\">基本平面</span></strong><span data-lake-id=\"u306641fb\" id=\"u306641fb\">，它的码点从</span><strong><span data-lake-id=\"u3ca4270f\" id=\"u3ca4270f\">0 — 2</span></strong><strong><sup><span data-lake-id=\"ub81eec33\" id=\"ub81eec33\">16</span></sup></strong><strong><span data-lake-id=\"u5cebec04\" id=\"u5cebec04\">-1</span></strong><span data-lake-id=\"uda474fa3\" id=\"uda474fa3\">，写成16进制就是</span><code data-lake-id=\"u368df361\" id=\"u368df361\"><span data-lake-id=\"ued54ef9a\" id=\"ued54ef9a\">U+0000 — U+FFFF</span></code><span data-lake-id=\"ua34f44e6\" id=\"ua34f44e6\">，那剩下的16个平面就是</span><strong><span data-lake-id=\"u13519f05\" id=\"u13519f05\">辅助平面</span></strong><span data-lake-id=\"u5ea5f0eb\" id=\"u5ea5f0eb\">，码点范围是 </span><code data-lake-id=\"ue93c7e90\" id=\"ue93c7e90\"><span data-lake-id=\"ua6697308\" id=\"ua6697308\">U+10000—U+10FFFF</span></code><span data-lake-id=\"u7d7da96b\" id=\"u7d7da96b\">。</span></p><p data-lake-id=\"c6d3cc2349a4fff41040a5e96895b03c\" id=\"c6d3cc2349a4fff41040a5e96895b03c\"><strong><span data-lake-id=\"u62ae5acb\" id=\"u62ae5acb\">2. UTF-16 概念：</span></strong></p><p data-lake-id=\"4a2b6e5bc9bf5db3ce919f681a8fbc9f\" id=\"4a2b6e5bc9bf5db3ce919f681a8fbc9f\"><code data-lake-id=\"u3be02eed\" id=\"u3be02eed\"><span data-lake-id=\"u27c97693\" id=\"u27c97693\">UTF-16</span></code><span data-lake-id=\"ud4932311\" id=\"ud4932311\">也是</span><code data-lake-id=\"u34a5fde0\" id=\"u34a5fde0\"><span data-lake-id=\"ud66a05c8\" id=\"ud66a05c8\">Unicode</span></code><span data-lake-id=\"u0a9633ca\" id=\"u0a9633ca\">编码集的一种编码形式，把</span><code data-lake-id=\"u4ad0da9c\" id=\"u4ad0da9c\"><span data-lake-id=\"u30b2535b\" id=\"u30b2535b\">Unicode</span></code><span data-lake-id=\"uf6c16426\" id=\"uf6c16426\">字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。</span><code data-lake-id=\"u771aa209\" id=\"u771aa209\"><span data-lake-id=\"u48828f72\" id=\"u48828f72\">Unicode</span></code><span data-lake-id=\"ud8c7a86b\" id=\"ud8c7a86b\">字符的码位需要1个或者2个16位长的码元来表示，因此</span><code data-lake-id=\"u42cff1dc\" id=\"u42cff1dc\"><span data-lake-id=\"u0c1d7cdf\" id=\"u0c1d7cdf\">UTF-16</span></code><span data-lake-id=\"uec3be092\" id=\"uec3be092\">也是用变长字节表示的。</span></p><p data-lake-id=\"62250969efe45151d6d879f224a90887\" id=\"62250969efe45151d6d879f224a90887\"><strong><span data-lake-id=\"ue4dec85d\" id=\"ue4dec85d\">3. UTF-16 编码规则：</span></strong></p><ul list=\"ueeb59815\"><li fid=\"u7937f502\" data-lake-id=\"86f9d22e7677ce2261438c6014bab3cb\" id=\"86f9d22e7677ce2261438c6014bab3cb\"><span data-lake-id=\"uef8f0c97\" id=\"uef8f0c97\">编号在 </span><code data-lake-id=\"ueea50191\" id=\"ueea50191\"><span data-lake-id=\"ud78aba1e\" id=\"ud78aba1e\">U+0000—U+FFFF</span></code><span data-lake-id=\"u195398f1\" id=\"u195398f1\"> 的字符（常用字符集），直接用两个字节表示。</span></li><li fid=\"u7937f502\" data-lake-id=\"dcc712b3d0346ae035f47e1c3de0d170\" id=\"dcc712b3d0346ae035f47e1c3de0d170\"><span data-lake-id=\"u56b589c4\" id=\"u56b589c4\">编号在 </span><code data-lake-id=\"udbcb91c0\" id=\"udbcb91c0\"><span data-lake-id=\"u52b097f2\" id=\"u52b097f2\">U+10000—U+10FFFF</span></code><span data-lake-id=\"u6db8bee9\" id=\"u6db8bee9\"> 之间的字符，需要用四个字节表示。</span></li></ul><p data-lake-id=\"ce97d4dab2b2ad534e678bd05d54d2d0\" id=\"ce97d4dab2b2ad534e678bd05d54d2d0\"><strong><span data-lake-id=\"u9a42f06f\" id=\"u9a42f06f\">4. 编码识别</span></strong></p><p data-lake-id=\"4cb8968944d8d209e85a2806e389ea6d\" id=\"4cb8968944d8d209e85a2806e389ea6d\"><span data-lake-id=\"ub5c6aeae\" id=\"ub5c6aeae\">那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？</span></p><p data-lake-id=\"ded864acf4f0cfe0e9a44ad332967ba7\" id=\"ded864acf4f0cfe0e9a44ad332967ba7\"><br></p><p data-lake-id=\"01f97cf32d95160743b7407cf6ee8aa5\" id=\"01f97cf32d95160743b7407cf6ee8aa5\"><code data-lake-id=\"u69499af2\" id=\"u69499af2\"><span data-lake-id=\"ua36974c7\" id=\"ua36974c7\">UTF-16</span></code><span data-lake-id=\"uc01a8670\" id=\"uc01a8670\"> 编码肯定也考虑到了这个问题，在基本平面内，从 </span><code data-lake-id=\"u3273d47e\" id=\"u3273d47e\"><span data-lake-id=\"ud5e1b2e2\" id=\"ud5e1b2e2\">U+D800 — U+DFFF</span></code><span data-lake-id=\"uaea64caf\" id=\"uaea64caf\"> 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。</span></p><p data-lake-id=\"5d31e6324951a92b2fee3b7e9e352a62\" id=\"5d31e6324951a92b2fee3b7e9e352a62\"><br></p><p data-lake-id=\"267776fb6c8d024f46ec0249f7b6d996\" id=\"267776fb6c8d024f46ec0249f7b6d996\"><span data-lake-id=\"u0b1f85aa\" id=\"u0b1f85aa\">辅助平面共有 </span><strong><span data-lake-id=\"u245b405b\" id=\"u245b405b\">2</span></strong><strong><sup><span data-lake-id=\"uaf1f200e\" id=\"uaf1f200e\">20</span></sup></strong><span data-lake-id=\"u0fb95978\" id=\"u0fb95978\"> 个字符位，因此表示这些字符至少需要 20 个二进制位。</span><code data-lake-id=\"u0451fdde\" id=\"u0451fdde\"><span data-lake-id=\"uedd3a79c\" id=\"uedd3a79c\">UTF-16</span></code><span data-lake-id=\"u80266c2f\" id=\"u80266c2f\"> 将这 20 个二进制位分成两半，前 10 位映射在 </span><code data-lake-id=\"uda293fbf\" id=\"uda293fbf\"><span data-lake-id=\"u53671a95\" id=\"u53671a95\">U+D800 — U+DBFF</span></code><span data-lake-id=\"u481d15c3\" id=\"u481d15c3\">，称为</span><strong><span data-lake-id=\"uf17db896\" id=\"uf17db896\">高位</span></strong><span data-lake-id=\"uafbfdb87\" id=\"uafbfdb87\">（H），后 10 位映射在 </span><code data-lake-id=\"ud660c80c\" id=\"ud660c80c\"><span data-lake-id=\"u2e102e15\" id=\"u2e102e15\">U+DC00 — U+DFFF</span></code><span data-lake-id=\"u67c1ce4c\" id=\"u67c1ce4c\">，称为</span><strong><span data-lake-id=\"u873fa862\" id=\"u873fa862\">低位</span></strong><span data-lake-id=\"u8b2fa032\" id=\"u8b2fa032\">（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。</span></p><p data-lake-id=\"c74e8f97366d64dde2591b02e2e9189b\" id=\"c74e8f97366d64dde2591b02e2e9189b\"><br></p><p data-lake-id=\"4dbce1abf1e5be24c6ef57a7b8b8c058\" id=\"4dbce1abf1e5be24c6ef57a7b8b8c058\"><span data-lake-id=\"uec3b3667\" id=\"uec3b3667\">因此，当遇到两个字节时，发现它的码点在 </span><code data-lake-id=\"udee13503\" id=\"udee13503\"><span data-lake-id=\"uce72912b\" id=\"uce72912b\">U+D800 —U+DBFF</span></code><span data-lake-id=\"u012a1482\" id=\"u012a1482\">之间，就可以知道，它后面的两个字节的码点应该在 </span><code data-lake-id=\"u294dc20f\" id=\"u294dc20f\"><span data-lake-id=\"u72f66dd5\" id=\"u72f66dd5\">U+DC00 — U+DFFF</span></code><span data-lake-id=\"u2da63bc4\" id=\"u2da63bc4\"> 之间，这四个字节必须放在一起进行解读。</span></p><p data-lake-id=\"9bea6955b528019df0a1367565d3ed73\" id=\"9bea6955b528019df0a1367565d3ed73\"><strong><span data-lake-id=\"u9c05bc64\" id=\"u9c05bc64\">5. 举例说明</span></strong></p><p data-lake-id=\"97552a885ee1b7ed1b0d56befb0213a6\" id=\"97552a885ee1b7ed1b0d56befb0213a6\"><span data-lake-id=\"u6ff06532\" id=\"u6ff06532\">以 &quot;</span><strong><span data-lake-id=\"ub4155c21\" id=\"ub4155c21\">𡠀</span></strong><span data-lake-id=\"ub94c2608\" id=\"ub94c2608\">&quot; 字为例，它的 </span><code data-lake-id=\"uc1c89170\" id=\"uc1c89170\"><span data-lake-id=\"udca5531e\" id=\"udca5531e\">Unicode</span></code><span data-lake-id=\"u9a4bec06\" id=\"u9a4bec06\"> 码点为 </span><code data-lake-id=\"u07d4c3e7\" id=\"u07d4c3e7\"><span data-lake-id=\"u1edbccae\" id=\"u1edbccae\">0x21800</span></code><span data-lake-id=\"u69137411\" id=\"u69137411\">，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：</span></p><ul list=\"u24c7fb05\"><li fid=\"u126ff0f4\" data-lake-id=\"14f3a3c130c9fd394edd076f8fd68ce8\" id=\"14f3a3c130c9fd394edd076f8fd68ce8\"><span data-lake-id=\"u401d0cd3\" id=\"u401d0cd3\">首先计算超出部分的结果：</span><code data-lake-id=\"u644dace3\" id=\"u644dace3\"><span data-lake-id=\"u4a039595\" id=\"u4a039595\">0x21800 - 0x10000</span></code></li><li fid=\"u126ff0f4\" data-lake-id=\"779c8c9b6ff1d33d6c9ff4bf476fa948\" id=\"779c8c9b6ff1d33d6c9ff4bf476fa948\"><span data-lake-id=\"u56e4d634\" id=\"u56e4d634\">将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：</span><code data-lake-id=\"u80a9d099\" id=\"u80a9d099\"><span data-lake-id=\"uf89b3905\" id=\"uf89b3905\">0001000110 0000000000</span></code></li><li fid=\"u126ff0f4\" data-lake-id=\"649d6947814171e9b1a2485a7b70e9bb\" id=\"649d6947814171e9b1a2485a7b70e9bb\"><span data-lake-id=\"ud5cae1ee\" id=\"ud5cae1ee\">将得到的两个10位二进制数分别对应到两个区间中</span></li><li fid=\"u126ff0f4\" data-lake-id=\"cfe54f377e5295b3fe27a63270768ced\" id=\"cfe54f377e5295b3fe27a63270768ced\"><code data-lake-id=\"ubccf9f6d\" id=\"ubccf9f6d\"><span data-lake-id=\"ud7f7ee1c\" id=\"ud7f7ee1c\">U+D800</span></code><span data-lake-id=\"uebb67975\" id=\"uebb67975\"> 对应的二进制数为 </span><code data-lake-id=\"uc5f9d8b8\" id=\"uc5f9d8b8\"><span data-lake-id=\"ud9478cad\" id=\"ud9478cad\">1101100000000000</span></code><span data-lake-id=\"ue3e693ad\" id=\"ue3e693ad\">， 将</span><code data-lake-id=\"u7011ee07\" id=\"u7011ee07\"><span data-lake-id=\"u0a7b6ff4\" id=\"u0a7b6ff4\">0001000110</span></code><span data-lake-id=\"u73205f5e\" id=\"u73205f5e\">填充在它的后10 个二进制位，得到 </span><code data-lake-id=\"u7cef5b79\" id=\"u7cef5b79\"><span data-lake-id=\"ua7555d7d\" id=\"ua7555d7d\">1101100001000110</span></code><span data-lake-id=\"u4d62f398\" id=\"u4d62f398\">，转成 16 进制数为 </span><code data-lake-id=\"uc0862d99\" id=\"uc0862d99\"><span data-lake-id=\"u3088f93a\" id=\"u3088f93a\">0xD846</span></code><span data-lake-id=\"u9b81bfd8\" id=\"u9b81bfd8\">。同理，低位为 </span><code data-lake-id=\"u0fbe461e\" id=\"u0fbe461e\"><span data-lake-id=\"udef2fca7\" id=\"udef2fca7\">0xDC00</span></code><span data-lake-id=\"ucf28bde6\" id=\"ucf28bde6\">，所以这个字的</span><code data-lake-id=\"u9202e0b8\" id=\"u9202e0b8\"><span data-lake-id=\"u5793c940\" id=\"u5793c940\">UTF-16</span></code><span data-lake-id=\"ue00d84fc\" id=\"ue00d84fc\"> 编码为 </span><code data-lake-id=\"u1f670acb\" id=\"u1f670acb\"><span data-lake-id=\"uf9e3518a\" id=\"uf9e3518a\">0xD846 0xDC00</span></code></li></ul><h4 data-lake-id=\"43593b994c180385f83b62314f2d7913\" id=\"43593b994c180385f83b62314f2d7913\"><span data-lake-id=\"u680286f9\" id=\"u680286f9\">（4） UTF-32</span></h4><p data-lake-id=\"4fa650be5afa021a9362551ac0bcf7a7\" id=\"4fa650be5afa021a9362551ac0bcf7a7\"><code data-lake-id=\"u085eb6ad\" id=\"u085eb6ad\"><span data-lake-id=\"u90ed82e2\" id=\"u90ed82e2\">UTF-32</span></code><span data-lake-id=\"u56fb3f75\" id=\"u56fb3f75\"> 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。</span></p><p data-lake-id=\"99a3201b796c39cbaffc4c01fceca7bb\" id=\"99a3201b796c39cbaffc4c01fceca7bb\"><br></p><p data-lake-id=\"194ca556c2371875674415f86040f540\" id=\"194ca556c2371875674415f86040f540\"><span data-lake-id=\"u3eee83a6\" id=\"u3eee83a6\">比如“</span><strong><span data-lake-id=\"u7c56e8c3\" id=\"u7c56e8c3\">马</span></strong><span data-lake-id=\"u696b89b7\" id=\"u696b89b7\">” 字的Unicode编号是：</span><code data-lake-id=\"u8e66930b\" id=\"u8e66930b\"><span data-lake-id=\"u5240b2f9\" id=\"u5240b2f9\">U+9A6C</span></code><span data-lake-id=\"ub49fa7bc\" id=\"ub49fa7bc\">，整数编号是</span><code data-lake-id=\"ua7b5819f\" id=\"ua7b5819f\"><span data-lake-id=\"uac92614b\" id=\"uac92614b\">39532</span></code><span data-lake-id=\"u82e65c54\" id=\"u82e65c54\">，直接转化为二进制：</span><code data-lake-id=\"uf21b08ff\" id=\"uf21b08ff\"><span data-lake-id=\"u21fef477\" id=\"u21fef477\">1001 1010 0110 1100</span></code><span data-lake-id=\"u764ddd34\" id=\"u764ddd34\">，这就是它的UTF-32编码。</span></p><h4 data-lake-id=\"8f0ee7c9be26e6df849d1b3b33d7c560\" id=\"8f0ee7c9be26e6df849d1b3b33d7c560\"><span data-lake-id=\"u81aedfff\" id=\"u81aedfff\">（5）总结</span></h4><p data-lake-id=\"85ed51edc59fcec6996e8deb589ae008\" id=\"85ed51edc59fcec6996e8deb589ae008\"><strong><span data-lake-id=\"u70e86016\" id=\"u70e86016\">Unicode、UTF-8、UTF-16、UTF-32有什么区别？</span></strong></p><ul list=\"u679480b3\"><li fid=\"u4493f669\" data-lake-id=\"504c2d78637b656658c7bd0c5fabd43e\" id=\"504c2d78637b656658c7bd0c5fabd43e\"><code data-lake-id=\"uf34df854\" id=\"uf34df854\"><span data-lake-id=\"u15948db5\" id=\"u15948db5\">Unicode</span></code><span data-lake-id=\"u39074e24\" id=\"u39074e24\"> 是编码字符集（字符集），而</span><code data-lake-id=\"u9d45fd27\" id=\"u9d45fd27\"><span data-lake-id=\"u1fc166e2\" id=\"u1fc166e2\">UTF-8</span></code><span data-lake-id=\"u8b45df1a\" id=\"u8b45df1a\">、</span><code data-lake-id=\"u6bd2944d\" id=\"u6bd2944d\"><span data-lake-id=\"u4f3c2cf5\" id=\"u4f3c2cf5\">UTF-16</span></code><span data-lake-id=\"uda0ee388\" id=\"uda0ee388\">、</span><code data-lake-id=\"u8e5266ab\" id=\"u8e5266ab\"><span data-lake-id=\"u511026c0\" id=\"u511026c0\">UTF-32</span></code><span data-lake-id=\"ub10a2556\" id=\"ub10a2556\">是字符集编码（编码规则）；</span></li><li fid=\"u4493f669\" data-lake-id=\"ad26a1ff80f91cb84473974dc89c7a2b\" id=\"ad26a1ff80f91cb84473974dc89c7a2b\"><code data-lake-id=\"ua739845a\" id=\"ua739845a\"><span data-lake-id=\"u416a807c\" id=\"u416a807c\">UTF-16</span></code><span data-lake-id=\"ubbb056b8\" id=\"ubbb056b8\"> 使用变长码元序列的编码方式，相较于定长码元序列的</span><code data-lake-id=\"u80b37334\" id=\"u80b37334\"><span data-lake-id=\"u62a38bf5\" id=\"u62a38bf5\">UTF-32</span></code><span data-lake-id=\"uf418e512\" id=\"uf418e512\">算法更复杂，甚至比同样是变长码元序列的</span><code data-lake-id=\"u4f4ca52b\" id=\"u4f4ca52b\"><span data-lake-id=\"uc167820d\" id=\"uc167820d\">UTF-8</span></code><span data-lake-id=\"u9f416d5d\" id=\"u9f416d5d\">也更为复杂，因为其引入了独特的</span><strong><span data-lake-id=\"u2dc6e1d0\" id=\"u2dc6e1d0\">代理对</span></strong><span data-lake-id=\"u9623fd0f\" id=\"u9623fd0f\">这样的代理机制；</span></li><li fid=\"u4493f669\" data-lake-id=\"03cf54bade54cbca79185cf27ecddba9\" id=\"03cf54bade54cbca79185cf27ecddba9\"><code data-lake-id=\"u143cd023\" id=\"u143cd023\"><span data-lake-id=\"ua74930d2\" id=\"ua74930d2\">UTF-8</span></code><span data-lake-id=\"u0f309301\" id=\"u0f309301\">需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而</span><code data-lake-id=\"ub0acb80f\" id=\"ub0acb80f\"><span data-lake-id=\"u8a959436\" id=\"u8a959436\">UTF-16</span></code><span data-lake-id=\"ua1d8b9fb\" id=\"ua1d8b9fb\">不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；</span></li><li fid=\"u4493f669\" data-lake-id=\"957f0ed1946460917f516a759f52f253\" id=\"957f0ed1946460917f516a759f52f253\"><span data-lake-id=\"u18fa244c\" id=\"u18fa244c\">如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用</span><code data-lake-id=\"u464dabcd\" id=\"u464dabcd\"><span data-lake-id=\"ua6d9d164\" id=\"ua6d9d164\">UTF-8</span></code><span data-lake-id=\"u0d84b148\" id=\"u0d84b148\">就比</span><code data-lake-id=\"u5613c1f8\" id=\"u5613c1f8\"><span data-lake-id=\"u066ca37c\" id=\"u066ca37c\">UTF-16</span></code><span data-lake-id=\"u3c158f0d\" id=\"u3c158f0d\">节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么</span><code data-lake-id=\"u8e6e8645\" id=\"u8e6e8645\"><span data-lake-id=\"udae9678d\" id=\"udae9678d\">UTF-16</span></code><span data-lake-id=\"u5dd63a7d\" id=\"u5dd63a7d\">就占优势了，可以节省很多空间；</span></li></ul><h3 data-lake-id=\"fc742648d9e27fa910d8ae008f6ac771\" id=\"fc742648d9e27fa910d8ae008f6ac771\"><span data-lake-id=\"ud3c1d38a\" id=\"ud3c1d38a\">11. 常见的位运算符有哪些？其计算规则是什么？</span></h3><p data-lake-id=\"29290f87f926c757d9235c5cac6222ad\" id=\"29290f87f926c757d9235c5cac6222ad\"><span data-lake-id=\"u1aa84bc6\" id=\"u1aa84bc6\">现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。</span></p><p data-lake-id=\"21998f5d6aaa007e1cd1d94909a2ced6\" id=\"21998f5d6aaa007e1cd1d94909a2ced6\"><br></p><p data-lake-id=\"2330809880cbd41167dfa580131badcf\" id=\"2330809880cbd41167dfa580131badcf\"><span data-lake-id=\"u4a73bd11\" id=\"u4a73bd11\">常见的位运算有以下几种：</span></p><table data-lake-id=\"LWKu6\" id=\"LWKu6\" margin=\"true\" class=\"lake-table\" style=\"width: 780px\"><colgroup><col width=\"157\"><col width=\"166\"><col width=\"457\"></colgroup><tbody><tr data-lake-id=\"u2e6a3cb1\" id=\"u2e6a3cb1\" style=\"height: 33px\"><td data-lake-id=\"u279c6862\" id=\"u279c6862\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u422d18c2\" id=\"u422d18c2\" style=\"text-align: center\"><span data-lake-id=\"uf9b5221d\" id=\"uf9b5221d\">运算符</span></p></td><td data-lake-id=\"u1f0fb1b6\" id=\"u1f0fb1b6\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u2f676f0c\" id=\"u2f676f0c\" style=\"text-align: center\"><span data-lake-id=\"u42f4d43f\" id=\"u42f4d43f\">描述</span></p></td><td data-lake-id=\"ub6514e03\" id=\"ub6514e03\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u99d0278f\" id=\"u99d0278f\" style=\"text-align: center\"><span data-lake-id=\"u69c28c33\" id=\"u69c28c33\">运算规则</span></p></td></tr><tr data-lake-id=\"u9aac2f5c\" id=\"u9aac2f5c\" style=\"height: 33px\"><td data-lake-id=\"u50b75aba\" id=\"u50b75aba\" style=\"vertical-align: middle\"><p data-lake-id=\"ua9b8c744\" id=\"ua9b8c744\" style=\"text-align: center\"><code data-lake-id=\"u38086e75\" id=\"u38086e75\"><span data-lake-id=\"u1f193743\" id=\"u1f193743\">&amp;</span></code></p></td><td data-lake-id=\"u5ac1b72c\" id=\"u5ac1b72c\" style=\"vertical-align: middle\"><p data-lake-id=\"ub2892575\" id=\"ub2892575\" style=\"text-align: center\"><span data-lake-id=\"u14a21279\" id=\"u14a21279\">与</span></p></td><td data-lake-id=\"u3b3586de\" id=\"u3b3586de\" style=\"vertical-align: middle\"><p data-lake-id=\"u1d86d7ca\" id=\"u1d86d7ca\" style=\"text-align: center\"><span data-lake-id=\"ua04b9a6a\" id=\"ua04b9a6a\">两个位都为1时，结果才为1</span></p></td></tr><tr data-lake-id=\"ue8c78699\" id=\"ue8c78699\" style=\"height: 33px\"><td data-lake-id=\"u19e0b181\" id=\"u19e0b181\" style=\"vertical-align: middle\"><p data-lake-id=\"ud71ae70c\" id=\"ud71ae70c\" style=\"text-align: center\"><code data-lake-id=\"u97e3d005\" id=\"u97e3d005\"><span data-lake-id=\"u7b51d201\" id=\"u7b51d201\">|</span></code></p></td><td data-lake-id=\"u09f85d37\" id=\"u09f85d37\" style=\"vertical-align: middle\"><p data-lake-id=\"ua00779d0\" id=\"ua00779d0\" style=\"text-align: center\"><span data-lake-id=\"u7933f58d\" id=\"u7933f58d\">或</span></p></td><td data-lake-id=\"u1bedbeb6\" id=\"u1bedbeb6\" style=\"vertical-align: middle\"><p data-lake-id=\"u2ced8168\" id=\"u2ced8168\" style=\"text-align: center\"><span data-lake-id=\"u969011b2\" id=\"u969011b2\">两个位都为0时，结果才为0</span></p></td></tr><tr data-lake-id=\"ue6129c7b\" id=\"ue6129c7b\" style=\"height: 33px\"><td data-lake-id=\"ua5b52246\" id=\"ua5b52246\" style=\"vertical-align: middle\"><p data-lake-id=\"u71cc19a8\" id=\"u71cc19a8\" style=\"text-align: center\"><code data-lake-id=\"u7ee99ee2\" id=\"u7ee99ee2\"><span data-lake-id=\"u0778907d\" id=\"u0778907d\">^</span></code></p></td><td data-lake-id=\"u16b50e3d\" id=\"u16b50e3d\" style=\"vertical-align: middle\"><p data-lake-id=\"ufb656cd8\" id=\"ufb656cd8\" style=\"text-align: center\"><span data-lake-id=\"ucdac40ff\" id=\"ucdac40ff\">异或</span></p></td><td data-lake-id=\"uc97b7712\" id=\"uc97b7712\" style=\"vertical-align: middle\"><p data-lake-id=\"u318bb9f2\" id=\"u318bb9f2\" style=\"text-align: center\"><span data-lake-id=\"ud66d8847\" id=\"ud66d8847\">两个位相同为0，相异为1</span></p></td></tr><tr data-lake-id=\"uc793d101\" id=\"uc793d101\" style=\"height: 33px\"><td data-lake-id=\"ue8ac6421\" id=\"ue8ac6421\" style=\"vertical-align: middle\"><p data-lake-id=\"ucd7fde0f\" id=\"ucd7fde0f\" style=\"text-align: center\"><code data-lake-id=\"u9e0fcb2e\" id=\"u9e0fcb2e\"><span data-lake-id=\"ub03d2c49\" id=\"ub03d2c49\">~</span></code></p></td><td data-lake-id=\"ucbb21ef3\" id=\"ucbb21ef3\" style=\"vertical-align: middle\"><p data-lake-id=\"u18e0732c\" id=\"u18e0732c\" style=\"text-align: center\"><span data-lake-id=\"u28ae8db4\" id=\"u28ae8db4\">取反</span></p></td><td data-lake-id=\"u3ebc3f78\" id=\"u3ebc3f78\" style=\"vertical-align: middle\"><p data-lake-id=\"u05a0e9d3\" id=\"u05a0e9d3\" style=\"text-align: center\"><span data-lake-id=\"ue23f1719\" id=\"ue23f1719\">0变1，1变0</span></p></td></tr><tr data-lake-id=\"u9e9b5511\" id=\"u9e9b5511\" style=\"height: 33px\"><td data-lake-id=\"u0855385a\" id=\"u0855385a\" style=\"vertical-align: middle\"><p data-lake-id=\"u12ff0cd1\" id=\"u12ff0cd1\" style=\"text-align: center\"><code data-lake-id=\"u55a574ba\" id=\"u55a574ba\"><span data-lake-id=\"u738d6990\" id=\"u738d6990\">&lt;&lt;</span></code></p></td><td data-lake-id=\"u29e5e45e\" id=\"u29e5e45e\" style=\"vertical-align: middle\"><p data-lake-id=\"u3e38c959\" id=\"u3e38c959\" style=\"text-align: center\"><span data-lake-id=\"uc7c7553c\" id=\"uc7c7553c\">左移</span></p></td><td data-lake-id=\"uacbb81ac\" id=\"uacbb81ac\" style=\"vertical-align: middle\"><p data-lake-id=\"ud788be85\" id=\"ud788be85\" style=\"text-align: center\"><span data-lake-id=\"u1bfd9fd9\" id=\"u1bfd9fd9\">各二进制位全部左移若干位，高位丢弃，低位补0</span></p></td></tr><tr data-lake-id=\"u667cc630\" id=\"u667cc630\" style=\"height: 33px\"><td data-lake-id=\"u54073ced\" id=\"u54073ced\" style=\"vertical-align: middle\"><p data-lake-id=\"u783b3b8f\" id=\"u783b3b8f\" style=\"text-align: center\"><code data-lake-id=\"u512837bc\" id=\"u512837bc\"><span data-lake-id=\"u657d7091\" id=\"u657d7091\">&gt;&gt;</span></code></p></td><td data-lake-id=\"uafc79bcb\" id=\"uafc79bcb\" style=\"vertical-align: middle\"><p data-lake-id=\"ucd2732a5\" id=\"ucd2732a5\" style=\"text-align: center\"><span data-lake-id=\"u4fe3b9b7\" id=\"u4fe3b9b7\">右移</span></p></td><td data-lake-id=\"u1dbfd608\" id=\"u1dbfd608\" style=\"vertical-align: middle\"><p data-lake-id=\"u0666e303\" id=\"u0666e303\" style=\"text-align: center\"><span data-lake-id=\"u431fdb97\" id=\"u431fdb97\">各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃</span></p></td></tr></tbody></table><h4 data-lake-id=\"72ee5ee949268cfa23074b1a53b04d0d\" id=\"72ee5ee949268cfa23074b1a53b04d0d\"><span data-lake-id=\"u63c32f8a\" id=\"u63c32f8a\">1. 按位与运算符（&amp;）</span></h4><p data-lake-id=\"05583fd8d8fe5b36c8b68dbc4b552040\" id=\"05583fd8d8fe5b36c8b68dbc4b552040\"><strong><span data-lake-id=\"u902ede77\" id=\"u902ede77\">定义：</span></strong><span data-lake-id=\"u567e51a2\" id=\"u567e51a2\"> 参加运算的两个数据</span><strong><span data-lake-id=\"u80b2e324\" id=\"u80b2e324\">按二进制位</span></strong><span data-lake-id=\"u89fd71f5\" id=\"u89fd71f5\">进行“与”运算。</span></p><p data-lake-id=\"0cd105c1d8fb13e9d98dd88099e51143\" id=\"0cd105c1d8fb13e9d98dd88099e51143\"><strong><span data-lake-id=\"u60b4e8ef\" id=\"u60b4e8ef\">运算规则：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220%20%26%200%20%3D%200%20%20%5Cn0%20%26%201%20%3D%200%20%20%5Cn1%20%26%200%20%3D%200%20%20%5Cn1%20%26%201%20%3D%201%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22d9oep%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"c72c6f5c129487ebfea788c87911bbc2\" id=\"c72c6f5c129487ebfea788c87911bbc2\"><span data-lake-id=\"u0ad1a490\" id=\"u0ad1a490\">总结：两位同时为1，结果才为1，否则结果为0。</span></p><p data-lake-id=\"a3593e1475ec6aaf3b41668fddd7397e\" id=\"a3593e1475ec6aaf3b41668fddd7397e\"><span data-lake-id=\"u91fb61ed\" id=\"u91fb61ed\">例如：3&amp;5 即：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220000%200011%20%5Cn%20%20%200000%200101%20%5Cn%20%3D%200000%200001%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vhU8b%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"0e64f7a1ea57ba80384ab499e3d6a367\" id=\"0e64f7a1ea57ba80384ab499e3d6a367\"><span data-lake-id=\"u435c88f2\" id=\"u435c88f2\">因此 3&amp;5 的值为1。</span></p><p data-lake-id=\"a2dcbf27d45444f78ef72fd332fcde0a\" id=\"a2dcbf27d45444f78ef72fd332fcde0a\"><span data-lake-id=\"uc0faf482\" id=\"uc0faf482\">注意：负数按补码形式参加按位与运算。</span></p><p data-lake-id=\"ec0d3c7c8bb5103975b7ad17374d44e9\" id=\"ec0d3c7c8bb5103975b7ad17374d44e9\"><strong><span data-lake-id=\"uc4de17be\" id=\"uc4de17be\">用途：</span></strong></p><p data-lake-id=\"0ee5ede0f7142fd02b92da98fbc53866\" id=\"0ee5ede0f7142fd02b92da98fbc53866\"><strong><span data-lake-id=\"u09c5e9ed\" id=\"u09c5e9ed\">（1）判断奇偶</span></strong></p><p data-lake-id=\"cd6dcb428f37f1fe7e36b3861376bd02\" id=\"cd6dcb428f37f1fe7e36b3861376bd02\"><span data-lake-id=\"u8c199557\" id=\"u8c199557\">只要根据最未位是0还是1来决定，为0就是偶数，为1就是奇数。因此可以用</span><code data-lake-id=\"uabec83ae\" id=\"uabec83ae\"><span data-lake-id=\"u500fccd3\" id=\"u500fccd3\">if ((i &amp; 1) == 0)</span></code><span data-lake-id=\"ua0dd6337\" id=\"ua0dd6337\">代替</span><code data-lake-id=\"ubb09f5f0\" id=\"ubb09f5f0\"><span data-lake-id=\"u26abd6ee\" id=\"u26abd6ee\">if (i % 2 == 0)</span></code><span data-lake-id=\"u3a8afd24\" id=\"u3a8afd24\">来判断a是不是偶数。</span></p><p data-lake-id=\"e16c1e39f058c81671b6c492af5ccd31\" id=\"e16c1e39f058c81671b6c492af5ccd31\"><strong><span data-lake-id=\"u1daefe4a\" id=\"u1daefe4a\">（2）清零</span></strong></p><p data-lake-id=\"bbdba797236475d0c42c370ebf9716dd\" id=\"bbdba797236475d0c42c370ebf9716dd\"><span data-lake-id=\"u11287f1e\" id=\"u11287f1e\">如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都为零的数值相与，结果为零。</span></p><h4 data-lake-id=\"cd251ba716366183fd333423c251a0b9\" id=\"cd251ba716366183fd333423c251a0b9\"><span data-lake-id=\"u414035fe\" id=\"u414035fe\">2. 按位或运算符（|）</span></h4><p data-lake-id=\"526553c0e639313d2cfa49aaee60bff1\" id=\"526553c0e639313d2cfa49aaee60bff1\"><strong><span data-lake-id=\"u9255a039\" id=\"u9255a039\">定义：</span></strong><span data-lake-id=\"uf5c0611b\" id=\"uf5c0611b\"> 参加运算的两个对象按二进制位进行“或”运算。</span></p><p data-lake-id=\"7a9ab683448921eeff50fe5d8c113130\" id=\"7a9ab683448921eeff50fe5d8c113130\"><strong><span data-lake-id=\"u447ab84d\" id=\"u447ab84d\">运算规则：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220%20%7C%200%20%3D%200%5Cn0%20%7C%201%20%3D%201%20%20%5Cn1%20%7C%200%20%3D%201%20%20%5Cn1%20%7C%201%20%3D%201%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qzw4J%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"26d1cf0d02243315e6dbaefee5cc9971\" id=\"26d1cf0d02243315e6dbaefee5cc9971\"><span data-lake-id=\"ud5dc757b\" id=\"ud5dc757b\">总结：参加运算的两个对象只要有一个为1，其值为1。</span></p><p data-lake-id=\"44d288409a8ee180428ea572993e349f\" id=\"44d288409a8ee180428ea572993e349f\"><span data-lake-id=\"ud6d4f121\" id=\"ud6d4f121\">例如：3|5即：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220000%200011%5Cn%20%200000%200101%20%5Cn%3D%200000%200111%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%2240k4m%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"196c4b97d2e4ab10f0c5d2e7665fda53\" id=\"196c4b97d2e4ab10f0c5d2e7665fda53\"><span data-lake-id=\"u21f41560\" id=\"u21f41560\">因此，3|5的值为7。</span></p><p data-lake-id=\"2b72389b323cca4976ac78430ab03426\" id=\"2b72389b323cca4976ac78430ab03426\"><span data-lake-id=\"u3ea76909\" id=\"u3ea76909\">注意：负数按补码形式参加按位或运算。</span></p><h4 data-lake-id=\"64daf3a85271a94c3c491ef90fcecb3e\" id=\"64daf3a85271a94c3c491ef90fcecb3e\"><span data-lake-id=\"u89b33084\" id=\"u89b33084\">3. 异或运算符（^）</span></h4><p data-lake-id=\"fa5546c796b4ab65ca03eeec3b31ebaf\" id=\"fa5546c796b4ab65ca03eeec3b31ebaf\"><strong><span data-lake-id=\"u3af6c865\" id=\"u3af6c865\">定义：</span></strong><span data-lake-id=\"ubab053a7\" id=\"ubab053a7\"> 参加运算的两个数据按二进制位进行“异或”运算。</span></p><p data-lake-id=\"0b1113f9b605eab5a202ca7abe244960\" id=\"0b1113f9b605eab5a202ca7abe244960\"><strong><span data-lake-id=\"uaf69d604\" id=\"uaf69d604\">运算规则：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220%20%5E%200%20%3D%200%20%20%5Cn0%20%5E%201%20%3D%201%20%20%5Cn1%20%5E%200%20%3D%201%20%20%5Cn1%20%5E%201%20%3D%200%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%225NAdQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"29d701620c00d3b534f27eaab617b22c\" id=\"29d701620c00d3b534f27eaab617b22c\"><span data-lake-id=\"u6528152e\" id=\"u6528152e\">总结：参加运算的两个对象，如果两个相应位相同为0，相异为1。</span></p><p data-lake-id=\"ed10fd4684427fe7b487bdd319f1d682\" id=\"ed10fd4684427fe7b487bdd319f1d682\"><span data-lake-id=\"ud3649959\" id=\"ud3649959\">例如：3|5即：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220000%200011%5Cn%20%200000%200101%20%5Cn%3D%200000%200110%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%2292D6e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"04b5682b2efe67c127b461cfd458f8a1\" id=\"04b5682b2efe67c127b461cfd458f8a1\"><span data-lake-id=\"udc24ce5c\" id=\"udc24ce5c\">因此，3^5的值为6。</span></p><p data-lake-id=\"156df9511a784be104cef7c8ab91a296\" id=\"156df9511a784be104cef7c8ab91a296\"><span data-lake-id=\"ud83d3cbc\" id=\"ud83d3cbc\">异或运算的性质:</span></p><ul list=\"uf1f2a5db\"><li fid=\"ud2f4b3b7\" data-lake-id=\"991ac916eef50485f6cbdf19156e83c8\" id=\"991ac916eef50485f6cbdf19156e83c8\"><span data-lake-id=\"ub4db0d7e\" id=\"ub4db0d7e\">交换律：</span><code data-lake-id=\"u36a814a3\" id=\"u36a814a3\"><span data-lake-id=\"u99333df6\" id=\"u99333df6\">(a^b)^c == a^(b^c)</span></code></li><li fid=\"ud2f4b3b7\" data-lake-id=\"2fa2567b90111a389a7a416d1f86cfe5\" id=\"2fa2567b90111a389a7a416d1f86cfe5\"><span data-lake-id=\"u6671648d\" id=\"u6671648d\">结合律：</span><code data-lake-id=\"u38232d83\" id=\"u38232d83\"><span data-lake-id=\"ud391dd1c\" id=\"ud391dd1c\">(a + b)^c == a^b + b^c</span></code></li><li fid=\"ud2f4b3b7\" data-lake-id=\"1dbabae4a049af84ad76bedabd0d14a7\" id=\"1dbabae4a049af84ad76bedabd0d14a7\"><span data-lake-id=\"u774dc2c0\" id=\"u774dc2c0\">对于任何数x，都有 </span><code data-lake-id=\"u5df2a463\" id=\"u5df2a463\"><span data-lake-id=\"u31ddc521\" id=\"u31ddc521\">x^x=0，x^0=x</span></code></li><li fid=\"ud2f4b3b7\" data-lake-id=\"5ef2c682723fea5d4d1421b8529594db\" id=\"5ef2c682723fea5d4d1421b8529594db\"><span data-lake-id=\"u993a5178\" id=\"u993a5178\">自反性: </span><code data-lake-id=\"u393c4eec\" id=\"u393c4eec\"><span data-lake-id=\"u3e09fb92\" id=\"u3e09fb92\">a^b^b=a^0=a</span></code><span data-lake-id=\"udec3919d\" id=\"udec3919d\">;</span></li></ul><h4 data-lake-id=\"ffcd6a1a0aeec18bb9b975298441f1cc\" id=\"ffcd6a1a0aeec18bb9b975298441f1cc\"><span data-lake-id=\"u613b4f33\" id=\"u613b4f33\">4. 取反运算符 (~)</span></h4><p data-lake-id=\"2ae3df37865573065a86a9c58b157dc0\" id=\"2ae3df37865573065a86a9c58b157dc0\"><strong><span data-lake-id=\"uc5554fcf\" id=\"uc5554fcf\">定义：</span></strong><span data-lake-id=\"u04cddc4a\" id=\"u04cddc4a\"> 参加运算的一个数据按二进制进行“取反”运算。</span></p><p data-lake-id=\"6bf105a63385f6e16b2755502cd28bed\" id=\"6bf105a63385f6e16b2755502cd28bed\"><span data-lake-id=\"u5697e8dc\" id=\"u5697e8dc\">运算规则：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22~%201%20%3D%200%5Cn~%200%20%3D%201%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%222R5fw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"5dca26b3a09256d83584005cf408a14f\" id=\"5dca26b3a09256d83584005cf408a14f\"><span data-lake-id=\"u48481174\" id=\"u48481174\">总结：对一个二进制数按位取反，即将0变1，1变0。</span></p><p data-lake-id=\"17bc5887082a70d52da5197b33f6b2c9\" id=\"17bc5887082a70d52da5197b33f6b2c9\"><span data-lake-id=\"ubbc46015\" id=\"ubbc46015\">例如：~6 即：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220000%200110%5Cn%3D%201111%201001%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22psvgs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"dbf8df33274ac18b098b87750b38eb43\" id=\"dbf8df33274ac18b098b87750b38eb43\"><span data-lake-id=\"u0117bf72\" id=\"u0117bf72\">在计算机中，正数用原码表示，负数使用补码存储，首先看最高位，最高位1表示负数，0表示正数。此计算机二进制码为负数，最高位为符号位。</span></p><p data-lake-id=\"657f201f4907560dd7f3f2a2de10776e\" id=\"657f201f4907560dd7f3f2a2de10776e\"><span data-lake-id=\"u2fa7ac43\" id=\"u2fa7ac43\">当发现按位取反为负数时，就</span><strong><span data-lake-id=\"u2bc384c2\" id=\"u2bc384c2\">直接取其补码</span></strong><span data-lake-id=\"uff4f1901\" id=\"uff4f1901\">，变为十进制：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%220000%200110%5Cn%20%20%20%3D%201111%201001%5Cn%E5%8F%8D%E7%A0%81%EF%BC%9A1000%200110%5Cn%E8%A1%A5%E7%A0%81%EF%BC%9A1000%200111%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%229yJHI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"6850ab8216052506ea2c285bd46dc59a\" id=\"6850ab8216052506ea2c285bd46dc59a\"><span data-lake-id=\"u6c479554\" id=\"u6c479554\">因此，~6的值为-7。</span></p><h4 data-lake-id=\"57ed302d29fb8678ba8042bafae2f510\" id=\"57ed302d29fb8678ba8042bafae2f510\"><span data-lake-id=\"uff2c6ad5\" id=\"uff2c6ad5\">5. 左移运算符（&lt;&lt;）</span></h4><p data-lake-id=\"9bdfeb689ee7d261caf4e69e6fd4e443\" id=\"9bdfeb689ee7d261caf4e69e6fd4e443\"><strong><span data-lake-id=\"uaed495de\" id=\"uaed495de\">定义：</span></strong><span data-lake-id=\"u17fd6764\" id=\"u17fd6764\"> 将一个运算对象的各二进制位全部左移若干位，左边的二进制位丢弃，右边补0。</span></p><p data-lake-id=\"ce7f24b0a697a78bab179c611600541f\" id=\"ce7f24b0a697a78bab179c611600541f\"><span data-lake-id=\"u50d97578\" id=\"u50d97578\">设 a=1010 1110，a = a&lt;&lt; 2 将a的二进制位左移2位、右补0，即得a=1011 1000。</span></p><p data-lake-id=\"44451f74738c2adb45c70564a547b0e1\" id=\"44451f74738c2adb45c70564a547b0e1\"><span data-lake-id=\"u7972ed2b\" id=\"u7972ed2b\">若左移时舍弃的高位不包含1，则每左移一位，相当于该数乘以2。</span></p><h4 data-lake-id=\"797006c302fd551b7a0af9c7af0fc748\" id=\"797006c302fd551b7a0af9c7af0fc748\"><span data-lake-id=\"ude1985f4\" id=\"ude1985f4\">6. 右移运算符（&gt;&gt;）</span></h4><p data-lake-id=\"73d490dce3e0d7afe4511e217249e99a\" id=\"73d490dce3e0d7afe4511e217249e99a\"><strong><span data-lake-id=\"u8fc18cee\" id=\"u8fc18cee\">定义：</span></strong><span data-lake-id=\"u2231c610\" id=\"u2231c610\"> 将一个数的各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃。</span></p><p data-lake-id=\"1f052d0ebd6581e9e691ef0d2c001bb0\" id=\"1f052d0ebd6581e9e691ef0d2c001bb0\"><span data-lake-id=\"ucfac1cdd\" id=\"ucfac1cdd\">例如：a=a&gt;&gt;2 将a的二进制位右移2位，左补0 或者 左补1得看被移数是正还是负。</span></p><p data-lake-id=\"e5b2c02749581c832fb44e2a4db81123\" id=\"e5b2c02749581c832fb44e2a4db81123\"><span data-lake-id=\"u236ca014\" id=\"u236ca014\">操作数每右移一位，相当于该数除以2。</span></p><h4 data-lake-id=\"bd75b7826ac01f6d361a4b0b04b6e164\" id=\"bd75b7826ac01f6d361a4b0b04b6e164\"><span data-lake-id=\"u9af3e9a5\" id=\"u9af3e9a5\">7. 原码、补码、反码</span></h4><p data-lake-id=\"b37a9484561f2903070100314428719f\" id=\"b37a9484561f2903070100314428719f\"><span data-lake-id=\"ub2e0960d\" id=\"ub2e0960d\">上面提到了补码、反码等知识，这里就补充一下。</span></p><p data-lake-id=\"5d0b8976d065ca5f692497721ca10169\" id=\"5d0b8976d065ca5f692497721ca10169\"><span data-lake-id=\"u26d39f37\" id=\"u26d39f37\">计算机中的</span><strong><span data-lake-id=\"u79d0f5d8\" id=\"u79d0f5d8\">有符号数</span></strong><span data-lake-id=\"u7d260849\" id=\"u7d260849\">有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。</span></p><p data-lake-id=\"51b9ce799341fb1608c2204527efb7d0\" id=\"51b9ce799341fb1608c2204527efb7d0\"><strong><span data-lake-id=\"ue9ec1f8e\" id=\"ue9ec1f8e\">（1）原码</span></strong></p><p data-lake-id=\"1accf1558482ccc96102e181cf16eb4b\" id=\"1accf1558482ccc96102e181cf16eb4b\"><span data-lake-id=\"uc33488e4\" id=\"uc33488e4\">原码就是一个数的二进制数。</span></p><p data-lake-id=\"b7f26e53111dfa2c8bb2408ce28ed62a\" id=\"b7f26e53111dfa2c8bb2408ce28ed62a\"><span data-lake-id=\"uada62033\" id=\"uada62033\">例如：10的原码为0000 1010</span></p><p data-lake-id=\"ac3f7b4d2879be386c7c393682679e03\" id=\"ac3f7b4d2879be386c7c393682679e03\"><strong><span data-lake-id=\"u9eee2d90\" id=\"u9eee2d90\">（2）反码</span></strong></p><ul list=\"uf2b2a0bb\"><li fid=\"udf5f42ae\" data-lake-id=\"8f7e1b808c433e18d866c04ace818241\" id=\"8f7e1b808c433e18d866c04ace818241\"><span data-lake-id=\"u3d0ac096\" id=\"u3d0ac096\">正数的反码与原码相同，如：10 反码为 0000 1010</span></li><li fid=\"udf5f42ae\" data-lake-id=\"c56100ce0dbccf613d86585ecca1f62a\" id=\"c56100ce0dbccf613d86585ecca1f62a\"><span data-lake-id=\"u4b204e46\" id=\"u4b204e46\">负数的反码为除符号位，按位取反，即0变1，1变0。</span></li></ul><p data-lake-id=\"07f4fc3d5aab13542442c88a9b487863\" id=\"07f4fc3d5aab13542442c88a9b487863\"><span data-lake-id=\"u7d252e9b\" id=\"u7d252e9b\">例如：-10</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E5%8E%9F%E7%A0%81%EF%BC%9A1000%201010%5Cn%E5%8F%8D%E7%A0%81%EF%BC%9A1111%200101%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22riz5E%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"45cad369b07be3f778ba06706a859838\" id=\"45cad369b07be3f778ba06706a859838\"><strong><span data-lake-id=\"u6c508f69\" id=\"u6c508f69\">（3）补码</span></strong></p><ul list=\"u40de2660\"><li fid=\"u11b1aa84\" data-lake-id=\"c376aed69b3a2e9a5975cfd632739b19\" id=\"c376aed69b3a2e9a5975cfd632739b19\"><span data-lake-id=\"u0f6a753b\" id=\"u0f6a753b\">正数的补码与原码相同，如：10 补码为 0000 1010</span></li><li fid=\"u11b1aa84\" data-lake-id=\"3de7030fc551129d42c52d7c8119fab2\" id=\"3de7030fc551129d42c52d7c8119fab2\"><span data-lake-id=\"u74578c5e\" id=\"u74578c5e\">负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。</span></li></ul><p data-lake-id=\"afcc3bee9d97886c1a5351af5479fe59\" id=\"afcc3bee9d97886c1a5351af5479fe59\"><span data-lake-id=\"ue88d84a5\" id=\"ue88d84a5\">例如：-10</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E5%8E%9F%E7%A0%81%EF%BC%9A1000%201010%5Cn%E5%8F%8D%E7%A0%81%EF%BC%9A1111%200101%5Cn%E8%A1%A5%E7%A0%81%EF%BC%9A1111%200110%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22L3Zmz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"f3413b7e0da0c517e869f9fcdedbc9e2\" id=\"f3413b7e0da0c517e869f9fcdedbc9e2\"><span data-lake-id=\"u1bb91f92\" id=\"u1bb91f92\">12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?</span></h3><p data-lake-id=\"3444e3d28b7f4074b3c52f406802bf6d\" id=\"3444e3d28b7f4074b3c52f406802bf6d\" style=\"text-align: justify\"><code data-lake-id=\"u7fa25c60\" id=\"u7fa25c60\"><span data-lake-id=\"u0e132647\" id=\"u0e132647\">arguments</span></code><span data-lake-id=\"ud7113610\" id=\"ud7113610\">是一个对象，它的属性是从 0 开始依次递增的数字，还有</span><code data-lake-id=\"u4017ad9e\" id=\"u4017ad9e\"><span data-lake-id=\"u4249630d\" id=\"u4249630d\">callee</span></code><span data-lake-id=\"uf7a47b85\" id=\"uf7a47b85\">和</span><code data-lake-id=\"u73adafa6\" id=\"u73adafa6\"><span data-lake-id=\"u5008d797\" id=\"u5008d797\">length</span></code><span data-lake-id=\"u24b20f9b\" id=\"u24b20f9b\">等属性，与数组相似；但是它却没有数组常见的方法属性，如</span><code data-lake-id=\"u3483ff82\" id=\"u3483ff82\"><span data-lake-id=\"u6f760337\" id=\"u6f760337\">forEach</span></code><span data-lake-id=\"u3c16051e\" id=\"u3c16051e\">, </span><code data-lake-id=\"u284e7393\" id=\"u284e7393\"><span data-lake-id=\"u4c6965f7\" id=\"u4c6965f7\">reduce</span></code><span data-lake-id=\"u7f3e7449\" id=\"u7f3e7449\">等，所以叫它们类数组。</span></p><p data-lake-id=\"a49a763d7c14d3e7bcb9dd1ccfa61235\" id=\"a49a763d7c14d3e7bcb9dd1ccfa61235\" style=\"text-align: justify\"><br></p><p data-lake-id=\"ba12d15664fa049d02a86dec90fca97e\" id=\"ba12d15664fa049d02a86dec90fca97e\" style=\"text-align: justify\"><span data-lake-id=\"u5bee2fd0\" id=\"u5bee2fd0\">要遍历类数组，有三个方法：</span></p><p data-lake-id=\"308bc6bce301eaa7c408cb861f9ed462\" id=\"308bc6bce301eaa7c408cb861f9ed462\"><span data-lake-id=\"u185d2427\" id=\"u185d2427\">（1）将数组的方法应用到类数组上，这时候就可以使用</span><code data-lake-id=\"u4de1479d\" id=\"u4de1479d\"><span data-lake-id=\"uc983245b\" id=\"uc983245b\">call</span></code><span data-lake-id=\"uf12aa076\" id=\"uf12aa076\">和</span><code data-lake-id=\"u92a91601\" id=\"u92a91601\"><span data-lake-id=\"u7c4e2397\" id=\"u7c4e2397\">apply</span></code><span data-lake-id=\"ue26d115c\" id=\"ue26d115c\">方法，如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20foo()%7B%20%5Cn%20%20Array.prototype.forEach.call(arguments%2C%20a%20%3D%3E%20console.log(a))%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22EQS91%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"98423873bce81f697da527ed12afd54a\" id=\"98423873bce81f697da527ed12afd54a\"><span data-lake-id=\"u1fefb428\" id=\"u1fefb428\">（2）使用Array.from方法将类数组转化成数组：‌</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20foo()%7B%20%5Cn%20%20const%20arrArgs%20%3D%20Array.from(arguments)%20%5Cn%20%20arrArgs.forEach(a%20%3D%3E%20console.log(a))%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qhAHd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f5f0dc1435f5892692d8c16e62f0a1e3\" id=\"f5f0dc1435f5892692d8c16e62f0a1e3\"><span data-lake-id=\"u52bf3178\" id=\"u52bf3178\">（3）使用展开运算符将类数组转化成数组</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20foo()%7B%20%5Cn%20%20%20%20const%20arrArgs%20%3D%20%5B...arguments%5D%20%5Cn%20%20%20%20arrArgs.forEach(a%20%3D%3E%20console.log(a))%20%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GUsAU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"39d04f676080dbc4a8857d33c06eac74\" id=\"39d04f676080dbc4a8857d33c06eac74\"><span data-lake-id=\"uabf9b214\" id=\"uabf9b214\">13. 什么是 DOM 和 BOM？</span></h3><ul list=\"uafc0c3b9\"><li fid=\"u75ec633a\" data-lake-id=\"cedd97b21dc6401a07e47d1925137efb\" id=\"cedd97b21dc6401a07e47d1925137efb\"><span data-lake-id=\"u50445662\" id=\"u50445662\">DOM 指的是文档对象模型，它指的是把文档当做一个对象，这个对象主要定义了处理网页内容的方法和接口。</span></li><li fid=\"u75ec633a\" data-lake-id=\"4f6eecd7a75aeb4a40b470a2fab6bce9\" id=\"4f6eecd7a75aeb4a40b470a2fab6bce9\"><span data-lake-id=\"u7901c1e2\" id=\"u7901c1e2\">BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</span></li></ul><h3 data-lake-id=\"07b538c6c75707a5eac84547b91cf390\" id=\"07b538c6c75707a5eac84547b91cf390\"><span data-lake-id=\"u36f2cded\" id=\"u36f2cded\">14. 对类数组对象的理解，如何转化为数组</span></h3><p data-lake-id=\"db74991b903ea7609a76f3b786654eb8\" id=\"db74991b903ea7609a76f3b786654eb8\"><span data-lake-id=\"ud798b779\" id=\"ud798b779\">一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。</span></p><p data-lake-id=\"7453e60d905c359a960da9181a6826d5\" id=\"7453e60d905c359a960da9181a6826d5\"><br></p><p data-lake-id=\"146a4ce77891cc6970d5c3d6d0d40bc3\" id=\"146a4ce77891cc6970d5c3d6d0d40bc3\"><span data-lake-id=\"u95736d72\" id=\"u95736d72\">常见的类数组转换为数组的方法有这样几种：</span></p><ul list=\"uec54d39f\"><li fid=\"ud016410b\" data-lake-id=\"3f7a3056b385ac0dd0138c170eddc7fd\" id=\"3f7a3056b385ac0dd0138c170eddc7fd\"><span data-lake-id=\"uddf47868\" id=\"uddf47868\">通过 call 调用数组的 slice 方法来实现转换</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.slice.call(arrayLike)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22o5SOY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u86c4ffab\"><li fid=\"u0a3a588d\" data-lake-id=\"2107051d7fb30bd58f8db2dbd3f79d08\" id=\"2107051d7fb30bd58f8db2dbd3f79d08\"><span data-lake-id=\"u955fa2fd\" id=\"u955fa2fd\">通过 call 调用数组的 splice 方法来实现转换</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.splice.call(arrayLike%2C%200)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YMhwC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"uad67edfb\"><li fid=\"u8354704f\" data-lake-id=\"4b471abd36f4152f49593e39a1d90ac7\" id=\"4b471abd36f4152f49593e39a1d90ac7\"><span data-lake-id=\"ue82b8db3\" id=\"ue82b8db3\">通过 apply 调用数组的 concat 方法来实现转换</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.prototype.concat.apply(%5B%5D%2C%20arrayLike)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22CSd6w%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u0cfa9736\"><li fid=\"u01da10e0\" data-lake-id=\"8e7422a2c0be331b62892f2b3a76ed3d\" id=\"8e7422a2c0be331b62892f2b3a76ed3d\"><span data-lake-id=\"uf25104e8\" id=\"uf25104e8\">通过 Array.from 方法来实现转换</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Array.from(arrayLike)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22f2thd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"bc6bc9952dfe5037826ed783c68a3c8b\" id=\"bc6bc9952dfe5037826ed783c68a3c8b\"><span data-lake-id=\"ub03eef40\" id=\"ub03eef40\">15. escape、encodeURI、encodeURIComponent 的区别</span></h3><ul list=\"ud5b58b4b\"><li fid=\"uf0611e12\" data-lake-id=\"d18e3f5eacb0aea246f5c61fb7913b59\" id=\"d18e3f5eacb0aea246f5c61fb7913b59\"><span data-lake-id=\"u7de4673d\" id=\"u7de4673d\">encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。</span></li><li fid=\"uf0611e12\" data-lake-id=\"2066570d23b033bab867ec73a48812b8\" id=\"2066570d23b033bab867ec73a48812b8\"><span data-lake-id=\"u660bed04\" id=\"u660bed04\">encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。</span></li><li fid=\"uf0611e12\" data-lake-id=\"9bc21b2837ef6fa3d3cba3ed01ed8229\" id=\"9bc21b2837ef6fa3d3cba3ed01ed8229\"><span data-lake-id=\"u3bf085b0\" id=\"u3bf085b0\">escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。</span></li></ul><h3 data-lake-id=\"260663261b5b01b2f024dc8f6c3f7d7e\" id=\"260663261b5b01b2f024dc8f6c3f7d7e\"><span data-lake-id=\"ud31d42d0\" id=\"ud31d42d0\">16. 对</span><span data-lake-id=\"u26010b97\" id=\"u26010b97\">AJAX</span><span data-lake-id=\"ucd616558\" id=\"ucd616558\">的理解，实现一个AJAX请求</span></h3><p data-lake-id=\"19b07cb90a108a57cca973a7875d7fe0\" id=\"19b07cb90a108a57cca973a7875d7fe0\"><span data-lake-id=\"u453b90ec\" id=\"u453b90ec\">AJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</span></p><p data-lake-id=\"c5ccc6b89eee5c1a4c551d2f085082c7\" id=\"c5ccc6b89eee5c1a4c551d2f085082c7\"><br></p><p data-lake-id=\"0c247646bb1a5c6937ec46684cff44de\" id=\"0c247646bb1a5c6937ec46684cff44de\"><span data-lake-id=\"u64905026\" id=\"u64905026\">创建AJAX请求的步骤：</span></p><ul list=\"ubb29d707\"><li fid=\"ub08c831d\" data-lake-id=\"fbe0d7cd925e86a8d9a4261098d0a9f9\" id=\"fbe0d7cd925e86a8d9a4261098d0a9f9\"><strong><span data-lake-id=\"u5df579cf\" id=\"u5df579cf\">创建一个 XMLHttpRequest 对象。</span></strong></li><li fid=\"ub08c831d\" data-lake-id=\"fd597470936fe5cc32f1e3171664e7c8\" id=\"fd597470936fe5cc32f1e3171664e7c8\"><span data-lake-id=\"u14ff5fd2\" id=\"u14ff5fd2\">在这个对象上</span><strong><span data-lake-id=\"uf0fb35ee\" id=\"uf0fb35ee\">使用 open 方法创建一个 HTTP 请求</span></strong><span data-lake-id=\"uaacba3fa\" id=\"uaacba3fa\">，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</span></li><li fid=\"ub08c831d\" data-lake-id=\"2d419f22bb07aa3d13221da5d85c0e74\" id=\"2d419f22bb07aa3d13221da5d85c0e74\"><span data-lake-id=\"ua47abac3\" id=\"ua47abac3\">在发起请求前，可以为这个对象</span><strong><span data-lake-id=\"u32cf4761\" id=\"u32cf4761\">添加一些信息和监听函数</span></strong><span data-lake-id=\"u360e0e4f\" id=\"u360e0e4f\">。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。</span></li><li fid=\"ub08c831d\" data-lake-id=\"7214c9c6b2384309441b5a932fc983df\" id=\"7214c9c6b2384309441b5a932fc983df\"><span data-lake-id=\"u38ea5c2d\" id=\"u38ea5c2d\">当对象的属性和监听函数设置完成后，最后调</span><strong><span data-lake-id=\"u3fb960c3\" id=\"u3fb960c3\">用 sent 方法来向服务器发起请求</span></strong><span data-lake-id=\"u6c19e27d\" id=\"u6c19e27d\">，可以传入参数作为发送的数据体。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20SERVER_URL%20%3D%20%5C%22%2Fserver%5C%22%3B%5Cnlet%20xhr%20%3D%20new%20XMLHttpRequest()%3B%5Cn%2F%2F%20%E5%88%9B%E5%BB%BA%20Http%20%E8%AF%B7%E6%B1%82%5Cnxhr.open(%5C%22GET%5C%22%2C%20url%2C%20true)%3B%5Cn%2F%2F%20%E8%AE%BE%E7%BD%AE%E7%8A%B6%E6%80%81%E7%9B%91%E5%90%AC%E5%87%BD%E6%95%B0%5Cnxhr.onreadystatechange%20%3D%20function()%20%7B%5Cn%20%20if%20(this.readyState%20!%3D%3D%204)%20return%3B%5Cn%20%20%2F%2F%20%E5%BD%93%E8%AF%B7%E6%B1%82%E6%88%90%E5%8A%9F%E6%97%B6%5Cn%20%20if%20(this.status%20%3D%3D%3D%20200)%20%7B%5Cn%20%20%20%20handle(this.response)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20console.error(this.statusText)%3B%5Cn%20%20%7D%5Cn%7D%3B%5Cn%2F%2F%20%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%A4%B1%E8%B4%A5%E6%97%B6%E7%9A%84%E7%9B%91%E5%90%AC%E5%87%BD%E6%95%B0%5Cnxhr.onerror%20%3D%20function()%20%7B%5Cn%20%20console.error(this.statusText)%3B%5Cn%7D%3B%5Cn%2F%2F%20%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF%5Cnxhr.responseType%20%3D%20%5C%22json%5C%22%3B%5Cnxhr.setRequestHeader(%5C%22Accept%5C%22%2C%20%5C%22application%2Fjson%5C%22)%3B%5Cn%2F%2F%20%E5%8F%91%E9%80%81%20Http%20%E8%AF%B7%E6%B1%82%5Cnxhr.send(null)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ue4KD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"51ee22a48673c55dfba0ca6c4925ccf7\" id=\"51ee22a48673c55dfba0ca6c4925ccf7\"><span data-lake-id=\"u5ce1c85b\" id=\"u5ce1c85b\">使用Promise封装AJAX：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20promise%20%E5%B0%81%E8%A3%85%E5%AE%9E%E7%8E%B0%EF%BC%9A%5Cnfunction%20getJSON(url)%20%7B%5Cn%20%20%2F%2F%20%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%20promise%20%E5%AF%B9%E8%B1%A1%5Cn%20%20let%20promise%20%3D%20new%20Promise(function(resolve%2C%20reject)%20%7B%5Cn%20%20%20%20let%20xhr%20%3D%20new%20XMLHttpRequest()%3B%5Cn%20%20%20%20%2F%2F%20%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%20http%20%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20xhr.open(%5C%22GET%5C%22%2C%20url%2C%20true)%3B%5Cn%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E7%8A%B6%E6%80%81%E7%9A%84%E7%9B%91%E5%90%AC%E5%87%BD%E6%95%B0%5Cn%20%20%20%20xhr.onreadystatechange%20%3D%20function()%20%7B%5Cn%20%20%20%20%20%20if%20(this.readyState%20!%3D%3D%204)%20return%3B%5Cn%20%20%20%20%20%20%2F%2F%20%E5%BD%93%E8%AF%B7%E6%B1%82%E6%88%90%E5%8A%9F%E6%88%96%E5%A4%B1%E8%B4%A5%E6%97%B6%EF%BC%8C%E6%94%B9%E5%8F%98%20promise%20%E7%9A%84%E7%8A%B6%E6%80%81%5Cn%20%20%20%20%20%20if%20(this.status%20%3D%3D%3D%20200)%20%7B%5Cn%20%20%20%20%20%20%20%20resolve(this.response)%3B%5Cn%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20reject(new%20Error(this.statusText))%3B%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E9%94%99%E8%AF%AF%E7%9B%91%E5%90%AC%E5%87%BD%E6%95%B0%5Cn%20%20%20%20xhr.onerror%20%3D%20function()%20%7B%5Cn%20%20%20%20%20%20reject(new%20Error(this.statusText))%3B%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E5%93%8D%E5%BA%94%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%5Cn%20%20%20%20xhr.responseType%20%3D%20%5C%22json%5C%22%3B%5Cn%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20xhr.setRequestHeader(%5C%22Accept%5C%22%2C%20%5C%22application%2Fjson%5C%22)%3B%5Cn%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%20http%20%E8%AF%B7%E6%B1%82%5Cn%20%20%20%20xhr.send(null)%3B%5Cn%20%20%7D)%3B%5Cn%20%20return%20promise%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zITEs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"c3705300697b03db28f4186b820a3664\" id=\"c3705300697b03db28f4186b820a3664\"><span data-lake-id=\"ub171224b\" id=\"ub171224b\">17. JavaScript为什么要进行变量提升，它导致了什么问题？</span></h3><p data-lake-id=\"9c4d173678cbb1c6759777dbc102f615\" id=\"9c4d173678cbb1c6759777dbc102f615\"><span data-lake-id=\"u7f705d30\" id=\"u7f705d30\">变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。</span></p><p data-lake-id=\"3c75bc0dae448f87cfd19cc0bc36d0b9\" id=\"3c75bc0dae448f87cfd19cc0bc36d0b9\"><br></p><p data-lake-id=\"e036e23051c0754a2a35293f7fe066f1\" id=\"e036e23051c0754a2a35293f7fe066f1\"><span data-lake-id=\"ue5eb44a2\" id=\"ue5eb44a2\">造成变量声明提升的</span><strong><span data-lake-id=\"ud3a3dbf9\" id=\"ud3a3dbf9\">本质原因</span></strong><span data-lake-id=\"u60eb5bab\" id=\"u60eb5bab\">是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。</span></p><p data-lake-id=\"a2817ba1e4b187f71a9093779cada841\" id=\"a2817ba1e4b187f71a9093779cada841\"><br></p><p data-lake-id=\"bb68780bf99f91bd9ff676e4044e6b0b\" id=\"bb68780bf99f91bd9ff676e4044e6b0b\"><span data-lake-id=\"ud4136480\" id=\"ud4136480\">首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。</span></p><ul list=\"ucd565dcd\"><li fid=\"u25e29846\" data-lake-id=\"059b0cab77e13b29f6c7d321104898b0\" id=\"059b0cab77e13b29f6c7d321104898b0\"><strong><span data-lake-id=\"u40baba14\" id=\"u40baba14\">在解析阶段</span></strong><span data-lake-id=\"ub1f0b509\" id=\"ub1f0b509\">，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。</span></li></ul><ul list=\"ucd8bee2f\" data-lake-indent=\"1\"><li fid=\"u79157b50\" data-lake-id=\"0cc6e847999df871d772275cee376a6d\" id=\"0cc6e847999df871d772275cee376a6d\"><span data-lake-id=\"u68ea0070\" id=\"u68ea0070\">全局上下文：变量定义，函数声明</span></li><li fid=\"u79157b50\" data-lake-id=\"3935e1b43e231889468b28ab83b79357\" id=\"3935e1b43e231889468b28ab83b79357\"><span data-lake-id=\"ud6d7e954\" id=\"ud6d7e954\">函数上下文：变量定义，函数声明，this，arguments</span></li></ul><ul list=\"u285d2451\"><li fid=\"u53e0155f\" data-lake-id=\"36efea097ec941d56e56f7dfa86b3f8b\" id=\"36efea097ec941d56e56f7dfa86b3f8b\"><strong><span data-lake-id=\"u71c29347\" id=\"u71c29347\">在执行阶段</span></strong><span data-lake-id=\"u460f04ce\" id=\"u460f04ce\">，就是按照代码的顺序依次执行。</span></li></ul><p data-lake-id=\"abb67177528db941ac28af02f9988eb3\" id=\"abb67177528db941ac28af02f9988eb3\"><br></p><p data-lake-id=\"4bc46bf9e554a1b589e144038c423442\" id=\"4bc46bf9e554a1b589e144038c423442\"><span data-lake-id=\"u8e4a0c00\" id=\"u8e4a0c00\">那为什么会进行变量提升呢？主要有以下两个原因：</span></p><ul list=\"udb269ce6\"><li fid=\"u0d5f0344\" data-lake-id=\"37d5c4c789513dd65342bf1da35c5e50\" id=\"37d5c4c789513dd65342bf1da35c5e50\"><span data-lake-id=\"ufa3b992a\" id=\"ufa3b992a\">提高性能</span></li><li fid=\"u0d5f0344\" data-lake-id=\"418125829a4675d159898f319f961097\" id=\"418125829a4675d159898f319f961097\"><span data-lake-id=\"u8867160c\" id=\"u8867160c\">容错性更好</span></li></ul><p data-lake-id=\"b6c3da76d9fd66bc3ce5e24eae2cb2eb\" id=\"b6c3da76d9fd66bc3ce5e24eae2cb2eb\"><br></p><p data-lake-id=\"9f00243b91ff3d7e6d4c39a9c17e20d8\" id=\"9f00243b91ff3d7e6d4c39a9c17e20d8\"><strong><span data-lake-id=\"u5f73c481\" id=\"u5f73c481\">（1）提高性能</span></strong></p><p data-lake-id=\"b8f5c94b1bb168f5fa20f5371da7ba0f\" id=\"b8f5c94b1bb168f5fa20f5371da7ba0f\"><span data-lake-id=\"ud9646e66\" id=\"ud9646e66\">在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。</span></p><p data-lake-id=\"cd43a39aee660f9f1480ab90c49866d0\" id=\"cd43a39aee660f9f1480ab90c49866d0\"><br></p><p data-lake-id=\"cef2691da510022e0fe1cf60d05256e6\" id=\"cef2691da510022e0fe1cf60d05256e6\"><span data-lake-id=\"u637ed1ef\" id=\"u637ed1ef\">在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。</span></p><p data-lake-id=\"332f516332538b0d8ab335beafe21440\" id=\"332f516332538b0d8ab335beafe21440\"><strong><span data-lake-id=\"u3c29b51f\" id=\"u3c29b51f\">（2）容错性更好</span></strong></p><p data-lake-id=\"f3f4b1279ba7eb0e8f3d2186bb4a3774\" id=\"f3f4b1279ba7eb0e8f3d2186bb4a3774\"><span data-lake-id=\"u0afc42ba\" id=\"u0afc42ba\">变量提升可以在一定程度上提高JS的容错性，看下面的代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22a%20%3D%201%3B%5Cnvar%20a%3B%5Cnconsole.log(a)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%2299e7c325%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b30ec81d70d55e8f92487bc87bb09771\" id=\"b30ec81d70d55e8f92487bc87bb09771\"><span data-lake-id=\"u8675fe16\" id=\"u8675fe16\">如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。</span></p><p data-lake-id=\"eea80d0f485f369842bd11f7d7660a5c\" id=\"eea80d0f485f369842bd11f7d7660a5c\"><br></p><p data-lake-id=\"b9b4ea53c41e1d3aa1cceb64bff24f64\" id=\"b9b4ea53c41e1d3aa1cceb64bff24f64\"><span data-lake-id=\"uc7eb508f\" id=\"uc7eb508f\">虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。</span></p><p data-lake-id=\"8eec8358435cb9ce5e1e6c5abef6d816\" id=\"8eec8358435cb9ce5e1e6c5abef6d816\"><br></p><p data-lake-id=\"1d1fdd83fd37872dabdb14edf8436789\" id=\"1d1fdd83fd37872dabdb14edf8436789\"><strong><span data-lake-id=\"u351dbf40\" id=\"u351dbf40\">总结：</span></strong></p><ul list=\"ub7408199\"><li fid=\"u4e2443e4\" data-lake-id=\"fb7d0926e9f389e64cac778e84f2db13\" id=\"fb7d0926e9f389e64cac778e84f2db13\"><span data-lake-id=\"u81e6769e\" id=\"u81e6769e\">解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间</span></li><li fid=\"u4e2443e4\" data-lake-id=\"4cdb58b304dac5cb117f52f034429b39\" id=\"4cdb58b304dac5cb117f52f034429b39\"><span data-lake-id=\"u9a2d4009\" id=\"u9a2d4009\">声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行</span></li></ul><p data-lake-id=\"ace57c8d3e3369fd7a65b0b7b5d4fdd8\" id=\"ace57c8d3e3369fd7a65b0b7b5d4fdd8\"><br></p><p data-lake-id=\"7e6ab75e3a493c78310c798aff58c90b\" id=\"7e6ab75e3a493c78310c798aff58c90b\"><span data-lake-id=\"u2a742391\" id=\"u2a742391\">变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20tmp%20%3D%20new%20Date()%3B%5Cn%5Cnfunction%20fn()%7B%5Cn%5Ctconsole.log(tmp)%3B%5Cn%5Ctif(false)%7B%5Cn%5Ct%5Ctvar%20tmp%20%3D%20'hello%20world'%3B%5Cn%5Ct%7D%5Cn%7D%5Cn%5Cnfn()%3B%20%20%2F%2F%20undefined%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ef2b284e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"2ad717bfe8d645dca3446612982eac61\" id=\"2ad717bfe8d645dca3446612982eac61\"><span data-lake-id=\"u57be72d2\" id=\"u57be72d2\">在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20tmp%20%3D%20'hello%20world'%3B%5Cn%5Cnfor%20(var%20i%20%3D%200%3B%20i%20%3C%20tmp.length%3B%20i%2B%2B)%20%7B%5Cn%5Ctconsole.log(tmp%5Bi%5D)%3B%5Cn%7D%5Cn%5Cnconsole.log(i)%3B%20%2F%2F%2011%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%2225dd7ea0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"e9438cc161508208f96293ad3cfb0b5f\" id=\"e9438cc161508208f96293ad3cfb0b5f\"><span data-lake-id=\"u88522cb5\" id=\"u88522cb5\">由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。</span></p><h3 data-lake-id=\"5492ba33f950117a21d29cec12d5da57\" id=\"5492ba33f950117a21d29cec12d5da57\"><span data-lake-id=\"u7e69a64e\" id=\"u7e69a64e\">18. 什么是尾调用，使用尾调用有什么好处？</span></h3><p data-lake-id=\"98841da7a27d2a473a1fca535746d48f\" id=\"98841da7a27d2a473a1fca535746d48f\"><span data-lake-id=\"ua56108b9\" id=\"ua56108b9\">尾调用指的是函数的最后一步调用另一个函数。代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</span></p><h3 data-lake-id=\"4fbf8bc70db24da417a7f8ba0a855d9c\" id=\"4fbf8bc70db24da417a7f8ba0a855d9c\"><span data-lake-id=\"u269f804c\" id=\"u269f804c\">19.  </span><strong><span data-lake-id=\"u65949382\" id=\"u65949382\">ES6</span></strong><span data-lake-id=\"u50902d20\" id=\"u50902d20\">模块与</span><strong><span data-lake-id=\"ua6c52d12\" id=\"ua6c52d12\">CommonJS</span></strong><span data-lake-id=\"uc045e8e6\" id=\"uc045e8e6\">模块有什么异同？ </span></h3><p data-lake-id=\"dcdd6641fffbd9b025cffd5261904a1f\" id=\"dcdd6641fffbd9b025cffd5261904a1f\"><span data-lake-id=\"uf9288d1c\" id=\"uf9288d1c\">ES6 Module和CommonJS模块的区别： </span></p><ul list=\"u0a2712c2\"><li fid=\"ub7fe1874\" data-lake-id=\"f86a3921b042f29295e80e7f1f7a6b2b\" id=\"f86a3921b042f29295e80e7f1f7a6b2b\"><span data-lake-id=\"ub10eb7b5\" id=\"ub10eb7b5\">CommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；</span></li><li fid=\"ub7fe1874\" data-lake-id=\"0ccd8d08269a9acbc60208ca536b8f8c\" id=\"0ccd8d08269a9acbc60208ca536b8f8c\"><span data-lake-id=\"u1ba584dd\" id=\"u1ba584dd\">import的接⼝是read-only（只读状态），不能修改其变量值。 即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。 </span></li></ul><p data-lake-id=\"24772520bcd663daa900e2cfc86927f5\" id=\"24772520bcd663daa900e2cfc86927f5\"><br></p><p data-lake-id=\"e375114714bf09294964c923af2a59aa\" id=\"e375114714bf09294964c923af2a59aa\"><span data-lake-id=\"u36913d5a\" id=\"u36913d5a\">ES6 Module和CommonJS模块的共同点： </span></p><ul list=\"u9e098e30\"><li fid=\"u4daa774c\" data-lake-id=\"0b70e743f77acaaf1e1e653bf27c8940\" id=\"0b70e743f77acaaf1e1e653bf27c8940\"><span data-lake-id=\"u4cb2d426\" id=\"u4cb2d426\">CommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。 </span></li></ul><h3 data-lake-id=\"c1ee48e5940320be836e28e9319be88c\" id=\"c1ee48e5940320be836e28e9319be88c\"><span data-lake-id=\"u1d0a03ad\" id=\"u1d0a03ad\">20. 常见的DOM操作有哪些</span></h3><h4 data-lake-id=\"7a1835ac914473ff1d341590e7845cbd\" id=\"7a1835ac914473ff1d341590e7845cbd\"><span data-lake-id=\"u01f29a48\" id=\"u01f29a48\">1）DOM 节点的获取</span></h4><p data-lake-id=\"19e46d66c0c207f59d7f733db3e28aaf\" id=\"19e46d66c0c207f59d7f733db3e28aaf\" style=\"text-align: justify\"><span data-lake-id=\"u5067b11d\" id=\"u5067b11d\">DOM 节点的获取的API及使用：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22getElementById%20%2F%2F%20%E6%8C%89%E7%85%A7%20id%20%E6%9F%A5%E8%AF%A2%5CngetElementsByTagName%20%2F%2F%20%E6%8C%89%E7%85%A7%E6%A0%87%E7%AD%BE%E5%90%8D%E6%9F%A5%E8%AF%A2%5CngetElementsByClassName%20%2F%2F%20%E6%8C%89%E7%85%A7%E7%B1%BB%E5%90%8D%E6%9F%A5%E8%AF%A2%5CnquerySelectorAll%20%2F%2F%20%E6%8C%89%E7%85%A7%20css%20%E9%80%89%E6%8B%A9%E5%99%A8%E6%9F%A5%E8%AF%A2%5Cn%5Cn%2F%2F%20%E6%8C%89%E7%85%A7%20id%20%E6%9F%A5%E8%AF%A2%5Cnvar%20imooc%20%3D%20document.getElementById('imooc')%20%2F%2F%20%E6%9F%A5%E8%AF%A2%E5%88%B0%20id%20%E4%B8%BA%20imooc%20%E7%9A%84%E5%85%83%E7%B4%A0%5Cn%2F%2F%20%E6%8C%89%E7%85%A7%E6%A0%87%E7%AD%BE%E5%90%8D%E6%9F%A5%E8%AF%A2%5Cnvar%20pList%20%3D%20document.getElementsByTagName('p')%20%20%2F%2F%20%E6%9F%A5%E8%AF%A2%E5%88%B0%E6%A0%87%E7%AD%BE%E4%B8%BA%20p%20%E7%9A%84%E9%9B%86%E5%90%88%5Cnconsole.log(divList.length)%5Cnconsole.log(divList%5B0%5D)%5Cn%2F%2F%20%E6%8C%89%E7%85%A7%E7%B1%BB%E5%90%8D%E6%9F%A5%E8%AF%A2%5Cnvar%20moocList%20%3D%20document.getElementsByClassName('mooc')%20%2F%2F%20%E6%9F%A5%E8%AF%A2%E5%88%B0%E7%B1%BB%E5%90%8D%E4%B8%BA%20mooc%20%E7%9A%84%E9%9B%86%E5%90%88%5Cn%2F%2F%20%E6%8C%89%E7%85%A7%20css%20%E9%80%89%E6%8B%A9%E5%99%A8%E6%9F%A5%E8%AF%A2%5Cnvar%20pList%20%3D%20document.querySelectorAll('.mooc')%20%2F%2F%20%E6%9F%A5%E8%AF%A2%E5%88%B0%E7%B1%BB%E5%90%8D%E4%B8%BA%20mooc%20%E7%9A%84%E9%9B%86%E5%90%88%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jvwPe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"38d35b494114b03aa8c95164f2439e1a\" id=\"38d35b494114b03aa8c95164f2439e1a\"><span data-lake-id=\"u7cf483e9\" id=\"u7cf483e9\">2）DOM 节点的创建</span></h4><p data-lake-id=\"2dc62520319e91009f9bb8022ec846b4\" id=\"2dc62520319e91009f9bb8022ec846b4\" style=\"text-align: justify\"><strong><span data-lake-id=\"u14e1e470\" id=\"u14e1e470\">创建一个新节点，并把它添加到指定节点的后面。</span></strong><span data-lake-id=\"u2e67c783\" id=\"u2e67c783\">已知的 HTML 结构如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Chtml%3E%5Cn%20%20%3Chead%3E%5Cn%20%20%20%20%3Ctitle%3EDEMO%3C%2Ftitle%3E%5Cn%20%20%3C%2Fhead%3E%5Cn%20%20%3Cbody%3E%5Cn%20%20%20%20%3Cdiv%20id%3D%5C%22container%5C%22%3E%20%5Cn%20%20%20%20%20%20%3Ch1%20id%3D%5C%22title%5C%22%3E%E6%88%91%E6%98%AF%E6%A0%87%E9%A2%98%3C%2Fh1%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%20%5Cn%20%20%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zH8Sb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"c8607e5e37903469b24772a51ea3097d\" id=\"c8607e5e37903469b24772a51ea3097d\" style=\"text-align: justify\"><span data-lake-id=\"u56283d29\" id=\"u56283d29\">要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E9%A6%96%E5%85%88%E8%8E%B7%E5%8F%96%E7%88%B6%E8%8A%82%E7%82%B9%5Cnvar%20container%20%3D%20document.getElementById('container')%5Cn%2F%2F%20%E5%88%9B%E5%BB%BA%E6%96%B0%E8%8A%82%E7%82%B9%5Cnvar%20targetSpan%20%3D%20document.createElement('span')%5Cn%2F%2F%20%E8%AE%BE%E7%BD%AE%20span%20%E8%8A%82%E7%82%B9%E7%9A%84%E5%86%85%E5%AE%B9%5CntargetSpan.innerHTML%20%3D%20'hello%20world'%5Cn%2F%2F%20%E6%8A%8A%E6%96%B0%E5%88%9B%E5%BB%BA%E7%9A%84%E5%85%83%E7%B4%A0%E5%A1%9E%E8%BF%9B%E7%88%B6%E8%8A%82%E7%82%B9%E9%87%8C%E5%8E%BB%5Cncontainer.appendChild(targetSpan)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AHQva%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"d134a2bb3c9b795984f739d88a04d72c\" id=\"d134a2bb3c9b795984f739d88a04d72c\"><span data-lake-id=\"u7ba6fb4d\" id=\"u7ba6fb4d\">3）DOM 节点的删除</span></h4><p data-lake-id=\"cbe305d5289d25851bb34283a57421e6\" id=\"cbe305d5289d25851bb34283a57421e6\" style=\"text-align: justify\"><strong><span data-lake-id=\"u6de42e63\" id=\"u6de42e63\">删除指定的 DOM 节点，</span></strong><span data-lake-id=\"ubdb3011a\" id=\"ubdb3011a\">已知的 HTML 结构如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Chtml%3E%5Cn%20%20%3Chead%3E%5Cn%20%20%20%20%3Ctitle%3EDEMO%3C%2Ftitle%3E%5Cn%20%20%3C%2Fhead%3E%5Cn%20%20%3Cbody%3E%5Cn%20%20%20%20%3Cdiv%20id%3D%5C%22container%5C%22%3E%20%5Cn%20%20%20%20%20%20%3Ch1%20id%3D%5C%22title%5C%22%3E%E6%88%91%E6%98%AF%E6%A0%87%E9%A2%98%3C%2Fh1%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%20%5Cn%20%20%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22xQp0q%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"578a898070ff5034892f02ae7f8e2264\" id=\"578a898070ff5034892f02ae7f8e2264\" style=\"text-align: justify\"><span data-lake-id=\"ued00b9f6\" id=\"ued00b9f6\">需要删除 id 为 title 的元素，做法是：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E8%8E%B7%E5%8F%96%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%E7%9A%84%E7%88%B6%E5%85%83%E7%B4%A0%5Cnvar%20container%20%3D%20document.getElementById('container')%5Cn%2F%2F%20%E8%8E%B7%E5%8F%96%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%5Cnvar%20targetNode%20%3D%20document.getElementById('title')%5Cn%2F%2F%20%E5%88%A0%E9%99%A4%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%5Cncontainer.removeChild(targetNode)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22K75cD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"09e017a6a4fccafb1e129fd397d2eee7\" id=\"09e017a6a4fccafb1e129fd397d2eee7\" style=\"text-align: justify\"><span data-lake-id=\"u6a2bd98a\" id=\"u6a2bd98a\">或者通过子节点数组来完成删除：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E8%8E%B7%E5%8F%96%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%E7%9A%84%E7%88%B6%E5%85%83%E7%B4%A0%5Cnvar%20container%20%3D%20document.getElementById('container')%5Cn%2F%2F%20%E8%8E%B7%E5%8F%96%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%5Cnvar%20targetNode%20%3D%20container.childNodes%5B1%5D%5Cn%2F%2F%20%E5%88%A0%E9%99%A4%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%5Cncontainer.removeChild(targetNode)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22LFJpR%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"4d48d4dbe713414629192da70fa50f19\" id=\"4d48d4dbe713414629192da70fa50f19\"><span data-lake-id=\"u832eae2a\" id=\"u832eae2a\">4）修改 DOM 元素</span></h4><p data-lake-id=\"f5aa3a546c2dbef90a881118713294c4\" id=\"f5aa3a546c2dbef90a881118713294c4\" style=\"text-align: justify\"><span data-lake-id=\"ub7878019\" id=\"ub7878019\">修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。</span></p><p data-lake-id=\"dd682c926526b0b215a67899087d11d3\" id=\"dd682c926526b0b215a67899087d11d3\" style=\"text-align: justify\"><br></p><p data-lake-id=\"b1c020818c259e8d06b23848574d43c7\" id=\"b1c020818c259e8d06b23848574d43c7\" style=\"text-align: justify\"><strong><span data-lake-id=\"ua45fc6b4\" id=\"ua45fc6b4\">将指定的两个 DOM 元素交换位置，</span></strong><span data-lake-id=\"ua4c8b44b\" id=\"ua4c8b44b\">已知的 HTML 结构如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Chtml%3E%5Cn%20%20%3Chead%3E%5Cn%20%20%20%20%3Ctitle%3EDEMO%3C%2Ftitle%3E%5Cn%20%20%3C%2Fhead%3E%5Cn%20%20%3Cbody%3E%5Cn%20%20%20%20%3Cdiv%20id%3D%5C%22container%5C%22%3E%20%5Cn%20%20%20%20%20%20%3Ch1%20id%3D%5C%22title%5C%22%3E%E6%88%91%E6%98%AF%E6%A0%87%E9%A2%98%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%3Cp%20id%3D%5C%22content%5C%22%3E%E6%88%91%E6%98%AF%E5%86%85%E5%AE%B9%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%20%20%20%5Cn%20%20%3C%2Fbody%3E%5Cn%3C%2Fhtml%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Q28bn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"dddae6c9e7e1fe8e4aff1f406e3e9b77\" id=\"dddae6c9e7e1fe8e4aff1f406e3e9b77\" style=\"text-align: justify\"><span data-lake-id=\"ua548e7c3\" id=\"ua548e7c3\">现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E8%8E%B7%E5%8F%96%E7%88%B6%E5%85%83%E7%B4%A0%5Cnvar%20container%20%3D%20document.getElementById('container')%20%20%20%5Cn%20%5Cn%2F%2F%20%E8%8E%B7%E5%8F%96%E4%B8%A4%E4%B8%AA%E9%9C%80%E8%A6%81%E8%A2%AB%E4%BA%A4%E6%8D%A2%E7%9A%84%E5%85%83%E7%B4%A0%5Cnvar%20title%20%3D%20document.getElementById('title')%5Cnvar%20content%20%3D%20document.getElementById('content')%5Cn%2F%2F%20%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%85%83%E7%B4%A0%EF%BC%8C%E6%8A%8A%20content%20%E7%BD%AE%E4%BA%8E%20title%20%E5%89%8D%E9%9D%A2%5Cncontainer.insertBefore(content%2C%20title)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zxPWg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"0115d52d9ac719a19eb2438d06f9ee68\" id=\"0115d52d9ac719a19eb2438d06f9ee68\"><span data-lake-id=\"u3695478b\" id=\"u3695478b\">21. use strict是什么意思 ? 使用它区别是什么？</span></h3><p data-lake-id=\"8ff71df821ea34095a38e8f9a2cb2a49\" id=\"8ff71df821ea34095a38e8f9a2cb2a49\"><span data-lake-id=\"u1a32aca8\" id=\"u1a32aca8\">use strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：</span></p><ul list=\"u0b590f11\"><li fid=\"u8f73c8a0\" data-lake-id=\"5c01c468a6878e7bc090ea07c73e1482\" id=\"5c01c468a6878e7bc090ea07c73e1482\"><span data-lake-id=\"u868d5edf\" id=\"u868d5edf\">消除 Javascript 语法的不合理、不严谨之处，减少怪异行为;</span></li><li fid=\"u8f73c8a0\" data-lake-id=\"6523a13a900124c820f25d819ab142b5\" id=\"6523a13a900124c820f25d819ab142b5\"><span data-lake-id=\"ubf4b2cc7\" id=\"ubf4b2cc7\">消除代码运行的不安全之处，保证代码运行的安全；</span></li><li fid=\"u8f73c8a0\" data-lake-id=\"507e3a9dad7a26a469be465cd89db140\" id=\"507e3a9dad7a26a469be465cd89db140\"><span data-lake-id=\"u32745b3c\" id=\"u32745b3c\">提高编译器效率，增加运行速度；</span></li><li fid=\"u8f73c8a0\" data-lake-id=\"b0c318c9f62879a01688bf223340819f\" id=\"b0c318c9f62879a01688bf223340819f\"><span data-lake-id=\"u79d94860\" id=\"u79d94860\">为未来新版本的 Javascript 做好铺垫。</span></li></ul><p data-lake-id=\"4148e426a31f5981d503db2dddef6418\" id=\"4148e426a31f5981d503db2dddef6418\"><br></p><p data-lake-id=\"a1101dab931e0f442e9c31b381b08161\" id=\"a1101dab931e0f442e9c31b381b08161\"><span data-lake-id=\"ud821d5e2\" id=\"ud821d5e2\">区别：</span></p><ul list=\"u29896209\"><li fid=\"u0d28e3fb\" data-lake-id=\"eda6be9f8f1f0d259aa5d93340eab095\" id=\"eda6be9f8f1f0d259aa5d93340eab095\"><span data-lake-id=\"uda90a0a3\" id=\"uda90a0a3\">禁止使用 with 语句。</span></li><li fid=\"u0d28e3fb\" data-lake-id=\"3616a12e1d241bdf7a0aeab8ad01cfb1\" id=\"3616a12e1d241bdf7a0aeab8ad01cfb1\"><span data-lake-id=\"u65e8062d\" id=\"u65e8062d\">禁止 this 关键字指向全局对象。</span></li><li fid=\"u0d28e3fb\" data-lake-id=\"208e522281a5b334b9e1cce78c867c70\" id=\"208e522281a5b334b9e1cce78c867c70\"><span data-lake-id=\"u26d4e486\" id=\"u26d4e486\">对象不能有重名的属性。</span></li></ul><h3 data-lake-id=\"3e565f36e224fc25bc9e82939659d309\" id=\"3e565f36e224fc25bc9e82939659d309\"><span data-lake-id=\"u6bbb8be6\" id=\"u6bbb8be6\">22. 如何判断一个对象是否属于某个类？</span></h3><ul list=\"u46aa0087\"><li fid=\"u35ffa27c\" data-lake-id=\"c8443ce3980b020cbdde0e00237d8948\" id=\"c8443ce3980b020cbdde0e00237d8948\"><span data-lake-id=\"ua1501c29\" id=\"ua1501c29\">第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</span></li><li fid=\"u35ffa27c\" data-lake-id=\"20f15a67447a129ac872d1f32512cf29\" id=\"20f15a67447a129ac872d1f32512cf29\"><span data-lake-id=\"u68fede12\" id=\"u68fede12\">第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。</span></li><li fid=\"u35ffa27c\" data-lake-id=\"6c9fdc2780f9e7e05b6d427e6de4a4a8\" id=\"6c9fdc2780f9e7e05b6d427e6de4a4a8\"><span data-lake-id=\"u641133f5\" id=\"u641133f5\">第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。</span></li></ul><h3 data-lake-id=\"a1eaf8e91c0f37172eda40e948b9b2d2\" id=\"a1eaf8e91c0f37172eda40e948b9b2d2\"><span data-lake-id=\"udcd957f0\" id=\"udcd957f0\">23. 强类型语言和弱类型语言的区别</span></h3><ul list=\"u9b72efac\"><li fid=\"u3e7e7013\" data-lake-id=\"uf42dcb66\" id=\"uf42dcb66\"><strong><span data-lake-id=\"u33dcec49\" id=\"u33dcec49\">强类型语言</span></strong><span data-lake-id=\"ubcdbae43\" id=\"ubcdbae43\">：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。</span></li><li fid=\"u3e7e7013\" data-lake-id=\"uf2a4d244\" id=\"uf2a4d244\"><strong><span data-lake-id=\"u79c69f5e\" id=\"u79c69f5e\">弱类型语言</span></strong><span data-lake-id=\"ud04eb269\" id=\"ud04eb269\">：弱类型语言也称为弱类型定义语言，与强类型定义相反。JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串'12'和整数3进行连接得到字符串'123'，在相加的时候会进行强制类型转换。</span></li></ul><p data-lake-id=\"ud9ef5997\" id=\"ud9ef5997\"><br></p><p data-lake-id=\"u577c1129\" id=\"u577c1129\"><span data-lake-id=\"u6cf04c1f\" id=\"u6cf04c1f\">两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。</span></p><h3 data-lake-id=\"707763fa2f1ff991afb9e6d192b515ea\" id=\"707763fa2f1ff991afb9e6d192b515ea\"><span data-lake-id=\"ud0be8191\" id=\"ud0be8191\">24. </span><span data-lake-id=\"u3015c93e\" id=\"u3015c93e\">解释性语言和编译型语言的区别</span></h3><p data-lake-id=\"u06cd1bc0\" id=\"u06cd1bc0\"><span data-lake-id=\"u88ebf151\" id=\"u88ebf151\">（1）解释型语言</span></p><p data-lake-id=\"u1537594b\" id=\"u1537594b\" style=\"text-align: left\"><span data-lake-id=\"u6c20a959\" id=\"u6c20a959\" style=\"color: #000000\">使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下</span></p><ul list=\"ua726e7e3\"><li fid=\"u202c9794\" data-lake-id=\"u49cce1e9\" id=\"u49cce1e9\" style=\"text-align: left\"><span data-lake-id=\"u9465f2c2\" id=\"u9465f2c2\" style=\"color: #000000\">解释型语言每次运行都需要将源代码解释称机器码并执行，效率较低；</span></li><li fid=\"u202c9794\" data-lake-id=\"u85940387\" id=\"u85940387\" style=\"text-align: left\"><span data-lake-id=\"u073c8d71\" id=\"u073c8d71\" style=\"color: #000000\">只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；</span></li><li fid=\"u202c9794\" data-lake-id=\"u21dfca32\" id=\"u21dfca32\" style=\"text-align: left\"><span data-lake-id=\"ufab3d41a\" id=\"ufab3d41a\" style=\"color: #000000\">JavaScript、Python等属于解释型语言。</span></li></ul><p data-lake-id=\"ub55a7549\" id=\"ub55a7549\"><span data-lake-id=\"u58e01b4b\" id=\"u58e01b4b\">（2）编译型语言</span></p><p data-lake-id=\"u7818c9bc\" id=\"u7818c9bc\"><span data-lake-id=\"ufa7f556a\" id=\"ufa7f556a\" style=\"color: #000000\">使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：</span></p><ul list=\"ua5700ca7\"><li fid=\"ub2e924e1\" data-lake-id=\"uc16f446a\" id=\"uc16f446a\" style=\"text-align: left\"><span data-lake-id=\"u7ed05701\" id=\"u7ed05701\" style=\"color: #000000\">一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；</span></li><li fid=\"ub2e924e1\" data-lake-id=\"ud4ecf2a7\" id=\"ud4ecf2a7\" style=\"text-align: left\"><span data-lake-id=\"u92de8959\" id=\"u92de8959\" style=\"color: #000000\">与特定平台相关，一般无法移植到其他平台；</span></li><li fid=\"ub2e924e1\" data-lake-id=\"u8c0e7e75\" id=\"u8c0e7e75\" style=\"text-align: left\"><span data-lake-id=\"ub4bda27e\" id=\"ub4bda27e\" style=\"color: #000000\">C、C++等属于编译型语言。</span></li></ul><p data-lake-id=\"uf4e90d3b\" id=\"uf4e90d3b\" style=\"text-align: left\"><br></p><p data-lake-id=\"udaadbcb1\" id=\"udaadbcb1\" style=\"text-align: left\"><strong><span data-lake-id=\"u9ec3f561\" id=\"u9ec3f561\" style=\"color: #000000\">两者主要区别在于：</span></strong><span data-lake-id=\"ufa021cd8\" id=\"ufa021cd8\" style=\"color: #000000\">前者源程序编译后即可在该平台运行，后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。</span></p><h3 data-lake-id=\"dc7f88b40ae8c2eb294ac779f443c76c\" id=\"dc7f88b40ae8c2eb294ac779f443c76c\"><span data-lake-id=\"u26a3b564\" id=\"u26a3b564\">25. for...in和for...of的区别 </span></h3><p data-lake-id=\"3a49612d2c2e04ae757f374d7f37cf6e\" id=\"3a49612d2c2e04ae757f374d7f37cf6e\"><span data-lake-id=\"u13bc6c5a\" id=\"u13bc6c5a\">for…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下</span></p><ul list=\"uf4c93908\"><li fid=\"u7f40d04b\" data-lake-id=\"udc63a373\" id=\"udc63a373\"><span data-lake-id=\"ub845dc89\" id=\"ub845dc89\">for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</span></li><li fid=\"u7f40d04b\" data-lake-id=\"ue9b2731a\" id=\"ue9b2731a\"><span data-lake-id=\"u60508a42\" id=\"u60508a42\">for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</span></li><li fid=\"u7f40d04b\" data-lake-id=\"ue70ef573\" id=\"ue70ef573\"><span data-lake-id=\"ufb21528a\" id=\"ufb21528a\">对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；</span></li></ul><p data-lake-id=\"ueb8da283\" id=\"ueb8da283\"><br></p><p data-lake-id=\"ua33fd3cd\" id=\"ua33fd3cd\" style=\"text-align: left\"><strong><span data-lake-id=\"u39e2fb2d\" id=\"u39e2fb2d\">总结：</span></strong><span data-lake-id=\"uf9772e68\" id=\"uf9772e68\" class=\"lake-fontsize-11\" style=\"color: #000000\">for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</span></p><h3 data-lake-id=\"2ec16ca16e48823ac6be5cdd44367760\" id=\"2ec16ca16e48823ac6be5cdd44367760\"><span data-lake-id=\"u64fe03de\" id=\"u64fe03de\">26. 如何</span><span data-lake-id=\"u5861cea2\" id=\"u5861cea2\">使用for...of遍历对象 </span></h3><p data-lake-id=\"b85513552082231656111ac81e73999a\" id=\"b85513552082231656111ac81e73999a\"><span data-lake-id=\"u777a1bad\" id=\"u777a1bad\">for…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。</span></p><p data-lake-id=\"278f7a2d0653adcf841c2dda46bc0127\" id=\"278f7a2d0653adcf841c2dda46bc0127\"><br></p><p data-lake-id=\"ue79b6f67\" id=\"ue79b6f67\"><span data-lake-id=\"u0b09567f\" id=\"u0b09567f\">如果需要遍历的对象是类数组对象，</span><span data-lake-id=\"u311bdadb\" id=\"u311bdadb\" class=\"lake-fontsize-11\">用</span><span data-lake-id=\"ucc50cc83\" id=\"ucc50cc83\" class=\"lake-fontsize-11\">Array.from</span><span data-lake-id=\"u4258a54b\" id=\"u4258a54b\" class=\"lake-fontsize-11\">转成数组即可。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20obj%20%3D%20%7B%5Cn%20%20%20%200%3A'one'%2C%5Cn%20%20%20%201%3A'two'%2C%5Cn%20%20%20%20length%3A%202%5Cn%7D%3B%5Cnobj%20%3D%20Array.from(obj)%3B%5Cnfor(var%20k%20of%20obj)%7B%5Cn%20%20%20%20console.log(k)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22EHaVF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u608f9b86\" id=\"u608f9b86\"><span data-lake-id=\"ufa901fcf\" id=\"ufa901fcf\" class=\"lake-fontsize-11\">如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%5Cnvar%20obj%20%3D%20%7B%5Cn%20%20%20%20a%3A1%2C%5Cn%20%20%20%20b%3A2%2C%5Cn%20%20%20%20c%3A3%5Cn%7D%3B%5Cn%5Cnobj%5BSymbol.iterator%5D%20%3D%20function()%7B%5Cn%5Ctvar%20keys%20%3D%20Object.keys(this)%3B%5Cn%5Ctvar%20count%20%3D%200%3B%5Cn%5Ctreturn%20%7B%5Cn%5Ct%5Ctnext()%7B%5Cn%5Ct%5Ct%5Ctif(count%3Ckeys.length)%7B%5Cn%5Ct%5Ct%5Ct%5Ctreturn%20%7Bvalue%3A%20obj%5Bkeys%5Bcount%2B%2B%5D%5D%2Cdone%3Afalse%7D%3B%5Cn%5Ct%5Ct%5Ct%7Delse%7B%5Cn%5Ct%5Ct%5Ct%5Ctreturn%20%7Bvalue%3Aundefined%2Cdone%3Atrue%7D%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%7D%3B%5Cn%5Cnfor(var%20k%20of%20obj)%7B%5Cn%5Ctconsole.log(k)%3B%5Cn%7D%5Cn%5Cn%5Cn%2F%2F%20%E6%96%B9%E6%B3%95%E4%BA%8C%5Cnvar%20obj%20%3D%20%7B%5Cn%20%20%20%20a%3A1%2C%5Cn%20%20%20%20b%3A2%2C%5Cn%20%20%20%20c%3A3%5Cn%7D%3B%5Cnobj%5BSymbol.iterator%5D%20%3D%20function*()%7B%5Cn%20%20%20%20var%20keys%20%3D%20Object.keys(obj)%3B%5Cn%20%20%20%20for(var%20k%20of%20keys)%7B%5Cn%20%20%20%20%20%20%20%20yield%20%5Bk%2Cobj%5Bk%5D%5D%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cn%5Cnfor(var%20%5Bk%2Cv%5D%20of%20obj)%7B%5Cn%20%20%20%20console.log(k%2Cv)%3B%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22E2MNa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"1b6c4f1bbba1e1d9c747e34a4b1b6049\" id=\"1b6c4f1bbba1e1d9c747e34a4b1b6049\"><span data-lake-id=\"uc964364e\" id=\"uc964364e\">27. ajax、axios、fetch的区别</span></h3><p data-lake-id=\"95dce915f991a1192a6a11e94a3faddc\" id=\"95dce915f991a1192a6a11e94a3faddc\"><strong><span data-lake-id=\"ubbbc87ce\" id=\"ubbbc87ce\">（1）AJAX</span></strong></p><p data-lake-id=\"u89ef58c1\" id=\"u89ef58c1\"><span data-lake-id=\"ua67f94f0\" id=\"ua67f94f0\">Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式</span><a href=\"https://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%25BD%2591%25E9%25A1%25B5\" target=\"_blank\" data-lake-id=\"ucc3d3ea8\" id=\"ucc3d3ea8\"><span data-lake-id=\"ua88d1dba\" id=\"ua88d1dba\">网页</span></a><span data-lake-id=\"u5203a033\" id=\"u5203a033\">应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：</span></p><ul list=\"u073aa032\"><li fid=\"uc58ab785\" data-lake-id=\"ub3ba43b5\" id=\"ub3ba43b5\" style=\"text-align: left\"><span data-lake-id=\"u3ddd0d99\" id=\"u3ddd0d99\" style=\"color: #4B4B4B\">本身是针对MVC编程，不符合前端MVVM的浪潮</span></li><li fid=\"uc58ab785\" data-lake-id=\"u39093f53\" id=\"u39093f53\" style=\"text-align: left\"><span data-lake-id=\"u082001ae\" id=\"u082001ae\" style=\"color: #4B4B4B\">基于原生XHR开发，XHR本身的架构不清晰</span></li><li fid=\"uc58ab785\" data-lake-id=\"ub8feb22b\" id=\"ub8feb22b\" style=\"text-align: left\"><span data-lake-id=\"u233dcddd\" id=\"u233dcddd\" style=\"color: #404040\">不符合关注分离（Separation of Concerns）的原则</span></li><li fid=\"uc58ab785\" data-lake-id=\"u3b336aa9\" id=\"u3b336aa9\" style=\"text-align: left\"><span data-lake-id=\"u865c458c\" id=\"u865c458c\" style=\"color: #404040\">配置和调用方式非常混乱，而且基于事件的异步模型不友好。</span></li></ul><p data-lake-id=\"u9befc341\" id=\"u9befc341\"><br></p><p data-lake-id=\"u7e93bed0\" id=\"u7e93bed0\"><strong><span data-lake-id=\"u4503f2ee\" id=\"u4503f2ee\">（2）Fetch</span></strong></p><p data-lake-id=\"u4342a131\" id=\"u4342a131\" style=\"text-align: justify\"><span data-lake-id=\"u6e6eb28b\" id=\"u6e6eb28b\" class=\"lake-fontsize-12\" style=\"color: #4F4F4F\">fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。</span><strong><span data-lake-id=\"u0b96abbd\" id=\"u0b96abbd\" class=\"lake-fontsize-12\" style=\"color: #4F4F4F\">fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象</span></strong><span data-lake-id=\"u1046d8b5\" id=\"u1046d8b5\" class=\"lake-fontsize-12\" style=\"color: #4F4F4F\">。</span></p><p data-lake-id=\"u753d9bd4\" id=\"u753d9bd4\" style=\"text-align: justify\"><br></p><p data-lake-id=\"u84ec3e44\" id=\"u84ec3e44\" style=\"text-align: justify\"><span data-lake-id=\"u131fb4c2\" id=\"u131fb4c2\" class=\"lake-fontsize-12\" style=\"color: #4F4F4F\">fetch的优点：</span></p><ul list=\"uc3ebfdc9\"><li fid=\"u52c4f4bc\" data-lake-id=\"u672868e2\" id=\"u672868e2\"><span data-lake-id=\"u5198a2ec\" id=\"u5198a2ec\">语法简洁，更加语义化</span></li><li fid=\"u52c4f4bc\" data-lake-id=\"ud56595f4\" id=\"ud56595f4\"><span data-lake-id=\"ue34acc0c\" id=\"ue34acc0c\">基于标准 Promise 实现，支持 async/await</span></li><li fid=\"u52c4f4bc\" data-lake-id=\"u2ffad57d\" id=\"u2ffad57d\"><span data-lake-id=\"u05642f2e\" id=\"u05642f2e\">更加底层，提供的API丰富（request, response）</span></li><li fid=\"u52c4f4bc\" data-lake-id=\"u3656376d\" id=\"u3656376d\"><span data-lake-id=\"u0df51390\" id=\"u0df51390\">脱离了XHR，是ES规范里新的实现方式</span></li></ul><p data-lake-id=\"ub6e7573c\" id=\"ub6e7573c\" style=\"text-align: justify\"><span data-lake-id=\"uc0386ec7\" id=\"uc0386ec7\" class=\"lake-fontsize-12\" style=\"color: #4F4F4F\">fetch的缺点：</span></p><ul list=\"u1783d4f3\"><li fid=\"ubceec5df\" data-lake-id=\"u61f8620d\" id=\"u61f8620d\"><span data-lake-id=\"ub06e5051\" id=\"ub06e5051\">fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</span></li><li fid=\"ubceec5df\" data-lake-id=\"u2e320b0c\" id=\"u2e320b0c\"><span data-lake-id=\"u6ec4adcc\" id=\"u6ec4adcc\">fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: 'include'})</span></li><li fid=\"ubceec5df\" data-lake-id=\"u2d909172\" id=\"u2d909172\"><span data-lake-id=\"u52e1f37f\" id=\"u52e1f37f\">fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</span></li><li fid=\"ubceec5df\" data-lake-id=\"u64a30375\" id=\"u64a30375\"><span data-lake-id=\"u1378aaab\" id=\"u1378aaab\">fetch没有办法原生监测请求的进度，而XHR可以</span></li></ul><p data-lake-id=\"ucd980130\" id=\"ucd980130\"><br></p><p data-lake-id=\"u0156e76a\" id=\"u0156e76a\"><strong><span data-lake-id=\"u6da667b6\" id=\"u6da667b6\">（3）Axios</span></strong></p><p data-lake-id=\"uee1676a1\" id=\"uee1676a1\"><span data-lake-id=\"u1cd3672b\" id=\"u1cd3672b\" class=\"lake-fontsize-1515\" style=\"color: #121212\">Axios 是一种基于Promise封装的HTTP客户端，其特点如下：</span></p><ul list=\"u5825e5c1\"><li fid=\"u70fbde40\" data-lake-id=\"ua8e59920\" id=\"ua8e59920\"><span data-lake-id=\"u89deb503\" id=\"u89deb503\" style=\"color: #222222\">浏览器端发起XMLHttpRequests请求</span></li><li fid=\"u70fbde40\" data-lake-id=\"u81b75b06\" id=\"u81b75b06\"><span data-lake-id=\"u519f21ac\" id=\"u519f21ac\" style=\"color: #222222\">node端发起http请求</span></li><li fid=\"u70fbde40\" data-lake-id=\"u0b35aaa4\" id=\"u0b35aaa4\"><span data-lake-id=\"uc62585d8\" id=\"uc62585d8\" style=\"color: #222222\">支持Promise API</span></li><li fid=\"u70fbde40\" data-lake-id=\"u49c7c822\" id=\"u49c7c822\"><span data-lake-id=\"ub76f5a87\" id=\"ub76f5a87\" style=\"color: #222222\">监听请求和返回</span></li><li fid=\"u70fbde40\" data-lake-id=\"u048a4b09\" id=\"u048a4b09\"><span data-lake-id=\"uc61b429e\" id=\"uc61b429e\" style=\"color: #222222\">对请求和返回进行转化</span></li><li fid=\"u70fbde40\" data-lake-id=\"uf2286385\" id=\"uf2286385\"><span data-lake-id=\"u262a3249\" id=\"u262a3249\" style=\"color: #222222\">取消请求</span></li><li fid=\"u70fbde40\" data-lake-id=\"u16a4277b\" id=\"u16a4277b\"><span data-lake-id=\"u2e2f15fe\" id=\"u2e2f15fe\" style=\"color: #222222\">自动转换json数据</span></li><li fid=\"u70fbde40\" data-lake-id=\"u41aafa1b\" id=\"u41aafa1b\"><span data-lake-id=\"u7be6e207\" id=\"u7be6e207\" style=\"color: #222222\">客户端支持抵御XSRF攻击</span></li></ul><h3 data-lake-id=\"3119dcbfdce91de016b24030a9542c3b\" id=\"3119dcbfdce91de016b24030a9542c3b\"><span data-lake-id=\"u349b785f\" id=\"u349b785f\">28. 数组的遍历方法有哪些</span></h3><table data-lake-id=\"5e7f2a0d\" id=\"5e7f2a0d\" margin=\"true\" class=\"lake-table\" style=\"width: 868px\"><colgroup><col width=\"229\"><col width=\"140\"><col width=\"499\"></colgroup><tbody><tr data-lake-id=\"ud53f00ee\" id=\"ud53f00ee\"><td data-lake-id=\"ued280ae6\" id=\"ued280ae6\"><p data-lake-id=\"uf752156b\" id=\"uf752156b\" style=\"text-align: center\"><strong><span data-lake-id=\"ueda02a11\" id=\"ueda02a11\">方法</span></strong></p></td><td data-lake-id=\"u1b3f2503\" id=\"u1b3f2503\"><p data-lake-id=\"u85edd891\" id=\"u85edd891\" style=\"text-align: center\"><strong><span data-lake-id=\"u1681ddcf\" id=\"u1681ddcf\">是否改变原数组</span></strong></p></td><td data-lake-id=\"ubcc32cb9\" id=\"ubcc32cb9\"><p data-lake-id=\"uffdb3ac1\" id=\"uffdb3ac1\" style=\"text-align: center\"><strong><span data-lake-id=\"ubf2fcee4\" id=\"ubf2fcee4\">特点</span></strong></p></td></tr><tr data-lake-id=\"u882de80b\" id=\"u882de80b\"><td data-lake-id=\"uba0a33c0\" id=\"uba0a33c0\"><p data-lake-id=\"u9d449db5\" id=\"u9d449db5\"><span data-lake-id=\"ud99eaeeb\" id=\"ud99eaeeb\">forEach()</span></p></td><td data-lake-id=\"u11179048\" id=\"u11179048\"><p data-lake-id=\"u34edcec4\" id=\"u34edcec4\" style=\"text-align: center\"><span data-lake-id=\"u189cb953\" id=\"u189cb953\">否</span></p></td><td data-lake-id=\"u8424efbe\" id=\"u8424efbe\"><p data-lake-id=\"u83042fe1\" id=\"u83042fe1\"><span data-lake-id=\"u8d15a274\" id=\"u8d15a274\">数组方法，不改变原数组，没有返回值</span></p></td></tr><tr data-lake-id=\"uacd71ebc\" id=\"uacd71ebc\"><td data-lake-id=\"ue309c5ef\" id=\"ue309c5ef\"><p data-lake-id=\"uf72e0a54\" id=\"uf72e0a54\"><span data-lake-id=\"ued849199\" id=\"ued849199\">map()</span></p></td><td data-lake-id=\"uba4c3f3f\" id=\"uba4c3f3f\"><p data-lake-id=\"ufc8c1fe1\" id=\"ufc8c1fe1\" style=\"text-align: center\"><span data-lake-id=\"u1593b45a\" id=\"u1593b45a\">否</span></p></td><td data-lake-id=\"u7127b986\" id=\"u7127b986\"><p data-lake-id=\"ucb39b99f\" id=\"ucb39b99f\"><span data-lake-id=\"u99c2ff7a\" id=\"u99c2ff7a\">数组方法，不改变原数组，有返回值，可链式调用</span></p></td></tr><tr data-lake-id=\"ubc545e99\" id=\"ubc545e99\"><td data-lake-id=\"u9e346a48\" id=\"u9e346a48\"><p data-lake-id=\"uef1943f4\" id=\"uef1943f4\"><span data-lake-id=\"uf2b483ae\" id=\"uf2b483ae\">filter()</span></p></td><td data-lake-id=\"ud08378f8\" id=\"ud08378f8\"><p data-lake-id=\"u9158cfcf\" id=\"u9158cfcf\" style=\"text-align: center\"><span data-lake-id=\"u39997d66\" id=\"u39997d66\">否</span></p></td><td data-lake-id=\"u1d52847f\" id=\"u1d52847f\"><p data-lake-id=\"ud880674a\" id=\"ud880674a\"><span data-lake-id=\"u13678216\" id=\"u13678216\">数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用</span></p></td></tr><tr data-lake-id=\"ud80f1e06\" id=\"ud80f1e06\"><td data-lake-id=\"u01d7f9d9\" id=\"u01d7f9d9\"><p data-lake-id=\"u2a335a34\" id=\"u2a335a34\"><span data-lake-id=\"u487ca1b9\" id=\"u487ca1b9\">for...of</span></p></td><td data-lake-id=\"uee52e5b4\" id=\"uee52e5b4\"><p data-lake-id=\"uf810a30c\" id=\"uf810a30c\" style=\"text-align: center\"><span data-lake-id=\"u717740c3\" id=\"u717740c3\">否</span></p></td><td data-lake-id=\"ue2a894b2\" id=\"ue2a894b2\"><p data-lake-id=\"u40affe64\" id=\"u40affe64\"><span data-lake-id=\"ua1a404c7\" id=\"ua1a404c7\">for...of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环</span></p></td></tr><tr data-lake-id=\"u45bdb60f\" id=\"u45bdb60f\"><td data-lake-id=\"ue8370105\" id=\"ue8370105\"><p data-lake-id=\"ub3104a4b\" id=\"ub3104a4b\"><span data-lake-id=\"u1e02b3d3\" id=\"u1e02b3d3\">every() 和 some()</span></p></td><td data-lake-id=\"uff7f9432\" id=\"uff7f9432\"><p data-lake-id=\"u917cbd43\" id=\"u917cbd43\" style=\"text-align: center\"><span data-lake-id=\"u5281a2e4\" id=\"u5281a2e4\">否</span></p></td><td data-lake-id=\"u5a430e2c\" id=\"u5a430e2c\"><p data-lake-id=\"u5fcd9d32\" id=\"u5fcd9d32\"><span data-lake-id=\"ub1048dda\" id=\"ub1048dda\">数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false.</span></p></td></tr><tr data-lake-id=\"u1674e8ba\" id=\"u1674e8ba\"><td data-lake-id=\"ud269344c\" id=\"ud269344c\"><p data-lake-id=\"u7f543108\" id=\"u7f543108\"><span data-lake-id=\"uc3791b12\" id=\"uc3791b12\">find() 和 findIndex()</span></p></td><td data-lake-id=\"u965a4205\" id=\"u965a4205\"><p data-lake-id=\"u656f1efa\" id=\"u656f1efa\" style=\"text-align: center\"><span data-lake-id=\"u3682e8ff\" id=\"u3682e8ff\">否</span></p></td><td data-lake-id=\"u6b8a79b2\" id=\"u6b8a79b2\"><p data-lake-id=\"u67a0b7d4\" id=\"u67a0b7d4\"><span data-lake-id=\"u82d80df0\" id=\"u82d80df0\">数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值</span></p></td></tr><tr data-lake-id=\"uc97d78de\" id=\"uc97d78de\"><td data-lake-id=\"u82b8a041\" id=\"u82b8a041\"><p data-lake-id=\"u3f1a1625\" id=\"u3f1a1625\"><span data-lake-id=\"u9169eac8\" id=\"u9169eac8\">reduce() 和 reduceRight()</span></p></td><td data-lake-id=\"u47efdaf7\" id=\"u47efdaf7\"><p data-lake-id=\"u68faaacc\" id=\"u68faaacc\" style=\"text-align: center\"><span data-lake-id=\"u76f74ab1\" id=\"u76f74ab1\">否</span></p></td><td data-lake-id=\"ua3ae03ff\" id=\"ua3ae03ff\"><p data-lake-id=\"u85744a72\" id=\"u85744a72\"><span data-lake-id=\"u393f6d1f\" id=\"u393f6d1f\">数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作</span></p></td></tr></tbody></table><p data-lake-id=\"4e3a4e1cf334f283c1e158498bdf2ff8\" id=\"4e3a4e1cf334f283c1e158498bdf2ff8\"><span data-lake-id=\"ud2931d96\" id=\"ud2931d96\">遍历方法的详细解释：</span><a href=\"https://cuggz.blog.csdn.net/article/details/107649549\" target=\"_blank\" data-lake-id=\"u75b0b5cb\" id=\"u75b0b5cb\"><span data-lake-id=\"ua6f58b53\" id=\"ua6f58b53\">《细数JavaScript中那些遍历和循环》</span></a></p><h3 data-lake-id=\"yHc6p\" id=\"yHc6p\"><span data-lake-id=\"u57834802\" id=\"u57834802\">29. forEach和map方法有什么区别</span></h3><p data-lake-id=\"u44077084\" id=\"u44077084\"><span data-lake-id=\"ue37a6b57\" id=\"ue37a6b57\">这方法都是用来遍历数组的，两者区别如下：</span></p><ul list=\"u09bb8426\"><li fid=\"ued9c3f0f\" data-lake-id=\"u58954dad\" id=\"u58954dad\"><span data-lake-id=\"u56a1932b\" id=\"u56a1932b\" class=\"lake-fontsize-1515\">forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；</span></li><li fid=\"ued9c3f0f\" data-lake-id=\"uf5f85f3c\" id=\"uf5f85f3c\"><span data-lake-id=\"u0819fe4d\" id=\"u0819fe4d\" class=\"lake-fontsize-1515\">map()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；</span></li></ul><h3 data-lake-id=\"cQP3W\" id=\"cQP3W\"><span data-lake-id=\"u3b52f9b9\" id=\"u3b52f9b9\">30. </span><span data-lake-id=\"u998a0263\" id=\"u998a0263\" style=\"color: rgb(27, 27, 27)\">addEventListener()方法的参数和使用</span></h3><p data-lake-id=\"udd762f43\" id=\"udd762f43\"><strong><span data-lake-id=\"ud2b1d16c\" id=\"ud2b1d16c\" style=\"color: rgb(27, 27, 27)\">EventTarget.addEventListener() </span></strong><span data-lake-id=\"u686e1dc3\" id=\"u686e1dc3\" style=\"color: rgb(27, 27, 27)\">方法将指定的监听器注册到 </span><span data-lake-id=\"ucb0aeb29\" id=\"ucb0aeb29\">EventTarget</span><span data-lake-id=\"ud720fedf\" id=\"ud720fedf\" style=\"color: rgb(27, 27, 27)\"> 上，当该对象触发指定的事件时，指定的回调函数就会被执行。 事件目标可以是一个文档上的元素 </span><span data-lake-id=\"uc789e43b\" id=\"uc789e43b\">Element</span><span data-lake-id=\"u35a54578\" id=\"u35a54578\" style=\"color: rgb(27, 27, 27)\">，</span><span data-lake-id=\"u5821d19c\" id=\"u5821d19c\">Document</span><span data-lake-id=\"u6f797151\" id=\"u6f797151\" style=\"color: rgb(27, 27, 27)\">和</span><span data-lake-id=\"u396c1749\" id=\"u396c1749\">Window</span><span data-lake-id=\"uec256a6b\" id=\"uec256a6b\" style=\"color: rgb(27, 27, 27)\">或者任何其他支持事件的对象。</span></p><p data-lake-id=\"uff37aee6\" id=\"uff37aee6\"><span data-lake-id=\"u4d7db802\" id=\"u4d7db802\" style=\"color: rgb(27, 27, 27); background-color: rgb(244, 244, 244)\">​</span><br></p><p data-lake-id=\"u1b3b68f8\" id=\"u1b3b68f8\"><span data-lake-id=\"u61a3067d\" id=\"u61a3067d\" style=\"color: rgb(27, 27, 27)\">addEventListener()的工作原理是将实现</span><span data-lake-id=\"u7dae49d8\" id=\"u7dae49d8\">EventListener</span><span data-lake-id=\"ud418b0ff\" id=\"ud418b0ff\" style=\"color: rgb(27, 27, 27)\">的函数或对象添加到调用它的</span><span data-lake-id=\"ud93a38ed\" id=\"ud93a38ed\">EventTarget</span><span data-lake-id=\"u7afa6439\" id=\"u7afa6439\" style=\"color: rgb(27, 27, 27)\">上的指定事件类型的事件侦听器列表中。</span></p><p data-lake-id=\"u837ad499\" id=\"u837ad499\"><span data-lake-id=\"u0b158885\" id=\"u0b158885\" style=\"color: rgb(27, 27, 27)\">​</span><br></p><p data-lake-id=\"u1e0d2618\" id=\"u1e0d2618\"><span data-lake-id=\"ub96593f2\" id=\"ub96593f2\" style=\"color: rgb(27, 27, 27)\">它的使用语法如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22target.addEventListener(type%2C%20listener%2C%20options)%3B%5Cntarget.addEventListener(type%2C%20listener%2C%20useCapture)%3B%5Cntarget.addEventListener(type%2C%20listener%2C%20useCapture%2C%20wantsUntrusted)%3B%20%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22F5XrG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u70e75226\" id=\"u70e75226\"><span data-lake-id=\"u00497a8a\" id=\"u00497a8a\">其中参数如下：</span></p><p data-lake-id=\"u28d01a63\" id=\"u28d01a63\"><strong><span data-lake-id=\"ud754907f\" id=\"ud754907f\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">（1）type</span></strong></p><p data-lake-id=\"u8569d8c2\" id=\"u8569d8c2\"><span data-lake-id=\"u3663a397\" id=\"u3663a397\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">表示监听</span><span data-lake-id=\"ufec9caa8\" id=\"ufec9caa8\">事件类型</span><span data-lake-id=\"u836ed407\" id=\"u836ed407\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">的字符串。</span></p><p data-lake-id=\"u08b07e14\" id=\"u08b07e14\"><strong><span data-lake-id=\"ucd033300\" id=\"ucd033300\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">（2）listener</span></strong></p><p data-lake-id=\"ueff8e94c\" id=\"ueff8e94c\"><span data-lake-id=\"uf827445a\" id=\"uf827445a\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">当所监听的事件类型触发时，会接收到一个事件通知（实现了 </span><span data-lake-id=\"u9d9f165e\" id=\"u9d9f165e\">Event</span><span data-lake-id=\"ubcce3164\" id=\"ubcce3164\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\"> 接口的对象）对象。listener 必须是一个实现了 </span><span data-lake-id=\"ub0c923f1\" id=\"ub0c923f1\">EventListener</span><span data-lake-id=\"ub0274217\" id=\"ub0274217\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\"> 接口的对象，或者是一个</span><span data-lake-id=\"ub3156c56\" id=\"ub3156c56\">函数</span><span data-lake-id=\"uc592dba5\" id=\"uc592dba5\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">。</span></p><p data-lake-id=\"ua2857efa\" id=\"ua2857efa\"><strong><span data-lake-id=\"u6f715f8f\" id=\"u6f715f8f\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">（3）options 可选</span></strong></p><p data-lake-id=\"ue47f9991\" id=\"ue47f9991\"><span data-lake-id=\"u184b89f2\" id=\"u184b89f2\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">一个指定有关</span><span data-lake-id=\"u9b15012b\" id=\"u9b15012b\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\"> </span><span data-lake-id=\"u3546dd2c\" id=\"u3546dd2c\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">listener </span><span data-lake-id=\"u750d4555\" id=\"u750d4555\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">属性的可选参数</span><strong><span data-lake-id=\"u659965e2\" id=\"u659965e2\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">对象</span></strong><span data-lake-id=\"u0eb77428\" id=\"u0eb77428\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">。可用的选项如下：</span></p><ul list=\"u88f2da6d\"><li fid=\"u2de45688\" data-lake-id=\"u9bb9ab44\" id=\"u9bb9ab44\"><span data-lake-id=\"u85ef672e\" id=\"u85ef672e\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">capture:  </span><span data-lake-id=\"u085a06d0\" id=\"u085a06d0\">Boolean</span><span data-lake-id=\"u538f69ce\" id=\"u538f69ce\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">，表示 listener 会在该类型的事件捕获阶段传播到该 EventTarget 时触发。</span></li></ul><ul list=\"ub888becb\"><li fid=\"u16fcfcb2\" data-lake-id=\"ue773fd39\" id=\"ue773fd39\"><span data-lake-id=\"uc241ce63\" id=\"uc241ce63\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">once:  </span><span data-lake-id=\"ufb2840f9\" id=\"ufb2840f9\">Boolean</span><span data-lake-id=\"u9dc39b63\" id=\"u9dc39b63\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">，表示 listener 在添加之后最多只调用一次。如果是 true， listener 会在其被调用之后自动移除。</span></li><li fid=\"u16fcfcb2\" data-lake-id=\"u70177e6e\" id=\"u70177e6e\"><span data-lake-id=\"ube457ced\" id=\"ube457ced\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">passive: </span><span data-lake-id=\"u064bec38\" id=\"u064bec38\">Boolean</span><span data-lake-id=\"u6253077b\" id=\"u6253077b\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">，设置为true时，表示 listener 永远不会调用 preventDefault()。如果 listener 仍然调用了这个函数，客户端将会忽略它并抛出一个控制台警告。</span></li><li fid=\"u16fcfcb2\" data-lake-id=\"ubae71de1\" id=\"ubae71de1\"><span data-lake-id=\"uc41a874e\" id=\"uc41a874e\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">signal：</span><span data-lake-id=\"u5244237e\" id=\"u5244237e\">AbortSignal</span><span data-lake-id=\"u62cd23c5\" id=\"u62cd23c5\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">，该 AbortSignal 的 </span><span data-lake-id=\"u7f430772\" id=\"u7f430772\">abort()</span><span data-lake-id=\"u17972dee\" id=\"u17972dee\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\"> 方法被调用时，监听器会被移除。</span></li></ul><p data-lake-id=\"u80127b70\" id=\"u80127b70\"><strong><span data-lake-id=\"u4f109b47\" id=\"u4f109b47\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">（4）useCapture</span></strong><strong><span data-lake-id=\"u6ecf362f\" id=\"u6ecf362f\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">  </span></strong><strong><span data-lake-id=\"u2381c95c\" id=\"u2381c95c\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">可选</span></strong></p><p data-lake-id=\"ua4ada313\" id=\"ua4ada313\"><span data-lake-id=\"uaac52e6b\" id=\"uaac52e6b\">Boolean</span><span data-lake-id=\"u76c97a0e\" id=\"u76c97a0e\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">，在DOM树中，注册了listener的元素， 是否要先于它下面的EventTarget，调用该listener。 当useCapture(设为true) 时，沿着DOM树向上冒泡的事件，不会触发listener。当一个元素嵌套了另一个元素，并且两个元素都对同一事件注册了一个处理函数时，所发生的事件冒泡和事件捕获是两种不同的事件传播方式。事件传播模式决定了元素以哪个顺序接收事件。如果没有指定， </span><span data-lake-id=\"u1eef32ef\" id=\"u1eef32ef\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">useCapture</span><span data-lake-id=\"ud483994e\" id=\"ud483994e\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\"> 默认为 false 。</span></p><p data-lake-id=\"uce603ebc\" id=\"uce603ebc\"><strong><span data-lake-id=\"u1307166b\" id=\"u1307166b\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">（5）wantsUntrusted</span></strong><strong><span data-lake-id=\"u6ccad172\" id=\"u6ccad172\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\"> </span></strong></p><p data-lake-id=\"u88971fab\" id=\"u88971fab\"><span data-lake-id=\"u3fe7073a\" id=\"u3fe7073a\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">如果为 true , 则事件处理程序会接收网页自定义的事件。此参数只适用于 Gecko（</span><span data-lake-id=\"uf0bdb386\" id=\"uf0bdb386\">chrome</span><span data-lake-id=\"uacbe55bd\" id=\"uacbe55bd\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\">的默认值为true，其他常规网页的默认值为false），主要用于附加组件的代码和浏览器本身。</span></p><p data-lake-id=\"u9b2d4c73\" id=\"u9b2d4c73\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673894487140-873cfdc9-70a2-4f04-b6f2-2355996280ce.png%22%2C%22taskId%22%3A%22uf8b054c6-f741-4cf2-a9aa-da1c5b86761%22%2C%22clientId%22%3A%22ueb340ee7-bc26-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22stroke%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u9f659435%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\" class=\"lake-fontsize-12\" style=\"color: rgb(27, 27, 27)\"></card></p><h2 data-lake-id=\"4fa5088a8bb423b2739ff1166ce1ac36\" id=\"4fa5088a8bb423b2739ff1166ce1ac36\"><span data-lake-id=\"uc293c779\" id=\"uc293c779\">四、原型与原型链</span></h2><h3 data-lake-id=\"31e2756dc0fffdd60bbafbcf21cebbc8\" id=\"31e2756dc0fffdd60bbafbcf21cebbc8\"><span data-lake-id=\"u488690ce\" id=\"u488690ce\">1. </span><span data-lake-id=\"u1c2f117b\" id=\"u1c2f117b\">对原型、原型链的理解</span></h3><p data-lake-id=\"e0885879a636bdcc427a707584bf41ea\" id=\"e0885879a636bdcc427a707584bf41ea\"><span data-lake-id=\"u7408d5e0\" id=\"u7408d5e0\">在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 __proto__ 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。</span></p><p data-lake-id=\"87729539e4c0ac18143485f2b3c7de9d\" id=\"87729539e4c0ac18143485f2b3c7de9d\"><br></p><p data-lake-id=\"262f872c8d806b899294734ca9f120da\" id=\"262f872c8d806b899294734ca9f120da\"><span data-lake-id=\"ud2ade134\" id=\"ud2ade134\">当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。</span></p><p data-lake-id=\"6ee547fb1f1a098a6a18e398af2d2d1f\" id=\"6ee547fb1f1a098a6a18e398af2d2d1f\"><br></p><p data-lake-id=\"701fd6f2d8a282a359e48955ae7f8d91\" id=\"701fd6f2d8a282a359e48955ae7f8d91\"><strong><span data-lake-id=\"ub3eb26a9\" id=\"ub3eb26a9\">特点：</span></strong><span data-lake-id=\"u92f3ce79\" id=\"u92f3ce79\">JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</span></p><p data-lake-id=\"324c154c511f1f9b80b6aefd0c98548f\" id=\"324c154c511f1f9b80b6aefd0c98548f\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615475711487-c474af95-b5e0-4778-a90b-9484208d724d.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A618%2C%22height%22%3A781%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A618%2C%22originHeight%22%3A781%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f7f3%22%2C%22id%22%3A%22vIqx4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"a631170c283285a7b4948720c1d7b7b7\" id=\"a631170c283285a7b4948720c1d7b7b7\"><span data-lake-id=\"ueedff6ef\" id=\"ueedff6ef\">2. 原型修改、重写</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20Person(name)%20%7B%5Cn%20%20%20%20this.name%20%3D%20name%5Cn%7D%5Cn%2F%2F%20%E4%BF%AE%E6%94%B9%E5%8E%9F%E5%9E%8B%5CnPerson.prototype.getName%20%3D%20function()%20%7B%7D%5Cnvar%20p%20%3D%20new%20Person('hello')%5Cnconsole.log(p.__proto__%20%3D%3D%3D%20Person.prototype)%20%2F%2F%20true%5Cnconsole.log(p.__proto__%20%3D%3D%3D%20p.constructor.prototype)%20%2F%2F%20true%5Cn%2F%2F%20%E9%87%8D%E5%86%99%E5%8E%9F%E5%9E%8B%5CnPerson.prototype%20%3D%20%7B%5Cn%20%20%20%20getName%3A%20function()%20%7B%7D%5Cn%7D%5Cnvar%20p%20%3D%20new%20Person('hello')%5Cnconsole.log(p.__proto__%20%3D%3D%3D%20Person.prototype)%20%20%20%20%20%20%20%20%2F%2F%20true%5Cnconsole.log(p.__proto__%20%3D%3D%3D%20p.constructor.prototype)%20%2F%2F%20false%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%227Anpx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"1e48a7b22ac56bdb2552a410b96ac287\" id=\"1e48a7b22ac56bdb2552a410b96ac287\"><span data-lake-id=\"uc8192353\" id=\"uc8192353\">可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候</span><code data-lake-id=\"u1659e782\" id=\"u1659e782\"><span data-lake-id=\"u61ff074b\" id=\"u61ff074b\">p.constructor === Object</span></code><span data-lake-id=\"ucfc9d323\" id=\"ucfc9d323\"> ，而不是</span><code data-lake-id=\"u1120f726\" id=\"u1120f726\"><span data-lake-id=\"u7b390c37\" id=\"u7b390c37\">p.constructor === Person</span></code><span data-lake-id=\"u3def846c\" id=\"u3def846c\">。要想成立，就要用constructor指回来：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Person.prototype%20%3D%20%7B%5Cn%20%20%20%20getName%3A%20function()%20%7B%7D%5Cn%7D%5Cnvar%20p%20%3D%20new%20Person('hello')%5Cnp.constructor%20%3D%20Person%5Cnconsole.log(p.__proto__%20%3D%3D%3D%20Person.prototype)%20%20%20%20%20%20%20%20%2F%2F%20true%5Cnconsole.log(p.__proto__%20%3D%3D%3D%20p.constructor.prototype)%20%2F%2F%20true%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%229knM4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"328213e45c2a30b000c72942160eb6ce\" id=\"328213e45c2a30b000c72942160eb6ce\"><span data-lake-id=\"u1505efef\" id=\"u1505efef\">3. 原型链指向</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22p.__proto__%20%20%2F%2F%20Person.prototype%5CnPerson.prototype.__proto__%20%20%2F%2F%20Object.prototype%5Cnp.__proto__.__proto__%20%2F%2FObject.prototype%5Cnp.__proto__.constructor.prototype.__proto__%20%2F%2F%20Object.prototype%5CnPerson.prototype.constructor.prototype.__proto__%20%2F%2F%20Object.prototype%5Cnp1.__proto__.constructor%20%2F%2F%20Person%5CnPerson.prototype.constructor%20%20%2F%2F%20Person%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UsXaM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"73b0297fd0ed392937f92d2c45afd3cb\" id=\"73b0297fd0ed392937f92d2c45afd3cb\"><span data-lake-id=\"u2a949c1c\" id=\"u2a949c1c\">4. 原型链的终点是什么？如何打印出原型链的终点？</span></h3><p data-lake-id=\"6a5c33940c4e62ee78fe3ae350cabcf2\" id=\"6a5c33940c4e62ee78fe3ae350cabcf2\"><span data-lake-id=\"u07f0822d\" id=\"u07f0822d\">由于</span><code data-lake-id=\"u9489eeba\" id=\"u9489eeba\"><span data-lake-id=\"uc833f504\" id=\"uc833f504\">Object</span></code><span data-lake-id=\"u6941c2e5\" id=\"u6941c2e5\">是构造函数，原型链终点是</span><code data-lake-id=\"u7990caf8\" id=\"u7990caf8\"><span data-lake-id=\"ue77aedfd\" id=\"ue77aedfd\">Object.prototype.__proto__</span></code><span data-lake-id=\"ud5b5fc2f\" id=\"ud5b5fc2f\">，而</span><code data-lake-id=\"u4a32e628\" id=\"u4a32e628\"><span data-lake-id=\"uf4945a36\" id=\"uf4945a36\">Object.prototype.__proto__=== null // true</span></code><span data-lake-id=\"u7ea846c7\" id=\"u7ea846c7\">，所以，原型链的终点是</span><code data-lake-id=\"ub5b8b109\" id=\"ub5b8b109\"><span data-lake-id=\"u97484b78\" id=\"u97484b78\">null</span></code><span data-lake-id=\"u37cd5766\" id=\"u37cd5766\">。原型链上的所有原型都是对象，所有的对象最终都是由</span><code data-lake-id=\"u7a10b908\" id=\"u7a10b908\"><span data-lake-id=\"u48f814c7\" id=\"u48f814c7\">Object</span></code><span data-lake-id=\"u8ed81d42\" id=\"u8ed81d42\">构造的，而</span><code data-lake-id=\"ub10a4aa4\" id=\"ub10a4aa4\"><span data-lake-id=\"u5c911bee\" id=\"u5c911bee\">Object.prototype</span></code><span data-lake-id=\"ua91c46d8\" id=\"ua91c46d8\">的下一级是</span><code data-lake-id=\"u95be77d5\" id=\"u95be77d5\"><span data-lake-id=\"ufce8590a\" id=\"ufce8590a\">Object.prototype.__proto__</span></code><span data-lake-id=\"u88eb3419\" id=\"u88eb3419\">。</span></p><p data-lake-id=\"7ed8fe59b41b2ff91fce1d9e712abe38\" id=\"7ed8fe59b41b2ff91fce1d9e712abe38\" style=\"text-align: justify\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fjpeg%2F1500604%2F1605247722640-5bcb9156-a8b4-4d7c-83d7-9ff80930e1de.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A490%2C%22height%22%3A146%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A490%2C%22originHeight%22%3A146%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232b2a25%22%2C%22id%22%3A%22c8OJ0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"b727c24973431708744023d45e967601\" id=\"b727c24973431708744023d45e967601\"><span data-lake-id=\"ucaed66df\" id=\"ucaed66df\">5. 如何获得对象非原型链上的属性？</span></h3><p data-lake-id=\"6fbcdf5269872f4c0f5309cbcf7ad85b\" id=\"6fbcdf5269872f4c0f5309cbcf7ad85b\"><span data-lake-id=\"u9485e022\" id=\"u9485e022\">使用后</span><code data-lake-id=\"u478da4af\" id=\"u478da4af\"><span data-lake-id=\"u4da9d04f\" id=\"u4da9d04f\">hasOwnProperty()</span></code><span data-lake-id=\"uc252c5f4\" id=\"uc252c5f4\">方法来判断属性是否属于原型链的属性：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20iterate(obj)%7B%5Cn%20%20%20var%20res%3D%5B%5D%3B%5Cn%20%20%20for(var%20key%20in%20obj)%7B%5Cn%20%20%20%20%20%20%20%20if(obj.hasOwnProperty(key))%5Cn%20%20%20%20%20%20%20%20%20%20%20res.push(key%2B'%3A%20'%2Bobj%5Bkey%5D)%3B%5Cn%20%20%20%7D%5Cn%20%20%20return%20res%3B%5Cn%7D%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ui2tI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"c3919e1de0c89feca0203f788eb6d030\" id=\"c3919e1de0c89feca0203f788eb6d030\"><span data-lake-id=\"u36365594\" id=\"u36365594\">五、执行上下文/作用域链/闭包</span></h2><h3 data-lake-id=\"23c9abe7635a9a1228d9001d34e8da61\" id=\"23c9abe7635a9a1228d9001d34e8da61\"><span data-lake-id=\"u0d0b387e\" id=\"u0d0b387e\">1. 对闭包的理解</span></h3><p data-lake-id=\"a5f6b28c32fa4b9b2f7be73c4a38e8c4\" id=\"a5f6b28c32fa4b9b2f7be73c4a38e8c4\"><strong><span data-lake-id=\"ue7bfc335\" id=\"ue7bfc335\">闭包是指有权访问另一个函数作用域中变量的函数</span></strong><span data-lake-id=\"uace8d6b2\" id=\"uace8d6b2\">，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</span></p><p data-lake-id=\"3cea69396bd9fa81534599a59ec81ef5\" id=\"3cea69396bd9fa81534599a59ec81ef5\"><br></p><p data-lake-id=\"13d4c05379a221c8e56cf683751475c3\" id=\"13d4c05379a221c8e56cf683751475c3\"><span data-lake-id=\"ufbc1255b\" id=\"ufbc1255b\">闭包有两个常用的用途；</span></p><ul list=\"u9313b28f\"><li fid=\"u9174be4d\" data-lake-id=\"c6d5a9c249079c4fa14c4404fffee716\" id=\"c6d5a9c249079c4fa14c4404fffee716\"><span data-lake-id=\"uff9e02fd\" id=\"uff9e02fd\">闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</span></li><li fid=\"u9174be4d\" data-lake-id=\"4f5e3b1abaa6489dcf737e1a019143ef\" id=\"4f5e3b1abaa6489dcf737e1a019143ef\"><span data-lake-id=\"ufd862356\" id=\"ufd862356\">闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</span></li></ul><p data-lake-id=\"0d5e6969e5ef56ab1c1117129c7c31f4\" id=\"0d5e6969e5ef56ab1c1117129c7c31f4\"><br></p><p data-lake-id=\"58172f762488863e19dad7291d271ffa\" id=\"58172f762488863e19dad7291d271ffa\"><span data-lake-id=\"u8fb2790d\" id=\"u8fb2790d\">比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20A()%20%7B%5Cn%20%20let%20a%20%3D%201%5Cn%20%20window.B%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20console.log(a)%5Cn%20%20%7D%5Cn%7D%5CnA()%5CnB()%20%2F%2F%201%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22xuzPw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f3a196e13c84f6faa46f11bc7bc24fa3\" id=\"f3a196e13c84f6faa46f11bc7bc24fa3\"><span data-lake-id=\"ub0ef540c\" id=\"ub0ef540c\">在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22for%20(var%20i%20%3D%201%3B%20i%20%3C%3D%205%3B%20i%2B%2B)%20%7B%5Cn%20%20setTimeout(function%20timer()%20%7B%5Cn%20%20%20%20console.log(i)%5Cn%20%20%7D%2C%20i%20*%201000)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YBKNX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"d760555eb702f300c9663dbc2ea64d95\" id=\"d760555eb702f300c9663dbc2ea64d95\"><span data-lake-id=\"u010c16d6\" id=\"u010c16d6\">首先因为 </span><code data-lake-id=\"ucb548891\" id=\"ucb548891\"><span data-lake-id=\"u3a0955d8\" id=\"u3a0955d8\">setTimeout</span></code><span data-lake-id=\"u4a4b6640\" id=\"u4a4b6640\"> 是个异步函数，所以会先把循环全部执行完毕，这时候 </span><code data-lake-id=\"u73a7f22c\" id=\"u73a7f22c\"><span data-lake-id=\"ub232d7ad\" id=\"ub232d7ad\">i</span></code><span data-lake-id=\"ub7bc9808\" id=\"ub7bc9808\"> 就是 6 了，所以会输出一堆 6。解决办法有三种：</span></p><ul list=\"u1fef296b\"><li fid=\"ua81a9f7e\" data-lake-id=\"cb7a45d320e01f6550bf06dc0ab5b6e6\" id=\"cb7a45d320e01f6550bf06dc0ab5b6e6\"><span data-lake-id=\"uca9f6c15\" id=\"uca9f6c15\">第一种是使用闭包的方式</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22for%20(var%20i%20%3D%201%3B%20i%20%3C%3D%205%3B%20i%2B%2B)%20%7B%5Cn%20%20%3B(function(j)%20%7B%5Cn%20%20%20%20setTimeout(function%20timer()%20%7B%5Cn%20%20%20%20%20%20console.log(j)%5Cn%20%20%20%20%7D%2C%20j%20*%201000)%5Cn%20%20%7D)(i)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22x9Khq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"5b80a57448bbabf29f6312c952afecac\" id=\"5b80a57448bbabf29f6312c952afecac\"><span data-lake-id=\"uae3e1cad\" id=\"uae3e1cad\">在上述代码中，首先使用了立即执行函数将 </span><code data-lake-id=\"u4196ffb4\" id=\"u4196ffb4\"><span data-lake-id=\"u4f6e425c\" id=\"u4f6e425c\">i</span></code><span data-lake-id=\"uc5769b64\" id=\"uc5769b64\"> 传入函数内部，这个时候值就被固定在了参数 </span><code data-lake-id=\"uc42d5ceb\" id=\"uc42d5ceb\"><span data-lake-id=\"uf2728e16\" id=\"uf2728e16\">j</span></code><span data-lake-id=\"u6ea0d801\" id=\"u6ea0d801\"> 上面不会改变，当下次执行 </span><code data-lake-id=\"u9462d79a\" id=\"u9462d79a\"><span data-lake-id=\"u8a95bca9\" id=\"u8a95bca9\">timer</span></code><span data-lake-id=\"u7096bfa1\" id=\"u7096bfa1\"> 这个闭包的时候，就可以使用外部函数的变量 </span><code data-lake-id=\"u96462db6\" id=\"u96462db6\"><span data-lake-id=\"ueb358a49\" id=\"ueb358a49\">j</span></code><span data-lake-id=\"u0155a869\" id=\"u0155a869\">，从而达到目的。</span></p><ul list=\"u1b539b2d\"><li fid=\"u757b3fcf\" data-lake-id=\"b3ab6b4cbbe8ec7e3e2c3ee8feaaa8de\" id=\"b3ab6b4cbbe8ec7e3e2c3ee8feaaa8de\"><span data-lake-id=\"u80c7c657\" id=\"u80c7c657\">第二种就是使用 </span><code data-lake-id=\"uee285e93\" id=\"uee285e93\"><span data-lake-id=\"u08fc7f9e\" id=\"u08fc7f9e\">setTimeout</span></code><span data-lake-id=\"uee1a30d7\" id=\"uee1a30d7\"> 的第三个参数，这个参数会被当成 </span><code data-lake-id=\"uf92c1b63\" id=\"uf92c1b63\"><span data-lake-id=\"ub42d0d92\" id=\"ub42d0d92\">timer</span></code><span data-lake-id=\"u90862053\" id=\"u90862053\"> 函数的参数传入。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22for%20(var%20i%20%3D%201%3B%20i%20%3C%3D%205%3B%20i%2B%2B)%20%7B%5Cn%20%20setTimeout(%5Cn%20%20%20%20function%20timer(j)%20%7B%5Cn%20%20%20%20%20%20console.log(j)%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20i%20*%201000%2C%5Cn%20%20%20%20i%5Cn%20%20)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OUtQj%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ubfc07339\"><li fid=\"ua293ad2b\" data-lake-id=\"74593460edf58b6a967d9be1e7e7019a\" id=\"74593460edf58b6a967d9be1e7e7019a\"><span data-lake-id=\"u0a81d31b\" id=\"u0a81d31b\">第三种就是使用 </span><code data-lake-id=\"u7a72772f\" id=\"u7a72772f\"><span data-lake-id=\"uc590a86f\" id=\"uc590a86f\">let</span></code><span data-lake-id=\"uac15bae0\" id=\"uac15bae0\"> 定义 </span><code data-lake-id=\"u5fb1f797\" id=\"u5fb1f797\"><span data-lake-id=\"ub386a38f\" id=\"ub386a38f\">i</span></code><span data-lake-id=\"ubcfbf59d\" id=\"ubcfbf59d\"> 了来解决问题了，这个也是最为推荐的方式</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22for%20(let%20i%20%3D%201%3B%20i%20%3C%3D%205%3B%20i%2B%2B)%20%7B%5Cn%20%20setTimeout(function%20timer()%20%7B%5Cn%20%20%20%20console.log(i)%5Cn%20%20%7D%2C%20i%20*%201000)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TSyEC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"e39a6ab8b784fd88bbcf2aeb2ed82b8d\" id=\"e39a6ab8b784fd88bbcf2aeb2ed82b8d\"><span data-lake-id=\"u63a5e262\" id=\"u63a5e262\">2. 对作用域、作用域链的理解</span></h3><h5 data-lake-id=\"f79c0dea3c9f92c1dde87d56921ff89d\" id=\"f79c0dea3c9f92c1dde87d56921ff89d\"><span data-lake-id=\"u8f9aaf27\" id=\"u8f9aaf27\">1）全局作用域和函数作用域</span></h5><p data-lake-id=\"ffadaf109499d8d54c561d96c3ee479a\" id=\"ffadaf109499d8d54c561d96c3ee479a\"><span data-lake-id=\"ub2140b14\" id=\"ub2140b14\">（1）全局作用域</span></p><ul list=\"ue2c221c9\"><li fid=\"u63ebdc6c\" data-lake-id=\"f8c3f68fdeea072d82352c1887abbfa8\" id=\"f8c3f68fdeea072d82352c1887abbfa8\"><span data-lake-id=\"u19d50e6c\" id=\"u19d50e6c\">最外层函数和最外层函数外面定义的变量拥有全局作用域</span></li><li fid=\"u63ebdc6c\" data-lake-id=\"db2869b1f7ca7dabe7840048644a3246\" id=\"db2869b1f7ca7dabe7840048644a3246\"><span data-lake-id=\"u2e8dc1e7\" id=\"u2e8dc1e7\">所有未定义直接赋值的变量自动声明为全局作用域</span></li><li fid=\"u63ebdc6c\" data-lake-id=\"a3c53a8119e4a33e61edad021db6207f\" id=\"a3c53a8119e4a33e61edad021db6207f\"><span data-lake-id=\"u5c609729\" id=\"u5c609729\">所有window对象的属性拥有全局作用域</span></li><li fid=\"u63ebdc6c\" data-lake-id=\"04e7186964e200053832c7b1ccc0500f\" id=\"04e7186964e200053832c7b1ccc0500f\"><span data-lake-id=\"uf2e89591\" id=\"uf2e89591\">全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。</span></li></ul><p data-lake-id=\"6137c1c6947f5fd43056938227852ea1\" id=\"6137c1c6947f5fd43056938227852ea1\"><span data-lake-id=\"u5887e208\" id=\"u5887e208\">（2）函数作用域</span></p><ul list=\"u232c6279\"><li fid=\"u1b987aec\" data-lake-id=\"7c642ebf389a0b1c9f4d81f65a35d311\" id=\"7c642ebf389a0b1c9f4d81f65a35d311\"><span data-lake-id=\"u3c0b6aa3\" id=\"u3c0b6aa3\">函数作用域声明在函数内部的变零，一般只有固定的代码片段可以访问到</span></li><li fid=\"u1b987aec\" data-lake-id=\"0a2ebbc52d117ea578fffc8d1db45f5f\" id=\"0a2ebbc52d117ea578fffc8d1db45f5f\"><span data-lake-id=\"u0109a13d\" id=\"u0109a13d\">作用域是分层的，内层作用域可以访问外层作用域，反之不行</span></li></ul><h5 data-lake-id=\"0e212ee4e1866971b8f1fbaae534d646\" id=\"0e212ee4e1866971b8f1fbaae534d646\"><span data-lake-id=\"uef9ec293\" id=\"uef9ec293\">2）块级作用域</span></h5><ul list=\"u083f35c7\"><li fid=\"u5c43ba26\" data-lake-id=\"d6844db56d502bd4fc8bc489574fe567\" id=\"d6844db56d502bd4fc8bc489574fe567\"><span data-lake-id=\"ucc474548\" id=\"ucc474548\">使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由</span><code data-lake-id=\"u67005339\" id=\"u67005339\"><span data-lake-id=\"u2110f832\" id=\"u2110f832\">{ }</span></code><span data-lake-id=\"uabb27afe\" id=\"uabb27afe\">包裹的代码片段）</span></li><li fid=\"u5c43ba26\" data-lake-id=\"55b84cbf9a640a77453c5666cd0c9571\" id=\"55b84cbf9a640a77453c5666cd0c9571\"><span data-lake-id=\"u76347480\" id=\"u76347480\">let和const声明的变量不会有变量提升，也不可以重复声明</span></li><li fid=\"u5c43ba26\" data-lake-id=\"7580e0009fd1877853655dfafbde5e87\" id=\"7580e0009fd1877853655dfafbde5e87\"><span data-lake-id=\"u33ce00dc\" id=\"u33ce00dc\">在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。</span></li></ul><p data-lake-id=\"8649e2e7ce53cf3965b12b1de30a273f\" id=\"8649e2e7ce53cf3965b12b1de30a273f\"><br></p><p data-lake-id=\"4cd32c79ea7be71d17118fb44ecb2ca4\" id=\"4cd32c79ea7be71d17118fb44ecb2ca4\"><strong><span data-lake-id=\"u0f12e9d8\" id=\"u0f12e9d8\">作用域链：</span></strong></p><p data-lake-id=\"7928bf3fdd91104e3590e81436d12aef\" id=\"7928bf3fdd91104e3590e81436d12aef\"><span data-lake-id=\"u4aa12672\" id=\"u4aa12672\">在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。</span></p><p data-lake-id=\"57c7420cda390b2398767d2803a56c2a\" id=\"57c7420cda390b2398767d2803a56c2a\"><br></p><p data-lake-id=\"4ce2140bd9c79866a9bb331b3b352a5e\" id=\"4ce2140bd9c79866a9bb331b3b352a5e\"><span data-lake-id=\"ub1f17e5a\" id=\"ub1f17e5a\">作用域链的作用是</span><strong><span data-lake-id=\"ue011eb51\" id=\"ue011eb51\">保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。</span></strong></p><p data-lake-id=\"bae792dc726f2f357f5ee217588e2ef3\" id=\"bae792dc726f2f357f5ee217588e2ef3\"><br></p><p data-lake-id=\"3213406eaedc6e91d4aaf5227867b791\" id=\"3213406eaedc6e91d4aaf5227867b791\"><span data-lake-id=\"u1a3485b2\" id=\"u1a3485b2\">作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</span></p><p data-lake-id=\"b63e8dfa2c9d86878617fdf45ad366af\" id=\"b63e8dfa2c9d86878617fdf45ad366af\"><br></p><p data-lake-id=\"b134f6ce2ffcbd82bd84bef8c8bfa6ae\" id=\"b134f6ce2ffcbd82bd84bef8c8bfa6ae\"><span data-lake-id=\"u4575cbd3\" id=\"u4575cbd3\">当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。</span></p><h3 data-lake-id=\"8d2daf1a9f9da45b6ce15a5924514075\" id=\"8d2daf1a9f9da45b6ce15a5924514075\"><span data-lake-id=\"uae4bbc22\" id=\"uae4bbc22\">3. 对执行上下文的理解</span></h3><h5 data-lake-id=\"804764839612b54004994791ceaacc7f\" id=\"804764839612b54004994791ceaacc7f\"><span data-lake-id=\"uebd46ea2\" id=\"uebd46ea2\">1. 执行上下文类型</span></h5><p data-lake-id=\"87a5e14c948100b7dfef1768d1d32ca8\" id=\"87a5e14c948100b7dfef1768d1d32ca8\"><strong><span data-lake-id=\"ubd30d9b0\" id=\"ubd30d9b0\">（1）全局执行上下文</span></strong></p><p data-lake-id=\"a3e6f829912e11445ee63b307e63f707\" id=\"a3e6f829912e11445ee63b307e63f707\"><span data-lake-id=\"u6bb22b35\" id=\"u6bb22b35\">任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。</span></p><p data-lake-id=\"588cac7a92beb429b5859464083df6b9\" id=\"588cac7a92beb429b5859464083df6b9\"><strong><span data-lake-id=\"ue377746b\" id=\"ue377746b\">（2）函数执行上下文</span></strong></p><p data-lake-id=\"1f41205a445cfabee76151f750b65d1e\" id=\"1f41205a445cfabee76151f750b65d1e\"><span data-lake-id=\"u57b2e039\" id=\"u57b2e039\">当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。</span></p><p data-lake-id=\"99e6327a9ee4e9a798deb762cee824be\" id=\"99e6327a9ee4e9a798deb762cee824be\"><strong><span data-lake-id=\"u11365964\" id=\"u11365964\">（3）</span></strong><code data-lake-id=\"uc8f9bd3f\" id=\"uc8f9bd3f\"><strong><span data-lake-id=\"u69b4c14e\" id=\"u69b4c14e\">eval</span></strong></code><strong><span data-lake-id=\"ud6fc929f\" id=\"ud6fc929f\">函数执行上下文</span></strong></p><p data-lake-id=\"0e3e31a64653bf0758a4fcfcf0bd3889\" id=\"0e3e31a64653bf0758a4fcfcf0bd3889\"><span data-lake-id=\"ub2934a5a\" id=\"ub2934a5a\">执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。</span></p><h5 data-lake-id=\"3afac7921023fae869fd2717b1ae887b\" id=\"3afac7921023fae869fd2717b1ae887b\"><span data-lake-id=\"ue82c1037\" id=\"ue82c1037\">2. 执行上下文栈</span></h5><ul list=\"u43348080\"><li fid=\"ue70f3a7f\" data-lake-id=\"e6ff5c521de6379e30e0191fedf60ed3\" id=\"e6ff5c521de6379e30e0191fedf60ed3\"><span data-lake-id=\"u9350c303\" id=\"u9350c303\">JavaScript引擎使用执行上下文栈来管理执行上下文</span></li><li fid=\"ue70f3a7f\" data-lake-id=\"97a9ece5930f653322a666a16e7207df\" id=\"97a9ece5930f653322a666a16e7207df\"><span data-lake-id=\"u785136a3\" id=\"u785136a3\">当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20a%20%3D%20'Hello%20World!'%3B%5Cnfunction%20first()%20%7B%5Cn%20%20console.log('Inside%20first%20function')%3B%5Cn%20%20second()%3B%5Cn%20%20console.log('Again%20inside%20first%20function')%3B%5Cn%7D%5Cnfunction%20second()%20%7B%5Cn%20%20console.log('Inside%20second%20function')%3B%5Cn%7D%5Cnfirst()%3B%5Cn%2F%2F%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F%5Cn%2F%2F%E5%85%88%E6%89%A7%E8%A1%8Csecond()%2C%E5%9C%A8%E6%89%A7%E8%A1%8Cfirst()%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GAkVI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"3956b6f925b387a1aa213e2cac71f55b\" id=\"3956b6f925b387a1aa213e2cac71f55b\"><span data-lake-id=\"u30ce2e71\" id=\"u30ce2e71\">3. 创建执行上下文</span></h5><p data-lake-id=\"4f7c0c0827c3746984c7a460bcbf9a0b\" id=\"4f7c0c0827c3746984c7a460bcbf9a0b\"><span data-lake-id=\"uedc358ee\" id=\"uedc358ee\">创建执行上下文有两个阶段：</span><strong><span data-lake-id=\"u5b1a4fbc\" id=\"u5b1a4fbc\">创建阶段</span></strong><span data-lake-id=\"u93f66386\" id=\"u93f66386\">和</span><strong><span data-lake-id=\"ua7d690d5\" id=\"ua7d690d5\">执行阶段</span></strong></p><p data-lake-id=\"5502b79d47289cce3e90bc93b34b8d5b\" id=\"5502b79d47289cce3e90bc93b34b8d5b\"><strong><span data-lake-id=\"u9fdec59f\" id=\"u9fdec59f\">1）创建阶段</span></strong></p><p data-lake-id=\"e771381f5411d392f3a7d7170cf6edcc\" id=\"e771381f5411d392f3a7d7170cf6edcc\"><span data-lake-id=\"ub40e8928\" id=\"ub40e8928\">（1）this绑定</span></p><ul list=\"u4a628bc9\"><li fid=\"u13fc7952\" data-lake-id=\"bc80d327078f80fc0184f44d51f112d1\" id=\"bc80d327078f80fc0184f44d51f112d1\"><span data-lake-id=\"u4a3cae5e\" id=\"u4a3cae5e\">在全局执行上下文中，this指向全局对象（window对象）</span></li><li fid=\"u13fc7952\" data-lake-id=\"7993b17f7da18eeea094897a3718bff5\" id=\"7993b17f7da18eeea094897a3718bff5\"><span data-lake-id=\"uf336d3f8\" id=\"uf336d3f8\">在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined</span></li></ul><p data-lake-id=\"af86c86010518a8586b712ae5aa6ff3a\" id=\"af86c86010518a8586b712ae5aa6ff3a\"><span data-lake-id=\"uf9a9fcf2\" id=\"uf9a9fcf2\">（2）创建词法环境组件</span></p><ul list=\"u8cb9ebb1\"><li fid=\"ud415180f\" data-lake-id=\"485c5884155ff66077976b7cb116f56a\" id=\"485c5884155ff66077976b7cb116f56a\"><span data-lake-id=\"uc9bf2316\" id=\"uc9bf2316\">词法环境是一种有</span><strong><span data-lake-id=\"u12731316\" id=\"u12731316\">标识符——变量映射</span></strong><span data-lake-id=\"uc36e270f\" id=\"uc36e270f\">的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。</span></li><li fid=\"ud415180f\" data-lake-id=\"5971b8d7c8ef79135b3062507f5cd6a6\" id=\"5971b8d7c8ef79135b3062507f5cd6a6\"><span data-lake-id=\"u6be15d02\" id=\"u6be15d02\">词法环境的内部有两个组件：</span><strong><span data-lake-id=\"u429abd5e\" id=\"u429abd5e\">加粗样式</span></strong><span data-lake-id=\"ua6da109e\" id=\"ua6da109e\">：环境记录器:用来储存变量个函数声明的实际位置</span><strong><span data-lake-id=\"ubda6addb\" id=\"ubda6addb\">外部环境的引用</span></strong><span data-lake-id=\"ud1e7fce4\" id=\"ud1e7fce4\">：可以访问父级作用域</span></li></ul><p data-lake-id=\"789307b30408ddfb365b01cca0ce8f4c\" id=\"789307b30408ddfb365b01cca0ce8f4c\"><span data-lake-id=\"ua42a8ed1\" id=\"ua42a8ed1\">（3）创建变量环境组件</span></p><ul list=\"u67548db8\"><li fid=\"u55db7ce7\" data-lake-id=\"97e6d73021ce5364896100b8b0571a8f\" id=\"97e6d73021ce5364896100b8b0571a8f\"><span data-lake-id=\"u37685196\" id=\"u37685196\">变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</span></li></ul><p data-lake-id=\"6d6c5c9fb660356adecff8951eb6f9ca\" id=\"6d6c5c9fb660356adecff8951eb6f9ca\"><strong><span data-lake-id=\"u017350dc\" id=\"u017350dc\">2）执行阶段</span></strong></p><p data-lake-id=\"8f515f29a41b1f3e2126edade9605943\" id=\"8f515f29a41b1f3e2126edade9605943\"><span data-lake-id=\"u006ae3bd\" id=\"u006ae3bd\">此阶段会完成对变量的分配，最后执行完代码。</span></p><p data-lake-id=\"23094211343c4865d5e7472de4ed1745\" id=\"23094211343c4865d5e7472de4ed1745\"><br></p><p data-lake-id=\"149fa6572c3b2c10d755df289f199562\" id=\"149fa6572c3b2c10d755df289f199562\"><strong><span data-lake-id=\"u547d47d1\" id=\"u547d47d1\">简单来说执行上下文就是指：</span></strong></p><p data-lake-id=\"50c533105a5b6150cf007fa79e4bf524\" id=\"50c533105a5b6150cf007fa79e4bf524\"><span data-lake-id=\"u590c0a71\" id=\"u590c0a71\">在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。</span></p><p data-lake-id=\"d035b2d09b3451b20e8b6d48a0899d84\" id=\"d035b2d09b3451b20e8b6d48a0899d84\"><br></p><p data-lake-id=\"2da010f7b613baca5e232d8bccce219e\" id=\"2da010f7b613baca5e232d8bccce219e\"><span data-lake-id=\"u18774a85\" id=\"u18774a85\">在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。</span></p><ul list=\"u9bcde63f\"><li fid=\"u276b7241\" data-lake-id=\"2d7583ab15e11fa1c321fbd10684d181\" id=\"2d7583ab15e11fa1c321fbd10684d181\"><span data-lake-id=\"uedcfed69\" id=\"uedcfed69\">全局上下文：变量定义，函数声明</span></li><li fid=\"u276b7241\" data-lake-id=\"18f0780f0695737319980083c13f8429\" id=\"18f0780f0695737319980083c13f8429\"><span data-lake-id=\"u2ffb8036\" id=\"u2ffb8036\">函数上下文：变量定义，函数声明，</span><code data-lake-id=\"u140e5e22\" id=\"u140e5e22\"><span data-lake-id=\"u38005999\" id=\"u38005999\">this</span></code><span data-lake-id=\"u93d2e4dd\" id=\"u93d2e4dd\">，</span><code data-lake-id=\"u3c98ae9d\" id=\"u3c98ae9d\"><span data-lake-id=\"ub8125a9c\" id=\"ub8125a9c\">arguments</span></code></li></ul><h2 data-lake-id=\"80099dfdaf6e0a1cb61a21c58fed6062\" id=\"80099dfdaf6e0a1cb61a21c58fed6062\"><span data-lake-id=\"u18d2b93f\" id=\"u18d2b93f\">六、this/call/apply/bind</span></h2><h3 data-lake-id=\"1d306f8f17ce87a9d956f830de017ab8\" id=\"1d306f8f17ce87a9d956f830de017ab8\"><span data-lake-id=\"u430aa05b\" id=\"u430aa05b\">1. 对this对象的理解</span></h3><p data-lake-id=\"3bc22e15a1848b3b3df5d13380cdca41\" id=\"3bc22e15a1848b3b3df5d13380cdca41\"><span data-lake-id=\"ue4383277\" id=\"ue4383277\">this 是执行上下文中的一个属性，它指向最后一次调用这个方法的对象。在实际开发中，this 的指向可以通过四种调用模式来判断。</span></p><ul list=\"u8d01030d\"><li fid=\"uc642b2a1\" data-lake-id=\"a2d7015484864c70203f21be62df5137\" id=\"a2d7015484864c70203f21be62df5137\"><span data-lake-id=\"uca037f8a\" id=\"uca037f8a\">第一种是</span><strong><span data-lake-id=\"u12a29444\" id=\"u12a29444\">函数调用模式</span></strong><span data-lake-id=\"u6e0410fb\" id=\"u6e0410fb\">，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</span></li><li fid=\"uc642b2a1\" data-lake-id=\"cc4b19ac7db16215af04a19a0572dea7\" id=\"cc4b19ac7db16215af04a19a0572dea7\"><span data-lake-id=\"uf1cee265\" id=\"uf1cee265\">第二种是</span><strong><span data-lake-id=\"ucfbd71c9\" id=\"ucfbd71c9\">方法调用模式</span></strong><span data-lake-id=\"u7ec49119\" id=\"u7ec49119\">，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</span></li><li fid=\"uc642b2a1\" data-lake-id=\"7b2d0fc81df05795f28e988bf4e32a4f\" id=\"7b2d0fc81df05795f28e988bf4e32a4f\"><span data-lake-id=\"u826f2bb9\" id=\"u826f2bb9\">第三种是</span><strong><span data-lake-id=\"ua23829a9\" id=\"ua23829a9\">构造器调用模式</span></strong><span data-lake-id=\"u95f93af3\" id=\"u95f93af3\">，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</span></li><li fid=\"uc642b2a1\" data-lake-id=\"774f734578f47a4b7cb160f90a421875\" id=\"774f734578f47a4b7cb160f90a421875\"><span data-lake-id=\"u7d5836f7\" id=\"u7d5836f7\">第四种是 </span><strong><span data-lake-id=\"u10f23145\" id=\"u10f23145\">apply 、 call 和 bind 调用模式</span></strong><span data-lake-id=\"u32c2587e\" id=\"u32c2587e\">，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</span></li></ul><p data-lake-id=\"446325a7972764852d18f4024613caa0\" id=\"446325a7972764852d18f4024613caa0\"><br></p><p data-lake-id=\"f75bda2701c9dd2d7636b3adcbf249b4\" id=\"f75bda2701c9dd2d7636b3adcbf249b4\"><span data-lake-id=\"udc6f6709\" id=\"udc6f6709\">这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。</span></p><h3 data-lake-id=\"0fd8dd7fb4e4bd1b5f62af85c52eb184\" id=\"0fd8dd7fb4e4bd1b5f62af85c52eb184\"><span data-lake-id=\"ubb2303cf\" id=\"ubb2303cf\">2. call() 和 apply() 的区别？</span></h3><p data-lake-id=\"7abc47e756893dc9713eba8c6bb14224\" id=\"7abc47e756893dc9713eba8c6bb14224\"><span data-lake-id=\"ua85a8b9a\" id=\"ua85a8b9a\">它们的作用一模一样，区别仅在于传入参数的形式的不同。</span></p><ul list=\"u970f6d83\"><li fid=\"u8f77393e\" data-lake-id=\"01574039497572eabc6ace0335aefee1\" id=\"01574039497572eabc6ace0335aefee1\"><span data-lake-id=\"uced706a2\" id=\"uced706a2\">apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。</span></li><li fid=\"u8f77393e\" data-lake-id=\"a8ca968dafc758923d673353272d3145\" id=\"a8ca968dafc758923d673353272d3145\"><span data-lake-id=\"u0ffc6622\" id=\"u0ffc6622\">call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。</span></li></ul><h3 data-lake-id=\"2eefb565e674b4299afb546659649523\" id=\"2eefb565e674b4299afb546659649523\"><span data-lake-id=\"u9a0b0459\" id=\"u9a0b0459\">3. 实现call、apply 及 bind 函数</span></h3><p data-lake-id=\"789e632033ff741a843ee7b747780a71\" id=\"789e632033ff741a843ee7b747780a71\"><strong><span data-lake-id=\"u6c2d8b08\" id=\"u6c2d8b08\">（1）call 函数的实现步骤：</span></strong></p><ul list=\"u36b0d80d\"><li fid=\"uc479ef30\" data-lake-id=\"ab9fdcf0e075c9ad5e8e282c1a4917b4\" id=\"ab9fdcf0e075c9ad5e8e282c1a4917b4\"><span data-lake-id=\"u6f6a79a6\" id=\"u6f6a79a6\">判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</span></li><li fid=\"uc479ef30\" data-lake-id=\"254a70635eb1e453df2d6d093449999a\" id=\"254a70635eb1e453df2d6d093449999a\"><span data-lake-id=\"uddc5908e\" id=\"uddc5908e\">判断传入上下文对象是否存在，如果不存在，则设置为 window 。</span></li><li fid=\"uc479ef30\" data-lake-id=\"0731d716bfaa3e25f78768041488ae9f\" id=\"0731d716bfaa3e25f78768041488ae9f\"><span data-lake-id=\"ua0dc04ec\" id=\"ua0dc04ec\">处理传入的参数，截取第一个参数后的所有参数。</span></li><li fid=\"uc479ef30\" data-lake-id=\"681346c076a71a916ea1097965e3c1c3\" id=\"681346c076a71a916ea1097965e3c1c3\"><span data-lake-id=\"ud4302222\" id=\"ud4302222\">将函数作为上下文对象的一个属性。</span></li><li fid=\"uc479ef30\" data-lake-id=\"4fe2b0e0dd5c5dddd6c2ca8581e2ed68\" id=\"4fe2b0e0dd5c5dddd6c2ca8581e2ed68\"><span data-lake-id=\"u053b277b\" id=\"u053b277b\">使用上下文对象来调用这个方法，并保存返回结果。</span></li><li fid=\"uc479ef30\" data-lake-id=\"1127a776f2ebefc0627dee2496726915\" id=\"1127a776f2ebefc0627dee2496726915\"><span data-lake-id=\"u9ab018cb\" id=\"u9ab018cb\">删除刚才新增的属性。</span></li><li fid=\"uc479ef30\" data-lake-id=\"dec3a3415154846ceb3d51bef23bdab9\" id=\"dec3a3415154846ceb3d51bef23bdab9\"><span data-lake-id=\"ucc8864c6\" id=\"ucc8864c6\">返回结果。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Function.prototype.myCall%20%3D%20function(context)%20%7B%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%5Cn%20%20if%20(typeof%20this%20!%3D%3D%20%5C%22function%5C%22)%20%7B%5Cn%20%20%20%20console.error(%5C%22type%20error%5C%22)%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%5Cn%20%20let%20args%20%3D%20%5B...arguments%5D.slice(1)%2C%5Cn%20%20%20%20result%20%3D%20null%3B%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%20context%20%E6%98%AF%E5%90%A6%E4%BC%A0%E5%85%A5%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%AA%E4%BC%A0%E5%85%A5%E5%88%99%E8%AE%BE%E7%BD%AE%E4%B8%BA%20window%5Cn%20%20context%20%3D%20context%20%7C%7C%20window%3B%5Cn%20%20%2F%2F%20%E5%B0%86%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%E8%AE%BE%E4%B8%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95%5Cn%20%20context.fn%20%3D%20this%3B%5Cn%20%20%2F%2F%20%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0%5Cn%20%20result%20%3D%20context.fn(...args)%3B%5Cn%20%20%2F%2F%20%E5%B0%86%E5%B1%9E%E6%80%A7%E5%88%A0%E9%99%A4%5Cn%20%20delete%20context.fn%3B%5Cn%20%20return%20result%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YBSpy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"518af46421e640e8aada2bb8992fafd3\" id=\"518af46421e640e8aada2bb8992fafd3\"><strong><span data-lake-id=\"u6f5d0085\" id=\"u6f5d0085\">（2）apply 函数的实现步骤：</span></strong></p><ul list=\"ue3ea0dfd\"><li fid=\"u20306e7b\" data-lake-id=\"2dbe9d4844eceb364f82172db859a592\" id=\"2dbe9d4844eceb364f82172db859a592\"><span data-lake-id=\"u33ea9f7f\" id=\"u33ea9f7f\">判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</span></li><li fid=\"u20306e7b\" data-lake-id=\"756f5ef4dd2de0ad8beddb8f3e382fed\" id=\"756f5ef4dd2de0ad8beddb8f3e382fed\"><span data-lake-id=\"u8a958fad\" id=\"u8a958fad\">判断传入上下文对象是否存在，如果不存在，则设置为 window 。</span></li><li fid=\"u20306e7b\" data-lake-id=\"c262f85c0a5a764a44eee720b8bc1e3a\" id=\"c262f85c0a5a764a44eee720b8bc1e3a\"><span data-lake-id=\"u9139b2d1\" id=\"u9139b2d1\">将函数作为上下文对象的一个属性。</span></li><li fid=\"u20306e7b\" data-lake-id=\"cb19660ad9d5689c98ac10056fe7f296\" id=\"cb19660ad9d5689c98ac10056fe7f296\"><span data-lake-id=\"u20387437\" id=\"u20387437\">判断参数值是否传入</span></li><li fid=\"u20306e7b\" data-lake-id=\"81c42411c4de85e76579a7c1fe039922\" id=\"81c42411c4de85e76579a7c1fe039922\"><span data-lake-id=\"u5a707657\" id=\"u5a707657\">使用上下文对象来调用这个方法，并保存返回结果。</span></li><li fid=\"u20306e7b\" data-lake-id=\"d6af71b3a95e78f1a2da8a9bcf832a86\" id=\"d6af71b3a95e78f1a2da8a9bcf832a86\"><span data-lake-id=\"u8611b8c6\" id=\"u8611b8c6\">删除刚才新增的属性</span></li><li fid=\"u20306e7b\" data-lake-id=\"3d5830ff58ed1265fe840ef408af50a6\" id=\"3d5830ff58ed1265fe840ef408af50a6\"><span data-lake-id=\"u8f6d924a\" id=\"u8f6d924a\">返回结果</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Function.prototype.myApply%20%3D%20function(context)%20%7B%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E4%B8%BA%E5%87%BD%E6%95%B0%5Cn%20%20if%20(typeof%20this%20!%3D%3D%20%5C%22function%5C%22)%20%7B%5Cn%20%20%20%20throw%20new%20TypeError(%5C%22Error%5C%22)%3B%5Cn%20%20%7D%5Cn%20%20let%20result%20%3D%20null%3B%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%20context%20%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%AA%E4%BC%A0%E5%85%A5%E5%88%99%E4%B8%BA%20window%5Cn%20%20context%20%3D%20context%20%7C%7C%20window%3B%5Cn%20%20%2F%2F%20%E5%B0%86%E5%87%BD%E6%95%B0%E8%AE%BE%E4%B8%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95%5Cn%20%20context.fn%20%3D%20this%3B%5Cn%20%20%2F%2F%20%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%5Cn%20%20if%20(arguments%5B1%5D)%20%7B%5Cn%20%20%20%20result%20%3D%20context.fn(...arguments%5B1%5D)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20result%20%3D%20context.fn()%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E5%B0%86%E5%B1%9E%E6%80%A7%E5%88%A0%E9%99%A4%5Cn%20%20delete%20context.fn%3B%5Cn%20%20return%20result%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%221MbI0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"5741b3531cdfb052e0fac5f10bab6286\" id=\"5741b3531cdfb052e0fac5f10bab6286\"><strong><span data-lake-id=\"u9ceeb875\" id=\"u9ceeb875\">（3）bind 函数的实现步骤：</span></strong></p><ul list=\"u662d5306\"><li fid=\"u969f6d30\" data-lake-id=\"9f48156e964f8c79b3be4c7993596674\" id=\"9f48156e964f8c79b3be4c7993596674\"><span data-lake-id=\"u575a573a\" id=\"u575a573a\">判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</span></li><li fid=\"u969f6d30\" data-lake-id=\"7ac9e28aa390d58ab8389046abfc985e\" id=\"7ac9e28aa390d58ab8389046abfc985e\"><span data-lake-id=\"uae528f6a\" id=\"uae528f6a\">保存当前函数的引用，获取其余传入参数值。</span></li><li fid=\"u969f6d30\" data-lake-id=\"49def7bc24b4e2a6f603c72455c4e222\" id=\"49def7bc24b4e2a6f603c72455c4e222\"><span data-lake-id=\"ucc9b6887\" id=\"ucc9b6887\">创建一个函数返回</span></li><li fid=\"u969f6d30\" data-lake-id=\"3e8eb7fa1896e5be95e19c58b1d1fdc4\" id=\"3e8eb7fa1896e5be95e19c58b1d1fdc4\"><span data-lake-id=\"u5a4b2792\" id=\"u5a4b2792\">函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Function.prototype.myBind%20%3D%20function(context)%20%7B%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E8%B0%83%E7%94%A8%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E4%B8%BA%E5%87%BD%E6%95%B0%5Cn%20%20if%20(typeof%20this%20!%3D%3D%20%5C%22function%5C%22)%20%7B%5Cn%20%20%20%20throw%20new%20TypeError(%5C%22Error%5C%22)%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%5Cn%20%20var%20args%20%3D%20%5B...arguments%5D.slice(1)%2C%5Cn%20%20%20%20fn%20%3D%20this%3B%5Cn%20%20return%20function%20Fn()%20%7B%5Cn%20%20%20%20%2F%2F%20%E6%A0%B9%E6%8D%AE%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%EF%BC%8C%E4%BC%A0%E5%85%A5%E4%B8%8D%E5%90%8C%E7%BB%91%E5%AE%9A%E5%80%BC%5Cn%20%20%20%20return%20fn.apply(%5Cn%20%20%20%20%20%20this%20instanceof%20Fn%20%3F%20this%20%3A%20context%2C%5Cn%20%20%20%20%20%20args.concat(...arguments)%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%3B%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cTZYT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"uea218215\" id=\"uea218215\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673894521888-10c2b3f0-968e-4a9b-a314-d381288f09b8.png%22%2C%22taskId%22%3A%22u04443beb-02ce-4f94-90b0-f173d971a87%22%2C%22clientId%22%3A%22ueb340ee7-bc26-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22stroke%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u3ec3f0f5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"c665f92bc605cfc2ee15d072dc619ee0\" id=\"c665f92bc605cfc2ee15d072dc619ee0\"><span data-lake-id=\"ue4cdd890\" id=\"ue4cdd890\">七、异步编程</span></h2><h3 data-lake-id=\"646941bb49ab3bd2c744ebedb8f6d896\" id=\"646941bb49ab3bd2c744ebedb8f6d896\"><span data-lake-id=\"u76ad8671\" id=\"u76ad8671\">1. 异步编程的实现方式？</span></h3><p data-lake-id=\"e40943b97af280bbc9527fc717f53c4d\" id=\"e40943b97af280bbc9527fc717f53c4d\"><span data-lake-id=\"u78449fbb\" id=\"u78449fbb\">JavaScript中的异步机制可以分为以下几种：</span></p><ul list=\"u5df6f5d7\"><li fid=\"uf5ea48e1\" data-lake-id=\"c2fd82ce04946a5267b7cab890bfd6e3\" id=\"c2fd82ce04946a5267b7cab890bfd6e3\"><strong><span data-lake-id=\"u79b24505\" id=\"u79b24505\">回调函数 </span></strong><span data-lake-id=\"u1bed68df\" id=\"u1bed68df\">的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。</span></li><li fid=\"uf5ea48e1\" data-lake-id=\"c3b04699012cb418fc9d61220c34466c\" id=\"c3b04699012cb418fc9d61220c34466c\"><strong><span data-lake-id=\"uabfa6dfd\" id=\"uabfa6dfd\">Promise</span></strong><span data-lake-id=\"u535b8bfe\" id=\"u535b8bfe\"> 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。</span></li><li fid=\"uf5ea48e1\" data-lake-id=\"167b27a99d5464514f082e5171b4cd2f\" id=\"167b27a99d5464514f082e5171b4cd2f\"><strong><span data-lake-id=\"u06be2c44\" id=\"u06be2c44\">generator </span></strong><span data-lake-id=\"u8b9b1c1b\" id=\"u8b9b1c1b\">的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。</span></li><li fid=\"uf5ea48e1\" data-lake-id=\"43c3deb9f7d030e75d2baecbecaa1f0f\" id=\"43c3deb9f7d030e75d2baecbecaa1f0f\"><strong><span data-lake-id=\"u63307bf7\" id=\"u63307bf7\">async 函数 </span></strong><span data-lake-id=\"u39934b2a\" id=\"u39934b2a\">的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。</span></li></ul><h3 data-lake-id=\"791da1512b169c29fd50646942ee7e48\" id=\"791da1512b169c29fd50646942ee7e48\"><span data-lake-id=\"u8ab1806e\" id=\"u8ab1806e\">2. setTimeout、Promise、Async/Await 的区别</span></h3><h4 data-lake-id=\"7b1d4562fb6ac47a39e44afa3ab4fc65\" id=\"7b1d4562fb6ac47a39e44afa3ab4fc65\"><span data-lake-id=\"u6f9cface\" id=\"u6f9cface\">（1）setTimeout</span></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log('script%20start')%5Ct%2F%2F1.%20%E6%89%93%E5%8D%B0%20script%20start%5CnsetTimeout(function()%7B%5Cn%20%20%20%20console.log('settimeout')%5Ct%2F%2F%204.%20%E6%89%93%E5%8D%B0%20settimeout%5Cn%7D)%5Ct%2F%2F%202.%20%E8%B0%83%E7%94%A8%20setTimeout%20%E5%87%BD%E6%95%B0%EF%BC%8C%E5%B9%B6%E5%AE%9A%E4%B9%89%E5%85%B6%E5%AE%8C%E6%88%90%E5%90%8E%E6%89%A7%E8%A1%8C%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cnconsole.log('script%20end')%5Ct%2F%2F3.%20%E6%89%93%E5%8D%B0%20script%20start%5Cn%2F%2F%20%E8%BE%93%E5%87%BA%E9%A1%BA%E5%BA%8F%EF%BC%9Ascript%20start-%3Escript%20end-%3Esettimeout%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Fprkh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"ed15dd81effa58d8dbfe893b74de4f71\" id=\"ed15dd81effa58d8dbfe893b74de4f71\"><span data-lake-id=\"u64fa950c\" id=\"u64fa950c\">（2）Promise</span></h4><p data-lake-id=\"479c2206a45998c63c3642369f73aaf6\" id=\"479c2206a45998c63c3642369f73aaf6\"><span data-lake-id=\"ue0aa779c\" id=\"ue0aa779c\">Promise本身是</span><strong><span data-lake-id=\"u05a73806\" id=\"u05a73806\">同步的立即执行函数</span></strong><span data-lake-id=\"u8fc228e2\" id=\"u8fc228e2\">， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then/catch等，当主栈完成后，才会去调用resolve/reject中存放的方法执行，打印p的时候，是打印的返回结果，一个Promise实例。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22console.log('script%20start')%5Cnlet%20promise1%20%3D%20new%20Promise(function%20(resolve)%20%7B%5Cn%20%20%20%20console.log('promise1')%5Cn%20%20%20%20resolve()%5Cn%20%20%20%20console.log('promise1%20end')%5Cn%7D).then(function%20()%20%7B%5Cn%20%20%20%20console.log('promise2')%5Cn%7D)%5CnsetTimeout(function()%7B%5Cn%20%20%20%20console.log('settimeout')%5Cn%7D)%5Cnconsole.log('script%20end')%5Cn%2F%2F%20%E8%BE%93%E5%87%BA%E9%A1%BA%E5%BA%8F%3A%20script%20start-%3Epromise1-%3Epromise1%20end-%3Escript%20end-%3Epromise2-%3Esettimeout%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22QQyks%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ca794a5dc14ade5885f4dbcd09a79c95\" id=\"ca794a5dc14ade5885f4dbcd09a79c95\"><span data-lake-id=\"u4f236421\" id=\"u4f236421\">当JS主线程执行到Promise对象时：</span></p><ul list=\"uf2c1a70f\"><li fid=\"u74324568\" data-lake-id=\"367c831220c13199444be7e183691aba\" id=\"367c831220c13199444be7e183691aba\"><span data-lake-id=\"u1914ce0d\" id=\"u1914ce0d\">promise1.then() 的回调就是一个 task</span></li><li fid=\"u74324568\" data-lake-id=\"e8beff767e5c211f7b3a3307b3caccb7\" id=\"e8beff767e5c211f7b3a3307b3caccb7\"><span data-lake-id=\"ub236168c\" id=\"ub236168c\">promise1 是 resolved或rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue</span></li><li fid=\"u74324568\" data-lake-id=\"8ddf3ce4fc8f27ad36a19a534f96a90d\" id=\"8ddf3ce4fc8f27ad36a19a534f96a90d\"><span data-lake-id=\"uc913eca7\" id=\"uc913eca7\">promise1 是 pending: 这个 task 就会放入 事件循环的未来的某个(可能下一个)回合的 microtask queue 中</span></li><li fid=\"u74324568\" data-lake-id=\"a94b16152f272b17c9acadb980e99a2a\" id=\"a94b16152f272b17c9acadb980e99a2a\"><span data-lake-id=\"u6d45d574\" id=\"u6d45d574\">setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况</span></li></ul><h4 data-lake-id=\"00b9b5df3da61f97a46eec78a07c3b20\" id=\"00b9b5df3da61f97a46eec78a07c3b20\"><span data-lake-id=\"u1a571995\" id=\"u1a571995\">（3）async/await</span></h4><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function%20async1()%7B%5Cn%20%20%20console.log('async1%20start')%3B%5Cn%20%20%20%20await%20async2()%3B%5Cn%20%20%20%20console.log('async1%20end')%5Cn%7D%5Cnasync%20function%20async2()%7B%5Cn%20%20%20%20console.log('async2')%5Cn%7D%5Cnconsole.log('script%20start')%3B%5Cnasync1()%3B%5Cnconsole.log('script%20end')%5Cn%2F%2F%20%E8%BE%93%E5%87%BA%E9%A1%BA%E5%BA%8F%EF%BC%9Ascript%20start-%3Easync1%20start-%3Easync2-%3Escript%20end-%3Easync1%20end%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MsvyO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ec7c47cfe1a08cab8478c3b079aa8650\" id=\"ec7c47cfe1a08cab8478c3b079aa8650\"><span data-lake-id=\"u82f8f51f\" id=\"u82f8f51f\">async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</span></p><p data-lake-id=\"5eca8e50093f795fef06eb260da08083\" id=\"5eca8e50093f795fef06eb260da08083\"><br></p><p data-lake-id=\"5dd68278683c91e50f1df9c6a669a432\" id=\"5dd68278683c91e50f1df9c6a669a432\"><span data-lake-id=\"ub012bc40\" id=\"ub012bc40\">例如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function%20func1()%20%7B%5Cn%20%20%20%20return%201%5Cn%7D%5Cnconsole.log(func1())%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22XE9mf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3cc2a830f834c99a9c7eb70ad01cff00\" id=\"3cc2a830f834c99a9c7eb70ad01cff00\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1604021075237-8249a8df-3a28-4bca-9f22-02923aba8618.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1066%2C%22height%22%3A156%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1066%2C%22originHeight%22%3A156%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fbfafa%22%2C%22id%22%3A%22sTmEL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"74946808a267bff071b496e51ba88992\" id=\"74946808a267bff071b496e51ba88992\"><span data-lake-id=\"u29b08365\" id=\"u29b08365\">func1的运行结果其实就是一个Promise对象。因此也可以使用then来处理后续逻辑。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22func1().then(res%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(res)%3B%20%20%2F%2F%2030%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YGQ9c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"cd19d2b8111124060985a718f56683a2\" id=\"cd19d2b8111124060985a718f56683a2\"><span data-lake-id=\"u4d66eb90\" id=\"u4d66eb90\">await的含义为等待，也就是 async 函数需要等待await后的函数执行完成并且有了返回结果（Promise对象）之后，才能继续执行下面的代码。await通过返回一个Promise对象来实现同步的效果。</span></p><h3 data-lake-id=\"b070205010f65758257e0b08f5ae8e0b\" id=\"b070205010f65758257e0b08f5ae8e0b\"><span data-lake-id=\"ue7f99854\" id=\"ue7f99854\">3. 对Promise的理解</span></h3><p data-lake-id=\"990542a858ea0519667b96372536a00c\" id=\"990542a858ea0519667b96372536a00c\"><span data-lake-id=\"u3b33314a\" id=\"u3b33314a\">Promise是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。</span></p><p data-lake-id=\"d5e9a420d3a0c801e18129996e6b58c7\" id=\"d5e9a420d3a0c801e18129996e6b58c7\"><br></p><p data-lake-id=\"1240bfa48dcc34ca67e414934e3b6919\" id=\"1240bfa48dcc34ca67e414934e3b6919\"><span data-lake-id=\"u41d9fe2e\" id=\"u41d9fe2e\">所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</span></p><p data-lake-id=\"88ea9fd364be5a107cf88b1c482fc8e5\" id=\"88ea9fd364be5a107cf88b1c482fc8e5\"><br></p><p data-lake-id=\"c7ca3ae58c859de754ca92675f515dc3\" id=\"c7ca3ae58c859de754ca92675f515dc3\"><span data-lake-id=\"u689ae1a2\" id=\"u689ae1a2\">（1）Promise的实例有</span><strong><span data-lake-id=\"u7b015b87\" id=\"u7b015b87\">三个状态</span></strong><span data-lake-id=\"ucd374fe0\" id=\"ucd374fe0\">:</span></p><ul list=\"u97f52d50\"><li fid=\"ua469e878\" data-lake-id=\"0863439e3e4a79c538af454786fa6add\" id=\"0863439e3e4a79c538af454786fa6add\"><span data-lake-id=\"ubf85a12e\" id=\"ubf85a12e\">Pending（进行中）</span></li><li fid=\"ua469e878\" data-lake-id=\"75e36ff7eb84ac994c4b93e873fcdb3d\" id=\"75e36ff7eb84ac994c4b93e873fcdb3d\"><span data-lake-id=\"udede41ca\" id=\"udede41ca\">Resolved（已完成）</span></li><li fid=\"ua469e878\" data-lake-id=\"1f4677a56c27fea52d146a253b308d13\" id=\"1f4677a56c27fea52d146a253b308d13\"><span data-lake-id=\"u0831125f\" id=\"u0831125f\">Rejected（已拒绝）</span></li></ul><p data-lake-id=\"fcdf6cde56057cbfc964e042f2ffa102\" id=\"fcdf6cde56057cbfc964e042f2ffa102\"><br></p><p data-lake-id=\"80b207d45824a18415895458da9d6f53\" id=\"80b207d45824a18415895458da9d6f53\"><span data-lake-id=\"ubccb17ff\" id=\"ubccb17ff\">当把一件事情交给promise时，它的状态就是Pending，任务完成了状态就变成了Resolved、没有完成失败了就变成了Rejected。</span></p><p data-lake-id=\"114bc7b7de17e28ec408473116844cc7\" id=\"114bc7b7de17e28ec408473116844cc7\"><br></p><p data-lake-id=\"fb284fa40a28e4abcdd10753e85925ab\" id=\"fb284fa40a28e4abcdd10753e85925ab\"><span data-lake-id=\"u1e14a6f8\" id=\"u1e14a6f8\">（2）Promise的实例有</span><strong><span data-lake-id=\"udb850c88\" id=\"udb850c88\">两个过程</span></strong><span data-lake-id=\"u5bfed117\" id=\"u5bfed117\">：</span></p><ul list=\"uae373905\"><li fid=\"u8cb90257\" data-lake-id=\"fad67e20dcc0459dd6ad1cc5d88dc9ae\" id=\"fad67e20dcc0459dd6ad1cc5d88dc9ae\"><span data-lake-id=\"u0d9391e9\" id=\"u0d9391e9\">pending -&gt; fulfilled : Resolved（已完成）</span></li><li fid=\"u8cb90257\" data-lake-id=\"7c390276605958abea46798f1bbbee36\" id=\"7c390276605958abea46798f1bbbee36\"><span data-lake-id=\"u652ebf24\" id=\"u652ebf24\">pending -&gt; rejected：Rejected（已拒绝）</span></li></ul><p data-lake-id=\"256c58dc4b342c390c82ee406542ae0c\" id=\"256c58dc4b342c390c82ee406542ae0c\"><br></p><p data-lake-id=\"21bd9fdc8ed4074eb5ba22ab35da3ce2\" id=\"21bd9fdc8ed4074eb5ba22ab35da3ce2\"><span data-lake-id=\"u695a0027\" id=\"u695a0027\">注意：一旦从进行状态变成为其他状态就永远不能更改状态了。</span></p><p data-lake-id=\"6427c4324a80e601fde1ecd089855661\" id=\"6427c4324a80e601fde1ecd089855661\"><br></p><p data-lake-id=\"8b08a2d10214dff159bfb80e182022be\" id=\"8b08a2d10214dff159bfb80e182022be\"><strong><span data-lake-id=\"ub0a6e3bc\" id=\"ub0a6e3bc\">Promise的特点：</span></strong></p><ul list=\"ucde0ea5b\"><li fid=\"u9cc4e301\" data-lake-id=\"afe71b22a7a7212ff68d3ea813c9de4d\" id=\"afe71b22a7a7212ff68d3ea813c9de4d\"><span data-lake-id=\"ua039afff\" id=\"ua039afff\">对象的状态不受外界影响。promise对象代表一个异步操作，有三种状态，</span><code data-lake-id=\"u9d0b3258\" id=\"u9d0b3258\"><span data-lake-id=\"u5711c5c0\" id=\"u5711c5c0\">pending</span></code><span data-lake-id=\"uea11a02b\" id=\"uea11a02b\">（进行中）、</span><code data-lake-id=\"u89ebb0a0\" id=\"u89ebb0a0\"><span data-lake-id=\"u22c4371b\" id=\"u22c4371b\">fulfilled</span></code><span data-lake-id=\"uda2f7003\" id=\"uda2f7003\">（已成功）、</span><code data-lake-id=\"ufbb8b1c4\" id=\"ufbb8b1c4\"><span data-lake-id=\"u5033c0f7\" id=\"u5033c0f7\">rejected</span></code><span data-lake-id=\"u293af6a0\" id=\"u293af6a0\">（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是promise这个名字的由来——“</span><strong><span data-lake-id=\"u7e3175a3\" id=\"u7e3175a3\">承诺</span></strong><span data-lake-id=\"u72249873\" id=\"u72249873\">”；</span></li><li fid=\"u9cc4e301\" data-lake-id=\"9555e4818becf52b71d65491af6d0b67\" id=\"9555e4818becf52b71d65491af6d0b67\"><span data-lake-id=\"u856a0fae\" id=\"u856a0fae\">一旦状态改变就不会再变，任何时候都可以得到这个结果。promise对象的状态改变，只有两种可能：从</span><code data-lake-id=\"u7e82b5dd\" id=\"u7e82b5dd\"><span data-lake-id=\"u5a8bae5f\" id=\"u5a8bae5f\">pending</span></code><span data-lake-id=\"u79e79c40\" id=\"u79e79c40\">变为</span><code data-lake-id=\"ub724f2df\" id=\"ub724f2df\"><span data-lake-id=\"u8e82bd76\" id=\"u8e82bd76\">fulfilled</span></code><span data-lake-id=\"u8646cecd\" id=\"u8646cecd\">，从</span><code data-lake-id=\"u9f64a228\" id=\"u9f64a228\"><span data-lake-id=\"ub35bede9\" id=\"ub35bede9\">pending</span></code><span data-lake-id=\"u26e268d4\" id=\"u26e268d4\">变为</span><code data-lake-id=\"u04cdb99f\" id=\"u04cdb99f\"><span data-lake-id=\"udc4c2c05\" id=\"udc4c2c05\">rejected</span></code><span data-lake-id=\"u3fa09c2b\" id=\"u3fa09c2b\">。这时就称为</span><code data-lake-id=\"u3a9c15cb\" id=\"u3a9c15cb\"><span data-lake-id=\"u7ec56f32\" id=\"u7ec56f32\">resolved</span></code><span data-lake-id=\"u4e2c9b55\" id=\"u4e2c9b55\">（已定型）。如果改变已经发生了，你再对promise对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。</span></li></ul><p data-lake-id=\"c4425216132e71dc48d4392c6569d939\" id=\"c4425216132e71dc48d4392c6569d939\"><br></p><p data-lake-id=\"3e097c4605fed9454d127ecfe49aa464\" id=\"3e097c4605fed9454d127ecfe49aa464\"><strong><span data-lake-id=\"u54f51fd7\" id=\"u54f51fd7\">Promise的缺点：</span></strong></p><ul list=\"u493c6431\"><li fid=\"u3f2d2343\" data-lake-id=\"bdd70e1dfb8f81f4908a52a4e347edd1\" id=\"bdd70e1dfb8f81f4908a52a4e347edd1\"><span data-lake-id=\"ua919f738\" id=\"ua919f738\">无法取消Promise，一旦新建它就会立即执行，无法中途取消。</span></li><li fid=\"u3f2d2343\" data-lake-id=\"59dfc9bb2afd590805a85662f3580d03\" id=\"59dfc9bb2afd590805a85662f3580d03\"><span data-lake-id=\"u18ff8dcb\" id=\"u18ff8dcb\">如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。</span></li><li fid=\"u3f2d2343\" data-lake-id=\"6e95f4a5d75d9c0ab1f3e1822ec84e24\" id=\"6e95f4a5d75d9c0ab1f3e1822ec84e24\"><span data-lake-id=\"uf34343b0\" id=\"uf34343b0\">当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</span></li></ul><p data-lake-id=\"090cf966ff1a3184d4e4863352d05ce2\" id=\"090cf966ff1a3184d4e4863352d05ce2\"><br></p><p data-lake-id=\"44836c5e5b340dedda967f2b5a817c3e\" id=\"44836c5e5b340dedda967f2b5a817c3e\"><strong><span data-lake-id=\"u6f07df60\" id=\"u6f07df60\">总结：</span></strong></p><p data-lake-id=\"105443545c6a8b521928a86e2a8c2450\" id=\"105443545c6a8b521928a86e2a8c2450\"><span data-lake-id=\"ua937cf06\" id=\"ua937cf06\">Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。</span></p><p data-lake-id=\"e619ea34e2ac27d7010c1937798864ac\" id=\"e619ea34e2ac27d7010c1937798864ac\"><br></p><p data-lake-id=\"6789978750fc9add86b2375562091567\" id=\"6789978750fc9add86b2375562091567\"><span data-lake-id=\"u6afc09b7\" id=\"u6afc09b7\">状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。</span></p><p data-lake-id=\"9d84694f25424343615c6aba47da247c\" id=\"9d84694f25424343615c6aba47da247c\"><br></p><p data-lake-id=\"55273b9c7b70e749a155b419d289f5c6\" id=\"55273b9c7b70e749a155b419d289f5c6\"><strong><span data-lake-id=\"u122c8bce\" id=\"u122c8bce\">注意：</span></strong><span data-lake-id=\"u7cae23bb\" id=\"u7cae23bb\">在构造 </span><code data-lake-id=\"ue3870b2c\" id=\"ue3870b2c\"><span data-lake-id=\"uf610d159\" id=\"uf610d159\">Promise</span></code><span data-lake-id=\"ud728a480\" id=\"ud728a480\"> 的时候，构造函数内部的代码是立即执行的</span></p><h3 data-lake-id=\"6c74d90c264ae733f869a708886e2087\" id=\"6c74d90c264ae733f869a708886e2087\"><span data-lake-id=\"u4249e26d\" id=\"u4249e26d\"> 4. Promise的基本用法</span></h3><h4 data-lake-id=\"4972646ce0fc686da37ee8966c44b733\" id=\"4972646ce0fc686da37ee8966c44b733\"><span data-lake-id=\"ub2c0da5a\" id=\"ub2c0da5a\">（1）创建Promise对象</span></h4><p data-lake-id=\"eec29b79d22cd93bd5939920547b2678\" id=\"eec29b79d22cd93bd5939920547b2678\"><span data-lake-id=\"u452a0351\" id=\"u452a0351\">Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。</span></p><p data-lake-id=\"83b5dfe0c49ed2b6d48a1f6d59ecb750\" id=\"83b5dfe0c49ed2b6d48a1f6d59ecb750\"><br></p><p data-lake-id=\"77622d7d9f161d7276a1deeb0e7cf051\" id=\"77622d7d9f161d7276a1deeb0e7cf051\"><span data-lake-id=\"u8cc64a01\" id=\"u8cc64a01\">Promise构造函数接受一个函数作为参数，该函数的两个参数分别是</span><code data-lake-id=\"u1456f4be\" id=\"u1456f4be\"><span data-lake-id=\"u8d4ed98a\" id=\"u8d4ed98a\">resolve</span></code><span data-lake-id=\"uaf700f55\" id=\"uaf700f55\">和</span><code data-lake-id=\"ufb82a44c\" id=\"ufb82a44c\"><span data-lake-id=\"ub98afe32\" id=\"ub98afe32\">reject</span></code><span data-lake-id=\"ufba0d020\" id=\"ufba0d020\">。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20promise%20%3D%20new%20Promise(function(resolve%2C%20reject)%20%7B%5Cn%20%20%2F%2F%20...%20some%20code%5Cn%20%20if%20(%2F*%20%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C%E6%88%90%E5%8A%9F%20*%2F)%7B%5Cn%20%20%20%20resolve(value)%3B%5Cn%20%20%7D%20else%20%7B%5Cn%20%20%20%20reject(error)%3B%5Cn%20%20%7D%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Wbqf3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"6afefcbff38e17bda5d686aaf60a2867\" id=\"6afefcbff38e17bda5d686aaf60a2867\"><strong><span data-lake-id=\"u2b0201a3\" id=\"u2b0201a3\">一般情况下都会使用</span></strong><code data-lake-id=\"u2c94902a\" id=\"u2c94902a\"><strong><span data-lake-id=\"u2b953c98\" id=\"u2b953c98\">new Promise()</span></strong></code><strong><span data-lake-id=\"u387ec366\" id=\"u387ec366\">来创建promise对象，但是也可以使用</span></strong><code data-lake-id=\"ue028aa8e\" id=\"ue028aa8e\"><strong><span data-lake-id=\"u75fe658b\" id=\"u75fe658b\">promise.resolve</span></strong></code><strong><span data-lake-id=\"u2158748b\" id=\"u2158748b\">和 </span></strong><code data-lake-id=\"u9a151832\" id=\"u9a151832\"><strong><span data-lake-id=\"u94622172\" id=\"u94622172\">promise.reject</span></strong></code><strong><span data-lake-id=\"u79483c08\" id=\"u79483c08\">这两个方法：</span></strong></p><ul list=\"u431184e0\"><li fid=\"u082436ca\" data-lake-id=\"2dab55c94ed0c54f5dabde824302bd08\" id=\"2dab55c94ed0c54f5dabde824302bd08\"><strong><span data-lake-id=\"ude98cccf\" id=\"ude98cccf\">Promise.resolve</span></strong></li></ul><p data-lake-id=\"852ef4ab35078c591283f950aee21041\" id=\"852ef4ab35078c591283f950aee21041\"><code data-lake-id=\"ua54eaada\" id=\"ua54eaada\"><span data-lake-id=\"ucebfb035\" id=\"ucebfb035\">Promise.resolve(value)</span></code><span data-lake-id=\"u02013e26\" id=\"u02013e26\">的返回值也是一个promise对象，可以对返回值进行.then调用，代码如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Promise.resolve(11).then(function(value)%7B%5Cn%20%20console.log(value)%3B%20%2F%2F%20%E6%89%93%E5%8D%B0%E5%87%BA11%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dwAFv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"9a86d8081bc97e3b6435ed8a282f4fc1\" id=\"9a86d8081bc97e3b6435ed8a282f4fc1\"><code data-lake-id=\"u0301cdcf\" id=\"u0301cdcf\"><span data-lake-id=\"u536cf29d\" id=\"u536cf29d\">resolve(11)</span></code><span data-lake-id=\"u05fa9c0f\" id=\"u05fa9c0f\">代码中，会让promise对象进入确定(</span><code data-lake-id=\"udeb12343\" id=\"udeb12343\"><span data-lake-id=\"u655839dd\" id=\"u655839dd\">resolve</span></code><span data-lake-id=\"u7bb5648f\" id=\"u7bb5648f\">状态)，并将参数</span><code data-lake-id=\"ud6999754\" id=\"ud6999754\"><span data-lake-id=\"uc3d5300e\" id=\"uc3d5300e\">11</span></code><span data-lake-id=\"ue54e10af\" id=\"ue54e10af\">传递给后面的</span><code data-lake-id=\"u3b82e9fe\" id=\"u3b82e9fe\"><span data-lake-id=\"u07e447bf\" id=\"u07e447bf\">then</span></code><span data-lake-id=\"u7f1f567e\" id=\"u7f1f567e\">所指定的</span><code data-lake-id=\"ua140ce12\" id=\"ua140ce12\"><span data-lake-id=\"u5af0b486\" id=\"u5af0b486\">onFulfilled</span></code><span data-lake-id=\"ue2993fd2\" id=\"ue2993fd2\"> 函数；</span></p><p data-lake-id=\"03e9662dea9783a63fb00ce01aa99fd3\" id=\"03e9662dea9783a63fb00ce01aa99fd3\"><br></p><p data-lake-id=\"2c5fad665b4ce08b73517c21ceebfbf6\" id=\"2c5fad665b4ce08b73517c21ceebfbf6\"><span data-lake-id=\"u6a6b081d\" id=\"u6a6b081d\">创建promise对象可以使用</span><code data-lake-id=\"u413eeb3b\" id=\"u413eeb3b\"><span data-lake-id=\"u6792278b\" id=\"u6792278b\">new Promise</span></code><span data-lake-id=\"u443b2fbd\" id=\"u443b2fbd\">的形式创建对象，也可以使用</span><code data-lake-id=\"uad5f5aa3\" id=\"uad5f5aa3\"><span data-lake-id=\"uc4cc38ca\" id=\"uc4cc38ca\">Promise.resolve(value)</span></code><span data-lake-id=\"u6d1c35c1\" id=\"u6d1c35c1\">的形式创建promise对象；</span></p><ul list=\"u9f65ebfe\"><li fid=\"u7bd78b24\" data-lake-id=\"310b859676dedab322da09c97576314a\" id=\"310b859676dedab322da09c97576314a\"><strong><span data-lake-id=\"u5229f082\" id=\"u5229f082\">Promise.reject</span></strong></li></ul><p data-lake-id=\"597bdb2699f81c7aaefe52d1b62a406d\" id=\"597bdb2699f81c7aaefe52d1b62a406d\"><code data-lake-id=\"u3eaf1f15\" id=\"u3eaf1f15\"><span data-lake-id=\"u14b8bcc5\" id=\"u14b8bcc5\">Promise.reject</span></code><span data-lake-id=\"u1ec90013\" id=\"u1ec90013\"> 也是</span><code data-lake-id=\"ud2d5d4b0\" id=\"ud2d5d4b0\"><span data-lake-id=\"u37ce7f3a\" id=\"u37ce7f3a\">new Promise</span></code><span data-lake-id=\"uf2a37e14\" id=\"uf2a37e14\">的快捷形式，也创建一个promise对象。代码</span><span data-lake-id=\"u57408414\" id=\"u57408414\">如下</span><span data-lake-id=\"u1834dbe2\" id=\"u1834dbe2\">：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Promise.reject(new%20Error(%E2%80%9C%E6%88%91%E9%94%99%E4%BA%86%EF%BC%8C%E8%AF%B7%E5%8E%9F%E8%B0%85%E4%BF%BA%EF%BC%81%EF%BC%81%E2%80%9D))%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22z0h6s%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"5b6296f25cc647a640246f266e54febc\" id=\"5b6296f25cc647a640246f266e54febc\"><span data-lake-id=\"u7aa4102d\" id=\"u7aa4102d\">就是下面的代码new Promise的简单形式：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22new%20Promise(function(resolve%2Creject)%7B%5Cn%20%20%20reject(new%20Error(%5C%22%E6%88%91%E9%94%99%E4%BA%86%EF%BC%8C%E8%AF%B7%E5%8E%9F%E8%B0%85%E4%BF%BA%EF%BC%81%EF%BC%81%5C%22))%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22nUjW7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"27e35782d9113a5036d8c7e1a041d082\" id=\"27e35782d9113a5036d8c7e1a041d082\"><span data-lake-id=\"uff4ee071\" id=\"uff4ee071\">下面是使用resolve方法和reject方法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20testPromise(ready)%20%7B%5Cn%20%20return%20new%20Promise(function(resolve%2Creject)%7B%5Cn%20%20%20%20if(ready)%20%7B%5Cn%20%20%20%20%20%20resolve(%5C%22hello%20world%5C%22)%3B%5Cn%20%20%20%20%7Delse%20%7B%5Cn%20%20%20%20%20%20reject(%5C%22No%20thanks%5C%22)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D)%3B%5Cn%7D%3B%5Cn%2F%2F%20%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8%5CntestPromise(true).then(function(msg)%7B%5Cn%20%20console.log(msg)%3B%5Cn%7D%2Cfunction(error)%7B%5Cn%20%20console.log(error)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MHPr8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b7643cb47618527d63884f499849d005\" id=\"b7643cb47618527d63884f499849d005\"><span data-lake-id=\"u822fb523\" id=\"u822fb523\">上面的代码的含义是给</span><code data-lake-id=\"u05886785\" id=\"u05886785\"><span data-lake-id=\"u47bd1913\" id=\"u47bd1913\">testPromise</span></code><span data-lake-id=\"ub7409d2b\" id=\"ub7409d2b\">方法传递一个参数，返回一个promise对象，如果为</span><code data-lake-id=\"u94e2129e\" id=\"u94e2129e\"><span data-lake-id=\"ue2b22f39\" id=\"ue2b22f39\">true</span></code><span data-lake-id=\"u7f08bb9a\" id=\"u7f08bb9a\">的话，那么调用promise对象中的</span><code data-lake-id=\"ued2fae36\" id=\"ued2fae36\"><span data-lake-id=\"ud139579f\" id=\"ud139579f\">resolve()</span></code><span data-lake-id=\"u78b228a0\" id=\"u78b228a0\">方法，并且把其中的参数传递给后面的</span><code data-lake-id=\"u00a730bd\" id=\"u00a730bd\"><span data-lake-id=\"u8f7b56f5\" id=\"u8f7b56f5\">then</span></code><span data-lake-id=\"ue297223f\" id=\"ue297223f\">第一个函数内，因此打印出 “</span><code data-lake-id=\"uff6b7a62\" id=\"uff6b7a62\"><span data-lake-id=\"u78765094\" id=\"u78765094\">hello world</span></code><span data-lake-id=\"u9f116d99\" id=\"u9f116d99\">”, 如果为</span><code data-lake-id=\"u9e1413e6\" id=\"u9e1413e6\"><span data-lake-id=\"ude8764a0\" id=\"ude8764a0\">false</span></code><span data-lake-id=\"u958e71f1\" id=\"u958e71f1\">的话，会调用promise对象中的</span><code data-lake-id=\"u0281cb68\" id=\"u0281cb68\"><span data-lake-id=\"ua6f0851b\" id=\"ua6f0851b\">reject()</span></code><span data-lake-id=\"u870c9eb9\" id=\"u870c9eb9\">方法，则会进入</span><code data-lake-id=\"ued6f4f44\" id=\"ued6f4f44\"><span data-lake-id=\"u203fab31\" id=\"u203fab31\">then</span></code><span data-lake-id=\"u6cc5d050\" id=\"u6cc5d050\">的第二个函数内，会打印</span><code data-lake-id=\"u62bd847a\" id=\"u62bd847a\"><span data-lake-id=\"udae33ba8\" id=\"udae33ba8\">No thanks</span></code><span data-lake-id=\"u1cc607a8\" id=\"u1cc607a8\">；</span></p><h4 data-lake-id=\"ba644638f60bd64d28328ac470b08cca\" id=\"ba644638f60bd64d28328ac470b08cca\"><span data-lake-id=\"u1df9b1d2\" id=\"u1df9b1d2\">（2）Promise方法</span></h4><p data-lake-id=\"71ec9741fd605485ef7a0eb89290f834\" id=\"71ec9741fd605485ef7a0eb89290f834\"><span data-lake-id=\"uf76be9ed\" id=\"uf76be9ed\">Promise有五个常用的方法：then()、catch()、all()、race()、finally。下面就来看一下这些方法。</span></p><ol list=\"u35e7932b\"><li fid=\"u5bf88043\" data-lake-id=\"ca14159af6f9a33eea3b75f29e96d3be\" id=\"ca14159af6f9a33eea3b75f29e96d3be\"><strong><span data-lake-id=\"ufc5cd605\" id=\"ufc5cd605\">then()</span></strong></li></ol><p data-lake-id=\"68b73f1a3eaa8f71d67952afd329f75a\" id=\"68b73f1a3eaa8f71d67952afd329f75a\"><span data-lake-id=\"udc634270\" id=\"udc634270\">当Promise执行的内容符合成功条件时，调用</span><code data-lake-id=\"uf7c8f7d6\" id=\"uf7c8f7d6\"><span data-lake-id=\"ua2bc4bfd\" id=\"ua2bc4bfd\">resolve</span></code><span data-lake-id=\"uf4210d07\" id=\"uf4210d07\">函数，失败就调用</span><code data-lake-id=\"ube7e21fc\" id=\"ube7e21fc\"><span data-lake-id=\"u6963871d\" id=\"u6963871d\">reject</span></code><span data-lake-id=\"u3e1e341a\" id=\"u3e1e341a\">函数。Promise创建完了，那该如何调用呢？</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22promise.then(function(value)%20%7B%5Cn%20%20%2F%2F%20success%5Cn%7D%2C%20function(error)%20%7B%5Cn%20%20%2F%2F%20failure%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22YfTRA%22%7D\"></card><p data-lake-id=\"81bb884baa20a5f1c2ccad981b64d353\" id=\"81bb884baa20a5f1c2ccad981b64d353\"><code data-lake-id=\"u6019bb6d\" id=\"u6019bb6d\"><span data-lake-id=\"u16a2f517\" id=\"u16a2f517\">then</span></code><span data-lake-id=\"u7373ba61\" id=\"u7373ba61\">方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为</span><code data-lake-id=\"ub8052f3a\" id=\"ub8052f3a\"><span data-lake-id=\"uee9397bd\" id=\"uee9397bd\">resolved</span></code><span data-lake-id=\"u20b9fb5a\" id=\"u20b9fb5a\">时调用，第二个回调函数是Promise对象的状态变为</span><code data-lake-id=\"u7e276440\" id=\"u7e276440\"><span data-lake-id=\"u74eb41e1\" id=\"u74eb41e1\">rejected</span></code><span data-lake-id=\"uf01eb66a\" id=\"uf01eb66a\">时调用。其中第二个参数可以省略。</span></p><p data-lake-id=\"b63712200bd16f244d7b4251e35376ae\" id=\"b63712200bd16f244d7b4251e35376ae\"><code data-lake-id=\"u2eea97cd\" id=\"u2eea97cd\"><span data-lake-id=\"uba5a4262\" id=\"uba5a4262\">then</span></code><span data-lake-id=\"u72fa65c3\" id=\"u72fa65c3\">方法返回的是一个新的Promise实例（不是原来那个Promise实例）。因此可以采用链式写法，即</span><code data-lake-id=\"uf09fa935\" id=\"uf09fa935\"><span data-lake-id=\"u2253202f\" id=\"u2253202f\">then</span></code><span data-lake-id=\"u65c670ca\" id=\"u65c670ca\">方法后面再调用另一个then方法。</span></p><p data-lake-id=\"d38c8fbf1000f16ce2d1830a787a2652\" id=\"d38c8fbf1000f16ce2d1830a787a2652\"><br></p><p data-lake-id=\"87fd9c166c11dc7fb595a69ec0f3b4df\" id=\"87fd9c166c11dc7fb595a69ec0f3b4df\"><span data-lake-id=\"ue9b5c4be\" id=\"ue9b5c4be\">当要写有顺序的异步事件时，需要串行时，可以这样写：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20promise%20%3D%20new%20Promise((resolve%2Creject)%3D%3E%7B%5Cn%20%20%20%20ajax('first').success(function(res)%7B%5Cn%20%20%20%20%20%20%20%20resolve(res)%3B%5Cn%20%20%20%20%7D)%5Cn%7D)%5Cnpromise.then(res%3D%3E%7B%5Cn%20%20%20%20return%20new%20Promise((resovle%2Creject)%3D%3E%7B%5Cn%20%20%20%20%20%20%20%20ajax('second').success(function(res)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20resolve(res)%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D)%5Cn%7D).then(res%3D%3E%7B%5Cn%20%20%20%20return%20new%20Promise((resovle%2Creject)%3D%3E%7B%5Cn%20%20%20%20%20%20%20%20ajax('second').success(function(res)%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20resolve(res)%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D)%5Cn%7D).then(res%3D%3E%7B%5Cn%20%20%20%20%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mU2yR%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"e93d79988b7f244eecfecf0028099a83\" id=\"e93d79988b7f244eecfecf0028099a83\"><span data-lake-id=\"u4c2a2317\" id=\"u4c2a2317\">那当要写的事件没有顺序或者关系时，还如何写呢？可以使用</span><code data-lake-id=\"u700e82ce\" id=\"u700e82ce\"><span data-lake-id=\"ubb9468f7\" id=\"ubb9468f7\">all</span></code><span data-lake-id=\"uae1dde78\" id=\"uae1dde78\"> 方法来解决。</span></p><p data-lake-id=\"eeec27b3a4f0b99d1f1e8d0c8c258163\" id=\"eeec27b3a4f0b99d1f1e8d0c8c258163\"><strong><span data-lake-id=\"u16a643e5\" id=\"u16a643e5\">2. catch()</span></strong></p><p data-lake-id=\"8f7aab9ea493f27e09e98a768674f5fe\" id=\"8f7aab9ea493f27e09e98a768674f5fe\"><span data-lake-id=\"ub01aecfb\" id=\"ub01aecfb\">Promise对象除了有then方法，还有一个catch方法，该方法相当于</span><code data-lake-id=\"u9414bb8e\" id=\"u9414bb8e\"><span data-lake-id=\"u5cdbdb04\" id=\"u5cdbdb04\">then</span></code><span data-lake-id=\"u26c19377\" id=\"u26c19377\">方法的第二个参数，指向</span><code data-lake-id=\"u57f1fd2c\" id=\"u57f1fd2c\"><span data-lake-id=\"ufaa6a698\" id=\"ufaa6a698\">reject</span></code><span data-lake-id=\"u91a037c4\" id=\"u91a037c4\">的回调函数。不过</span><code data-lake-id=\"u0a198577\" id=\"u0a198577\"><span data-lake-id=\"u601b4ec5\" id=\"u601b4ec5\">catch</span></code><span data-lake-id=\"u4c20ac9b\" id=\"u4c20ac9b\">方法还有一个作用，就是在执行</span><code data-lake-id=\"ufef417ae\" id=\"ufef417ae\"><span data-lake-id=\"u38517eaf\" id=\"u38517eaf\">resolve</span></code><span data-lake-id=\"u1b9ea8b3\" id=\"u1b9ea8b3\">回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入</span><code data-lake-id=\"u3245ee6c\" id=\"u3245ee6c\"><span data-lake-id=\"u972fe194\" id=\"u972fe194\">catch</span></code><span data-lake-id=\"uae4dbf56\" id=\"uae4dbf56\">方法中。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22p.then((data)%20%3D%3E%20%7B%5Cn%20%20%20%20%20console.log('resolved'%2Cdata)%3B%5Cn%7D%2C(err)%20%3D%3E%20%7B%5Cn%20%20%20%20%20console.log('rejected'%2Cerr)%3B%5Cn%20%20%20%20%20%7D%5Cn)%3B%20%5Cnp.then((data)%20%3D%3E%20%7B%5Cn%20%20%20%20console.log('resolved'%2Cdata)%3B%5Cn%7D).catch((err)%20%3D%3E%20%7B%5Cn%20%20%20%20console.log('rejected'%2Cerr)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dcwc5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"c1b6b4558964302d566b8f4397db8178\" id=\"c1b6b4558964302d566b8f4397db8178\"><strong><span data-lake-id=\"ua39caa8e\" id=\"ua39caa8e\">3. all()</span></strong></p><p data-lake-id=\"46cebe6a5c3485bd45321d2805e719f2\" id=\"46cebe6a5c3485bd45321d2805e719f2\"><code data-lake-id=\"u8e70b5e6\" id=\"u8e70b5e6\"><span data-lake-id=\"uc817da29\" id=\"uc817da29\">all</span></code><span data-lake-id=\"ub7100f13\" id=\"ub7100f13\">方法可以完成并行任务， 它接收一个数组，数组的每一项都是一个</span><code data-lake-id=\"u69b61e4d\" id=\"u69b61e4d\"><span data-lake-id=\"u207f787a\" id=\"u207f787a\">promise</span></code><span data-lake-id=\"u7405a2fd\" id=\"u7405a2fd\">对象。当数组中所有的</span><code data-lake-id=\"u39af4a48\" id=\"u39af4a48\"><span data-lake-id=\"u0ed30793\" id=\"u0ed30793\">promise</span></code><span data-lake-id=\"ube48a284\" id=\"ube48a284\">的状态都达到</span><code data-lake-id=\"ua354495f\" id=\"ua354495f\"><span data-lake-id=\"u042edb53\" id=\"u042edb53\">resolved</span></code><span data-lake-id=\"u9bee6b1b\" id=\"u9bee6b1b\">的时候，</span><code data-lake-id=\"u3b5d184c\" id=\"u3b5d184c\"><span data-lake-id=\"ub8a2bfdb\" id=\"ub8a2bfdb\">all</span></code><span data-lake-id=\"u0fa9a340\" id=\"u0fa9a340\">方法的状态就会变成</span><code data-lake-id=\"u0458d3b7\" id=\"u0458d3b7\"><span data-lake-id=\"u2f5d7fa7\" id=\"u2f5d7fa7\">resolved</span></code><span data-lake-id=\"ue3f44742\" id=\"ue3f44742\">，如果有一个状态变成了</span><code data-lake-id=\"ubf29fc8e\" id=\"ubf29fc8e\"><span data-lake-id=\"u1844d5b8\" id=\"u1844d5b8\">rejected</span></code><span data-lake-id=\"u5e12a6d2\" id=\"u5e12a6d2\">，那么</span><code data-lake-id=\"ud6974d78\" id=\"ud6974d78\"><span data-lake-id=\"ucc480c75\" id=\"ucc480c75\">all</span></code><span data-lake-id=\"u53a395fe\" id=\"u53a395fe\">方法的状态就会变成</span><code data-lake-id=\"ua5eac1aa\" id=\"ua5eac1aa\"><span data-lake-id=\"uea3ced06\" id=\"uea3ced06\">rejected</span></code><span data-lake-id=\"ucadb9de8\" id=\"ucadb9de8\">。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22javascript%5Cnlet%20promise1%20%3D%20new%20Promise((resolve%2Creject)%3D%3E%7B%5Cn%5CtsetTimeout(()%3D%3E%7B%5Cn%20%20%20%20%20%20%20resolve(1)%3B%5Cn%5Ct%7D%2C2000)%5Cn%7D)%3B%5Cnlet%20promise2%20%3D%20new%20Promise((resolve%2Creject)%3D%3E%7B%5Cn%5CtsetTimeout(()%3D%3E%7B%5Cn%20%20%20%20%20%20%20resolve(2)%3B%5Cn%5Ct%7D%2C1000)%5Cn%7D)%3B%5Cnlet%20promise3%20%3D%20new%20Promise((resolve%2Creject)%3D%3E%7B%5Cn%5CtsetTimeout(()%3D%3E%7B%5Cn%20%20%20%20%20%20%20resolve(3)%3B%5Cn%5Ct%7D%2C3000)%5Cn%7D)%3B%5CnPromise.all(%5Bpromise1%2Cpromise2%2Cpromise3%5D).then(res%3D%3E%7B%5Cn%20%20%20%20console.log(res)%3B%5Cn%20%20%20%20%2F%2F%E7%BB%93%E6%9E%9C%E4%B8%BA%EF%BC%9A%5B1%2C2%2C3%5D%20%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mzNFe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"c696f1058bf1c7eb7f359ca1da45b698\" id=\"c696f1058bf1c7eb7f359ca1da45b698\"><span data-lake-id=\"u7ff9db9f\" id=\"u7ff9db9f\">调用</span><code data-lake-id=\"u9cc5a987\" id=\"u9cc5a987\"><span data-lake-id=\"u5646ffed\" id=\"u5646ffed\">all</span></code><span data-lake-id=\"ubaa3f1ca\" id=\"ubaa3f1ca\">方法时的结果成功的时候是回调函数的参数也是一个数组，这个数组按顺序保存着每一个promise对象</span><code data-lake-id=\"uaec02de1\" id=\"uaec02de1\"><span data-lake-id=\"u7d78dc9a\" id=\"u7d78dc9a\">resolve</span></code><span data-lake-id=\"u424f0075\" id=\"u424f0075\">执行时的值。</span></p><p data-lake-id=\"18991651ab21ca326851cdcffd955423\" id=\"18991651ab21ca326851cdcffd955423\"><strong><span data-lake-id=\"u5015334b\" id=\"u5015334b\">（4）race()</span></strong></p><p data-lake-id=\"28e157495dc9336aedf436db20c942eb\" id=\"28e157495dc9336aedf436db20c942eb\"><code data-lake-id=\"ua8ff9728\" id=\"ua8ff9728\"><span data-lake-id=\"uea0ccae6\" id=\"uea0ccae6\">race</span></code><span data-lake-id=\"uc8da9067\" id=\"uc8da9067\">方法和</span><code data-lake-id=\"u5c2b4db6\" id=\"u5c2b4db6\"><span data-lake-id=\"uf31eabca\" id=\"uf31eabca\">all</span></code><span data-lake-id=\"u5f01ab92\" id=\"u5f01ab92\">一样，接受的参数是一个每项都是</span><code data-lake-id=\"u5f6e8c71\" id=\"u5f6e8c71\"><span data-lake-id=\"ufeda835c\" id=\"ufeda835c\">promise</span></code><span data-lake-id=\"u36815451\" id=\"u36815451\">的数组，但是与</span><code data-lake-id=\"u47afbdbd\" id=\"u47afbdbd\"><span data-lake-id=\"uda939888\" id=\"uda939888\">all</span></code><span data-lake-id=\"u087bb23d\" id=\"u087bb23d\">不同的是，当最先执行完的事件执行完之后，就直接返回该</span><code data-lake-id=\"u31006e0e\" id=\"u31006e0e\"><span data-lake-id=\"ueeabba56\" id=\"ueeabba56\">promise</span></code><span data-lake-id=\"u3cdcf152\" id=\"u3cdcf152\">对象的值。如果第一个</span><code data-lake-id=\"u9e788c5d\" id=\"u9e788c5d\"><span data-lake-id=\"ue9dd9fd0\" id=\"ue9dd9fd0\">promise</span></code><span data-lake-id=\"u9432b306\" id=\"u9432b306\">对象状态变成</span><code data-lake-id=\"u63233122\" id=\"u63233122\"><span data-lake-id=\"u8095cd34\" id=\"u8095cd34\">resolved</span></code><span data-lake-id=\"u4f6645dc\" id=\"u4f6645dc\">，那自身的状态变成了</span><code data-lake-id=\"u4605b16d\" id=\"u4605b16d\"><span data-lake-id=\"ud9af906d\" id=\"ud9af906d\">resolved</span></code><span data-lake-id=\"u4ac06b12\" id=\"u4ac06b12\">；反之第一个</span><code data-lake-id=\"u405defec\" id=\"u405defec\"><span data-lake-id=\"u6e927aa2\" id=\"u6e927aa2\">promise</span></code><span data-lake-id=\"ua25601ed\" id=\"ua25601ed\">变成</span><code data-lake-id=\"u49e967ca\" id=\"u49e967ca\"><span data-lake-id=\"u69f9575c\" id=\"u69f9575c\">rejected</span></code><span data-lake-id=\"u5ff85837\" id=\"u5ff85837\">，那自身状态就会变成</span><code data-lake-id=\"u364dea61\" id=\"u364dea61\"><span data-lake-id=\"u0a18f5ed\" id=\"u0a18f5ed\">rejected</span></code><span data-lake-id=\"u855707c8\" id=\"u855707c8\">。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20promise1%20%3D%20new%20Promise((resolve%2Creject)%3D%3E%7B%5Cn%5CtsetTimeout(()%3D%3E%7B%5Cn%20%20%20%20%20%20%20reject(1)%3B%5Cn%5Ct%7D%2C2000)%5Cn%7D)%3B%5Cnlet%20promise2%20%3D%20new%20Promise((resolve%2Creject)%3D%3E%7B%5Cn%5CtsetTimeout(()%3D%3E%7B%5Cn%20%20%20%20%20%20%20resolve(2)%3B%5Cn%5Ct%7D%2C1000)%5Cn%7D)%3B%5Cnlet%20promise3%20%3D%20new%20Promise((resolve%2Creject)%3D%3E%7B%5Cn%5CtsetTimeout(()%3D%3E%7B%5Cn%20%20%20%20%20%20%20resolve(3)%3B%5Cn%5Ct%7D%2C3000)%5Cn%7D)%3B%5CnPromise.race(%5Bpromise1%2Cpromise2%2Cpromise3%5D).then(res%3D%3E%7B%5Cn%5Ctconsole.log(res)%3B%5Cn%5Ct%2F%2F%E7%BB%93%E6%9E%9C%EF%BC%9A2%5Cn%7D%2Crej%3D%3E%7B%5Cn%20%20%20%20console.log(rej)%7D%3B%5Cn)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u5xmn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3ea5b0e799f0eb66d6566905737d4c5f\" id=\"3ea5b0e799f0eb66d6566905737d4c5f\"><span data-lake-id=\"ud75d62bf\" id=\"ud75d62bf\">那么</span><code data-lake-id=\"u6cb0dfff\" id=\"u6cb0dfff\"><span data-lake-id=\"u3f4f3de8\" id=\"u3f4f3de8\">race</span></code><span data-lake-id=\"ua39d6f97\" id=\"ua39d6f97\">方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Promise.race(%5Bpromise1%2CtimeOutPromise(5000)%5D).then(res%3D%3E%7B%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22r51GX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"dc7de2ff04f37bb9ac3af1d3c9b699ca\" id=\"dc7de2ff04f37bb9ac3af1d3c9b699ca\"><strong><span data-lake-id=\"u4c0a6f3f\" id=\"u4c0a6f3f\">5. finally()</span></strong></p><p data-lake-id=\"19e9e2c8889bfea6367ffac4793b4126\" id=\"19e9e2c8889bfea6367ffac4793b4126\"><code data-lake-id=\"u9cd0417e\" id=\"u9cd0417e\"><span data-lake-id=\"ue19444fa\" id=\"ue19444fa\">finally</span></code><span data-lake-id=\"ub12f6de2\" id=\"ub12f6de2\">方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22promise%5Cn.then(result%20%3D%3E%20%7B%C2%B7%C2%B7%C2%B7%7D)%5Cn.catch(error%20%3D%3E%20%7B%C2%B7%C2%B7%C2%B7%7D)%5Cn.finally(()%20%3D%3E%20%7B%C2%B7%C2%B7%C2%B7%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ig36d%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"9759ea775773a8212c454b48d6509400\" id=\"9759ea775773a8212c454b48d6509400\"><span data-lake-id=\"uedba9a7e\" id=\"uedba9a7e\">上面代码中，不管</span><code data-lake-id=\"ud19cb58f\" id=\"ud19cb58f\"><span data-lake-id=\"uda82c3de\" id=\"uda82c3de\">promise</span></code><span data-lake-id=\"ud2366849\" id=\"ud2366849\">最后的状态，在执行完</span><code data-lake-id=\"ude6bf8f1\" id=\"ude6bf8f1\"><span data-lake-id=\"uee908a51\" id=\"uee908a51\">then</span></code><span data-lake-id=\"u02b4b0b0\" id=\"u02b4b0b0\">或</span><code data-lake-id=\"u4d7d87fc\" id=\"u4d7d87fc\"><span data-lake-id=\"u7dd6912a\" id=\"u7dd6912a\">catch</span></code><span data-lake-id=\"uddf9016e\" id=\"uddf9016e\">指定的回调函数以后，都会执行</span><code data-lake-id=\"u76838ea8\" id=\"u76838ea8\"><span data-lake-id=\"ude569fd2\" id=\"ude569fd2\">finally</span></code><span data-lake-id=\"udc6ff951\" id=\"udc6ff951\">方法指定的回调函数。</span></p><p data-lake-id=\"68d07499e5243374dc484654d3fafd2c\" id=\"68d07499e5243374dc484654d3fafd2c\"><br></p><p data-lake-id=\"d759a90f764c97e939f6ea78f6298154\" id=\"d759a90f764c97e939f6ea78f6298154\"><span data-lake-id=\"u4ab7f357\" id=\"u4ab7f357\">下面是一个例子，服务器使用 Promise 处理请求，然后使用</span><code data-lake-id=\"u4080aec9\" id=\"u4080aec9\"><span data-lake-id=\"u0251cfea\" id=\"u0251cfea\">finally</span></code><span data-lake-id=\"ua64027e5\" id=\"ua64027e5\">方法关掉服务器。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22server.listen(port)%5Cn%20%20.then(function%20()%20%7B%5Cn%20%20%20%20%2F%2F%20...%5Cn%20%20%7D)%5Cn%20%20.finally(server.stop)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SwmbT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"5c5e5ef9f2d0551cd3bfe5259359978e\" id=\"5c5e5ef9f2d0551cd3bfe5259359978e\"><code data-lake-id=\"u102ab128\" id=\"u102ab128\"><span data-lake-id=\"uc0f89fc8\" id=\"uc0f89fc8\">finally</span></code><span data-lake-id=\"u840ebe6f\" id=\"u840ebe6f\">方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是</span><code data-lake-id=\"u76beb8bf\" id=\"u76beb8bf\"><span data-lake-id=\"u755c9ab9\" id=\"u755c9ab9\">fulfilled</span></code><span data-lake-id=\"ubeabf887\" id=\"ubeabf887\">还是</span><code data-lake-id=\"u10926aff\" id=\"u10926aff\"><span data-lake-id=\"u6658f043\" id=\"u6658f043\">rejected</span></code><span data-lake-id=\"u3e5f40fb\" id=\"u3e5f40fb\">。这表明，</span><code data-lake-id=\"u2f9ee94f\" id=\"u2f9ee94f\"><span data-lake-id=\"u459f877c\" id=\"u459f877c\">finally</span></code><span data-lake-id=\"ue70660b0\" id=\"ue70660b0\">方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。</span><code data-lake-id=\"u126b320f\" id=\"u126b320f\"><span data-lake-id=\"u383538c7\" id=\"u383538c7\">finally</span></code><span data-lake-id=\"u98639190\" id=\"u98639190\">本质上是</span><code data-lake-id=\"u28633162\" id=\"u28633162\"><span data-lake-id=\"u30fed18e\" id=\"u30fed18e\">then</span></code><span data-lake-id=\"ua20c037e\" id=\"ua20c037e\">方法的特例：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22promise%5Cn.finally(()%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E8%AF%AD%E5%8F%A5%5Cn%7D)%3B%5Cn%2F%2F%20%E7%AD%89%E5%90%8C%E4%BA%8E%5Cnpromise%5Cn.then(%5Cn%20%20result%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20%E8%AF%AD%E5%8F%A5%5Cn%20%20%20%20return%20result%3B%5Cn%20%20%7D%2C%5Cn%20%20error%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20%E8%AF%AD%E5%8F%A5%5Cn%20%20%20%20throw%20error%3B%5Cn%20%20%7D%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22JFrao%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3050d2a609a7728053976d1e5c21b791\" id=\"3050d2a609a7728053976d1e5c21b791\"><span data-lake-id=\"ube99e8b6\" id=\"ube99e8b6\">上面代码中，如果不使用</span><code data-lake-id=\"u453f056e\" id=\"u453f056e\"><span data-lake-id=\"uf23ece87\" id=\"uf23ece87\">finally</span></code><span data-lake-id=\"u2210162a\" id=\"u2210162a\">方法，同样的语句需要为成功和失败两种情况各写一次。有了</span><code data-lake-id=\"u5520f30e\" id=\"u5520f30e\"><span data-lake-id=\"u85e50862\" id=\"u85e50862\">finally</span></code><span data-lake-id=\"ud15eb359\" id=\"ud15eb359\">方法，则只需要写一次。</span></p><h3 data-lake-id=\"374910222dc7b1cba21f46af0eeb47a8\" id=\"374910222dc7b1cba21f46af0eeb47a8\"><span data-lake-id=\"u8e483847\" id=\"u8e483847\">5. Promise解决了什么问题</span></h3><p data-lake-id=\"a33ec38ac24fab428b4645b9484fce7a\" id=\"a33ec38ac24fab428b4645b9484fce7a\"><span data-lake-id=\"u9d5711a5\" id=\"u9d5711a5\">在工作中经常会碰到这样一个需求，比如我使用ajax发一个A请求后，成功后拿到数据，需要把数据传给B请求；那么需要如下编写代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20fs%20%3D%20require('fs')%5Cnfs.readFile('.%2Fa.txt'%2C'utf8'%2Cfunction(err%2Cdata)%7B%5Cn%20%20fs.readFile(data%2C'utf8'%2Cfunction(err%2Cdata)%7B%5Cn%20%20%20%20fs.readFile(data%2C'utf8'%2Cfunction(err%2Cdata)%7B%5Cn%20%20%20%20%20%20console.log(data)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D)%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aonXN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"56b51ae1b6f9666c14a064cfea4fdcfe\" id=\"56b51ae1b6f9666c14a064cfea4fdcfe\"><span data-lake-id=\"uf243c63c\" id=\"uf243c63c\">上面的代码有如下缺点：</span></p><ul list=\"uaa3b04df\"><li fid=\"u99a79c8e\" data-lake-id=\"cf6519a823bb53f9825ad7d1c0998775\" id=\"cf6519a823bb53f9825ad7d1c0998775\"><span data-lake-id=\"u8c2df8bb\" id=\"u8c2df8bb\">后一个请求需要依赖于前一个请求成功后，将数据往下传递，会导致多个ajax请求嵌套的情况，代码不够直观。</span></li><li fid=\"u99a79c8e\" data-lake-id=\"28d6e3ce3502dfa7676dcee08b834f8d\" id=\"28d6e3ce3502dfa7676dcee08b834f8d\"><span data-lake-id=\"u930226b0\" id=\"u930226b0\">如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作，这种情况下，那么也需要如上编写代码，导致代码不够直观。</span></li></ul><p data-lake-id=\"6eeb886079768d2468abc02308b6db3d\" id=\"6eeb886079768d2468abc02308b6db3d\"><br></p><p data-lake-id=\"63a845ab17bf0c82fc91f117a8893f3b\" id=\"63a845ab17bf0c82fc91f117a8893f3b\"><code data-lake-id=\"u8ad54475\" id=\"u8ad54475\"><span data-lake-id=\"u91758d9b\" id=\"u91758d9b\">Promise</span></code><span data-lake-id=\"ud8acc944\" id=\"ud8acc944\">出现之后，代码变成这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20fs%20%3D%20require('fs')%5Cnfunction%20read(url)%7B%5Cn%20%20return%20new%20Promise((resolve%2Creject)%3D%3E%7B%5Cn%20%20%20%20fs.readFile(url%2C'utf8'%2Cfunction(error%2Cdata)%7B%5Cn%20%20%20%20%20%20error%20%26%26%20reject(error)%5Cn%20%20%20%20%20%20resolve(data)%5Cn%20%20%20%20%7D)%5Cn%20%20%7D)%5Cn%7D%5Cnread('.%2Fa.txt').then(data%3D%3E%7B%5Cn%20%20return%20read(data)%20%5Cn%7D).then(data%3D%3E%7B%5Cn%20%20return%20read(data)%20%20%5Cn%7D).then(data%3D%3E%7B%5Cn%20%20console.log(data)%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22o8dNI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"92266cfa92487e5ae6bde89ecb227426\" id=\"92266cfa92487e5ae6bde89ecb227426\"><span data-lake-id=\"u1ba5d659\" id=\"u1ba5d659\">这样代码看起了就简洁了很多，解决了地狱回调的问题。</span></p><h3 data-lake-id=\"b879ec3363a87a7dbb933a053ed08707\" id=\"b879ec3363a87a7dbb933a053ed08707\"><span data-lake-id=\"u3e9ae678\" id=\"u3e9ae678\">6. Promise.all和Promise.race的区别的使用场景</span></h3><p data-lake-id=\"5d6c58c45919a1faaa85d86bd07c69b3\" id=\"5d6c58c45919a1faaa85d86bd07c69b3\"><strong><span data-lake-id=\"u0a63f7d5\" id=\"u0a63f7d5\">（1）</span></strong><strong><span data-lake-id=\"ube22200e\" id=\"ube22200e\">Promise.all</span></strong></p><p data-lake-id=\"aa25e1f9147ff2b38b6dbb666899dceb\" id=\"aa25e1f9147ff2b38b6dbb666899dceb\"><code data-lake-id=\"u64339acf\" id=\"u64339acf\"><span data-lake-id=\"ufaff7e4e\" id=\"ufaff7e4e\">Promise.all</span></code><span data-lake-id=\"uc26eaa2e\" id=\"uc26eaa2e\" class=\"lake-fontsize-12\" style=\"color: #212529\">可以将多个</span><code data-lake-id=\"u2a000176\" id=\"u2a000176\"><span data-lake-id=\"ue1ec4a4a\" id=\"ue1ec4a4a\">Promise</span></code><span data-lake-id=\"u5f6848d5\" id=\"u5f6848d5\" class=\"lake-fontsize-12\" style=\"color: #212529\">实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是</span><strong><span data-lake-id=\"u6ecb498a\" id=\"u6ecb498a\">一个结果数组</span></strong><span data-lake-id=\"u93db2bfe\" id=\"u93db2bfe\" class=\"lake-fontsize-12\" style=\"color: #212529\">，而失败的时候则返回</span><strong><span data-lake-id=\"u7a9b5e25\" id=\"u7a9b5e25\">最先被reject失败状态的值</span></strong><span data-lake-id=\"uce6ccf66\" id=\"uce6ccf66\" class=\"lake-fontsize-12\" style=\"color: #212529\">。</span></p><p data-lake-id=\"3fe570f25d8110a495e8bac2c1bd8bbf\" id=\"3fe570f25d8110a495e8bac2c1bd8bbf\"><br></p><p data-lake-id=\"320cf703a7b66b40223cdb2955e3b0b2\" id=\"320cf703a7b66b40223cdb2955e3b0b2\"><span data-lake-id=\"ucae59946\" id=\"ucae59946\" class=\"lake-fontsize-12\" style=\"color: #212529\">Promise.all中传入的是数组，返回的也是是数组，并且会将进行映射，传入的promise对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。</span></p><p data-lake-id=\"c44ea386fbad0df21ee7ce9be5b9081c\" id=\"c44ea386fbad0df21ee7ce9be5b9081c\"><br></p><p data-lake-id=\"1c465c7a2806e11c45b33ebe84d0deec\" id=\"1c465c7a2806e11c45b33ebe84d0deec\"><span data-lake-id=\"u8d850920\" id=\"u8d850920\" class=\"lake-fontsize-12\" style=\"color: #212529\">需要注意，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，这样</span><span data-lake-id=\"u7aa5f115\" id=\"u7aa5f115\" class=\"lake-fontsize-12\" style=\"color: #212529\">当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用</span><span data-lake-id=\"u4724d26d\" id=\"u4724d26d\">Promise.all来解决。</span></p><p data-lake-id=\"e501976736e639ee0e3a1a596ab791c2\" id=\"e501976736e639ee0e3a1a596ab791c2\"><strong><span data-lake-id=\"u3009c012\" id=\"u3009c012\">（2）Promise.race</span></strong></p><p data-lake-id=\"3263ab53c9022c36490b95b6e6f0d0bb\" id=\"3263ab53c9022c36490b95b6e6f0d0bb\"><span data-lake-id=\"u5f2e52a4\" id=\"u5f2e52a4\" class=\"lake-fontsize-12\" style=\"color: #212529\">顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。</span><span data-lake-id=\"u514d6a7b\" id=\"u514d6a7b\">当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Promise.race(%5Bpromise1%2CtimeOutPromise(5000)%5D).then(res%3D%3E%7B%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dNRgX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"6f30e28103d79eb1736b1050885241c4\" id=\"6f30e28103d79eb1736b1050885241c4\"><span data-lake-id=\"u93c2a11d\" id=\"u93c2a11d\">7. </span><span data-lake-id=\"u1d6a1d6f\" id=\"u1d6a1d6f\"> 对async/await 的理解</span></h3><p data-lake-id=\"99841ce211d701af0a8b4cc340078297\" id=\"99841ce211d701af0a8b4cc340078297\"><span data-lake-id=\"ue76e441d\" id=\"ue76e441d\">async/await其实是</span><code data-lake-id=\"u30ec4031\" id=\"u30ec4031\"><span data-lake-id=\"u15aa0e25\" id=\"u15aa0e25\">Generator</span></code><span data-lake-id=\"u9cbb0439\" id=\"u9cbb0439\"> 的语法糖，它能实现的效果都能用then链来实现，它是为优化then链而开发出来的。从字面上来看，async是“异步”的简写，await则为等待，所以很好理解async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定await只能出现在asnyc函数中，先来看看async函数返回了什么： </span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function%20testAsy()%7B%5Cn%20%20%20return%20'hello%20world'%3B%5Cn%7D%5Cnlet%20result%20%3D%20testAsy()%3B%20%5Cnconsole.log(result)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TWgHh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"def9fdf519537435b556597ee55e7fc5\" id=\"def9fdf519537435b556597ee55e7fc5\" style=\"text-align: left\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1605099411873-d2eac25a-5d8c-4586-bc36-769bce79010e.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A442%2C%22height%22%3A158%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A442%2C%22originHeight%22%3A158%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22stroke%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcfcfc%22%2C%22id%22%3A%22sXDga%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"5a1f0d4fdeb93c88e4d515b2495b9369\" id=\"5a1f0d4fdeb93c88e4d515b2495b9369\" style=\"text-align: left\"><span data-lake-id=\"u5c253c83\" id=\"u5c253c83\" style=\"color: #212529\">所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 </span><code data-lake-id=\"u2dd9f307\" id=\"u2dd9f307\"><span data-lake-id=\"u84799fa2\" id=\"u84799fa2\">return</span></code><span data-lake-id=\"ue8cf1646\" id=\"ue8cf1646\" style=\"color: #212529\"> 一个直接量，async 会把这个直接量通过 </span><code data-lake-id=\"u6bec78dc\" id=\"u6bec78dc\"><span data-lake-id=\"ud49eef28\" id=\"ud49eef28\">Promise.resolve()</span></code><span data-lake-id=\"u2031f838\" id=\"u2031f838\" style=\"color: #212529\"> 封装成 Promise 对象。</span></p><p data-lake-id=\"9a80cd1bf31420cc4c3675a06717c298\" id=\"9a80cd1bf31420cc4c3675a06717c298\" style=\"text-align: left\"><br></p><p data-lake-id=\"753ebdaac5ab96131affc522ac461494\" id=\"753ebdaac5ab96131affc522ac461494\" style=\"text-align: left\"><span data-lake-id=\"u3c6a3733\" id=\"u3c6a3733\" class=\"lake-fontsize-12\" style=\"color: #212529\">async 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：</span><code data-lake-id=\"u3f0d19d3\" id=\"u3f0d19d3\"><span data-lake-id=\"u9dae2c24\" id=\"u9dae2c24\">then()</span></code><span data-lake-id=\"ueed04cda\" id=\"ueed04cda\" class=\"lake-fontsize-12\" style=\"color: #212529\"> 链来处理这个 Promise 对象，就像这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function%20testAsy()%7B%5Cn%20%20%20return%20'hello%20world'%5Cn%7D%5Cnlet%20result%20%3D%20testAsy()%20%5Cnconsole.log(result)%5Cnresult.then(v%3D%3E%7B%5Cn%20%20%20%20console.log(v)%20%20%20%2F%2F%20hello%20world%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22d9nZ8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"76d530bd02b7fe74d6d931f1c257392d\" id=\"76d530bd02b7fe74d6d931f1c257392d\" style=\"text-align: left\"><span data-lake-id=\"uc7dce2d7\" id=\"uc7dce2d7\">那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 </span><code data-lake-id=\"u036027ff\" id=\"u036027ff\"><span data-lake-id=\"uedf437fb\" id=\"uedf437fb\">Promise.resolve(undefined)</span></code><span data-lake-id=\"u13de9025\" id=\"u13de9025\">。</span></p><p data-lake-id=\"ac8000467e02ad6ef80cf08bbc60edd7\" id=\"ac8000467e02ad6ef80cf08bbc60edd7\" style=\"text-align: left\"><br></p><p data-lake-id=\"379b96bb7bf1d6d70b51fdb27bca3358\" id=\"379b96bb7bf1d6d70b51fdb27bca3358\" style=\"text-align: left\"><span data-lake-id=\"u5387be29\" id=\"u5387be29\">联想一下 Promise 的特点——无等待，所以在没有 </span><code data-lake-id=\"ub40d0496\" id=\"ub40d0496\"><span data-lake-id=\"uf5b3d222\" id=\"uf5b3d222\">await</span></code><span data-lake-id=\"u972a702c\" id=\"u972a702c\"> 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。</span></p><p data-lake-id=\"ecdac7d0d93f789fe503aaa350bb2b92\" id=\"ecdac7d0d93f789fe503aaa350bb2b92\" style=\"text-align: left\"><br></p><p data-lake-id=\"d083fd9af789f9ac466263ff77fa63e4\" id=\"d083fd9af789f9ac466263ff77fa63e4\" style=\"text-align: left\"><strong><span data-lake-id=\"u5c7776ba\" id=\"u5c7776ba\">注意：</span></strong><code data-lake-id=\"u38d9fe75\" id=\"u38d9fe75\"><span data-lake-id=\"u0428c58e\" id=\"u0428c58e\">Promise.resolve(x)</span></code><span data-lake-id=\"u1a673d2d\" id=\"u1a673d2d\" class=\"lake-fontsize-12\" style=\"color: #212529\"> 可以看作是 </span><code data-lake-id=\"uc14b8b85\" id=\"uc14b8b85\"><span data-lake-id=\"u24f25e98\" id=\"u24f25e98\">new Promise(resolve =&gt; resolve(x))</span></code><span data-lake-id=\"u4f83562f\" id=\"u4f83562f\" class=\"lake-fontsize-12\" style=\"color: #212529\"> 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。</span></p><h3 data-lake-id=\"5f0a8c1bae7dfbf900c967ac24374760\" id=\"5f0a8c1bae7dfbf900c967ac24374760\"><span data-lake-id=\"u7a461e5a\" id=\"u7a461e5a\">8. await 到底在等啥？</span></h3><p data-lake-id=\"78a66c5c0edc68ea822d303405327401\" id=\"78a66c5c0edc68ea822d303405327401\" style=\"text-align: left\"><strong><span data-lake-id=\"u28d27585\" id=\"u28d27585\">await 在等待什么呢？</span></strong><span data-lake-id=\"ua34c2193\" id=\"ua34c2193\">一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</span></p><p data-lake-id=\"251f44951530a43df2d858853d2cfb2f\" id=\"251f44951530a43df2d858853d2cfb2f\" style=\"text-align: left\"><br></p><p data-lake-id=\"6b4111e08cba64f6e504af353544921e\" id=\"6b4111e08cba64f6e504af353544921e\" style=\"text-align: left\"><span data-lake-id=\"ubf8afb1d\" id=\"ubf8afb1d\">因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20getSomething()%20%7B%5Cn%20%20%20%20return%20%5C%22something%5C%22%3B%5Cn%7D%5Cnasync%20function%20testAsync()%20%7B%5Cn%20%20%20%20return%20Promise.resolve(%5C%22hello%20async%5C%22)%3B%5Cn%7D%5Cnasync%20function%20test()%20%7B%5Cn%20%20%20%20const%20v1%20%3D%20await%20getSomething()%3B%5Cn%20%20%20%20const%20v2%20%3D%20await%20testAsync()%3B%5Cn%20%20%20%20console.log(v1%2C%20v2)%3B%5Cn%7D%5Cntest()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22m4PbK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"94ccd26159197c2d71c1588870dc416c\" id=\"94ccd26159197c2d71c1588870dc416c\" style=\"text-align: left\"><span data-lake-id=\"u5219c1a9\" id=\"u5219c1a9\">await 表达式的运算结果取决于它等的是什么。</span></p><ul list=\"u4b3c4c25\"><li fid=\"u44f39877\" data-lake-id=\"f59210d3da42b76e85c37f676a4e91db\" id=\"f59210d3da42b76e85c37f676a4e91db\"><span data-lake-id=\"ub797e659\" id=\"ub797e659\">如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</span></li><li fid=\"u44f39877\" data-lake-id=\"6b5a62d94b68e227310f7b55050611e7\" id=\"6b5a62d94b68e227310f7b55050611e7\"><span data-lake-id=\"ucf9a417b\" id=\"ucf9a417b\">如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</span></li></ul><p data-lake-id=\"d13ff4a6647be90483fdc0f7e559e34d\" id=\"d13ff4a6647be90483fdc0f7e559e34d\" style=\"text-align: left\"><br></p><p data-lake-id=\"2bc3af758a3f17b31d12b4fab2fd02b4\" id=\"2bc3af758a3f17b31d12b4fab2fd02b4\" style=\"text-align: left\"><span data-lake-id=\"u46ea8ed8\" id=\"u46ea8ed8\">来看一个例子：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20testAsy(x)%7B%5Cn%20%20%20return%20new%20Promise(resolve%3D%3E%7BsetTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20resolve(x)%3B%5Cn%20%20%20%20%20%7D%2C%203000)%5Cn%20%20%20%20%7D%5Cn%20%20%20)%5Cn%7D%5Cnasync%20function%20testAwt()%7B%20%20%20%20%5Cn%20%20let%20result%20%3D%20%20await%20testAsy('hello%20world')%3B%5Cn%20%20console.log(result)%3B%20%20%20%20%2F%2F%203%E7%A7%92%E9%92%9F%E4%B9%8B%E5%90%8E%E5%87%BA%E7%8E%B0hello%20world%5Cn%20%20console.log('cuger')%20%20%20%2F%2F%203%E7%A7%92%E9%92%9F%E4%B9%8B%E5%90%8E%E5%87%BA%E7%8E%B0cug%5Cn%7D%5CntestAwt()%3B%5Cnconsole.log('cug')%20%20%2F%2F%E7%AB%8B%E5%8D%B3%E8%BE%93%E5%87%BAcug%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GrVmz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"be0c90fc39c6197247485cb9c86dfe96\" id=\"be0c90fc39c6197247485cb9c86dfe96\" style=\"text-align: left\"><span data-lake-id=\"uf33d3f0c\" id=\"uf33d3f0c\">这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。await暂停当前async的执行，所以'cug''最先输出，hello world'和‘cuger’是3秒钟后同时出现的。</span></p><h3 data-lake-id=\"55243647213e0d880580e69a40536be0\" id=\"55243647213e0d880580e69a40536be0\"><span data-lake-id=\"ue0933b70\" id=\"ue0933b70\">9. </span><span data-lake-id=\"uf933075a\" id=\"uf933075a\"> async/await</span><span data-lake-id=\"u18cc8f9d\" id=\"u18cc8f9d\">的优势</span></h3><p data-lake-id=\"51a9eeb5b2c8730d08d183ccf658714a\" id=\"51a9eeb5b2c8730d08d183ccf658714a\" style=\"text-align: left\"><span data-lake-id=\"ube2ce535\" id=\"ube2ce535\">单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。</span></p><p data-lake-id=\"dbd702fba9ccd1d17b77b8a837b337a1\" id=\"dbd702fba9ccd1d17b77b8a837b337a1\" style=\"text-align: left\"><br></p><p data-lake-id=\"8ce04feb66690801972c67e0afb8ccae\" id=\"8ce04feb66690801972c67e0afb8ccae\" style=\"text-align: left\"><span data-lake-id=\"u6a70a313\" id=\"u6a70a313\">假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 </span><code data-lake-id=\"u0d86fa1d\" id=\"u0d86fa1d\"><span data-lake-id=\"u447e0931\" id=\"u447e0931\">setTimeout</span></code><span data-lake-id=\"u9ecef8f8\" id=\"u9ecef8f8\"> 来模拟异步操作：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F**%5Cn%20*%20%E4%BC%A0%E5%85%A5%E5%8F%82%E6%95%B0%20n%EF%BC%8C%E8%A1%A8%E7%A4%BA%E8%BF%99%E4%B8%AA%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4%EF%BC%88%E6%AF%AB%E7%A7%92%EF%BC%89%5Cn%20*%20%E6%89%A7%E8%A1%8C%E7%9A%84%E7%BB%93%E6%9E%9C%E6%98%AF%20n%20%2B%20200%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%80%BC%E5%B0%86%E7%94%A8%E4%BA%8E%E4%B8%8B%E4%B8%80%E6%AD%A5%E9%AA%A4%5Cn%20*%2F%5Cnfunction%20takeLongTime(n)%20%7B%5Cn%20%20%20%20return%20new%20Promise(resolve%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20setTimeout(()%20%3D%3E%20resolve(n%20%2B%20200)%2C%20n)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%7D%5Cnfunction%20step1(n)%20%7B%5Cn%20%20%20%20console.log(%60step1%20with%20%24%7Bn%7D%60)%3B%5Cn%20%20%20%20return%20takeLongTime(n)%3B%5Cn%7D%5Cnfunction%20step2(n)%20%7B%5Cn%20%20%20%20console.log(%60step2%20with%20%24%7Bn%7D%60)%3B%5Cn%20%20%20%20return%20takeLongTime(n)%3B%5Cn%7D%5Cnfunction%20step3(n)%20%7B%5Cn%20%20%20%20console.log(%60step3%20with%20%24%7Bn%7D%60)%3B%5Cn%20%20%20%20return%20takeLongTime(n)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22iG74k%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"c411e0fb8ccbb7edb1ba084c822b10c2\" id=\"c411e0fb8ccbb7edb1ba084c822b10c2\" style=\"text-align: left\"><span data-lake-id=\"ubc78834d\" id=\"ubc78834d\">现在用 Promise 方式来实现这三个步骤的处理：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20doIt()%20%7B%5Cn%20%20%20%20console.time(%5C%22doIt%5C%22)%3B%5Cn%20%20%20%20const%20time1%20%3D%20300%3B%5Cn%20%20%20%20step1(time1)%5Cn%20%20%20%20%20%20%20%20.then(time2%20%3D%3E%20step2(time2))%5Cn%20%20%20%20%20%20%20%20.then(time3%20%3D%3E%20step3(time3))%5Cn%20%20%20%20%20%20%20%20.then(result%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20console.log(%60result%20is%20%24%7Bresult%7D%60)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20console.timeEnd(%5C%22doIt%5C%22)%3B%5Cn%20%20%20%20%20%20%20%20%7D)%3B%5Cn%7D%5CndoIt()%3B%5Cn%2F%2F%20c%3A%5C%5Cvar%5C%5Ctest%3Enode%20--harmony_async_await%20.%5Cn%2F%2F%20step1%20with%20300%5Cn%2F%2F%20step2%20with%20500%5Cn%2F%2F%20step3%20with%20700%5Cn%2F%2F%20result%20is%20900%5Cn%2F%2F%20doIt%3A%201507.251ms%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FitLb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"1a5aaa477bf363666253a1ca8a6721f9\" id=\"1a5aaa477bf363666253a1ca8a6721f9\" style=\"text-align: left\"><span data-lake-id=\"u5f5cf6e6\" id=\"u5f5cf6e6\">输出结果 </span><code data-lake-id=\"u569605b7\" id=\"u569605b7\"><span data-lake-id=\"u05cdfe2f\" id=\"u05cdfe2f\">result</span></code><span data-lake-id=\"uf6800969\" id=\"uf6800969\"> 是 </span><code data-lake-id=\"u83ef027f\" id=\"u83ef027f\"><span data-lake-id=\"u4a90aea6\" id=\"u4a90aea6\">step3()</span></code><span data-lake-id=\"ud84bd4cc\" id=\"ud84bd4cc\"> 的参数 </span><code data-lake-id=\"ue421dada\" id=\"ue421dada\"><span data-lake-id=\"u1022f4a7\" id=\"u1022f4a7\">700 + 200</span></code><span data-lake-id=\"u0abc5d47\" id=\"u0abc5d47\"> = </span><code data-lake-id=\"u09e40b91\" id=\"u09e40b91\"><span data-lake-id=\"u07d3594a\" id=\"u07d3594a\">900</span></code><span data-lake-id=\"u88907723\" id=\"u88907723\">。</span><code data-lake-id=\"u29cc0e02\" id=\"u29cc0e02\"><span data-lake-id=\"uc1e9132a\" id=\"uc1e9132a\">doIt()</span></code><span data-lake-id=\"uf3e4f0c9\" id=\"uf3e4f0c9\"> 顺序执行了三个步骤，一共用了 </span><code data-lake-id=\"u4f185637\" id=\"u4f185637\"><span data-lake-id=\"ufe0d1859\" id=\"ufe0d1859\">300 + 500 + 700 = 1500</span></code><span data-lake-id=\"ued148b6f\" id=\"ued148b6f\"> 毫秒，和 </span><code data-lake-id=\"udc1c2f42\" id=\"udc1c2f42\"><span data-lake-id=\"u93e70931\" id=\"u93e70931\">console.time()/console.timeEnd()</span></code><span data-lake-id=\"u11219462\" id=\"u11219462\"> 计算的结果一致。</span></p><p data-lake-id=\"2685b72df53a79eb5b6a05aae01a9c97\" id=\"2685b72df53a79eb5b6a05aae01a9c97\" style=\"text-align: left\"><br></p><p data-lake-id=\"0dd924fabb6c1c34f4fde55fd9bcc709\" id=\"0dd924fabb6c1c34f4fde55fd9bcc709\" style=\"text-align: left\"><span data-lake-id=\"u09f6ed5e\" id=\"u09f6ed5e\">如果用 async/await 来实现呢，会是这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function%20doIt()%20%7B%5Cn%20%20%20%20console.time(%5C%22doIt%5C%22)%3B%5Cn%20%20%20%20const%20time1%20%3D%20300%3B%5Cn%20%20%20%20const%20time2%20%3D%20await%20step1(time1)%3B%5Cn%20%20%20%20const%20time3%20%3D%20await%20step2(time2)%3B%5Cn%20%20%20%20const%20result%20%3D%20await%20step3(time3)%3B%5Cn%20%20%20%20console.log(%60result%20is%20%24%7Bresult%7D%60)%3B%5Cn%20%20%20%20console.timeEnd(%5C%22doIt%5C%22)%3B%5Cn%7D%5CndoIt()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OhkZY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"8703581e724f8e7545aef289dd7aacf6\" id=\"8703581e724f8e7545aef289dd7aacf6\" style=\"text-align: left\"><span data-lake-id=\"u8fe21a63\" id=\"u8fe21a63\">结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</span></p><h3 data-lake-id=\"58c118f9bf5cfd4cb322da8cdae17ec7\" id=\"58c118f9bf5cfd4cb322da8cdae17ec7\"><span data-lake-id=\"u3d7b2abd\" id=\"u3d7b2abd\">10. async/await对比Promise的优势</span></h3><ul list=\"u1fbc9b00\"><li fid=\"u0ce6224e\" data-lake-id=\"1e10b9e93f1b8d914b5e67cfe988862f\" id=\"1e10b9e93f1b8d914b5e67cfe988862f\"><span data-lake-id=\"u178c85de\" id=\"u178c85de\" style=\"color: #000000\">代码读起来更加同步，</span><span data-lake-id=\"u4ffc2863\" id=\"u4ffc2863\" style=\"color: #000000\">Promise</span><span data-lake-id=\"ue5a223ad\" id=\"ue5a223ad\" style=\"color: #000000\">虽然摆脱了回调地狱，但是</span><span data-lake-id=\"u92dc04eb\" id=\"u92dc04eb\" style=\"color: #000000\">then</span><span data-lake-id=\"uab2b557e\" id=\"uab2b557e\" style=\"color: #000000\">的链式调⽤也会带来额外的阅读负担 </span></li><li fid=\"u0ce6224e\" data-lake-id=\"fc1764a11625ed056855b8f25ab4a1ab\" id=\"fc1764a11625ed056855b8f25ab4a1ab\"><span data-lake-id=\"ud4da8554\" id=\"ud4da8554\" style=\"color: #000000\">Promise</span><span data-lake-id=\"u6d82ffc7\" id=\"u6d82ffc7\" style=\"color: #000000\">传递中间值⾮常麻烦，⽽</span><span data-lake-id=\"u04b20122\" id=\"u04b20122\" style=\"color: #000000\">async/await</span><span data-lake-id=\"u5c30c798\" id=\"u5c30c798\" style=\"color: #000000\">⼏乎是同步的写法，⾮常优雅 </span></li><li fid=\"u0ce6224e\" data-lake-id=\"523f3e6bfa1bd2a09ca4925275331870\" id=\"523f3e6bfa1bd2a09ca4925275331870\"><span data-lake-id=\"ue6c34377\" id=\"ue6c34377\" style=\"color: #000000\">错误处理友好，</span><span data-lake-id=\"ubb4bb1f0\" id=\"ubb4bb1f0\" style=\"color: #000000\">async/await</span><span data-lake-id=\"u5907b816\" id=\"u5907b816\" style=\"color: #000000\">可以⽤成熟的</span><span data-lake-id=\"u659742b4\" id=\"u659742b4\" style=\"color: #000000\">try/catch</span><span data-lake-id=\"u4d8ce464\" id=\"u4d8ce464\" style=\"color: #000000\">，</span><span data-lake-id=\"u7f2a9c36\" id=\"u7f2a9c36\" style=\"color: #000000\">Promise</span><span data-lake-id=\"u4eeb64d4\" id=\"u4eeb64d4\" style=\"color: #000000\">的错误捕获⾮常冗余 </span></li><li fid=\"u0ce6224e\" data-lake-id=\"37836854a266cdddf0682c9af2cb5b1d\" id=\"37836854a266cdddf0682c9af2cb5b1d\"><span data-lake-id=\"u25b9f6c4\" id=\"u25b9f6c4\" style=\"color: #000000\">调试友好，</span><span data-lake-id=\"u5a4e977b\" id=\"u5a4e977b\" style=\"color: #000000\">Promise的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个</span><span data-lake-id=\"u1ca96bdd\" id=\"u1ca96bdd\" style=\"color: #000000\">.then</span><span data-lake-id=\"u4c49df9b\" id=\"u4c49df9b\" style=\"color: #000000\">代码块中使⽤调试器的步进</span><span data-lake-id=\"u8eebf46e\" id=\"u8eebf46e\" style=\"color: #000000\">(step-over)</span><span data-lake-id=\"u0cb5f405\" id=\"u0cb5f405\" style=\"color: #000000\">功能，调试器并不会进⼊后续的</span><span data-lake-id=\"ub1d7754b\" id=\"ub1d7754b\" style=\"color: #000000\">.then代码块，因为调试器只能跟踪同步代码的每⼀步。 </span></li></ul><h3 data-lake-id=\"dbff1352c313516d453bf6e49145ad8b\" id=\"dbff1352c313516d453bf6e49145ad8b\"><span data-lake-id=\"ud03940f9\" id=\"ud03940f9\">11. async/await 如何捕获异常</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22async%20function%20fn()%7B%5Cn%20%20%20%20try%7B%5Cn%20%20%20%20%20%20%20%20let%20a%20%3D%20await%20Promise.reject('error')%5Cn%20%20%20%20%7Dcatch(error)%7B%5Cn%20%20%20%20%20%20%20%20console.log(error)%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22pkMhC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"69b0dd826c4065186217ba7272860093\" id=\"69b0dd826c4065186217ba7272860093\"><span data-lake-id=\"ub817cffc\" id=\"ub817cffc\">八、面向对象</span></h2><h3 data-lake-id=\"6ac2dfbee9313124f2ee3f3c674f6bdf\" id=\"6ac2dfbee9313124f2ee3f3c674f6bdf\"><span data-lake-id=\"u246e72e7\" id=\"u246e72e7\" style=\"color: #262626; background-color: transparent\">1. 对象创建的方式有哪些？</span></h3><p data-lake-id=\"9adc2f30851396cf1f29e306955198ac\" id=\"9adc2f30851396cf1f29e306955198ac\"><span data-lake-id=\"u26adef48\" id=\"u26adef48\">一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是可以使用函数来进行模拟，从而产生出可复用的对象创建方式，常见的有以下几种：</span></p><p data-lake-id=\"e0904603616dad55ed9c828d33272ba7\" id=\"e0904603616dad55ed9c828d33272ba7\"><span data-lake-id=\"ub0828d81\" id=\"ub0828d81\">（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。</span></p><p data-lake-id=\"0448877819d2e3873e11141869bf2f60\" id=\"0448877819d2e3873e11141869bf2f60\"><br></p><p data-lake-id=\"6d1ada8ca2375372f64835d587717c35\" id=\"6d1ada8ca2375372f64835d587717c35\"><span data-lake-id=\"u4d469f96\" id=\"u4d469f96\">（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。</span></p><p data-lake-id=\"92688546bd84e95e0af6ef23e6af8c87\" id=\"92688546bd84e95e0af6ef23e6af8c87\"><br></p><p data-lake-id=\"9e4f1bb9a807d8e497e29cdedf2ecbd6\" id=\"9e4f1bb9a807d8e497e29cdedf2ecbd6\"><span data-lake-id=\"u0075a88b\" id=\"u0075a88b\">（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。</span></p><p data-lake-id=\"2bba0c8de4655ee2e14fab69d62dd41f\" id=\"2bba0c8de4655ee2e14fab69d62dd41f\"><br></p><p data-lake-id=\"44187793ecaa83b5283003e6d598c023\" id=\"44187793ecaa83b5283003e6d598c023\"><span data-lake-id=\"uab2c1721\" id=\"uab2c1721\">（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。</span></p><p data-lake-id=\"7f6492e2da911eda74f7afd4512cc71e\" id=\"7f6492e2da911eda74f7afd4512cc71e\"><br></p><p data-lake-id=\"670b03fbec6fbc30eabf9d6871d6ab4b\" id=\"670b03fbec6fbc30eabf9d6871d6ab4b\"><span data-lake-id=\"u5b4f3d81\" id=\"u5b4f3d81\">（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。</span></p><p data-lake-id=\"f01382836ff26534b754b331f31eb6f1\" id=\"f01382836ff26534b754b331f31eb6f1\"><br></p><p data-lake-id=\"d3be69089f05c401e056257edbd4d3db\" id=\"d3be69089f05c401e056257edbd4d3db\"><span data-lake-id=\"u03c97012\" id=\"u03c97012\">（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。</span></p><h3 data-lake-id=\"d5501ff77d252dbaf68e4be1d38e1289\" id=\"d5501ff77d252dbaf68e4be1d38e1289\"><span data-lake-id=\"ua96c2310\" id=\"ua96c2310\">2. 对象继承的方式有哪些？</span></h3><p data-lake-id=\"e7b12b755aa596042526bfcb602c3f3c\" id=\"e7b12b755aa596042526bfcb602c3f3c\"><span data-lake-id=\"u91ce0012\" id=\"u91ce0012\">（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。</span></p><p data-lake-id=\"821e1e85fcc3b8a8605c555d10cdb54d\" id=\"821e1e85fcc3b8a8605c555d10cdb54d\"><br></p><p data-lake-id=\"4bd0c0edd48de7b50de75840e29af243\" id=\"4bd0c0edd48de7b50de75840e29af243\"><span data-lake-id=\"u0ac953d4\" id=\"u0ac953d4\">（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。</span></p><p data-lake-id=\"e46f8e669b7d31af70d4a4fb81a71d02\" id=\"e46f8e669b7d31af70d4a4fb81a71d02\"><br></p><p data-lake-id=\"dca63b85fb048a9fe1a30b59ff2a76be\" id=\"dca63b85fb048a9fe1a30b59ff2a76be\"><span data-lake-id=\"uf639ca6d\" id=\"uf639ca6d\">（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。</span></p><p data-lake-id=\"49f49d081e88e855cb2f56d8fb7de6af\" id=\"49f49d081e88e855cb2f56d8fb7de6af\"><br></p><p data-lake-id=\"f6b4b885055eed3bd8add99284f0bf6a\" id=\"f6b4b885055eed3bd8add99284f0bf6a\"><span data-lake-id=\"ue9465d6b\" id=\"ue9465d6b\">（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。</span></p><p data-lake-id=\"8f67e4bb5b671ea869fef26f06ee403b\" id=\"8f67e4bb5b671ea869fef26f06ee403b\"><br></p><p data-lake-id=\"87b30f0e2e3cb1cfd8b2b33defd3ad6b\" id=\"87b30f0e2e3cb1cfd8b2b33defd3ad6b\"><span data-lake-id=\"u29eb7ce3\" id=\"u29eb7ce3\">（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。</span></p><p data-lake-id=\"345e6004e9b363c5f9e96062886a3e56\" id=\"345e6004e9b363c5f9e96062886a3e56\"><br></p><p data-lake-id=\"11292f6a1f5f51e9a7188ef653eff9b6\" id=\"11292f6a1f5f51e9a7188ef653eff9b6\"><span data-lake-id=\"u45ce03dd\" id=\"u45ce03dd\">（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。</span></p><h2 data-lake-id=\"968c05f4053a48772386de85db930270\" id=\"968c05f4053a48772386de85db930270\"><span data-lake-id=\"u88d037c7\" id=\"u88d037c7\">九、垃圾回收与内存泄漏</span></h2><h3 data-lake-id=\"edbc6ae5d0930d1b2047b644faf33356\" id=\"edbc6ae5d0930d1b2047b644faf33356\"><span data-lake-id=\"u04e1f95d\" id=\"u04e1f95d\">1. 浏览器的垃圾回收机制</span></h3><h4 data-lake-id=\"977f451c8a145133c5f12e362a8b7399\" id=\"977f451c8a145133c5f12e362a8b7399\"><span data-lake-id=\"ub6cb2d16\" id=\"ub6cb2d16\">（1）垃圾回收的概念</span></h4><p data-lake-id=\"b9b98fe4a83163403939912a865de19f\" id=\"b9b98fe4a83163403939912a865de19f\"><strong><span data-lake-id=\"u8ecf212b\" id=\"u8ecf212b\">垃圾回收</span></strong><span data-lake-id=\"ubecf4399\" id=\"ubecf4399\">：JavaScript代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。</span></p><p data-lake-id=\"483f1dd2a3568410ecff5221251c8122\" id=\"483f1dd2a3568410ecff5221251c8122\"><br></p><p data-lake-id=\"dc1a6f3b28e552d529ad39905cec9142\" id=\"dc1a6f3b28e552d529ad39905cec9142\"><strong><span data-lake-id=\"u2792773d\" id=\"u2792773d\">回收机制</span></strong><span data-lake-id=\"ue9b0a4c3\" id=\"ue9b0a4c3\">：</span></p><ul list=\"u2b5e2952\"><li fid=\"u582551b8\" data-lake-id=\"b03fd83fcde27fcc7fa4f7c37aa7514a\" id=\"b03fd83fcde27fcc7fa4f7c37aa7514a\"><span data-lake-id=\"u4130a61c\" id=\"u4130a61c\">Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。</span></li><li fid=\"u582551b8\" data-lake-id=\"01e17c6141bd6391c00c6eb09a631bdb\" id=\"01e17c6141bd6391c00c6eb09a631bdb\"><span data-lake-id=\"u292ab93e\" id=\"u292ab93e\">JavaScript中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。</span></li><li fid=\"u582551b8\" data-lake-id=\"01e5b92256cb27c62359caa14d6cc229\" id=\"01e5b92256cb27c62359caa14d6cc229\"><span data-lake-id=\"ue59ae346\" id=\"ue59ae346\">不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。</span></li></ul><h4 data-lake-id=\"1fc43a0681131ffebbb5c5379b3dde3d\" id=\"1fc43a0681131ffebbb5c5379b3dde3d\"><span data-lake-id=\"u52178381\" id=\"u52178381\">（2）垃圾回收的方式</span></h4><p data-lake-id=\"b20f6c01b08f871527b73c60e1595440\" id=\"b20f6c01b08f871527b73c60e1595440\"><span data-lake-id=\"u98e44f02\" id=\"u98e44f02\">浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。</span></p><p data-lake-id=\"eaa00a06e6a827a71eba2e037b9e0458\" id=\"eaa00a06e6a827a71eba2e037b9e0458\"><strong><span data-lake-id=\"uac858bb7\" id=\"uac858bb7\">1）标记清除</span></strong></p><ul list=\"ubc110a58\"><li fid=\"ud54039ee\" data-lake-id=\"aa1f64eba8f2ebdd84b58a9df7da32c2\" id=\"aa1f64eba8f2ebdd84b58a9df7da32c2\"><span data-lake-id=\"uc0895b1c\" id=\"uc0895b1c\">标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量“进入环境”，被标记为“进入环境”的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为“离开环境”，被标记为“离开环境”的变量会被内存释放。</span></li><li fid=\"ud54039ee\" data-lake-id=\"fd7e0adb152fb6ce90b8d1439a2bdcdf\" id=\"fd7e0adb152fb6ce90b8d1439a2bdcdf\"><span data-lake-id=\"u63a28acc\" id=\"u63a28acc\">垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</span></li></ul><p data-lake-id=\"18589c84bf4b3e4902407a45cd51be37\" id=\"18589c84bf4b3e4902407a45cd51be37\"><strong><span data-lake-id=\"u5bb3ce21\" id=\"u5bb3ce21\">2）引用计数</span></strong></p><ul list=\"u069673b2\"><li fid=\"u37af11ae\" data-lake-id=\"bdfa56438a43bc470750ba08641a40f2\" id=\"bdfa56438a43bc470750ba08641a40f2\"><span data-lake-id=\"uda52e074\" id=\"uda52e074\">另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变为0时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。</span></li><li fid=\"u37af11ae\" data-lake-id=\"70b37032f9fc33c63b96b6dbf5d60300\" id=\"70b37032f9fc33c63b96b6dbf5d60300\"><span data-lake-id=\"u32959c83\" id=\"u32959c83\">这种方法会引起</span><strong><span data-lake-id=\"u62cd5a6e\" id=\"u62cd5a6e\">循环引用</span></strong><span data-lake-id=\"ua49e219d\" id=\"ua49e219d\">的问题：例如：</span><code data-lake-id=\"uf5a82d74\" id=\"uf5a82d74\"><span data-lake-id=\"u6666df03\" id=\"u6666df03\"> obj1</span></code><span data-lake-id=\"uc98384bd\" id=\"uc98384bd\">和</span><code data-lake-id=\"u5d2bc163\" id=\"u5d2bc163\"><span data-lake-id=\"u57ddfe14\" id=\"u57ddfe14\">obj2</span></code><span data-lake-id=\"uc5442fbb\" id=\"uc5442fbb\">通过属性进行相互引用，两个对象的引用次数都是2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，</span><code data-lake-id=\"u477fe592\" id=\"u477fe592\"><span data-lake-id=\"ud3c19809\" id=\"ud3c19809\">obj1</span></code><span data-lake-id=\"u45b59350\" id=\"u45b59350\">和</span><code data-lake-id=\"u8c581ab4\" id=\"u8c581ab4\"><span data-lake-id=\"uf78cdf63\" id=\"uf78cdf63\">obj2</span></code><span data-lake-id=\"u9818d47a\" id=\"u9818d47a\">还将会继续存在，因此它们的引用次数永远不会是0，就会引起循环引用。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20fun()%20%7B%5Cn%20%20%20%20let%20obj1%20%3D%20%7B%7D%3B%5Cn%20%20%20%20let%20obj2%20%3D%20%7B%7D%3B%5Cn%20%20%20%20obj1.a%20%3D%20obj2%3B%20%2F%2F%20obj1%20%E5%BC%95%E7%94%A8%20obj2%5Cn%20%20%20%20obj2.a%20%3D%20obj1%3B%20%2F%2F%20obj2%20%E5%BC%95%E7%94%A8%20obj1%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22sYmpo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"8176e0d34ff899f79e42faa9037cbd76\" id=\"8176e0d34ff899f79e42faa9037cbd76\"><span data-lake-id=\"ub635d3d6\" id=\"ub635d3d6\">这种情况下，就要手动释放变量占用的内存：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22obj1.a%20%3D%20%20null%5Cn%20obj2.a%20%3D%20%20null%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22m6Adi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"6431f010ca889398f03a1c5680ef20e4\" id=\"6431f010ca889398f03a1c5680ef20e4\"><span data-lake-id=\"u321d74b6\" id=\"u321d74b6\">（3）减少垃圾回收</span></h4><p data-lake-id=\"e8c1d1dacf5809cbb9d91737e1d5f8ef\" id=\"e8c1d1dacf5809cbb9d91737e1d5f8ef\"><span data-lake-id=\"uf59df428\" id=\"uf59df428\">虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。</span></p><ul list=\"u7720b216\"><li fid=\"u2cae8e66\" data-lake-id=\"0915d5ba65456fe1e1b8b91bbf2f77f3\" id=\"0915d5ba65456fe1e1b8b91bbf2f77f3\"><strong><span data-lake-id=\"u765a3202\" id=\"u765a3202\">对数组进行优化：</span></strong><span data-lake-id=\"u67512f8b\" id=\"u67512f8b\">在清空一个数组时，最简单的方法就是给其赋值为[ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为0，以此来达到清空数组的目的。</span></li><li fid=\"u2cae8e66\" data-lake-id=\"577c1ffc05f94b862fc414bd13eb8d3f\" id=\"577c1ffc05f94b862fc414bd13eb8d3f\"><strong><span data-lake-id=\"u86698008\" id=\"u86698008\">对</span></strong><code data-lake-id=\"u9495c9bd\" id=\"u9495c9bd\"><strong><span data-lake-id=\"ue389fe87\" id=\"ue389fe87\">object</span></strong></code><strong><span data-lake-id=\"u60de5e8a\" id=\"u60de5e8a\">进行优化：</span></strong><span data-lake-id=\"u69d6ca56\" id=\"u69d6ca56\">对象尽量复用，对于不再使用的对象，就将其设置为null，尽快被回收。</span></li><li fid=\"u2cae8e66\" data-lake-id=\"bcd03a8733556efb66ef15b286b12d96\" id=\"bcd03a8733556efb66ef15b286b12d96\"><strong><span data-lake-id=\"u6b5d2c97\" id=\"u6b5d2c97\">对函数进行优化：</span></strong><span data-lake-id=\"uf190ccc8\" id=\"uf190ccc8\">在循环中的函数表达式，如果可以复用，尽量放在函数的外面。</span></li></ul><h3 data-lake-id=\"ec8b12aa8ca42824437791379131e837\" id=\"ec8b12aa8ca42824437791379131e837\"><span data-lake-id=\"u393e504a\" id=\"u393e504a\">2. 哪些情况会导致内存泄漏</span></h3><p data-lake-id=\"722d59136c66a73bc2c299af325ca756\" id=\"722d59136c66a73bc2c299af325ca756\"><span data-lake-id=\"u684371bf\" id=\"u684371bf\">以下四种情况会造成内存的泄漏：</span></p><ul list=\"u2ed19063\"><li fid=\"ufe0ecc0e\" data-lake-id=\"931a674a6bda913fab55df5f52eabbef\" id=\"931a674a6bda913fab55df5f52eabbef\"><strong><span data-lake-id=\"u78932a6c\" id=\"u78932a6c\">意外的全局变量：</span></strong><span data-lake-id=\"u8c48abf3\" id=\"u8c48abf3\">由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</span></li><li fid=\"ufe0ecc0e\" data-lake-id=\"0c199748bc49653e939c5862a7358f85\" id=\"0c199748bc49653e939c5862a7358f85\"><strong><span data-lake-id=\"uec5fdcdb\" id=\"uec5fdcdb\">被遗忘的计时器或回调函数：</span></strong><span data-lake-id=\"u12056439\" id=\"u12056439\">设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</span></li><li fid=\"ufe0ecc0e\" data-lake-id=\"48f1f4313e874b5f1f3d19e4d96a188f\" id=\"48f1f4313e874b5f1f3d19e4d96a188f\"><strong><span data-lake-id=\"u00e4f21f\" id=\"u00e4f21f\">脱离 DOM 的引用：</span></strong><span data-lake-id=\"udf9ae872\" id=\"udf9ae872\">获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。</span></li><li fid=\"ufe0ecc0e\" data-lake-id=\"be0395af50e8080ac23c0f4bc0628c91\" id=\"be0395af50e8080ac23c0f4bc0628c91\"><strong><span data-lake-id=\"u63a9577c\" id=\"u63a9577c\">闭包：</span></strong><span data-lake-id=\"ua5da8240\" id=\"ua5da8240\">不合理的使用闭包，从而导致某些变量一直被留在内存当中。</span></li></ul><p data-lake-id=\"u47ede0be\" id=\"u47ede0be\"><br></p><card type=\"block\" name=\"checkIn\" value=\"data:%7B%22title%22%3A%22%E9%98%85%E8%AF%BB%E5%90%8E%E8%AF%B7%E7%82%B9%E5%87%BB%E6%89%93%E5%8D%A1%22%2C%22buttonText%22%3A%22%E6%88%91%E5%B7%B2%E8%AF%BB%22%2C%22enableDeadline%22%3Afalse%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22O2Haq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u966dbb8e\" id=\"u966dbb8e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673894435924-2a63e5eb-9eb2-447f-87af-5fb33b8c8a7c.png%22%2C%22taskId%22%3A%22u096d71d1-7cd0-42fe-be37-0e13719ea0c%22%2C%22clientId%22%3A%22ueb340ee7-bc26-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22stroke%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22uabac8cd1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
        "selected_at": null,
        "editor_meta": "{\"image\":13,\"codeblock\":162,\"checkIn\":1}",
        "editor_meta_draft": "{\"image\":13,\"codeblock\":162,\"checkIn\":1}",
        "meta": {
            "privacy_migrated": true,
            "premium_migrated": true
        },
        "marked": true,
        "mark": {
            "action_name": "mark_doc",
            "id": 110188295620,
            "created_at": "2023-07-01T00:37:32.000Z",
            "updated_at": "2023-07-01T00:37:32.000Z",
            "space_id": 0,
            "action_type": "mark",
            "action_option": "doc",
            "action_setting_type": "default",
            "user_id": 38384436,
            "organization_id": 0,
            "target_type": "Doc",
            "target_id": 23900407,
            "target_book_id": 6862641,
            "target_group_id": 1500604,
            "title": "前端面试题之JavaScript篇"
        },
        "region": "北京",
        "indexed_level": 1,
        "privacy_migrated": true,
        "user": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T04:53:35.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "last_editor": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T04:53:35.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "_serializer": "web.doc_detail"
    }
}