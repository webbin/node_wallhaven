{
    "meta": {
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "latestReviewStatus": -1
    },
    "data": {
        "id": 29927090,
        "space_id": 0,
        "type": "Doc",
        "sub_type": null,
        "title": "前端面试题之React篇",
        "tag": null,
        "slug": "pgw8v4",
        "user_id": 1500604,
        "book_id": 6862641,
        "cover": "https://cdn.nlark.com/yuque/0/2021/jpeg/1500604/1611890469312-7504e85d-c6db-481e-b9d3-5307a3de708c.jpeg",
        "description": "一、组件基础1. React 事件机制<div onClick={this.handleClick.bind(this)}>点我</div>React并不是将click事件绑定到了div的真实DOM上，而是在document处监听了所有的事件，当事件发生并且冒泡到document处的时候，Re...",
        "custom_description": null,
        "body_asl": "",
        "format": "lake",
        "origin_format": "lake",
        "status": 1,
        "read_status": 1,
        "view_status": 0,
        "public": 1,
        "draft_version": 258,
        "comments_count": 74,
        "likes_count": 70,
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "content_updated_at": "2023-01-16T18:50:45.000Z",
        "created_at": "2021-01-10T16:23:04.000Z",
        "updated_at": "2023-07-18T08:57:29.000Z",
        "published_at": "2023-01-16T18:50:45.000Z",
        "first_published_at": "2021-02-06T07:50:08.000Z",
        "pinned_at": null,
        "word_count": 44490,
        "content": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"ucd326398\" id=\"ucd326398\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1618317949340-04bf1cbc-f74c-4f76-8dbf-fe7de4714d30.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A2000%2C%22height%22%3A2592%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22React%E9%9D%A2%E8%AF%95%E9%A2%98.png%22%2C%22size%22%3A2133496%2C%22originWidth%22%3A3462%2C%22originHeight%22%3A4486%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22c%E6%9C%BA%E5%8D%B0%20%E5%8C%BB%E4%BE%8B%20Ra-al%E5%8D%A1%E5%90%8D%E8%83%9C%E5%9C%A8%E7%9A%84%E6%96%B9!%E5%93%81%E8%BF%9E%E4%B8%AA%20Rn%E8%8F%B2FI%E7%8E%87%E5%8F%B6%E4%BB%AC%E7%9A%84HTHL%E4%BA%AB%E4%BB%A3%E6%9C%89%E4%BB%80%E5%85%AC%E4%B8%8D%E5%90%8C%20%E4%B8%93%E6%B7%91%E6%A4%92%E5%A6%A5%20r%E6%88%90t%E6%9C%80%E6%96%B0%E5%8C%BB%E6%9C%AC%E7%BB%8F%E8%AF%BB%E4%BA%86%E4%BB%80%E4%B9%88%E7%BA%BF%E5%8E%8B%2C%20R%E4%B8%BB%E7%BB%84%E4%B8%AD%E5%93%81%E4%BB%B6%E4%BB%A3%E7%90%86%E5%AD%97%E7%9A%84%E5%BA%95%E5%8F%B7%E4%BB%80%20%E5%AD%90%E5%B0%B1%E9%9C%9E%E5%AE%A2%201ELLL%E4%B8%AA%E5%85%A8%E5%B1%8B%E7%9A%84%E5%BA%97ilug%20het%E4%BD%93.kandtrprnpo%2Chank%E6%9C%89%E4%BB%80%E4%B9%88%20%2C%E5%8A%A0%E4%BB%80%E4%B9%88%E5%B9%B3%E4%B8%8D%E7%94%B1%E6%B1%BD%E4%BB%A3%20Re%E4%BA%8C%E6%95%99%E6%89%98%E6%8A%A4%E4%B9%85%E5%8D%8E%E5%B7%A61%E4%B9%88%E8%80%83%E9%A6%99%20%E5%AD%90%E4%BA%B2%E5%AE%B6%E5%B0%91%20BReILFHe%E7%9A%84%E7%90%86%E5%AE%83%E4%BB%80%E4%B9%88%E9%97%AE.2%20JRLELIEvueE%E4%BB%AC%E7%9A%84%E5%BC%80%E5%87%A0%20RanCLCorRoneHeCureCoanpo*entRh%20%E5%8F%AF%E4%BB%A5%E4%B8%96%E7%94%A8Typescrlpt%E4%B8%89Re%E5%B7%A5%2C%E7%94%A8%E5%9B%BD%E4%B9%88%E6%8E%A2%E4%BD%9C%3F%20Carrpancstthmmsnt.hadlanc%E4%B9%8B%E7%8E%B0%E5%AD%98%E4%B9%88%E5%8C%BA%E7%83%88%E8%81%94%20Rser%E8%AE%A1te%E5%8D%97%E5%AE%83%E7%BA%A6%E5%BF%B5%E6%98%AF%E4%BB%80%E4%B9%88%20TReact.creatgcassqexterdscomtoorer%E5%88%AB%E6%9C%89%E9%9B%B6%20ReaSApreps.chcrETeeact.chlldren%E5%8C%BA%E5%89%82%20%3Bct%E9%AB%98%E8%BF%8E%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88%2C%E5%BA%97%E8%BF%98%E7%89%9B%E4%BB%80%E4%B9%88%E5%8C%BA%20k-s%E4%B8%80%E7%9A%84%E6%9D%83%E6%80%81%E5%88%80%E6%98%AF%E4%BB%80%E4%B9%88%3F%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%B1%BD%E6%9C%89%E5%8E%9F%E4%BA%9B%3F%20ReasTtconstrlcorugetnlsue212%20%E5%AF%B9LSwipDnenntiPillReceierces%E7%9A%84%E7%90%86%20%E5%9C%B0%E5%90%8D%E7%9A%84%E5%B8%B8%E5%8D%B4%E4%BD%95%E4%BD%BF%E7%94%A8%2C%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%3F%20%E8%BD%AC%E4%B8%87%E8%BF%90%E5%90%88%E7%BA%A7%E5%8F%91%E9%A3%8E%E6%AC%A2c%E5%BC%80%E5%88%B6%E8%B1%A1%3F%E7%AE%A1%E5%88%A9%E6%A1%A3%20%E5%9C%A8Re%2B%E9%9D%92%E9%BE%99%E6%96%B9%E9%9B%86%E6%9C%89%E6%A7%BD%E8%B4%A77%20%E5%85%B6%E4%BB%96%20%E5%9C%A8R%3A%E4%B8%AD%E9%A1%B6%E7%99%BE%E6%9C%80%E6%AC%BE3%3F%20RE%E5%8C%97EL%E7%A7%91%E8%BF%8Ef%E6%9C%89%E5%93%92%2C%E5%B9%B6%E6%96%B9%E6%B4%81.%E6%9C%89%E4%BB%80%E4%B8%8D%E5%8F%B8%20%E8%80%90%E4%BA%8C%E4%B8%AA%E5%BA%93aLLi.eatdom%E5%B0%8F%E6%89%AB%20habe..E0.f7F%E4%B9%88n%E6%9C%88%3F%20%E5%AF%B9%E7%99%BD%E6%A0%A1%E9%87%91%E4%BB%B6%E8%A7%82%E9%87%91%E7%89%88%E4%BB%81%E6%95%99%E6%83%A0%E6%9D%90%E6%94%BB%E7%94%A8%20%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%20ReaCTI%E7%94%A8ISXIL%3F%20%E5%AF%B9ReJcL%E4%B8%ADFl*yuenL%E7%9A%84%E7%90%86)%2C%E5%AE%83%E7%9A%84%E5%88%80%E5%BA%95%E7%8A%B6%E5%8D%81%20%E5%90%8D%E8%AE%A1%E4%B9%88%E4%BD%BF%E6%B0%8Fjsx%E7%9A%84%E6%A9%A1%E4%BB%B6%E4%B8%AD%E6%B2%A1%E5%8A%9B%E9%9B%B7%E7%A4%BC%E6%82%A8%E7%94%A8ran%E8%80%83%3A%20%E5%BF%AB%E6%88%91Ct%E5%8F%A5%E5%A4%A7%E5%8F%96%E7%94%9F%E6%96%97%E5%AF%B9%E5%BA%97%E7%9A%84D01%E5%85%83%20%E6%97%BA%E5%BC%95%E5%85%A5re3c%20RPS-ITE%E4%BB%A5%E5%9C%A8rerder%E7%A4%BE%E9%97%B4reil9%3F%E4%B8%BA%E4%B8%AA%E4%B9%88%3F%20%E8%87%B3R-%E4%B9%9D8%E5%B9%B4%E4%BD%BF%E6%9C%BA%E4%B8%8A%E4%BB%8EAit%20ReaCCldRN.RRAPDIEISAIMES%E6%9C%89%E4%BB%808%20%E5%9C%A8Re3ct%E6%9B%B4%E4%BD%95%E8%B5%B0%E4%B8%93%E4%B8%8D%E5%90%8C%E5%BC%A0*ender%20%E4%B8%BA%E4%BB%80%E4%B9%88Rea%E5%A4%A9%E6%9C%88%2C53%20RE%E7%94%9F%E9%AB%98%E7%B2%BE%E9%9B%B6%E5%AE%9A%E8%AF%95%E5%88%B6%E4%BA%86%E4%BB%80%E4%B9%88%E9%85%8D!%3F%20%E4%B8%BA%E4%BB%80%E4%B9%88R%3A-%E5%B9%B6%E4%B8%8D%E6%8E%A8%E4%B8%8D%E5%A5%97%E5%BE%97%E9%A5%ADC%3F%20REaC%E4%BA%A7%E5%8D%83%E5%90%8D5%E4%BB%A3%E9%9D%9E%E4%BB%B6%20REE-A%E6%B2%B9%E7%9A%84%E7%A9%BA%E6%AD%A3%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88%3F%20Raprr%E7%9A%84n%E6%9C%88%E6%98%AF%2F%E4%B9%88%3F%E5%A4%A9%E6%84%8F%E4%BA%9B%E7%A9%BA%E7%94%A8%E5%9C%BA%E6%9E%B6%3F%20Q5lRaa%3AoRo-ter%E4%BA%A4%E7%8E%B0%E5%BD%93%E5%9C%B3%20R%2BS%E5%9C%A8%E6%99%BA%E6%96%B9%E7%BA%A7%E4%B8%AD%E4%B8%AD%E5%AE%9Ath1s%2C%E6%96%B9%20kraHKp%E4%B9%88%E8%AE%BE%E6%9F%A5%E7%9B%B4%E5%AE%9A%E5%90%91%3F%20R%E6%B7%98%E6%88%B7%E7%9A%84%E7%AE%B1%E6%96%B9%E8%8D%AF%E7%AB%8B%E8%AE%A1%E4%BB%80%E4%B9%88%2C%E4%B8%89%E6%98%AF%E9%A1%BB%E7%9A%84%20T3CL%E7%89%9BLI%E6%A0%87%E4%B8%87%E6%96%B0%E5%8A%9B.%E5%AE%B6%E6%91%A9%E7%9A%84%E6%9C%89%E5%8F%B8%20REACLLORGANURE%E8%82%A1A%3F%E5%8F%B3%E4%BD%9C%20%E7%9B%97%E7%94%B1%20NPE-KDF%E7%B3%BBEURX70%E5%85%8B%E6%96%99%20%E5%A4%A9%E7%94%9F%E5%9C%A8%E7%BA%BF%E8%BF%98%E6%95%99%E5%93%81%E4%BB%81%E5%8D%A1%E4%BB%80%E4%BC%9A%E6%96%A4%E5%8F%B8%20RESLRD%E6%9D%91%E6%96%B0%20%E9%99%A2E%E4%BA%8CRO%E5%A5%B9n%E7%9A%84%E8%B7%AF%E6%9C%AC%E5%A4%95%E5%87%A0%E5%92%8C%E7%82%B9%20ReCtSESoate%E4%B8%AD.%20HOTrt5%E5%BC%80%E7%94%B5%E4%B9%8B%E4%BF%9D%E5%9C%9F%E4%BA%86%E4%BB%80%E4%B9%88%E5%90%8C%E5%B0%91%E6%98%AF%E6%96%A4%20RC%2BUSS%E6%98%AF%E4%B9%88%20%E5%AF%B9du%E7%9A%84%E5%B7%B4%2C%E5%A3%AB%E9%9B%AFF%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%20React%E9%9D%A2%E8%AF%95%E9%A2%98%20Redux%E4%BE%83%E7%90%86%E5%8F%8A%E5%B7%A5%E4%BD%9C%E4%BC%81%E7%A8%8B%20RECC%E4%B8%ADIESLAL%E4%BA%8C%E4%B8%AA%E6%95%88%E4%BB%80%E4%B9%88%20Redu%E4%B8%AD%E6%88%B7%E5%85%88n%E8%AF%B7%E6%9C%AB%E5%87%BA%E4%B9%88%E6%96%87%E7%90%86%20teact%E4%B8%ADnstctenlrooacestatenz%E4%BB%80%E4%B9%88%20ReTukC%E4%B9%88%E5%AE%9E%E6%B3%B0%E4%BD%9C%E4%B8%93%E8%AE%A9%2C%E4%BB%8B%E7%BB%84%E4%B8%8B%E5%93%81%E7%90%86%20%E7%94%9FE%E4%B8%AD%E7%9A%84%E5%B1%B1ns.slaleoeal%20%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%20Rtedux%E4%B8%AD%E9%97%B4%E9%B2%9C%E4%B9%901%E4%B9%88%E6%8C%87%E5%88%97%E5%87%A0%E4%B8%AA%E9%9B%B6%E6%88%98%E5%88%9D%E9%A5%AE%E9%80%9A%20stte%E4%B9%88%E6%B1%AA%E5%A4%A9%E5%8A%B2%E5%BC%BA%E4%BB%B6%E8%8D%AF%2Crduce*%E4%BB%B6%20%E6%98%93%E4%B8%8B%E4%BB%80%E5%B9%BA%E6%A0%8F%E7%9A%84%E8%BF%87%E4%B9%A6%20Hdu%E6%9C%AB%E4%B8%AD%E9%97%B4%E7%83%A8%E5%8D%B4%E6%B2%B3%E5%AE%9A%E7%90%86%E5%BC%80%20Acact%E7%9A%84t27pmp5.%E6%B1%81%E4%B9%88R%20R%E5%B1%B1u%E6%BB%A8%E5%8D%97%E4%BB%96%E7%90%86%E6%88%91%E6%9D%91%E5%A4%9C%E6%98%9Fdu%E4%B8%AD%E4%BB%80x%20PeX%3A%3Aooes%E5%8A%9B%E6%97%B6%E5%9C%B0sky%20moboxlmdx%E7%99%BD%E5%90%8D%E5%8C%BA%20Redux%E5%92%8C%E5%8D%8Eu%E6%9C%89%E4%BB%80%E5%85%AD%E8%93%9D1%2C1%E6%AC%A1%E9%A4%90%E8%B6%B3%E6%82%A8%20Redux%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%B6%B3%E8%AE%B0%E4%B9%88Istoreqacton%20%E5%91%BD%E6%97%A5%E5%8D%A1%E4%BB%81%E7%BA%B8%3F%20R%E5%90%90%E4%BA%B2%E8%BD%A6%E4%BA%86%E7%94%9F%E5%91%BD%E6%97%A5%E5%9B%A2%E4%B8%BA%E8%AE%A1%E4%B9%88%20%E5%AF%B9RHook%E7%9A%84%E7%89%8C%2C%E5%AE%83%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%90%86%E5%AE%9A%E4%BB%80%E4%B9%88%20Re2Z16X%E4%B8%ADprDp%E6%94%B9%E5%90%8E%E5%B7%A5%E5%BE%97%E4%B8%AA%E7%94%9F%E8%BD%AE%E5%8F%B8%E4%B8%AD%E5%BF%83%E7%90%86%20%E4%B8%BA%E4%BB%80%E4%B9%88idSLa%E6%A2%B5%E4%BD%BF%E5%B8%82%E6%95%B0%E8%AF%81%E8%80%8C%E4%B8%8D%E5%85%89%E5%AF%B9%20Rdl%E6%80%A7%E5%BA%97%E8%AF%95%E5%8C%96%E5%9C%A8%E5%B7%A5%E4%B8%AA%E4%B8%AD%3F%E5%AE%83%E4%BC%98%E5%8C%96%E7%9A%84%2C%E7%90%86%E4%BB%80%20%E7%94%9F%E5%91%BD%E6%97%A5%E6%9C%9F%20ReFcHooksa7%20state%E5%8F%B8props%E5%8F%91%E7%8E%8B%E7%9A%84%E7%94%9F%E4%B8%AD%E5%9B%A2%E5%88%B7%E6%9C%88%E5%88%86%E6%8E%92%E6%9C%89%E4%B9%88%E5%8C%BA%E5%88%AB%20ReRcHoDk%E7%9A%84%E6%97%A0%E5%88%A9%E9%99%85%E4%B8%87%E9%9D%A2%3F%20Hodks%20KSeEFTECt%E4%B8%8EUSELANOMERE%E6%97%B6%20%E5%85%A5c15%E4%B8%AD%E4%B8%B9%E6%9C%AC%E7%90%86%E6%9C%AC%E7%94%A8%20RIScHnDkS%E5%9D%90%E5%AF%B9%E5%BC%80%E5%8F%91%E4%B8%AD%E8%81%9A%E5%85%B3%E6%B3%A8%E7%8E%B0%E7%9A%84%E9%97%AE%E6%82%A8%E5%92%8C.%E5%8C%BB%20REACEHODLS%E7%A7%81%E5%B8%82%E6%8B%8C%E7%94%B5%E5%85%88%20%E7%88%B6%E5%AD%90d%E4%BD%9C%E7%9A%84%E8%BF%87%E4%BF%A1)%E5%BC%8F%3F%20%E6%82%A8%E5%A6%88%E4%BA%A7%E6%95%B0%E8%AF%AD%E4%BF%A1%E5%B8%82%3F%20%E5%AF%B9%E5%BA%84%E8%8E%B7DO%E7%9A%84%E5%8D%AB%E6%97%85%3F%E8%99%91Da%E7%8E%8B%E7%B4%AF%E5%81%9A%E4%BA%86%E4%BB%80%20%E4%B8%B0%E4%BB%A5E%E7%BE%8E%E4%B8%8D%3C%E4%BF%A1%E7%9A%84%E9%80%80%E4%BF%A1%E5%A3%B0.%E5%BC%8F%3F%20%E7%BB%84%E4%BB%B6%E9%80%82%E4%BF%A1%20%E7%9F%A5%E4%BB%81%E9%B2%9CprOps%E6%81%90HS%E8%B4%AD0E%20PEECRICIT%E6%B8%85%E7%A4%BC%E8%83%9C%E5%8D%81%E7%BA%A7%3F%20%E8%B5%B7%E4%BB%B6%E8%BF%87%E4%BC%AF%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%83%E8%8F%8C%E5%9E%AB%20RECREY%E4%B9%90%E5%8D%83%E6%96%B0%E7%9A%84%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9E%8Bjkey%E5%B7%A5%E6%81%B6%20%E8%BD%A6%E5%91%B3%E4%B8%80%E5%AE%89%E5%BA%97%E6%97%B6%20%E5%BA%AD%E6%8B%9FDOM%20%E6%97%BA%E6%AC%BEDO%E6%80%BB%E6%97%B6%E5%AD%94%E4%B8%8E%E5%B8%82%E8%BF%98%E5%B7%A5IDC%E6%AF%94%20%E5%8F%AB%E4%B8%80%E4%B8%AA%E7%82%AB%E7%8E%87%E6%AD%A3%E5%B0%9A%2C%E5%A4%A7%E4%B9%88%20Rrau%E4%B8%8Educ%E8%BF%87%E5%BC%80%E7%AE%97%E6%B3%95%E7%9F%B3%E6%9C%88%E4%B8%8D%E5%90%8C%3F%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1078.2986%2C%22y%22%3A104.27617%2C%22width%22%3A202.85579999999982%2C%22height%22%3A34.97537000000001%2C%22text%22%3A%22c%E6%9C%BA%E5%8D%B0%22%7D%2C%7B%22x%22%3A222.18497%2C%22y%22%3A131.05727%2C%22width%22%3A75.74368000000001%2C%22height%22%3A36.416060000000016%2C%22text%22%3A%22%E5%8C%BB%E4%BE%8B%22%7D%2C%7B%22x%22%3A2596.187%2C%22y%22%3A164.78445%2C%22width%22%3A433.8987000000002%2C%22height%22%3A40.082870000000014%2C%22text%22%3A%22Ra-al%E5%8D%A1%E5%90%8D%E8%83%9C%E5%9C%A8%E7%9A%84%E6%96%B9!%E5%93%81%E8%BF%9E%E4%B8%AA%22%7D%2C%7B%22x%22%3A655.80945%2C%22y%22%3A175.3242%2C%22width%22%3A602.8061500000001%2C%22height%22%3A37.76555000000002%2C%22text%22%3A%22Rn%E8%8F%B2FI%E7%8E%87%E5%8F%B6%E4%BB%AC%E7%9A%84HTHL%E4%BA%AB%E4%BB%A3%E6%9C%89%E4%BB%80%E5%85%AC%E4%B8%8D%E5%90%8C%22%7D%2C%7B%22x%22%3A199.56349%2C%22y%22%3A204.84764%2C%22width%22%3A115.27416%2C%22height%22%3A35.75808999999998%2C%22text%22%3A%22%E4%B8%93%E6%B7%91%E6%A4%92%E5%A6%A5%22%7D%2C%7B%22x%22%3A2586.0144%2C%22y%22%3A232.89447%2C%22width%22%3A631.0264000000002%2C%22height%22%3A53.52179000000001%2C%22text%22%3A%22r%E6%88%90t%E6%9C%80%E6%96%B0%E5%8C%BB%E6%9C%AC%E7%BB%8F%E8%AF%BB%E4%BA%86%E4%BB%80%E4%B9%88%E7%BA%BF%E5%8E%8B%2C%22%7D%2C%7B%22x%22%3A677.1148%2C%22y%22%3A245.78038%2C%22width%22%3A596.7272000000002%2C%22height%22%3A38.88584999999998%2C%22text%22%3A%22R%E4%B8%BB%E7%BB%84%E4%B8%AD%E5%93%81%E4%BB%B6%E4%BB%A3%E7%90%86%E5%AD%97%E7%9A%84%E5%BA%95%E5%8F%B7%E4%BB%80%22%7D%2C%7B%22x%22%3A203.60352%2C%22y%22%3A276.74588%2C%22width%22%3A109.81682999999998%2C%22height%22%3A31.96359000000001%2C%22text%22%3A%22%E5%AD%90%E5%B0%B1%E9%9C%9E%E5%AE%A2%22%7D%2C%7B%22x%22%3A2593.8826%2C%22y%22%3A310.50732%2C%22width%22%3A368.03240000000005%2C%22height%22%3A37.89811000000003%2C%22text%22%3A%221ELLL%E4%B8%AA%E5%85%A8%E5%B1%8B%E7%9A%84%E5%BA%97ilug%22%7D%2C%7B%22x%22%3A674.5197%2C%22y%22%3A319.31586%2C%22width%22%3A608.0412%2C%22height%22%3A41.252800000000036%2C%22text%22%3A%22het%E4%BD%93.kandtrprnpo%2Chank%E6%9C%89%E4%BB%80%E4%B9%88%22%7D%2C%7B%22x%22%3A677.6778%2C%22y%22%3A356.7723%2C%22width%22%3A289.62036%2C%22height%22%3A32.99336000000005%2C%22text%22%3A%22%2C%E5%8A%A0%E4%BB%80%E4%B9%88%E5%B9%B3%E4%B8%8D%E7%94%B1%E6%B1%BD%E4%BB%A3%22%7D%2C%7B%22x%22%3A2593.9114%2C%22y%22%3A382.01096%2C%22width%22%3A412.4094%2C%22height%22%3A40.82493999999997%2C%22text%22%3A%22Re%E4%BA%8C%E6%95%99%E6%89%98%E6%8A%A4%E4%B9%85%E5%8D%8E%E5%B7%A61%E4%B9%88%E8%80%83%E9%A6%99%22%7D%2C%7B%22x%22%3A201.24875%2C%22y%22%3A409.43735%2C%22width%22%3A110.57327000000001%2C%22height%22%3A37.91052000000002%2C%22text%22%3A%22%E5%AD%90%E4%BA%B2%E5%AE%B6%E5%B0%91%22%7D%2C%7B%22x%22%3A722.31647%2C%22y%22%3A429.34525%2C%22width%22%3A540.28253%2C%22height%22%3A35.912289999999985%2C%22text%22%3A%22BReILFHe%E7%9A%84%E7%90%86%E5%AE%83%E4%BB%80%E4%B9%88%E9%97%AE.2%22%7D%2C%7B%22x%22%3A2599.0554%2C%22y%22%3A458.09662%2C%22width%22%3A467.4833999999996%2C%22height%22%3A32.59985%2C%22text%22%3A%22JRLELIEvueE%E4%BB%AC%E7%9A%84%E5%BC%80%E5%87%A0%22%7D%2C%7B%22x%22%3A587.605%2C%22y%22%3A498.7526%2C%22width%22%3A678.9635000000001%2C%22height%22%3A38.680300000000045%2C%22text%22%3A%22RanCLCorRoneHeCureCoanpo*entRh%22%7D%2C%7B%22x%22%3A2601.108%2C%22y%22%3A528.37585%2C%22width%22%3A595.6329999999998%2C%22height%22%3A34.31434999999999%2C%22text%22%3A%22%E5%8F%AF%E4%BB%A5%E4%B8%96%E7%94%A8Typescrlpt%E4%B8%89Re%E5%B7%A5%2C%E7%94%A8%E5%9B%BD%E4%B9%88%E6%8E%A2%E4%BD%9C%3F%22%7D%2C%7B%22x%22%3A580.6282%2C%22y%22%3A570.21893%2C%22width%22%3A692.2849%2C%22height%22%3A40.819470000000024%2C%22text%22%3A%22Carrpancstthmmsnt.hadlanc%E4%B9%8B%E7%8E%B0%E5%AD%98%E4%B9%88%E5%8C%BA%E7%83%88%E8%81%94%22%7D%2C%7B%22x%22%3A2598.8826%2C%22y%22%3A599.30396%2C%22width%22%3A445.7274000000002%2C%22height%22%3A37.50344000000007%2C%22text%22%3A%22Rser%E8%AE%A1te%E5%8D%97%E5%AE%83%E7%BA%A6%E5%BF%B5%E6%98%AF%E4%BB%80%E4%B9%88%22%7D%2C%7B%22x%22%3A578.23224%2C%22y%22%3A642.5742%2C%22width%22%3A698.26236%2C%22height%22%3A36.27449999999999%2C%22text%22%3A%22TReact.creatgcassqexterdscomtoorer%E5%88%AB%E6%9C%89%E9%9B%B6%22%7D%2C%7B%22x%22%3A2592.4514%2C%22y%22%3A670.89233%2C%22width%22%3A604.3418000000001%2C%22height%22%3A39.07047%2C%22text%22%3A%22ReaSApreps.chcrETeeact.chlldren%E5%8C%BA%E5%89%82%22%7D%2C%7B%22x%22%3A658.53516%2C%22y%22%3A714.9472%2C%22width%22%3A594.0169400000001%2C%22height%22%3A39.46469999999999%2C%22text%22%3A%22%3Bct%E9%AB%98%E8%BF%8E%E6%80%A7%E6%98%AF%E4%BB%80%E4%B9%88%2C%E5%BA%97%E8%BF%98%E7%89%9B%E4%BB%80%E4%B9%88%E5%8C%BA%22%7D%2C%7B%22x%22%3A2591.4583%2C%22y%22%3A738.24664%2C%22width%22%3A548.8607000000002%2C%22height%22%3A42.76895999999999%2C%22text%22%3A%22k-s%E4%B8%80%E7%9A%84%E6%9D%83%E6%80%81%E5%88%80%E6%98%AF%E4%BB%80%E4%B9%88%3F%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%B1%BD%E6%9C%89%E5%8E%9F%E4%BA%9B%3F%22%7D%2C%7B%22x%22%3A2593.009%2C%22y%22%3A814.1924%2C%22width%22%3A570.2797999999998%2C%22height%22%3A40.47159999999997%2C%22text%22%3A%22ReasTtconstrlcorugetnlsue212%22%7D%2C%7B%22x%22%3A770.2997%2C%22y%22%3A823.48315%2C%22width%22%3A504.14059999999995%2C%22height%22%3A35.23181999999997%2C%22text%22%3A%22%E5%AF%B9LSwipDnenntiPillReceierces%E7%9A%84%E7%90%86%22%7D%2C%7B%22x%22%3A2587.7156%2C%22y%22%3A888.04706%2C%22width%22%3A521.5981000000002%2C%22height%22%3A35.96284000000003%2C%22text%22%3A%22%E5%9C%B0%E5%90%8D%E7%9A%84%E5%B8%B8%E5%8D%B4%E4%BD%95%E4%BD%BF%E7%94%A8%2C%E6%9C%89%E4%BB%80%E4%B9%88%E7%94%A8%3F%22%7D%2C%7B%22x%22%3A727.4398%2C%22y%22%3A896.34845%2C%22width%22%3A537.3128%2C%22height%22%3A34.92025000000001%2C%22text%22%3A%22%E8%BD%AC%E4%B8%87%E8%BF%90%E5%90%88%E7%BA%A7%E5%8F%91%E9%A3%8E%E6%AC%A2c%E5%BC%80%E5%88%B6%E8%B1%A1%3F%E7%AE%A1%E5%88%A9%E6%A1%A3%22%7D%2C%7B%22x%22%3A2597.4263%2C%22y%22%3A957.50165%2C%22width%22%3A384.84349999999995%2C%22height%22%3A36.159149999999954%2C%22text%22%3A%22%E5%9C%A8Re%2B%E9%9D%92%E9%BE%99%E6%96%B9%E9%9B%86%E6%9C%89%E6%A7%BD%E8%B4%A77%22%7D%2C%7B%22x%22%3A2311.185%2C%22y%22%3A979.316%2C%22width%22%3A83.64240000000018%2C%22height%22%3A47.14859999999999%2C%22text%22%3A%22%E5%85%B6%E4%BB%96%22%7D%2C%7B%22x%22%3A2596.7295%2C%22y%22%3A1030.1216%2C%22width%22%3A519.3029999999999%2C%22height%22%3A39.55819999999994%2C%22text%22%3A%22%E5%9C%A8R%3A%E4%B8%AD%E9%A1%B6%E7%99%BE%E6%9C%80%E6%AC%BE3%3F%22%7D%2C%7B%22x%22%3A717.9695%2C%22y%22%3A1074.9501%2C%22width%22%3A545.6827999999999%2C%22height%22%3A40.715799999999945%2C%22text%22%3A%22RE%E5%8C%97EL%E7%A7%91%E8%BF%8Ef%E6%9C%89%E5%93%92%2C%E5%B9%B6%E6%96%B9%E6%B4%81.%E6%9C%89%E4%BB%80%E4%B8%8D%E5%8F%B8%22%7D%2C%7B%22x%22%3A2602.4888%2C%22y%22%3A1102.6755%2C%22width%22%3A537.7201999999997%2C%22height%22%3A38.46129999999994%2C%22text%22%3A%22%E8%80%90%E4%BA%8C%E4%B8%AA%E5%BA%93aLLi.eatdom%E5%B0%8F%E6%89%AB%22%7D%2C%7B%22x%22%3A2596.8364%2C%22y%22%3A1141.3109%2C%22width%22%3A354.8766999999998%2C%22height%22%3A36.09640000000013%2C%22text%22%3A%22habe..E0.f7F%E4%B9%88n%E6%9C%88%3F%22%7D%2C%7B%22x%22%3A705.66754%2C%22y%22%3A1145.5322%2C%22width%22%3A568.40846%2C%22height%22%3A36.93959999999993%2C%22text%22%3A%22%E5%AF%B9%E7%99%BD%E6%A0%A1%E9%87%91%E4%BB%B6%E8%A7%82%E9%87%91%E7%89%88%E4%BB%81%E6%95%99%E6%83%A0%E6%9D%90%E6%94%BB%E7%94%A8%22%7D%2C%7B%22x%22%3A1432.7513%2C%22y%22%3A1174.1891%2C%22width%22%3A148.7536%2C%22height%22%3A38.79809999999998%2C%22text%22%3A%22%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80%22%7D%2C%7B%22x%22%3A2593.616%2C%22y%22%3A1211.632%2C%22width%22%3A273.88740000000007%2C%22height%22%3A36.260499999999865%2C%22text%22%3A%22ReaCTI%E7%94%A8ISXIL%3F%22%7D%2C%7B%22x%22%3A647.5698%2C%22y%22%3A1219.6288%2C%22width%22%3A616.8107%2C%22height%22%3A38.503600000000006%2C%22text%22%3A%22%E5%AF%B9ReJcL%E4%B8%ADFl*yuenL%E7%9A%84%E7%90%86)%2C%E5%AE%83%E7%9A%84%E5%88%80%E5%BA%95%E7%8A%B6%E5%8D%81%22%7D%2C%7B%22x%22%3A2594.0715%2C%22y%22%3A1281.937%2C%22width%22%3A588.6109000000001%2C%22height%22%3A37.47000000000003%2C%22text%22%3A%22%E5%90%8D%E8%AE%A1%E4%B9%88%E4%BD%BF%E6%B0%8Fjsx%E7%9A%84%E6%A9%A1%E4%BB%B6%E4%B8%AD%E6%B2%A1%E5%8A%9B%E9%9B%B7%E7%A4%BC%E6%82%A8%E7%94%A8ran%E8%80%83%3A%22%7D%2C%7B%22x%22%3A793.619%2C%22y%22%3A1292.7429%2C%22width%22%3A464.65769999999986%2C%22height%22%3A36.35259999999994%2C%22text%22%3A%22%E5%BF%AB%E6%88%91Ct%E5%8F%A5%E5%A4%A7%E5%8F%96%E7%94%9F%E6%96%97%E5%AF%B9%E5%BA%97%E7%9A%84D01%E5%85%83%22%7D%2C%7B%22x%22%3A2595.9575%2C%22y%22%3A1319.433%2C%22width%22%3A198.625%2C%22height%22%3A36.875299999999925%2C%22text%22%3A%22%E6%97%BA%E5%BC%95%E5%85%A5re3c%22%7D%2C%7B%22x%22%3A710.014%2C%22y%22%3A1362.2661%2C%22width%22%3A555.0082000000001%2C%22height%22%3A39.6090999999999%2C%22text%22%3A%22RPS-ITE%E4%BB%A5%E5%9C%A8rerder%E7%A4%BE%E9%97%B4reil9%3F%E4%B8%BA%E4%B8%AA%E4%B9%88%3F%22%7D%2C%7B%22x%22%3A2601.5215%2C%22y%22%3A1391.8933%2C%22width%22%3A415.4258%2C%22height%22%3A36.73050000000012%2C%22text%22%3A%22%E8%87%B3R-%E4%B9%9D8%E5%B9%B4%E4%BD%BF%E6%9C%BA%E4%B8%8A%E4%BB%8EAit%22%7D%2C%7B%22x%22%3A2592.6685%2C%22y%22%3A1461.569%2C%22width%22%3A560.2619%2C%22height%22%3A38.49260000000004%2C%22text%22%3A%22ReaCCldRN.RRAPDIEISAIMES%E6%9C%89%E4%BB%808%22%7D%2C%7B%22x%22%3A799.25275%2C%22y%22%3A1543.3322%2C%22width%22%3A461.8845500000001%2C%22height%22%3A34.115099999999984%2C%22text%22%3A%22%E5%9C%A8Re3ct%E6%9B%B4%E4%BD%95%E8%B5%B0%E4%B8%93%E4%B8%8D%E5%90%8C%E5%BC%A0*ender%22%7D%2C%7B%22x%22%3A2600.911%2C%22y%22%3A1604.525%2C%22width%22%3A302.779%2C%22height%22%3A35.716199999999844%2C%22text%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%88Rea%E5%A4%A9%E6%9C%88%2C53%22%7D%2C%7B%22x%22%3A2588.9778%2C%22y%22%3A1752.0459%2C%22width%22%3A535.3422%2C%22height%22%3A37.29299999999989%2C%22text%22%3A%22RE%E7%94%9F%E9%AB%98%E7%B2%BE%E9%9B%B6%E5%AE%9A%E8%AF%95%E5%88%B6%E4%BA%86%E4%BB%80%E4%B9%88%E9%85%8D!%3F%22%7D%2C%7B%22x%22%3A686.87646%2C%22y%22%3A1759.9633%2C%22width%22%3A575.6611400000002%2C%22height%22%3A38.85990000000015%2C%22text%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%88R%3A-%E5%B9%B6%E4%B8%8D%E6%8E%A8%E4%B8%8D%E5%A5%97%E5%BE%97%E9%A5%ADC%3F%22%7D%2C%7B%22x%22%3A794.09534%2C%22y%22%3A1832.2788%2C%22width%22%3A464.84386000000006%2C%22height%22%3A35.621799999999894%2C%22text%22%3A%22REaC%E4%BA%A7%E5%8D%83%E5%90%8D5%E4%BB%A3%E9%9D%9E%E4%BB%B6%22%7D%2C%7B%22x%22%3A2595.6401%2C%22y%22%3A1872.7369%2C%22width%22%3A412.6277%2C%22height%22%3A37.75249999999983%2C%22text%22%3A%22REE-A%E6%B2%B9%E7%9A%84%E7%A9%BA%E6%AD%A3%E5%9F%9F%E6%98%AF%E4%BB%80%E4%B9%88%3F%22%7D%2C%7B%22x%22%3A684.5386%2C%22y%22%3A1902.5955%2C%22width%22%3A572.9898%2C%22height%22%3A37.51070000000004%2C%22text%22%3A%22Raprr%E7%9A%84n%E6%9C%88%E6%98%AF%2F%E4%B9%88%3F%E5%A4%A9%E6%84%8F%E4%BA%9B%E7%A9%BA%E7%94%A8%E5%9C%BA%E6%9E%B6%3F%22%7D%2C%7B%22x%22%3A2597.941%2C%22y%22%3A1945.114%2C%22width%22%3A464.2983000000004%2C%22height%22%3A37.47000000000003%2C%22text%22%3A%22Q5lRaa%3AoRo-ter%E4%BA%A4%E7%8E%B0%E5%BD%93%E5%9C%B3%22%7D%2C%7B%22x%22%3A597.5058%2C%22y%22%3A1973.2744%2C%22width%22%3A663.2275000000001%2C%22height%22%3A40.66159999999991%2C%22text%22%3A%22R%2BS%E5%9C%A8%E6%99%BA%E6%96%B9%E7%BA%A7%E4%B8%AD%E4%B8%AD%E5%AE%9Ath1s%2C%E6%96%B9%22%7D%2C%7B%22x%22%3A2590.6392%2C%22y%22%3A2017.2458%2C%22width%22%3A388.5355999999997%2C%22height%22%3A35.60140000000024%2C%22text%22%3A%22kraHKp%E4%B9%88%E8%AE%BE%E6%9F%A5%E7%9B%B4%E5%AE%9A%E5%90%91%3F%22%7D%2C%7B%22x%22%3A643.7875%2C%22y%22%3A2045.5076%2C%22width%22%3A621.4369%2C%22height%22%3A36.253600000000006%2C%22text%22%3A%22R%E6%B7%98%E6%88%B7%E7%9A%84%E7%AE%B1%E6%96%B9%E8%8D%AF%E7%AB%8B%E8%AE%A1%E4%BB%80%E4%B9%88%2C%E4%B8%89%E6%98%AF%E9%A1%BB%E7%9A%84%22%7D%2C%7B%22x%22%3A2591.338%2C%22y%22%3A2089.9446%2C%22width%22%3A569.0479999999998%2C%22height%22%3A41.5613000000003%2C%22text%22%3A%22T3CL%E7%89%9BLI%E6%A0%87%E4%B8%87%E6%96%B0%E5%8A%9B.%E5%AE%B6%E6%91%A9%E7%9A%84%E6%9C%89%E5%8F%B8%22%7D%2C%7B%22x%22%3A723.579%2C%22y%22%3A2120.6357%2C%22width%22%3A534.0128%2C%22height%22%3A35.33130000000028%2C%22text%22%3A%22REACLLORGANURE%E8%82%A1A%3F%E5%8F%B3%E4%BD%9C%22%7D%2C%7B%22x%22%3A2314.3833%2C%22y%22%3A2155.9976%2C%22width%22%3A82.78070000000025%2C%22height%22%3A38.885699999999815%2C%22text%22%3A%22%E7%9B%97%E7%94%B1%22%7D%2C%7B%22x%22%3A2594.8447%2C%22y%22%3A2160.564%2C%22width%22%3A593.2289999999998%2C%22height%22%3A42.039999999999964%2C%22text%22%3A%22NPE-KDF%E7%B3%BBEURX70%E5%85%8B%E6%96%99%22%7D%2C%7B%22x%22%3A863.9256%2C%22y%22%3A2190.6748%2C%22width%22%3A392.1118999999999%2C%22height%22%3A35.531200000000354%2C%22text%22%3A%22%E5%A4%A9%E7%94%9F%E5%9C%A8%E7%BA%BF%E8%BF%98%E6%95%99%E5%93%81%E4%BB%81%E5%8D%A1%E4%BB%80%E4%BC%9A%E6%96%A4%E5%8F%B8%22%7D%2C%7B%22x%22%3A2595.6772%2C%22y%22%3A2238.2412%2C%22width%22%3A680.1320999999998%2C%22height%22%3A35.76000000000022%2C%22text%22%3A%22RESLRD%E6%9D%91%E6%96%B0%22%7D%2C%7B%22x%22%3A2598.5918%2C%22y%22%3A2304.3364%2C%22width%22%3A409.6551999999997%2C%22height%22%3A37.02059999999983%2C%22text%22%3A%22%E9%99%A2E%E4%BA%8CRO%E5%A5%B9n%E7%9A%84%E8%B7%AF%E6%9C%AC%E5%A4%95%E5%87%A0%E5%92%8C%E7%82%B9%22%7D%2C%7B%22x%22%3A922.4998%2C%22y%22%3A2315.563%2C%22width%22%3A345.4827%2C%22height%22%3A36.123299999999745%2C%22text%22%3A%22ReCtSESoate%E4%B8%AD.%22%7D%2C%7B%22x%22%3A580.5156%2C%22y%22%3A2383.4895%2C%22width%22%3A681.7187000000001%2C%22height%22%3A40.248299999999745%2C%22text%22%3A%22HOTrt5%E5%BC%80%E7%94%B5%E4%B9%8B%E4%BF%9D%E5%9C%9F%E4%BA%86%E4%BB%80%E4%B9%88%E5%90%8C%E5%B0%91%E6%98%AF%E6%96%A4%22%7D%2C%7B%22x%22%3A710.5444%2C%22y%22%3A2461.607%2C%22width%22%3A545.0601999999999%2C%22height%22%3A36.30970000000025%2C%22text%22%3A%22RC%2BUSS%E6%98%AF%E4%B9%88%22%7D%2C%7B%22x%22%3A2634.8684%2C%22y%22%3A2500.366%2C%22width%22%3A467.1858000000002%2C%22height%22%3A39.285899999999856%2C%22text%22%3A%22%E5%AF%B9du%E7%9A%84%E5%B7%B4%2C%E5%A3%AB%E9%9B%AFF%E5%86%B3%E4%BB%80%E4%B9%88%E9%97%AE%22%7D%2C%7B%22x%22%3A1782.6619%2C%22y%22%3A2572.4778%2C%22width%22%3A335.0241000000001%2C%22height%22%3A57.5625%2C%22text%22%3A%22React%E9%9D%A2%E8%AF%95%E9%A2%98%22%7D%2C%7B%22x%22%3A2634.645%2C%22y%22%3A2577.811%2C%22width%22%3A291.16240000000016%2C%22height%22%3A33.30099999999993%2C%22text%22%3A%22Redux%E4%BE%83%E7%90%86%E5%8F%8A%E5%B7%A5%E4%BD%9C%E4%BC%81%E7%A8%8B%22%7D%2C%7B%22x%22%3A709.9993%2C%22y%22%3A2603.5476%2C%22width%22%3A550.4850000000001%2C%22height%22%3A39.48460000000023%2C%22text%22%3A%22RECC%E4%B8%ADIESLAL%E4%BA%8C%E4%B8%AA%E6%95%88%E4%BB%80%E4%B9%88%22%7D%2C%7B%22x%22%3A2634.588%2C%22y%22%3A2645.6375%2C%22width%22%3A381.2693999999997%2C%22height%22%3A37.19820000000027%2C%22text%22%3A%22Redu%E4%B8%AD%E6%88%B7%E5%85%88n%E8%AF%B7%E6%9C%AB%E5%87%BA%E4%B9%88%E6%96%87%E7%90%86%22%7D%2C%7B%22x%22%3A675.7878%2C%22y%22%3A2673.6558%2C%22width%22%3A593.2289%2C%22height%22%3A42.361199999999826%2C%22text%22%3A%22teact%E4%B8%ADnstctenlrooacestatenz%E4%BB%80%E4%B9%88%22%7D%2C%7B%22x%22%3A2632.6055%2C%22y%22%3A2714.969%2C%22width%22%3A496.4809%2C%22height%22%3A39.32369999999992%2C%22text%22%3A%22ReTukC%E4%B9%88%E5%AE%9E%E6%B3%B0%E4%BD%9C%E4%B8%93%E8%AE%A9%2C%E4%BB%8B%E7%BB%84%E4%B8%8B%E5%93%81%E7%90%86%22%7D%2C%7B%22x%22%3A660.2581%2C%22y%22%3A2747.9624%2C%22width%22%3A605.3659%2C%22height%22%3A35.20560000000023%2C%22text%22%3A%22%E7%94%9FE%E4%B8%AD%E7%9A%84%E5%B1%B1ns.slaleoeal%22%7D%2C%7B%22x%22%3A1432.383%2C%22y%22%3A2751.6282%2C%22width%22%3A146.33940000000007%2C%22height%22%3A48.366399999999885%2C%22text%22%3A%22%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%22%7D%2C%7B%22x%22%3A2636.2207%2C%22y%22%3A2789.2532%2C%22width%22%3A604.2378000000003%2C%22height%22%3A38.83179999999993%2C%22text%22%3A%22Rtedux%E4%B8%AD%E9%97%B4%E9%B2%9C%E4%B9%901%E4%B9%88%E6%8C%87%E5%88%97%E5%87%A0%E4%B8%AA%E9%9B%B6%E6%88%98%E5%88%9D%E9%A5%AE%E9%80%9A%22%7D%2C%7B%22x%22%3A680.9483%2C%22y%22%3A2817.7832%2C%22width%22%3A587.961%2C%22height%22%3A39.73680000000013%2C%22text%22%3A%22stte%E4%B9%88%E6%B1%AA%E5%A4%A9%E5%8A%B2%E5%BC%BA%E4%BB%B6%E8%8D%AF%2Crduce*%E4%BB%B6%22%7D%2C%7B%22x%22%3A685.8969%2C%22y%22%3A2856.3357%2C%22width%22%3A329.45130000000006%2C%22height%22%3A35.26170000000002%2C%22text%22%3A%22%E6%98%93%E4%B8%8B%E4%BB%80%E5%B9%BA%E6%A0%8F%E7%9A%84%E8%BF%87%E4%B9%A6%22%7D%2C%7B%22x%22%3A2622.8347%2C%22y%22%3A2897.5005%2C%22width%22%3A419.9058%2C%22height%22%3A35.9386999999997%2C%22text%22%3A%22Hdu%E6%9C%AB%E4%B8%AD%E9%97%B4%E7%83%A8%E5%8D%B4%E6%B2%B3%E5%AE%9A%E7%90%86%E5%BC%80%22%7D%2C%7B%22x%22%3A761.403%2C%22y%22%3A2928.9104%2C%22width%22%3A501.9468999999999%2C%22height%22%3A38.64229999999998%2C%22text%22%3A%22Acact%E7%9A%84t27pmp5.%E6%B1%81%E4%B9%88R%22%7D%2C%7B%22x%22%3A2629.8608%2C%22y%22%3A2970.5015%2C%22width%22%3A698.6952000000001%2C%22height%22%3A35.41130000000021%2C%22text%22%3A%22R%E5%B1%B1u%E6%BB%A8%E5%8D%97%E4%BB%96%E7%90%86%E6%88%91%E6%9D%91%E5%A4%9C%E6%98%9Fdu%E4%B8%AD%E4%BB%80x%22%7D%2C%7B%22x%22%3A790.42285%2C%22y%22%3A2997.8828%2C%22width%22%3A472.64385000000004%2C%22height%22%3A36.72880000000032%2C%22text%22%3A%22PeX%3A%3Aooes%E5%8A%9B%E6%97%B6%E5%9C%B0sky%22%7D%2C%7B%22x%22%3A2630.9033%2C%22y%22%3A3042.432%2C%22width%22%3A380.32970000000023%2C%22height%22%3A37.48330000000033%2C%22text%22%3A%22moboxlmdx%E7%99%BD%E5%90%8D%E5%8C%BA%22%7D%2C%7B%22x%22%3A2635.2727%2C%22y%22%3A3114.5132%2C%22width%22%3A558.0569%2C%22height%22%3A38.31280000000015%2C%22text%22%3A%22Redux%E5%92%8C%E5%8D%8Eu%E6%9C%89%E4%BB%80%E5%85%AD%E8%93%9D1%2C1%E6%AC%A1%E9%A4%90%E8%B6%B3%E6%82%A8%22%7D%2C%7B%22x%22%3A2621.5469%2C%22y%22%3A3183.9%2C%22width%22%3A711.5307000000003%2C%22height%22%3A39.05339999999978%2C%22text%22%3A%22Redux%E4%B8%AD%E9%97%B4%E4%BB%B6%E8%B6%B3%E8%AE%B0%E4%B9%88Istoreqacton%22%7D%2C%7B%22x%22%3A932.98145%2C%22y%22%3A3265.3325%2C%22width%22%3A328.62014999999997%2C%22height%22%3A37.233700000000226%2C%22text%22%3A%22%E5%91%BD%E6%97%A5%E5%8D%A1%E4%BB%81%E7%BA%B8%3F%22%7D%2C%7B%22x%22%3A751.54846%2C%22y%22%3A3336.2698%2C%22width%22%3A509.2076400000001%2C%22height%22%3A41.204099999999926%2C%22text%22%3A%22R%E5%90%90%E4%BA%B2%E8%BD%A6%E4%BA%86%E7%94%9F%E5%91%BD%E6%97%A5%E5%9B%A2%E4%B8%BA%E8%AE%A1%E4%B9%88%22%7D%2C%7B%22x%22%3A2632.8093%2C%22y%22%3A3381.613%2C%22width%22%3A567.8688999999999%2C%22height%22%3A38.66020000000026%2C%22text%22%3A%22%E5%AF%B9RHook%E7%9A%84%E7%89%8C%2C%E5%AE%83%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%90%86%E5%AE%9A%E4%BB%80%E4%B9%88%22%7D%2C%7B%22x%22%3A624.6052%2C%22y%22%3A3411.3938%2C%22width%22%3A641.0620000000001%2C%22height%22%3A40.16139999999996%2C%22text%22%3A%22Re2Z16X%E4%B8%ADprDp%E6%94%B9%E5%90%8E%E5%B7%A5%E5%BE%97%E4%B8%AA%E7%94%9F%E8%BD%AE%E5%8F%B8%E4%B8%AD%E5%BF%83%E7%90%86%22%7D%2C%7B%22x%22%3A2633.3345%2C%22y%22%3A3459.1262%2C%22width%22%3A493.09569999999985%2C%22height%22%3A32.05079999999998%2C%22text%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%88idSLa%E6%A2%B5%E4%BD%BF%E5%B8%82%E6%95%B0%E8%AF%81%E8%80%8C%E4%B8%8D%E5%85%89%E5%AF%B9%22%7D%2C%7B%22x%22%3A593.57855%2C%22y%22%3A3486.3633%2C%22width%22%3A664.7020500000001%2C%22height%22%3A35.447999999999865%2C%22text%22%3A%22Rdl%E6%80%A7%E5%BA%97%E8%AF%95%E5%8C%96%E5%9C%A8%E5%B7%A5%E4%B8%AA%E4%B8%AD%3F%E5%AE%83%E4%BC%98%E5%8C%96%E7%9A%84%2C%E7%90%86%E4%BB%80%22%7D%2C%7B%22x%22%3A1434.3691%2C%22y%22%3A3506.608%2C%22width%22%3A149.39460000000008%2C%22height%22%3A42.53869999999961%2C%22text%22%3A%22%E7%94%9F%E5%91%BD%E6%97%A5%E6%9C%9F%22%7D%2C%7B%22x%22%3A2630.0488%2C%22y%22%3A3525.4148%2C%22width%22%3A388.79280000000017%2C%22height%22%3A36.03099999999995%2C%22text%22%3A%22ReFcHooksa7%22%7D%2C%7B%22x%22%3A599.267%2C%22y%22%3A3554.9197%2C%22width%22%3A664.3082999999999%2C%22height%22%3A37.44930000000022%2C%22text%22%3A%22state%E5%8F%B8props%E5%8F%91%E7%8E%8B%E7%9A%84%E7%94%9F%E4%B8%AD%E5%9B%A2%E5%88%B7%E6%9C%88%E5%88%86%E6%8E%92%E6%9C%89%E4%B9%88%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2589.9277%2C%22y%22%3A3599.319%2C%22width%22%3A449.77959999999985%2C%22height%22%3A35.159999999999854%2C%22text%22%3A%22ReRcHoDk%E7%9A%84%E6%97%A0%E5%88%A9%E9%99%85%E4%B8%87%E9%9D%A2%3F%22%7D%2C%7B%22x%22%3A2310.9338%2C%22y%22%3A3630.3813%2C%22width%22%3A119.80670000000009%2C%22height%22%3A35.23439999999982%2C%22text%22%3A%22Hodks%22%7D%2C%7B%22x%22%3A2634.9695%2C%22y%22%3A3669.511%2C%22width%22%3A471.19090000000006%2C%22height%22%3A40.054999999999836%2C%22text%22%3A%22KSeEFTECt%E4%B8%8EUSELANOMERE%E6%97%B6%22%7D%2C%7B%22x%22%3A912.40924%2C%22y%22%3A3700.151%2C%22width%22%3A354.60375999999997%2C%22height%22%3A34.646999999999935%2C%22text%22%3A%22%E5%85%A5c15%E4%B8%AD%E4%B8%B9%E6%9C%AC%E7%90%86%E6%9C%AC%E7%94%A8%22%7D%2C%7B%22x%22%3A2630.7678%2C%22y%22%3A3739.6213%2C%22width%22%3A621.5913%2C%22height%22%3A38.63290000000006%2C%22text%22%3A%22RIScHnDkS%E5%9D%90%E5%AF%B9%E5%BC%80%E5%8F%91%E4%B8%AD%E8%81%9A%E5%85%B3%E6%B3%A8%E7%8E%B0%E7%9A%84%E9%97%AE%E6%82%A8%E5%92%8C.%E5%8C%BB%22%7D%2C%7B%22x%22%3A2591.1936%2C%22y%22%3A3815.0488%2C%22width%22%3A470.17819999999983%2C%22height%22%3A45.68319999999994%2C%22text%22%3A%22REACEHODLS%E7%A7%81%E5%B8%82%E6%8B%8C%E7%94%B5%E5%85%88%22%7D%2C%7B%22x%22%3A982.9798%2C%22y%22%3A3824.6733%2C%22width%22%3A278.0897000000001%2C%22height%22%3A38.16409999999996%2C%22text%22%3A%22%E7%88%B6%E5%AD%90d%E4%BD%9C%E7%9A%84%E8%BF%87%E4%BF%A1)%E5%BC%8F%3F%22%7D%2C%7B%22x%22%3A992.6933%2C%22y%22%3A3892.9355%2C%22width%22%3A268.2424%2C%22height%22%3A37.264000000000124%2C%22text%22%3A%22%E6%82%A8%E5%A6%88%E4%BA%A7%E6%95%B0%E8%AF%AD%E4%BF%A1%E5%B8%82%3F%22%7D%2C%7B%22x%22%3A2687.6245%2C%22y%22%3A3936.583%2C%22width%22%3A564.3508000000002%2C%22height%22%3A37.82999999999993%2C%22text%22%3A%22%E5%AF%B9%E5%BA%84%E8%8E%B7DO%E7%9A%84%E5%8D%AB%E6%97%85%3F%E8%99%91Da%E7%8E%8B%E7%B4%AF%E5%81%9A%E4%BA%86%E4%BB%80%22%7D%2C%7B%22x%22%3A896.4889%2C%22y%22%3A3963.9067%2C%22width%22%3A365.35400000000016%2C%22height%22%3A41.28810000000021%2C%22text%22%3A%22%E4%B8%B0%E4%BB%A5E%E7%BE%8E%E4%B8%8D%3C%E4%BF%A1%E7%9A%84%E9%80%80%E4%BF%A1%E5%A3%B0.%E5%BC%8F%3F%22%7D%2C%7B%22x%22%3A1430.903%2C%22y%22%3A3988.6162%2C%22width%22%3A152.6141%2C%22height%22%3A45.115200000000186%2C%22text%22%3A%22%E7%BB%84%E4%BB%B6%E9%80%82%E4%BF%A1%22%7D%2C%7B%22x%22%3A869.2657%2C%22y%22%3A4032.2124%2C%22width%22%3A405.55959999999993%2C%22height%22%3A39.375600000000304%2C%22text%22%3A%22%E7%9F%A5%E4%BB%81%E9%B2%9CprOps%E6%81%90HS%E8%B4%AD0E%22%7D%2C%7B%22x%22%3A2679.17%2C%22y%22%3A4047.9185%2C%22width%22%3A384.92769999999973%2C%22height%22%3A35.04249999999956%2C%22text%22%3A%22PEECRICIT%E6%B8%85%E7%A4%BC%E8%83%9C%E5%8D%81%E7%BA%A7%3F%22%7D%2C%7B%22x%22%3A984.3712%2C%22y%22%3A4111.9346%2C%22width%22%3A290.56629999999996%2C%22height%22%3A37.43740000000071%2C%22text%22%3A%22%E8%B5%B7%E4%BB%B6%E8%BF%87%E4%BC%AF%E7%9A%84%E6%96%B9%E5%BC%8F%E4%B8%83%E8%8F%8C%E5%9E%AB%22%7D%2C%7B%22x%22%3A2679.0312%2C%22y%22%3A4117.087%2C%22width%22%3A598.8418000000001%2C%22height%22%3A38.89799999999923%2C%22text%22%3A%22RECREY%E4%B9%90%E5%8D%83%E6%96%B0%E7%9A%84%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9E%8Bjkey%E5%B7%A5%E6%81%B6%22%7D%2C%7B%22x%22%3A2683.3877%2C%22y%22%3A4155.7617%2C%22width%22%3A478.17029999999977%2C%22height%22%3A37.1262999999999%2C%22text%22%3A%22%E8%BD%A6%E5%91%B3%E4%B8%80%E5%AE%89%E5%BA%97%E6%97%B6%22%7D%2C%7B%22x%22%3A2316.7256%2C%22y%22%3A4179.105%2C%22width%22%3A164.8480999999997%2C%22height%22%3A42.632300000000214%2C%22text%22%3A%22%E5%BA%AD%E6%8B%9FDOM%22%7D%2C%7B%22x%22%3A2683.2651%2C%22y%22%3A4222.9365%2C%22width%22%3A580.4605000000001%2C%22height%22%3A45.2471000000005%2C%22text%22%3A%22%E6%97%BA%E6%AC%BEDO%E6%80%BB%E6%97%B6%E5%AD%94%E4%B8%8E%E5%B8%82%E8%BF%98%E5%B7%A5IDC%E6%AF%94%22%7D%2C%7B%22x%22%3A2680.4023%2C%22y%22%3A4261.866%2C%22width%22%3A507.8640999999998%2C%22height%22%3A42.94940000000042%2C%22text%22%3A%22%E5%8F%AB%E4%B8%80%E4%B8%AA%E7%82%AB%E7%8E%87%E6%AD%A3%E5%B0%9A%2C%E5%A4%A7%E4%B9%88%22%7D%2C%7B%22x%22%3A2667.9272%2C%22y%22%3A4330.4297%2C%22width%22%3A469.55420000000004%2C%22height%22%3A48.70460000000003%2C%22text%22%3A%22Rrau%E4%B8%8Educ%E8%BF%87%E5%BC%80%E7%AE%97%E6%B3%95%E7%9F%B3%E6%9C%88%E4%B8%8D%E5%90%8C%3F%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f8f6f4%22%2C%22id%22%3A%22pG0Bt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"5b870eea727b5935a52bc05f23a19c3b\" id=\"5b870eea727b5935a52bc05f23a19c3b\"><span data-lake-id=\"ua3850126\" id=\"ua3850126\">一、组件基础</span></h2><h3 data-lake-id=\"04a9c35da89b228b58e5b5473dc8e046\" id=\"04a9c35da89b228b58e5b5473dc8e046\"><span data-lake-id=\"u5a295530\" id=\"u5a295530\">1. </span><span data-lake-id=\"u4bbe820e\" id=\"u4bbe820e\">React 事件机制</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cdiv%20onClick%3D%7Bthis.handleClick.bind(this)%7D%3E%E7%82%B9%E6%88%91%3C%2Fdiv%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22fo2AL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"e53d72e273842e9dd38d96e580065d97\" id=\"e53d72e273842e9dd38d96e580065d97\" style=\"text-align: justify\"><span data-lake-id=\"u55a67265\" id=\"u55a67265\">React并不是将click事件绑定到了div的真实DOM上，而是在document处监听了所有的事件，当事件发生并且冒泡到document处的时候，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅仅减少了内存的消耗，还能在组件挂在销毁时统一订阅和移除事件。</span></p><p data-lake-id=\"28fcc358cba0f5ec10c3e87a0773aecd\" id=\"28fcc358cba0f5ec10c3e87a0773aecd\"><br></p><p data-lake-id=\"b8b14eff9912e6fe2460be1e131d29c8\" id=\"b8b14eff9912e6fe2460be1e131d29c8\" style=\"text-align: justify\"><span data-lake-id=\"u65241978\" id=\"u65241978\">除此之外，冒泡到document上的事件也不是原生的浏览器事件，而是由react自己实现的合成事件（SyntheticEvent）。因此如果不想要是事件冒泡的话应该调用event.preventDefault()方法，而不是调用</span><span data-lake-id=\"u00b56b5e\" id=\"u00b56b5e\" class=\"lake-fontsize-12\">event.stopProppagation()方法。</span></p><p data-lake-id=\"cd42d621c43bccee2cf4e40bc246604b\" id=\"cd42d621c43bccee2cf4e40bc246604b\" style=\"text-align: justify\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1611890469312-7504e85d-c6db-481e-b9d3-5307a3de708c.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A878%2C%22height%22%3A395%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%2277fa6b2a59c92e160bc171f9c80783e7.jpg%22%2C%22size%22%3A45047%2C%22originWidth%22%3A878%2C%22originHeight%22%3A395%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%20DOM%20%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E5%B1%82%20document%20handler1%20%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%88%90%E7%BB%9F%E4%B8%80%E7%9A%84react%20event%20%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E8%87%B3%E9%A1%B6%E5%B1%82%20Synthetic%20Event%20event%E5%AF%B9%E8%B1%A1%E4%BA%A4%E7%94%B1%E5%AF%B9%E5%BA%94%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8%E6%89%A7%E8%A1%8C%20Event%20div%20handler2%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A691.4067%2C%22y%22%3A56.448658%2C%22width%22%3A80.16824999999994%2C%22height%22%3A14.872931999999999%2C%22text%22%3A%22%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%22%7D%2C%7B%22x%22%3A165.4132%2C%22y%22%3A57.28714%2C%22width%22%3A34.72562000000002%2C%22height%22%3A12.513200000000005%2C%22text%22%3A%22DOM%22%7D%2C%7B%22x%22%3A440.01245%2C%22y%22%3A57.270683%2C%22width%22%3A66.26814999999999%2C%22height%22%3A14.303647000000005%2C%22text%22%3A%22%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E5%B1%82%22%7D%2C%7B%22x%22%3A200.19907%2C%22y%22%3A113.59391%2C%22width%22%3A65.28769%2C%22height%22%3A12.388825000000011%2C%22text%22%3A%22document%22%7D%2C%7B%22x%22%3A740.1472%2C%22y%22%3A146.37373%2C%22width%22%3A56.457700000000045%2C%22height%22%3A14.29692%2C%22text%22%3A%22handler1%22%7D%2C%7B%22x%22%3A410.76788%2C%22y%22%3A164.92207%2C%22width%22%3A126.13261999999997%2C%22height%22%3A14.88205000000002%2C%22text%22%3A%22%E5%AE%9E%E4%BE%8B%E5%8C%96%E6%88%90%E7%BB%9F%E4%B8%80%E7%9A%84react%22%7D%2C%7B%22x%22%3A454.04282%2C%22y%22%3A183.64365%2C%22width%22%3A37.60798%2C%22height%22%3A10.25564%2C%22text%22%3A%22event%22%7D%2C%7B%22x%22%3A139.33797%2C%22y%22%3A198.82895%2C%22width%22%3A95.38016999999999%2C%22height%22%3A15.776309999999995%2C%22text%22%3A%22%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E8%87%B3%E9%A1%B6%E5%B1%82%22%7D%2C%7B%22x%22%3A404.6944%2C%22y%22%3A217.13052%2C%22width%22%3A61.325770000000034%2C%22height%22%3A12.541770000000014%2C%22text%22%3A%22Synthetic%22%7D%2C%7B%22x%22%3A526.7603%2C%22y%22%3A225.47517%2C%22width%22%3A37.5625%2C%22height%22%3A11.884080000000012%2C%22text%22%3A%22Event%22%7D%2C%7B%22x%22%3A635.9975%2C%22y%22%3A229.838%2C%22width%22%3A193.91186000000005%2C%22height%22%3A16.012020000000007%2C%22text%22%3A%22event%E5%AF%B9%E8%B1%A1%E4%BA%A4%E7%94%B1%E5%AF%B9%E5%BA%94%E7%9A%84%E5%A4%84%E7%90%86%E5%99%A8%E6%89%A7%E8%A1%8C%22%7D%2C%7B%22x%22%3A416.08594%2C%22y%22%3A234.94519%2C%22width%22%3A36.94348000000002%2C%22height%22%3A10.25451000000001%2C%22text%22%3A%22Event%22%7D%2C%7B%22x%22%3A96.659294%2C%22y%22%3A253.58655%2C%22width%22%3A20.289416000000003%2C%22height%22%3A13.526790000000005%2C%22text%22%3A%22div%22%7D%2C%7B%22x%22%3A714.3061%2C%22y%22%3A308.66846%2C%22width%22%3A56.68780000000004%2C%22height%22%3A12.125760000000014%2C%22text%22%3A%22handler2%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fafaf8%22%2C%22id%22%3A%22COBUQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"59adcea76c506fcff9d3a86adaae2a92\" id=\"59adcea76c506fcff9d3a86adaae2a92\" style=\"text-align: justify\"><span data-lake-id=\"uf36e8ab8\" id=\"uf36e8ab8\">JSX 上写的事件并没有绑定在对应的真实 DOM 上，而是通过事件代理的方式，将所有的事件都统一绑定在了 </span><code data-lake-id=\"ua76cd83a\" id=\"ua76cd83a\"><span data-lake-id=\"u7b5c2ea6\" id=\"u7b5c2ea6\">document</span></code><span data-lake-id=\"u11dc5ed9\" id=\"u11dc5ed9\"> 上。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。</span></p><p data-lake-id=\"2d40194899f287ed74805d617721d8ac\" id=\"2d40194899f287ed74805d617721d8ac\"><br></p><p data-lake-id=\"0c973269eab411fcd8f306c169d5278b\" id=\"0c973269eab411fcd8f306c169d5278b\"><span data-lake-id=\"u447f0e19\" id=\"u447f0e19\">另外冒泡到 </span><code data-lake-id=\"u345edcd0\" id=\"u345edcd0\"><span data-lake-id=\"u98d551a2\" id=\"u98d551a2\">document</span></code><span data-lake-id=\"u5008da7a\" id=\"u5008da7a\"> 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 </span><code data-lake-id=\"u30ad6a57\" id=\"u30ad6a57\"><span data-lake-id=\"ufde7dc8d\" id=\"ufde7dc8d\">event.stopPropagation</span></code><span data-lake-id=\"u9989d38a\" id=\"u9989d38a\"> 是无效的，而应该调用 </span><code data-lake-id=\"u3eb731fd\" id=\"u3eb731fd\"><span data-lake-id=\"u875bfa97\" id=\"u875bfa97\">event.preventDefault</span></code><span data-lake-id=\"uf690f3ad\" id=\"uf690f3ad\">。</span></p><p data-lake-id=\"cd67df1998f37c6caf06d774c3133693\" id=\"cd67df1998f37c6caf06d774c3133693\"><br></p><p data-lake-id=\"5204b724ff942abdfdf44cb7c4d5b530\" id=\"5204b724ff942abdfdf44cb7c4d5b530\"><span data-lake-id=\"u089a4cc5\" id=\"u089a4cc5\">实现合成事件的目的如下：</span></p><ul list=\"u9ee67f96\"><li fid=\"u3da20f1d\" data-lake-id=\"18ea86bc12034f5e28b1718006bdbf27\" id=\"18ea86bc12034f5e28b1718006bdbf27\"><span data-lake-id=\"ue24e76d9\" id=\"ue24e76d9\">合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力；</span></li><li fid=\"u3da20f1d\" data-lake-id=\"2622669af7659a54ee1e6bed48e111f3\" id=\"2622669af7659a54ee1e6bed48e111f3\"><span data-lake-id=\"u467a724a\" id=\"u467a724a\">对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个事件池专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象。</span></li></ul><h3 data-lake-id=\"224a6d843ac7bfd7ed40e978bf6e64a1\" id=\"224a6d843ac7bfd7ed40e978bf6e64a1\"><span data-lake-id=\"u08224f74\" id=\"u08224f74\">2. </span><span data-lake-id=\"u8f2fd45d\" id=\"u8f2fd45d\">React的事件和普通的HTML事件有什么不同？</span></h3><p data-lake-id=\"24c85e24e2e6800d95bf84b3f628b68e\" id=\"24c85e24e2e6800d95bf84b3f628b68e\"><span data-lake-id=\"uaa9ed029\" id=\"uaa9ed029\">区别：</span></p><ul list=\"ubcb0ea1b\"><li fid=\"uf7b57743\" data-lake-id=\"u1605ab23\" id=\"u1605ab23\"><span data-lake-id=\"uc5161711\" id=\"uc5161711\">对于事件名称命名方式，原生事件为全小写，react 事件采用小驼峰；</span></li><li fid=\"uf7b57743\" data-lake-id=\"u4b115369\" id=\"u4b115369\"><span data-lake-id=\"u47d3bce0\" id=\"u47d3bce0\">对于事件函数处理语法，原生事件为字符串，react 事件为函数；</span></li><li fid=\"uf7b57743\" data-lake-id=\"u939285e7\" id=\"u939285e7\"><span data-lake-id=\"u4bbb1558\" id=\"u4bbb1558\">react 事件不能采用 return false 的方式来阻止浏览器的默认行为，而必须要地明确地调用</span><code data-lake-id=\"ucffd4db4\" id=\"ucffd4db4\"><span data-lake-id=\"u438ae1a5\" id=\"u438ae1a5\">preventDefault()</span></code><span data-lake-id=\"u04952893\" id=\"u04952893\">来阻止默认行为。</span></li></ul><p data-lake-id=\"2a9493dd98119ffb900e9abdf7928c6a\" id=\"2a9493dd98119ffb900e9abdf7928c6a\"><br></p><p data-lake-id=\"1c9a4b3a7a33788be1c968165fbc7750\" id=\"1c9a4b3a7a33788be1c968165fbc7750\"><span data-lake-id=\"ucd249b3a\" id=\"ucd249b3a\">合成事件是 react 模拟原生 DOM 事件所有能力的一个事件对象，其优点如下：</span></p><ul list=\"u44bffd7d\"><li fid=\"ue85bf537\" data-lake-id=\"021e0528be00dbe4bb318d546042c25b\" id=\"021e0528be00dbe4bb318d546042c25b\"><span data-lake-id=\"u27120f34\" id=\"u27120f34\">兼容所有浏览器，更好的跨平台；</span></li><li fid=\"ue85bf537\" data-lake-id=\"90581ccc1a0a3da39c8f259798ae28e5\" id=\"90581ccc1a0a3da39c8f259798ae28e5\"><span data-lake-id=\"u525de24e\" id=\"u525de24e\">将事件统一存放在一个数组，避免频繁的新增与删除（垃圾回收）。</span></li><li fid=\"ue85bf537\" data-lake-id=\"679505fc1bcc7036e95455d6977364a2\" id=\"679505fc1bcc7036e95455d6977364a2\"><span data-lake-id=\"ua40f89be\" id=\"ua40f89be\">方便 react 统一管理和事务机制。</span></li></ul><p data-lake-id=\"c709b5a952425345ee77a4e0ea4cc4c8\" id=\"c709b5a952425345ee77a4e0ea4cc4c8\"><br></p><p data-lake-id=\"75cc96ac2947d41bd85f373fc35a675a\" id=\"75cc96ac2947d41bd85f373fc35a675a\"><span data-lake-id=\"u0581e1f6\" id=\"u0581e1f6\">事件的执行顺序为原生事件先执行，合成事件后执行，合成事件会冒泡绑定到 document 上，所以尽量避免原生事件与合成事件混用，如果原生事件阻止冒泡，可能会导致合成事件不执行，因为需要冒泡到document 上合成事件才会执行。</span></p><h3 data-lake-id=\"1e92076dddc0b9cf7bafb8e9f8bd12ab\" id=\"1e92076dddc0b9cf7bafb8e9f8bd12ab\"><span data-lake-id=\"ua7e42d91\" id=\"ua7e42d91\">3. </span><span data-lake-id=\"u7efdd8d3\" id=\"u7efdd8d3\">React 组件中怎么做事件代理？它的原理是什么？</span></h3><p data-lake-id=\"7d264348ce53e793bc65cf72e0ff5f4a\" id=\"7d264348ce53e793bc65cf72e0ff5f4a\"><span data-lake-id=\"ucee6e38d\" id=\"ucee6e38d\">React基于Virtual DOM实现了一个SyntheticEvent层（合成事件层），定义的事件处理器会接收到一个合成事件对象的实例，它符合W3C标准，且与原生的浏览器事件拥有同样的接口，支持冒泡机制，所有的事件都自动绑定在最外层上。</span></p><p data-lake-id=\"1ac974fb3fdbbf9f82f806acaba0989e\" id=\"1ac974fb3fdbbf9f82f806acaba0989e\"><br></p><p data-lake-id=\"4fbf6c2ab5db9070c6dda795a79d057d\" id=\"4fbf6c2ab5db9070c6dda795a79d057d\"><span data-lake-id=\"u4328fb24\" id=\"u4328fb24\">在React底层，主要对合成事件做了两件事：</span></p><ul list=\"ud0af95e8\"><li fid=\"ubdd71eb2\" data-lake-id=\"0b07de35998c73aa7e923c4355c19b98\" id=\"0b07de35998c73aa7e923c4355c19b98\"><strong><span data-lake-id=\"u0c43943a\" id=\"u0c43943a\">事件委派：</span></strong><span data-lake-id=\"u6eb4eaa9\" id=\"u6eb4eaa9\">React会把所有的事件绑定到结构的最外层，使用统一的事件监听器，这个事件监听器上维持了一个映射来保存所有组件内部事件监听和处理函数。</span></li><li fid=\"ubdd71eb2\" data-lake-id=\"c72baf9f653f29b5c237853738f58efc\" id=\"c72baf9f653f29b5c237853738f58efc\"><strong><span data-lake-id=\"uecfeeec8\" id=\"uecfeeec8\">自动绑定：</span></strong><span data-lake-id=\"ua7d734ed\" id=\"ua7d734ed\">React组件中，每个方法的上下文都会指向该组件的实例，即自动绑定this为当前组件。</span></li></ul><h3 data-lake-id=\"ed35e4f12ef7129465da50f000fded45\" id=\"ed35e4f12ef7129465da50f000fded45\"><span data-lake-id=\"u3c46a4b6\" id=\"u3c46a4b6\">4. </span><span data-lake-id=\"u25f78a41\" id=\"u25f78a41\">React 高阶组件、Render props、hooks 有什么区别，为什么要不断迭代</span></h3><p data-lake-id=\"c13d1e8921fa3436b8e43aa11cd213e2\" id=\"c13d1e8921fa3436b8e43aa11cd213e2\"><span data-lake-id=\"u7c371ca9\" id=\"u7c371ca9\">这三者是目前react解决代码复用的主要方式：</span></p><ul list=\"uc9382172\"><li fid=\"u58320af6\" data-lake-id=\"21406756f9210b2a0d936505340b530d\" id=\"21406756f9210b2a0d936505340b530d\"><span data-lake-id=\"udbc24a54\" id=\"udbc24a54\">高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。具体而言，高阶组件是参数为组件，返回值为新组件的函数。</span></li><li fid=\"u58320af6\" data-lake-id=\"92028468b93d9b171aedc5cc69802b73\" id=\"92028468b93d9b171aedc5cc69802b73\"><span data-lake-id=\"u5443ca46\" id=\"u5443ca46\">render props是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术，更具体的说，render prop 是一个用于告知组件需要渲染什么内容的函数 prop。</span></li><li fid=\"u58320af6\" data-lake-id=\"5a94b375fc5fec612b8dcb89d0492ad0\" id=\"5a94b375fc5fec612b8dcb89d0492ad0\"><span data-lake-id=\"u697d13f4\" id=\"u697d13f4\">通常，render props 和高阶组件只渲染一个子节点。让 Hook 来服务这个使用场景更加简单。这两种模式仍有用武之地，（例如，一个虚拟滚动条组件或许会有一个 renderltem 属性，或是一个可见的容器组件或许会有它自己的 DOM 结构）。但在大部分场景下，Hook 足够了，并且能够帮助减少嵌套。</span></li></ul><p data-lake-id=\"f0c8072680a5828b569f0c76f49ed368\" id=\"f0c8072680a5828b569f0c76f49ed368\"><br></p><p data-lake-id=\"57988c7eb6c9868e23bdd772f5e05b11\" id=\"57988c7eb6c9868e23bdd772f5e05b11\"><strong><span data-lake-id=\"uefc2ea34\" id=\"uefc2ea34\">（1）HOC</span></strong></p><p data-lake-id=\"3637b639be855859fc09bace0d63fd91\" id=\"3637b639be855859fc09bace0d63fd91\"><span data-lake-id=\"u674fe254\" id=\"u674fe254\">官方解释∶ </span></p><blockquote data-lake-id=\"u09e81a81\" id=\"u09e81a81\"><p data-lake-id=\"6d7d4b167480c0cd044155db7600e928\" id=\"6d7d4b167480c0cd044155db7600e928\"><span data-lake-id=\"u96e39c53\" id=\"u96e39c53\">高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。</span></p></blockquote><p data-lake-id=\"0cfe67b5be12286357365a6c4bc8f46c\" id=\"0cfe67b5be12286357365a6c4bc8f46c\"><span data-lake-id=\"ubad39976\" id=\"ubad39976\">简言之，HOC是一种组件的设计模式，HOC接受一个组件和额外的参数（如果需要），返回一个新的组件。HOC 是纯函数，没有副作用。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20hoc%E7%9A%84%E5%AE%9A%E4%B9%89%5Cnfunction%20withSubscription(WrappedComponent%2C%20selectData)%20%7B%5Cn%20%20return%20class%20extends%20React.Component%20%7B%5Cn%20%20%20%20constructor(props)%20%7B%5Cn%20%20%20%20%20%20super(props)%3B%5Cn%20%20%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20data%3A%20selectData(DataSource%2C%20props)%5Cn%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20%E4%B8%80%E4%BA%9B%E9%80%9A%E7%94%A8%E7%9A%84%E9%80%BB%E8%BE%91%E5%A4%84%E7%90%86%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20...%20%E5%B9%B6%E4%BD%BF%E7%94%A8%E6%96%B0%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93%E8%A2%AB%E5%8C%85%E8%A3%85%E7%9A%84%E7%BB%84%E4%BB%B6!%5Cn%20%20%20%20%20%20return%20%3CWrappedComponent%20data%3D%7Bthis.state.data%7D%20%7B...this.props%7D%20%2F%3E%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%3B%5Cn%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8%5Cnconst%20BlogPostWithSubscription%20%3D%20withSubscription(BlogPost%2C%5Cn%20%20(DataSource%2C%20props)%20%3D%3E%20DataSource.getBlogPost(props.id))%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wQQX2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"07cfff1292541516d677737b1f0cf3e3\" id=\"07cfff1292541516d677737b1f0cf3e3\"><span data-lake-id=\"ue3159706\" id=\"ue3159706\">HOC的优缺点∶</span></p><ul list=\"u827626b6\"><li fid=\"u587c2c68\" data-lake-id=\"0d976631af75e11cd46b6ba85ccd2e37\" id=\"0d976631af75e11cd46b6ba85ccd2e37\"><span data-lake-id=\"u25e9f0b9\" id=\"u25e9f0b9\">优点∶ 逻辑服用、不影响被包裹组件的内部逻辑。 </span></li><li fid=\"u587c2c68\" data-lake-id=\"7c5182c2a2287284c8d3106eaf46ed44\" id=\"7c5182c2a2287284c8d3106eaf46ed44\"><span data-lake-id=\"u6960acc3\" id=\"u6960acc3\">缺点∶ hoc传递给被包裹组件的props容易和被包裹后的组件重名，进而被覆盖 </span></li></ul><p data-lake-id=\"6d75a9d409cd34197ffeda0a907bcb9f\" id=\"6d75a9d409cd34197ffeda0a907bcb9f\"><br></p><p data-lake-id=\"95d4a7eb54ff6496535ee98fef093c0a\" id=\"95d4a7eb54ff6496535ee98fef093c0a\"><strong><span data-lake-id=\"u2350c5cf\" id=\"u2350c5cf\">（2）</span></strong><strong><span data-lake-id=\"u4ac2be80\" id=\"u4ac2be80\">Render props</span></strong></p><p data-lake-id=\"a83cb01abd78cce3e5170ea61019bd15\" id=\"a83cb01abd78cce3e5170ea61019bd15\"><span data-lake-id=\"ucabd473f\" id=\"ucabd473f\">官方解释∶</span></p><blockquote data-lake-id=\"u16287203\" id=\"u16287203\"><p data-lake-id=\"dee393a1d15681593af3cf169c6e9922\" id=\"dee393a1d15681593af3cf169c6e9922\"><span data-lake-id=\"u4ff89d07\" id=\"u4ff89d07\">&quot;render prop&quot;是指一种在 React 组件之间使用一个值为函数的 prop 共享代码的简单技术</span></p></blockquote><p data-lake-id=\"f39d15013bd2da356de0e015f9c3cb97\" id=\"f39d15013bd2da356de0e015f9c3cb97\"><span data-lake-id=\"u2303f097\" id=\"u2303f097\">具有render prop 的组件接受一个返回React元素的函数，将render的渲染逻辑注入到组件内部。在这里，&quot;render&quot;的命名可以是任何其他有效的标识符。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20DataProvider%E7%BB%84%E4%BB%B6%E5%86%85%E9%83%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E9%80%BB%E8%BE%91%E5%A6%82%E4%B8%8B%5Cnclass%20DataProvider%20extends%20React.Components%20%7B%5Cn%20%20%20%20%20state%20%3D%20%7B%5Cn%20%20%20%20name%3A%20'Tom'%5Cn%20%20%7D%5Cn%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3Cp%3E%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E7%BB%84%E4%BB%B6%E8%87%AA%E5%B7%B1%E5%86%85%E9%83%A8%E7%9A%84%E6%B8%B2%E6%9F%93%E9%80%BB%E8%BE%91%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%20%20%7B%20this.props.render(this.state)%20%7D%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20%E8%B0%83%E7%94%A8%E6%96%B9%E5%BC%8F%5Cn%3CDataProvider%20render%3D%7Bdata%20%3D%3E%20(%5Cn%20%20%3Ch1%3EHello%20%7Bdata.name%7D%3C%2Fh1%3E%5Cn)%7D%2F%3E%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%225cz3y%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"a7a435db70cc87bf707a344ddb10c957\" id=\"a7a435db70cc87bf707a344ddb10c957\"><span data-lake-id=\"u3ed1c484\" id=\"u3ed1c484\">由此可以看到，render props的优缺点也很明显∶</span></p><ul list=\"u8d9ac84c\"><li fid=\"uab35dfad\" data-lake-id=\"d6b1db2434493d8dd9148d235d0f78b3\" id=\"d6b1db2434493d8dd9148d235d0f78b3\"><span data-lake-id=\"u60e65a89\" id=\"u60e65a89\">优点：数据共享、代码复用，将组件内的state作为props传递给调用者，将渲染逻辑交给调用者。</span></li><li fid=\"uab35dfad\" data-lake-id=\"cb9d540d2b50d74000fab0d785127d41\" id=\"cb9d540d2b50d74000fab0d785127d41\"><span data-lake-id=\"u7f44a4db\" id=\"u7f44a4db\">缺点：无法在 return 语句外访问数据、嵌套写法不够优雅</span></li></ul><p data-lake-id=\"13f6cc661f6b10296ce2ea8d2e3f1324\" id=\"13f6cc661f6b10296ce2ea8d2e3f1324\"><br></p><p data-lake-id=\"21d86a96fd36da0fb8a005010b3deea9\" id=\"21d86a96fd36da0fb8a005010b3deea9\"><strong><span data-lake-id=\"u10a9da35\" id=\"u10a9da35\">（3）</span></strong><strong><span data-lake-id=\"udabe8828\" id=\"udabe8828\">Hooks</span></strong></p><p data-lake-id=\"b56994ee42d4d59633d922c73e28198a\" id=\"b56994ee42d4d59633d922c73e28198a\"><span data-lake-id=\"u28f0fe76\" id=\"u28f0fe76\">官方解释∶</span></p><blockquote data-lake-id=\"ud60975cf\" id=\"ud60975cf\"><p data-lake-id=\"cddd29105b3e1350faa45574e99c2f2c\" id=\"cddd29105b3e1350faa45574e99c2f2c\"><span data-lake-id=\"u85367d10\" id=\"u85367d10\">Hook是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。通过自定义hook，可以复用代码逻辑。</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E8%AE%A2%E9%98%85%E6%95%B0%E6%8D%AE%E7%9A%84hook%5Cnfunction%20useSubscription()%20%7B%5Cn%20%20const%20data%20%3D%20DataSource.getComments()%3B%5Cn%20%20return%20%5Bdata%5D%3B%5Cn%7D%5Cn%2F%2F%20%5Cnfunction%20CommentList(props)%20%7B%5Cn%20%20const%20%7Bdata%7D%20%3D%20props%3B%5Cn%20%20const%20%5BsubData%5D%20%3D%20useSubscription()%3B%5Cn%20%20%20%20...%5Cn%7D%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8%5Cn%3CCommentList%20data%3D'hello'%20%2F%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YWYc9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"c630e7506779e534e3bd0b71e21299dd\" id=\"c630e7506779e534e3bd0b71e21299dd\"><span data-lake-id=\"u58fed990\" id=\"u58fed990\">以上可以看出，hook解决了hoc的prop覆盖的问题，同时使用的方式解决了render props的嵌套地狱的问题。hook的优点如下∶ </span></p><ul list=\"u5bf0d43e\"><li fid=\"u5623036a\" data-lake-id=\"5811d1dbc69c0b6de773daeaedbf8624\" id=\"5811d1dbc69c0b6de773daeaedbf8624\"><span data-lake-id=\"u77131f25\" id=\"u77131f25\">使用直观；</span></li><li fid=\"u5623036a\" data-lake-id=\"227b20bbb8bbe6cfdd789586b47985bc\" id=\"227b20bbb8bbe6cfdd789586b47985bc\"><span data-lake-id=\"u66e7b41e\" id=\"u66e7b41e\">解决hoc的prop 重名问题；</span></li><li fid=\"u5623036a\" data-lake-id=\"091698e1d950100ed320cc427c0a38f5\" id=\"091698e1d950100ed320cc427c0a38f5\"><span data-lake-id=\"u3623d73f\" id=\"u3623d73f\">解决render props 因共享数据 而出现嵌套地狱的问题；</span></li><li fid=\"u5623036a\" data-lake-id=\"c4bb71b5857857dbd3009b50df59d5dd\" id=\"c4bb71b5857857dbd3009b50df59d5dd\"><span data-lake-id=\"u5fc99ec3\" id=\"u5fc99ec3\">能在return之外使用数据的问题。</span></li></ul><p data-lake-id=\"056c8c726f322eda80d05f1a740d11da\" id=\"056c8c726f322eda80d05f1a740d11da\"><br></p><p data-lake-id=\"4cff52972f22a34f9cc1a87e3c867811\" id=\"4cff52972f22a34f9cc1a87e3c867811\"><span data-lake-id=\"u9adce6fb\" id=\"u9adce6fb\">需要注意的是：hook只能在组件顶层使用，不可在分支语句中使用。</span></p><p data-lake-id=\"306ac3cd78233ebe31c483d8d78ce1ab\" id=\"306ac3cd78233ebe31c483d8d78ce1ab\"><br></p><p data-lake-id=\"125bca0a25cd5a3f01369048104b02b4\" id=\"125bca0a25cd5a3f01369048104b02b4\"><strong><span data-lake-id=\"u51c70e54\" id=\"u51c70e54\">总结∶</span></strong></p><p data-lake-id=\"a235ae5b038cdedcef71f0a3daefe234\" id=\"a235ae5b038cdedcef71f0a3daefe234\"><span data-lake-id=\"ubf6241c0\" id=\"ubf6241c0\">Hoc、render props和hook都是为了解决代码复用的问题，但是hoc和render props都有特定的使用场景和明显的缺点。hook是react16.8更新的新的API，让组件逻辑复用更简洁明了，同时也解决了hoc和render props的一些缺点。</span></p><h3 data-lake-id=\"352fb31b6bdc8c7982166531137feaa7\" id=\"352fb31b6bdc8c7982166531137feaa7\"><span data-lake-id=\"ud5f13eda\" id=\"ud5f13eda\">5. </span><span data-lake-id=\"u2876bc9d\" id=\"u2876bc9d\">对React-Fiber的理解，</span><span data-lake-id=\"u7b878c9f\" id=\"u7b878c9f\">它解决了什么问题？</span></h3><p data-lake-id=\"892b7c7445d16859f3d3a560db21eab2\" id=\"892b7c7445d16859f3d3a560db21eab2\" style=\"text-align: justify\"><span data-lake-id=\"u1ed2f04c\" id=\"u1ed2f04c\">React V15 在渲染时，会递归比对 VirtualDOM 树，找出需要变动的节点，然后同步更新它们， 一气呵成。这个过程期间， React 会占据浏览器资源，这会导致用户触发的事件得不到响应，并且会导致掉帧，</span><strong><span data-lake-id=\"u671dd1cd\" id=\"u671dd1cd\">导致用户感觉到卡顿</span></strong><span data-lake-id=\"u761837aa\" id=\"u761837aa\">。</span></p><p data-lake-id=\"46e36c4316302e5a1082e6dcd19a0dd0\" id=\"46e36c4316302e5a1082e6dcd19a0dd0\" style=\"text-align: justify\"><br></p><p data-lake-id=\"e91e049f74a79379ff81fdf3edb3c9fe\" id=\"e91e049f74a79379ff81fdf3edb3c9fe\" style=\"text-align: justify\"><span data-lake-id=\"u2c15e703\" id=\"u2c15e703\">为了给用户制造一种应用很快的“假象”，不能让一个任务长期霸占着资源。 可以将浏览器的渲染、布局、绘制、资源加载(例如 HTML 解析)、事件响应、脚本执行视作操作系统的“进程”，需要通过某些调度策略合理地分配 CPU 资源，从而提高浏览器的用户响应速率, 同时兼顾任务执行效率。</span></p><p data-lake-id=\"b132a04068d968d4c84daab74cd6f772\" id=\"b132a04068d968d4c84daab74cd6f772\" style=\"text-align: justify\"><br></p><p data-lake-id=\"41d9c9081ba1e28dda00352e4bed05e5\" id=\"41d9c9081ba1e28dda00352e4bed05e5\" style=\"text-align: justify\"><span data-lake-id=\"u28ec8c53\" id=\"u28ec8c53\">所以 React 通过Fiber 架构，让这个执行过程变成可被中断。“适时”地让出 CPU 执行权，除了可以让浏览器及时地响应用户的交互，还有其他好处:</span></p><ul list=\"u9b8f6f8a\"><li fid=\"u7d198fad\" data-lake-id=\"08698442a7683ed5b1bdcb3d7df925c6\" id=\"08698442a7683ed5b1bdcb3d7df925c6\"><span data-lake-id=\"u52e4bc63\" id=\"u52e4bc63\">分批延时对DOM进行操作，避免</span><span data-lake-id=\"ucd0bffb3\" id=\"ucd0bffb3\">一次性操作大量 DOM 节点，</span><span data-lake-id=\"u262c093f\" id=\"u262c093f\">可以得到更好的用户体验；</span></li><li fid=\"u7d198fad\" data-lake-id=\"39b4e439f590c0231ec2cca055bb7ffc\" id=\"39b4e439f590c0231ec2cca055bb7ffc\"><span data-lake-id=\"ue31ae0ab\" id=\"ue31ae0ab\">给浏览器一点喘息的机会，它会对代码进行编译优化（JIT）及进行热代码优化，或者对 reflow 进行修正。</span></li></ul><h4 data-lake-id=\"2d0899d10f6d9104abfd37d610111afe\" id=\"2d0899d10f6d9104abfd37d610111afe\"><br></h4><p data-lake-id=\"f9ba96292774a8be146a47cef03ac9ea\" id=\"f9ba96292774a8be146a47cef03ac9ea\" style=\"text-align: justify\"><strong><span data-lake-id=\"uf094ffa2\" id=\"uf094ffa2\">核心思想：</span></strong><span data-lake-id=\"u2f105e85\" id=\"u2f105e85\">Fiber 也称协程或者纤程。它和线程并不一样，协程本身是没有并发或者并行能力的（需要配合线程），它只是一种控制流程的让出机制。让出 CPU 的执行权，让 CPU 能在这段时间执行其他的操作。</span><span data-lake-id=\"ueb17eb73\" id=\"ueb17eb73\">渲染的过程可以被中断，可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染。</span></p><h3 data-lake-id=\"5bf7ff0f8690e794c2f74f94d0167f21\" id=\"5bf7ff0f8690e794c2f74f94d0167f21\"><span data-lake-id=\"u6ee4af1b\" id=\"u6ee4af1b\">6. React.Component 和 React.PureComponent 的区别</span></h3><p data-lake-id=\"87aa07ad14d57e11d0d4b03cca1fe820\" id=\"87aa07ad14d57e11d0d4b03cca1fe820\"><span data-lake-id=\"u011e3207\" id=\"u011e3207\">PureComponent表示一个纯组件，可以用来优化React程序，减少render函数执行的次数，从而提高组件的性能。</span></p><p data-lake-id=\"23ef5a03c68b024ae1b4dbdd51995191\" id=\"23ef5a03c68b024ae1b4dbdd51995191\"><br></p><p data-lake-id=\"ab4603c4e973044329416d3a59248fd2\" id=\"ab4603c4e973044329416d3a59248fd2\"><span data-lake-id=\"u52a1199a\" id=\"u52a1199a\">在React中，当</span><span data-lake-id=\"u1bb25768\" id=\"u1bb25768\" class=\"lake-fontsize-12\">prop或者state发生变化时，可以通过在</span><span data-lake-id=\"ufe1edcff\" id=\"ufe1edcff\" class=\"lake-fontsize-12\">shouldComponentUpdate生命周期函数中执行return false来阻止页面的更新，</span><span data-lake-id=\"uc3dbd1f1\" id=\"uc3dbd1f1\" class=\"lake-fontsize-12\">从而减少不必要的render执行。</span><span data-lake-id=\"u815fa166\" id=\"u815fa166\" class=\"lake-fontsize-12\">React.PureComponent会自动执行 shouldComponentUpdate。</span></p><p data-lake-id=\"2313a42bef169dffb818d85d3a27f4fd\" id=\"2313a42bef169dffb818d85d3a27f4fd\"><br></p><p data-lake-id=\"10ba210f9a6b31f7490c8924addfe224\" id=\"10ba210f9a6b31f7490c8924addfe224\"><span data-lake-id=\"u8881219e\" id=\"u8881219e\">不过，</span><span data-lake-id=\"u970d57a1\" id=\"u970d57a1\" class=\"lake-fontsize-12\">pureCompone</span><span data-lake-id=\"ucf29a8ba\" id=\"ucf29a8ba\" class=\"lake-fontsize-12\">nt中的 shouldComponentUpdate() 进</span><span data-lake-id=\"u0a112c72\" id=\"u0a112c72\" class=\"lake-fontsize-12\">行的是</span><strong><span data-lake-id=\"u0fc4a87f\" id=\"u0fc4a87f\" class=\"lake-fontsize-12\">浅比较</span></strong><span data-lake-id=\"u0b953253\" id=\"u0b953253\" class=\"lake-fontsize-12\">，也就是说如果是引用数据类型的数据，只会比较不是同一个地址，而不会比较这个地址里面的数据是否一致。浅比较会忽略属性和或状态突变情况，其实也就是数据引用指</span><span data-lake-id=\"ucbd94c97\" id=\"ucbd94c97\" class=\"lake-fontsize-12\">针没有变化，而数据发生改变的时候render是不会执行的。如果需要重新渲染那么就需要重新开辟空间引用数据。PureComponent一般会用在一些纯展示组件上。</span></p><p data-lake-id=\"9fc77adbd31e5d5a8f9b13c3e606d93b\" id=\"9fc77adbd31e5d5a8f9b13c3e606d93b\"><br></p><p data-lake-id=\"0ed4f44fdea415bbe28d023529b008c6\" id=\"0ed4f44fdea415bbe28d023529b008c6\"><span data-lake-id=\"ubdedecc1\" id=\"ubdedecc1\">使用</span><span data-lake-id=\"u8a24c74a\" id=\"u8a24c74a\" class=\"lake-fontsize-12\">pureCompone</span><span data-lake-id=\"u3c6ceeee\" id=\"u3c6ceeee\" class=\"lake-fontsize-12\">nt的</span><strong><span data-lake-id=\"u92bcd219\" id=\"u92bcd219\" class=\"lake-fontsize-12\">好处</span></strong><span data-lake-id=\"u2beb3f1c\" id=\"u2beb3f1c\" class=\"lake-fontsize-12\">：当组件更新时，如果组件的props或者state都没有改变，render函数就不会触发。省去虚拟DOM的生成和对比过程，达到提升性能的目的。这是因为react自动做了一层浅比较。</span></p><h3 data-lake-id=\"c7d58fee5b92101c909644102a4766c1\" id=\"c7d58fee5b92101c909644102a4766c1\"><span data-lake-id=\"u0d5f7296\" id=\"u0d5f7296\">7. </span><span data-lake-id=\"u72fc97c8\" id=\"u72fc97c8\">Component, Element, Instance 之间有什么区别和联系？</span></h3><ul list=\"u18d0a570\"><li fid=\"ua9c56b20\" data-lake-id=\"u2a1f085d\" id=\"u2a1f085d\"><strong><span data-lake-id=\"u0998ca4e\" id=\"u0998ca4e\">元素：</span></strong><span data-lake-id=\"u2d413096\" id=\"u2d413096\">一个元素</span><code data-lake-id=\"u3c96f5db\" id=\"u3c96f5db\"><span data-lake-id=\"ud0d12873\" id=\"ud0d12873\">element</span></code><span data-lake-id=\"ud107a5d6\" id=\"ud107a5d6\">是一个普通对象(plain object)，描述了对于一个DOM节点或者其他组件</span><code data-lake-id=\"ua35e0d6e\" id=\"ua35e0d6e\"><span data-lake-id=\"u329de266\" id=\"u329de266\">component</span></code><span data-lake-id=\"ue17d716a\" id=\"ue17d716a\">，你想让它在屏幕上呈现成什么样子。元素</span><code data-lake-id=\"uc961d2aa\" id=\"uc961d2aa\"><span data-lake-id=\"u35a9682a\" id=\"u35a9682a\">element</span></code><span data-lake-id=\"uc761ea60\" id=\"uc761ea60\">可以在它的属性</span><code data-lake-id=\"u4f7aff19\" id=\"u4f7aff19\"><span data-lake-id=\"u5d0f6767\" id=\"u5d0f6767\">props</span></code><span data-lake-id=\"u74f466e6\" id=\"u74f466e6\">中包含其他元素(译注:用于形成元素树)。创建一个React元素</span><code data-lake-id=\"u247767a6\" id=\"u247767a6\"><span data-lake-id=\"ufbe3e0f4\" id=\"ufbe3e0f4\">element</span></code><span data-lake-id=\"ue63bd45c\" id=\"ue63bd45c\">成本很低。元素</span><code data-lake-id=\"ucee21e65\" id=\"ucee21e65\"><span data-lake-id=\"u6829ca88\" id=\"u6829ca88\">element</span></code><span data-lake-id=\"u86a23143\" id=\"u86a23143\">创建之后是不可变的。</span></li><li fid=\"ua9c56b20\" data-lake-id=\"u90ea9e0e\" id=\"u90ea9e0e\"><strong><span data-lake-id=\"uaab7f9f6\" id=\"uaab7f9f6\">组件：</span></strong><span data-lake-id=\"uf825b552\" id=\"uf825b552\">一个组件</span><code data-lake-id=\"u08c9205e\" id=\"u08c9205e\"><span data-lake-id=\"ua6384f97\" id=\"ua6384f97\">component</span></code><span data-lake-id=\"ubce783e7\" id=\"ubce783e7\">可以通过多种方式声明。可以是带有一个</span><code data-lake-id=\"u7bce201a\" id=\"u7bce201a\"><span data-lake-id=\"ube2055c4\" id=\"ube2055c4\">render()</span></code><span data-lake-id=\"u675b7d92\" id=\"u675b7d92\">方法的类，简单点也可以定义为一个函数。这两种情况下，它都把属性</span><code data-lake-id=\"u1f1a3c73\" id=\"u1f1a3c73\"><span data-lake-id=\"ubf26aa34\" id=\"ubf26aa34\">props</span></code><span data-lake-id=\"ub1ca8292\" id=\"ub1ca8292\">作为输入，把返回的一棵元素树作为输出。</span></li><li fid=\"ua9c56b20\" data-lake-id=\"u7f8c92ad\" id=\"u7f8c92ad\"><strong><span data-lake-id=\"u1a28ac3d\" id=\"u1a28ac3d\">实例：</span></strong><span data-lake-id=\"u979f9355\" id=\"u979f9355\">一个实例</span><code data-lake-id=\"u3dd8a827\" id=\"u3dd8a827\"><span data-lake-id=\"u2ba20f05\" id=\"u2ba20f05\">instance</span></code><span data-lake-id=\"u7fe2beb0\" id=\"u7fe2beb0\">是你在所写的组件类</span><code data-lake-id=\"u5ad16212\" id=\"u5ad16212\"><span data-lake-id=\"udf43180a\" id=\"udf43180a\">component class</span></code><span data-lake-id=\"u0ff668c5\" id=\"u0ff668c5\">中使用关键字</span><code data-lake-id=\"u3d69b5d1\" id=\"u3d69b5d1\"><span data-lake-id=\"u2ddcc7b8\" id=\"u2ddcc7b8\">this</span></code><span data-lake-id=\"uf9a4a622\" id=\"uf9a4a622\">所指向的东西(译注:组件实例)。它用来存储本地状态和响应生命周期事件很有用。</span></li></ul><p data-lake-id=\"78df2154841368544cdf074f51da86bd\" id=\"78df2154841368544cdf074f51da86bd\"><br></p><p data-lake-id=\"31ad7dcaf1e211843f1fd1cbcb9aec06\" id=\"31ad7dcaf1e211843f1fd1cbcb9aec06\"><span data-lake-id=\"u670efb7a\" id=\"u670efb7a\">函数式组件(</span><code data-lake-id=\"ua973f184\" id=\"ua973f184\"><span data-lake-id=\"ue5aabdf6\" id=\"ue5aabdf6\">Functional component</span></code><span data-lake-id=\"u3b1582cf\" id=\"u3b1582cf\">)根本没有实例</span><code data-lake-id=\"u4b14ce15\" id=\"u4b14ce15\"><span data-lake-id=\"ue0f9f105\" id=\"ue0f9f105\">instance</span></code><span data-lake-id=\"uac775d1f\" id=\"uac775d1f\">。类组件(</span><code data-lake-id=\"ua2199f15\" id=\"ua2199f15\"><span data-lake-id=\"uae068c78\" id=\"uae068c78\">Class component</span></code><span data-lake-id=\"ufe3ed4d8\" id=\"ufe3ed4d8\">)有实例</span><code data-lake-id=\"u863e3935\" id=\"u863e3935\"><span data-lake-id=\"uc355a43b\" id=\"uc355a43b\">instance</span></code><span data-lake-id=\"u97f3c0da\" id=\"u97f3c0da\">，但是永远也不需要直接创建一个组件的实例，因为React帮我们做了这些。</span></p><h3 data-lake-id=\"07bb95287ec5fa638b17941204eeb878\" id=\"07bb95287ec5fa638b17941204eeb878\"><span data-lake-id=\"ue3f8e40f\" id=\"ue3f8e40f\">8. </span><span data-lake-id=\"u1ded47c2\" id=\"u1ded47c2\">React.createClass和extends Component的区别有哪些？</span></h3><p data-lake-id=\"f91814afc931833a4c5694c5ee614a7e\" id=\"f91814afc931833a4c5694c5ee614a7e\"><span data-lake-id=\"ub1e7b28c\" id=\"ub1e7b28c\">React.createClass和extends Component的bai区别主要在于：</span></p><p data-lake-id=\"be6c2a728d699d7a5bc06a7574673460\" id=\"be6c2a728d699d7a5bc06a7574673460\"><strong><span data-lake-id=\"u43093d0c\" id=\"u43093d0c\">（1）语法区别</span></strong></p><ul list=\"u51c39939\"><li fid=\"u44fee9c7\" data-lake-id=\"982613ae3e6ddf84fc6c62dc8d9adecd\" id=\"982613ae3e6ddf84fc6c62dc8d9adecd\"><span data-lake-id=\"u63a747e9\" id=\"u63a747e9\">createClass本质上是一个工厂函数，extends的方式更加接近最新的ES6规范的class写法。两种方式在语法上的差别主要体现在方法的定义和静态属性的声明上。</span></li><li fid=\"u44fee9c7\" data-lake-id=\"10bcba401e99291ff00a7e6342ffa061\" id=\"10bcba401e99291ff00a7e6342ffa061\"><span data-lake-id=\"u283658b9\" id=\"u283658b9\">createClass方式的方法定义使用逗号，隔开，因为creatClass本质上是一个函数，传递给它的是一个Object；而class的方式定义方法时务必谨记不要使用逗号隔开，这是ES6 class的语法规范。</span></li></ul><p data-lake-id=\"fb2a8a2dc4fea190121e20455e8feaa5\" id=\"fb2a8a2dc4fea190121e20455e8feaa5\"><br></p><p data-lake-id=\"28a445bc541250560baf5b72fd1e6d36\" id=\"28a445bc541250560baf5b72fd1e6d36\"><strong><span data-lake-id=\"u640a38f2\" id=\"u640a38f2\">（2）propType 和 getDefaultProps</span></strong></p><ul list=\"ua095991d\"><li fid=\"ueae6beac\" data-lake-id=\"b6ae92db869a0864b34f011a307322c4\" id=\"b6ae92db869a0864b34f011a307322c4\"><span data-lake-id=\"ufabdb64b\" id=\"ufabdb64b\">React.createClass：通过proTypes对象和getDefaultProps()方法来设置和获取props.</span></li><li fid=\"ueae6beac\" data-lake-id=\"2d6ea72168c13fa439313233c2535f8b\" id=\"2d6ea72168c13fa439313233c2535f8b\"><span data-lake-id=\"u790473e4\" id=\"u790473e4\">React.Component：通过设置两个属性propTypes和defaultProps</span></li></ul><p data-lake-id=\"2dc74fc4e68fd09933fa356df80c54f3\" id=\"2dc74fc4e68fd09933fa356df80c54f3\"><br></p><p data-lake-id=\"9d3fbe695a32363135041a3df5b4152d\" id=\"9d3fbe695a32363135041a3df5b4152d\"><strong><span data-lake-id=\"u53d64717\" id=\"u53d64717\">（3）状态的区别</span></strong></p><ul list=\"u0154bdf7\"><li fid=\"u94a880b6\" data-lake-id=\"0f63e9b837d81767cf55c091f558a681\" id=\"0f63e9b837d81767cf55c091f558a681\"><span data-lake-id=\"ue731a782\" id=\"ue731a782\">React.createClass：通过getInitialState()方法返回一个包含初始值的对象</span></li><li fid=\"u94a880b6\" data-lake-id=\"a7b107a015de137b2aade20f4c89808a\" id=\"a7b107a015de137b2aade20f4c89808a\"><span data-lake-id=\"u436effb1\" id=\"u436effb1\">React.Component：通过constructor设置初始状态</span></li></ul><p data-lake-id=\"37d92160fef3ced2afb5fe7071bf2dbf\" id=\"37d92160fef3ced2afb5fe7071bf2dbf\"><br></p><p data-lake-id=\"3b1ae17ab0b57b006c99a62d5bc737db\" id=\"3b1ae17ab0b57b006c99a62d5bc737db\"><strong><span data-lake-id=\"ud36ae68d\" id=\"ud36ae68d\">（4）this区别</span></strong></p><ul list=\"uceb87055\"><li fid=\"ufa6ebdaa\" data-lake-id=\"079f4b6e3a192c6e774129231d8ac656\" id=\"079f4b6e3a192c6e774129231d8ac656\"><span data-lake-id=\"u519f8eb7\" id=\"u519f8eb7\">React.createClass：会正确绑定this</span></li><li fid=\"ufa6ebdaa\" data-lake-id=\"3ae5efaa32cd178e010a9febf9eee779\" id=\"3ae5efaa32cd178e010a9febf9eee779\"><span data-lake-id=\"u78139ac9\" id=\"u78139ac9\">React.Component：由于使用了 ES6，这里会有些微不同，属性并不会自动绑定到 React 类的实例上。</span></li></ul><p data-lake-id=\"94bcc0b1c8a50cee9a8feec19a1d4ba8\" id=\"94bcc0b1c8a50cee9a8feec19a1d4ba8\"><br></p><p data-lake-id=\"5c1320121f807ab5efeefd7290a1ef96\" id=\"5c1320121f807ab5efeefd7290a1ef96\"><strong><span data-lake-id=\"u49ad7e05\" id=\"u49ad7e05\">（5）Mixins</span></strong></p><ul list=\"u75c8a93b\"><li fid=\"uc234cb94\" data-lake-id=\"4d2c0652e4c18a086474f1ed9ea7068e\" id=\"4d2c0652e4c18a086474f1ed9ea7068e\"><span data-lake-id=\"u04f1af12\" id=\"u04f1af12\">React.createClass：使用 React.createClass 的话，可以在创建组件时添加一个叫做 mixins 的属性，并将可供混合的类的集合以数组的形式赋给 mixins。</span></li><li fid=\"uc234cb94\" data-lake-id=\"f2631286fe807e2d44f9a6e4627181c1\" id=\"f2631286fe807e2d44f9a6e4627181c1\"><span data-lake-id=\"u32507667\" id=\"u32507667\">如果使用 ES6 的方式来创建组件，那么 </span><code data-lake-id=\"u2721d078\" id=\"u2721d078\"><span data-lake-id=\"uf0202092\" id=\"uf0202092\">React mixins</span></code><span data-lake-id=\"ufc5d0d54\" id=\"ufc5d0d54\"> 的特性将不能被使用了。</span></li></ul><h3 data-lake-id=\"b835e5625b35c186b7f5f8c0a9235e5f\" id=\"b835e5625b35c186b7f5f8c0a9235e5f\"><span data-lake-id=\"uedb521fd\" id=\"uedb521fd\">9. </span><span data-lake-id=\"u7c68f291\" id=\"u7c68f291\">React 高阶组件是什么，和普通组件有什么区别，适用什么场景</span></h3><p data-lake-id=\"a16c761cca2875c56bf5917fb2c7e6b1\" id=\"a16c761cca2875c56bf5917fb2c7e6b1\"><span data-lake-id=\"ued5fee27\" id=\"ued5fee27\">官方解释∶ </span></p><blockquote data-lake-id=\"ua2794d0b\" id=\"ua2794d0b\"><p data-lake-id=\"dea44c30bed290f6a97f592916ced23e\" id=\"dea44c30bed290f6a97f592916ced23e\"><span data-lake-id=\"u6354035b\" id=\"u6354035b\">高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。</span></p></blockquote><p data-lake-id=\"0d0c8e013d0ab20c695ebf01ef81bbf5\" id=\"0d0c8e013d0ab20c695ebf01ef81bbf5\"><span data-lake-id=\"uab69a74a\" id=\"uab69a74a\">高阶组件（HOC）就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件，它只是一种组件的设计模式，这种设计模式是由react自身的组合性质必然产生的。我们将它们称为纯组件，因为它们可以接受任何动态提供的子组件，但它们不会修改或复制其输入组件中的任何行为。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20hoc%E7%9A%84%E5%AE%9A%E4%B9%89%5Cnfunction%20withSubscription(WrappedComponent%2C%20selectData)%20%7B%5Cn%20%20return%20class%20extends%20React.Component%20%7B%5Cn%20%20%20%20constructor(props)%20%7B%5Cn%20%20%20%20%20%20super(props)%3B%5Cn%20%20%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20data%3A%20selectData(DataSource%2C%20props)%5Cn%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20%E4%B8%80%E4%BA%9B%E9%80%9A%E7%94%A8%E7%9A%84%E9%80%BB%E8%BE%91%E5%A4%84%E7%90%86%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20...%20%E5%B9%B6%E4%BD%BF%E7%94%A8%E6%96%B0%E6%95%B0%E6%8D%AE%E6%B8%B2%E6%9F%93%E8%A2%AB%E5%8C%85%E8%A3%85%E7%9A%84%E7%BB%84%E4%BB%B6!%5Cn%20%20%20%20%20%20return%20%3CWrappedComponent%20data%3D%7Bthis.state.data%7D%20%7B...this.props%7D%20%2F%3E%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%3B%5Cn%5Cn%2F%2F%20%E4%BD%BF%E7%94%A8%5Cnconst%20BlogPostWithSubscription%20%3D%20withSubscription(BlogPost%2C%5Cn%20%20(DataSource%2C%20props)%20%3D%3E%20DataSource.getBlogPost(props.id))%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cjsKU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"e1c9dd9011c60675f4493b5128ca1fe2\" id=\"e1c9dd9011c60675f4493b5128ca1fe2\"><strong><span data-lake-id=\"ub8dcfaa7\" id=\"ub8dcfaa7\">1）HOC的优缺点</span></strong></p><ul list=\"u470832d4\"><li fid=\"uc84db650\" data-lake-id=\"a31ed631ef8db37de8e8fc367ed32e98\" id=\"a31ed631ef8db37de8e8fc367ed32e98\"><span data-lake-id=\"u4f766297\" id=\"u4f766297\">优点∶ 逻辑服用、不影响被包裹组件的内部逻辑。</span></li><li fid=\"uc84db650\" data-lake-id=\"a4bde19e9c7d4649528d1e7e5f778344\" id=\"a4bde19e9c7d4649528d1e7e5f778344\"><span data-lake-id=\"u2a7a51dc\" id=\"u2a7a51dc\">缺点∶hoc传递给被包裹组件的props容易和被包裹后的组件重名，进而被覆盖</span></li></ul><p data-lake-id=\"922209c02aacd1417509920c1bc12b38\" id=\"922209c02aacd1417509920c1bc12b38\"><br></p><p data-lake-id=\"a2a786bd04ba80bf627b40d073b274cd\" id=\"a2a786bd04ba80bf627b40d073b274cd\"><strong><span data-lake-id=\"u4c74ff5c\" id=\"u4c74ff5c\">2）适用场景</span></strong></p><ul list=\"ue0e4004b\"><li fid=\"u94020015\" data-lake-id=\"a45caf1bbc74b6a05585b1ba676f1a8e\" id=\"a45caf1bbc74b6a05585b1ba676f1a8e\"><span data-lake-id=\"u55f224aa\" id=\"u55f224aa\">代码复用，逻辑抽象 </span></li><li fid=\"u94020015\" data-lake-id=\"03340ec8b688a2d37f39f53b699509fa\" id=\"03340ec8b688a2d37f39f53b699509fa\"><span data-lake-id=\"u01cd8ae9\" id=\"u01cd8ae9\">渲染劫持 </span></li><li fid=\"u94020015\" data-lake-id=\"94f2882f732b13b191046749d59a5226\" id=\"94f2882f732b13b191046749d59a5226\"><span data-lake-id=\"uade450a3\" id=\"uade450a3\">State 抽象和更改 </span></li><li fid=\"u94020015\" data-lake-id=\"652ecfb2acd7f26c75af7b1e3cdc52aa\" id=\"652ecfb2acd7f26c75af7b1e3cdc52aa\"><span data-lake-id=\"ud603c7fb\" id=\"ud603c7fb\">Props 更改 </span></li></ul><p data-lake-id=\"e452a3e9240480986815c3c1370fd788\" id=\"e452a3e9240480986815c3c1370fd788\"><br></p><p data-lake-id=\"e0d7be1035ba2869512a8f76978cffb9\" id=\"e0d7be1035ba2869512a8f76978cffb9\"><strong><span data-lake-id=\"ub558f064\" id=\"ub558f064\">3）具体应用例子 </span></strong></p><ul list=\"u232bc2c6\"><li fid=\"u2a60f2de\" data-lake-id=\"4ff99cc9f55b6314aa419dc42d20f497\" id=\"4ff99cc9f55b6314aa419dc42d20f497\"><strong><span data-lake-id=\"ua47dabd0\" id=\"ua47dabd0\">权限控制：</span></strong><span data-lake-id=\"u36ad40ac\" id=\"u36ad40ac\">利用高阶组件的 </span><strong><span data-lake-id=\"u91360eef\" id=\"u91360eef\">条件渲染 </span></strong><span data-lake-id=\"u6e22b408\" id=\"u6e22b408\">特性可以对页面进行权限控制，权限控制一般分为两个维度：页面级别和 页面元素级别</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20HOC.js%5Cnfunction%20withAdminAuth(WrappedComponent)%20%7B%5Cn%20%20%20%20return%20class%20extends%20React.Component%20%7B%5Cn%20%20%20%20%20%20%20%20state%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20isAdmin%3A%20false%2C%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20async%20UNSAFE_componentWillMount()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20const%20currentRole%20%3D%20await%20getCurrentUserRole()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20isAdmin%3A%20currentRole%20%3D%3D%3D%20'Admin'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20if%20(this.state.isAdmin)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20%3CWrappedComponent%20%7B...this.props%7D%20%2F%3E%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20(%3Cdiv%3E%E6%82%A8%E6%B2%A1%E6%9C%89%E6%9D%83%E9%99%90%E6%9F%A5%E7%9C%8B%E8%AF%A5%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%AF%B7%E8%81%94%E7%B3%BB%E7%AE%A1%E7%90%86%E5%91%98%EF%BC%81%3C%2Fdiv%3E)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%3B%5Cn%7D%5Cn%5Cn%2F%2F%20pages%2Fpage-a.js%5Cnclass%20PageA%20extends%20React.Component%20%7B%5Cn%20%20%20%20constructor(props)%20%7B%5Cn%20%20%20%20%20%20%20%20super(props)%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20something%20here...%5Cn%20%20%20%20%7D%5Cn%20%20%20%20UNSAFE_componentWillMount()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20fetching%20data%5Cn%20%20%20%20%7D%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20render%20page%20with%20data%5Cn%20%20%20%20%7D%5Cn%7D%5Cnexport%20default%20withAdminAuth(PageA)%3B%5Cn%5Cn%5Cn%2F%2F%20pages%2Fpage-b.js%5Cnclass%20PageB%20extends%20React.Component%20%7B%5Cn%20%20%20%20constructor(props)%20%7B%5Cn%20%20%20%20%20%20%20%20super(props)%3B%5Cn%20%20%20%20%2F%2F%20something%20here...%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20UNSAFE_componentWillMount()%20%7B%5Cn%20%20%20%20%2F%2F%20fetching%20data%5Cn%20%20%20%20%7D%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%2F%2F%20render%20page%20with%20data%5Cn%20%20%20%20%7D%5Cn%7D%5Cnexport%20default%20withAdminAuth(PageB)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%220MKvI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ud958ff2a\"><li fid=\"ufb610547\" data-lake-id=\"9aa5f5970686acf533c02e4802093c0c\" id=\"9aa5f5970686acf533c02e4802093c0c\"><strong><span data-lake-id=\"ucfbe39fb\" id=\"ucfbe39fb\">组件渲染性能追踪：</span></strong><span data-lake-id=\"uc344d8aa\" id=\"uc344d8aa\">借助父组件子组件生命周期规则捕获子组件的生命周期，可以方便的对某个组件的渲染时间进行记录∶</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Home%20extends%20React.Component%20%7B%5Cn%20%20%20%20%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20(%3Ch1%3EHello%20World.%3C%2Fh1%3E)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20function%20withTiming(WrappedComponent)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20class%20extends%20WrappedComponent%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20constructor(props)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20super(props)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.start%20%3D%200%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.end%20%3D%200%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20UNSAFE_componentWillMount()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20super.componentWillMount%20%26%26%20super.componentWillMount()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.start%20%3D%20Date.now()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20componentDidMount()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20super.componentDidMount%20%26%26%20super.componentDidMount()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20this.end%20%3D%20Date.now()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20console.log(%60%24%7BWrappedComponent.name%7D%20%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E6%97%B6%E9%97%B4%E4%B8%BA%20%24%7Bthis.end%20-%20this.start%7D%20ms%60)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20super.render()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20export%20default%20withTiming(Home)%3B%20%20%20%5Cn%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ecLMX%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"5fdc6b12990c271d482c7787a02c2685\" id=\"5fdc6b12990c271d482c7787a02c2685\"><span data-lake-id=\"u16bd4552\" id=\"u16bd4552\">注意：withTiming 是利用 反向继承 实现的一个高阶组件，功能是计算被包裹组件（这里是 Home 组件）的渲染时间。</span></p><ul list=\"u04638476\"><li fid=\"u30ea57f9\" data-lake-id=\"c0aa53bd838f1d91e53c51c4bc063c1b\" id=\"c0aa53bd838f1d91e53c51c4bc063c1b\"><strong><span data-lake-id=\"ubb4ff4e4\" id=\"ubb4ff4e4\">页面复用</span></strong></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20withFetching%20%3D%20fetching%20%3D%3E%20WrappedComponent%20%3D%3E%20%7B%5Cn%20%20%20%20return%20class%20extends%20React.Component%20%7B%5Cn%20%20%20%20%20%20%20%20state%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20data%3A%20%5B%5D%2C%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20async%20UNSAFE_componentWillMount()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20const%20data%20%3D%20await%20fetching()%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20data%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%3CWrappedComponent%20data%3D%7Bthis.state.data%7D%20%7B...this.props%7D%20%2F%3E%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20pages%2Fpage-a.js%5Cnexport%20default%20withFetching(fetching('science-fiction'))(MovieList)%3B%5Cn%2F%2F%20pages%2Fpage-b.js%5Cnexport%20default%20withFetching(fetching('action'))(MovieList)%3B%5Cn%2F%2F%20pages%2Fpage-other.js%5Cnexport%20default%20withFetching(fetching('some-other-type'))(MovieList)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MM3cq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"bf5d18629f5fed8292c875b3dbbcc6a1\" id=\"bf5d18629f5fed8292c875b3dbbcc6a1\"><span data-lake-id=\"ub5bc492e\" id=\"ub5bc492e\">10. 对</span><span data-lake-id=\"ua0d62b1f\" id=\"ua0d62b1f\">componentWillReceiveProps 的理解</span></h3><p data-lake-id=\"492af2a274b3142b8859abde9ce235ec\" id=\"492af2a274b3142b8859abde9ce235ec\"><span data-lake-id=\"ueca3d093\" id=\"ueca3d093\">该方法当</span><code data-lake-id=\"ucbcab125\" id=\"ucbcab125\"><span data-lake-id=\"uf68a4d9a\" id=\"uf68a4d9a\">props</span></code><span data-lake-id=\"u5dac5b73\" id=\"u5dac5b73\">发生变化时执行，初始化</span><code data-lake-id=\"u789009af\" id=\"u789009af\"><span data-lake-id=\"u2cd3eb76\" id=\"u2cd3eb76\">render</span></code><span data-lake-id=\"u0dc15fab\" id=\"u0dc15fab\">时不执行，在这个回调函数里面，你可以根据属性的变化，通过调用</span><code data-lake-id=\"u509e913d\" id=\"u509e913d\"><span data-lake-id=\"ub128667f\" id=\"ub128667f\">this.setState()</span></code><span data-lake-id=\"u9b5191f5\" id=\"u9b5191f5\">来更新你的组件状态，旧的属性还是可以通过</span><code data-lake-id=\"ubd0bfc21\" id=\"ubd0bfc21\"><span data-lake-id=\"u00149f39\" id=\"u00149f39\">this.props</span></code><span data-lake-id=\"uc1274ed5\" id=\"uc1274ed5\">来获取,这里调用更新状态是安全的，并不会触发额外的</span><code data-lake-id=\"u8cc45a1c\" id=\"u8cc45a1c\"><span data-lake-id=\"u79f6aec3\" id=\"u79f6aec3\">render</span></code><span data-lake-id=\"uf0dfdc9c\" id=\"uf0dfdc9c\">调用。</span></p><p data-lake-id=\"f86dbd072cee0709edd70d06b860516c\" id=\"f86dbd072cee0709edd70d06b860516c\"><br></p><p data-lake-id=\"b884a09e8067cca3739b689fb591ba32\" id=\"b884a09e8067cca3739b689fb591ba32\"><strong><span data-lake-id=\"ub47045fc\" id=\"ub47045fc\">使用好处：</span></strong><span data-lake-id=\"ue64879cf\" id=\"ue64879cf\">在这个生命周期中，可以在子组件的render函数执行前获取新的props，从而更新子组件自己的state。 可以将数据请求放在这里进行执行，需要传的参数则从componentWillReceiveProps(nextProps)中获取。而不必将所有的请求都放在父组件中。于是该请求只会在该组件渲染时才会发出，从而减轻请求负担。componentWillReceiveProps在初始化render的时候不会执行，它会在Component接受到新的状态(Props)时被触发，一般用于父组件状态更新时子组件的重新渲染。</span></p><h3 data-lake-id=\"8e56d8af2df688fb196e3e961205bcd7\" id=\"8e56d8af2df688fb196e3e961205bcd7\"><span data-lake-id=\"u4206d1b0\" id=\"u4206d1b0\">11. </span><span data-lake-id=\"u020fb534\" id=\"u020fb534\">哪些方法会触发 React 重新渲染？重新渲染 render 会做些什么？</span></h3><p data-lake-id=\"183d8901b8d5848c7d0151620607226d\" id=\"183d8901b8d5848c7d0151620607226d\"><strong><span data-lake-id=\"ufe1ddff5\" id=\"ufe1ddff5\">（1）哪些方法会触发 react 重新渲染? </span></strong></p><ul list=\"uf53972d3\"><li fid=\"ubaed928d\" data-lake-id=\"333f49af1e364cbeffcd4b0f300ce0ba\" id=\"333f49af1e364cbeffcd4b0f300ce0ba\"><strong><span data-lake-id=\"u35deb414\" id=\"u35deb414\">setState（）方法被调用</span></strong></li></ul><p data-lake-id=\"b2cae83187d72570025b7074530edefb\" id=\"b2cae83187d72570025b7074530edefb\"><span data-lake-id=\"u69e76e6f\" id=\"u69e76e6f\">setState 是 React 中最常用的命令，通常情况下，执行 setState 会触发 render。但是这里有个点值得关注，执行 setState 的时候不一定会重新渲染。当 setState 传入 null 时，并不会触发 render。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20App%20extends%20React.Component%20%7B%5Cn%20%20state%20%3D%20%7B%5Cn%20%20%20%20a%3A%201%5Cn%20%20%7D%3B%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20console.log(%5C%22render%5C%22)%3B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3CReact.Fragement%3E%5Cn%20%20%20%20%20%20%20%20%3Cp%3E%7Bthis.state.a%7D%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%3Cbutton%5Cn%20%20%20%20%20%20%20%20%20%20onClick%3D%7B()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.setState(%7B%20a%3A%201%20%7D)%3B%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%B9%B6%E6%B2%A1%E6%9C%89%E6%94%B9%E5%8F%98%20a%20%E7%9A%84%E5%80%BC%5Cn%20%20%20%20%20%20%20%20%20%20%7D%7D%5Cn%20%20%20%20%20%20%20%20%3E%5Cn%20%20%20%20%20%20%20%20%20%20Click%20me%5Cn%20%20%20%20%20%20%20%20%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7B()%20%3D%3E%20this.setState(null)%7D%3EsetState%20null%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%20%20%3CChild%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2FReact.Fragement%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u03mO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"uab649de6\"><li fid=\"u37812ba6\" data-lake-id=\"6aec21a38f1b7eb11e51b66e6a70a5af\" id=\"6aec21a38f1b7eb11e51b66e6a70a5af\"><strong><span data-lake-id=\"u9c64183b\" id=\"u9c64183b\">父组件重新渲染</span></strong></li></ul><p data-lake-id=\"2181746f92f32216607e74cfa787699a\" id=\"2181746f92f32216607e74cfa787699a\"><span data-lake-id=\"u1dc67056\" id=\"u1dc67056\">只要父组件重新渲染了，即使传入子组件的 props 未发生变化，那么子组件也会重新渲染，进而触发 render</span></p><p data-lake-id=\"a2f10b4be806a0e857ff080d813e854b\" id=\"a2f10b4be806a0e857ff080d813e854b\"><br></p><p data-lake-id=\"7e83590e714f7e2132275c4bb1aacc1f\" id=\"7e83590e714f7e2132275c4bb1aacc1f\"><strong><span data-lake-id=\"u04974da7\" id=\"u04974da7\">（2）重新渲染 render 会做些什么?</span></strong></p><ul list=\"ub29e72a4\"><li fid=\"u89cb2848\" data-lake-id=\"a97c395e82e291ea3d9c9d361cee98d9\" id=\"a97c395e82e291ea3d9c9d361cee98d9\"><span data-lake-id=\"u8bb39943\" id=\"u8bb39943\">会对新旧 VNode 进行对比，也就是我们所说的Diff算法。</span></li><li fid=\"u89cb2848\" data-lake-id=\"33d6144174f481a013932ea8c2fd1fc1\" id=\"33d6144174f481a013932ea8c2fd1fc1\"><span data-lake-id=\"u5e1abdcf\" id=\"u5e1abdcf\">对新旧两棵树进行一个深度优先遍历，这样每一个节点都会一个标记，在到深度遍历的时候，每遍历到一和个节点，就把该节点和新的节点树进行对比，如果有差异就放到一个对象里面</span></li><li fid=\"u89cb2848\" data-lake-id=\"d7ac9b72e945288816338e8804eb998b\" id=\"d7ac9b72e945288816338e8804eb998b\"><span data-lake-id=\"u0b311509\" id=\"u0b311509\">遍历差异对象，根据差异的类型，根据对应对规则更新VNode</span></li></ul><p data-lake-id=\"01af241edf012ce4a5b30b8aaf5517a4\" id=\"01af241edf012ce4a5b30b8aaf5517a4\"><br></p><p data-lake-id=\"46ca8aa5954d694a5a1dceb6dbbec414\" id=\"46ca8aa5954d694a5a1dceb6dbbec414\"><span data-lake-id=\"u120a1148\" id=\"u120a1148\">React 的处理 render 的基本思维模式是每次一有变动就会去重新渲染整个应用。在 Virtual DOM 没有出现之前，最简单的方法就是直接调用 innerHTML。Virtual DOM厉害的地方并不是说它比直接操作 DOM 快，而是说不管数据怎么变，都会尽量以最小的代价去更新 DOM。React 将 render 函数返回的虚拟 DOM 树与老的进行比较，从而确定 DOM 要不要更新、怎么更新。当 DOM 树很大时，遍历两棵树进行各种比对还是相当耗性能的，特别是在顶层 setState 一个微小的修改，默认会去遍历整棵树。尽管 React 使用高度优化的 Diff 算法，但是这个过程仍然会损耗性能.</span></p><h3 data-lake-id=\"f2b2ffb9bc67a920108c1e1fbd8ec38f\" id=\"f2b2ffb9bc67a920108c1e1fbd8ec38f\"><span data-lake-id=\"u7366fc54\" id=\"u7366fc54\">12. </span><span data-lake-id=\"u575bb155\" id=\"u575bb155\">React如何判断什么时候重新渲染组件？</span></h3><p data-lake-id=\"203b086f0ba2a24ba91a348de42c0bb8\" id=\"203b086f0ba2a24ba91a348de42c0bb8\"><span data-lake-id=\"ue46f31cd\" id=\"ue46f31cd\" class=\"lake-fontsize-12\">组件状态的改变可以因为</span><code data-lake-id=\"u7837e43d\" id=\"u7837e43d\"><span data-lake-id=\"u01c57768\" id=\"u01c57768\">props</span></code><span data-lake-id=\"ue20a8e23\" id=\"ue20a8e23\" class=\"lake-fontsize-12\">的改变，或者直接通过</span><code data-lake-id=\"u160f1801\" id=\"u160f1801\"><span data-lake-id=\"uae0781cf\" id=\"uae0781cf\">setState</span></code><span data-lake-id=\"u05884abb\" id=\"u05884abb\" class=\"lake-fontsize-12\">方法改变。组件获得新的状态，然后React决定是否应该重新渲染组件。只要组件的state发生变化，React就会对组件进行重新渲染。这是因为React中的</span><code data-lake-id=\"u493c6210\" id=\"u493c6210\"><span data-lake-id=\"u2e9916a3\" id=\"u2e9916a3\">shouldComponentUpdate</span></code><span data-lake-id=\"u3e48f6f8\" id=\"u3e48f6f8\" class=\"lake-fontsize-12\">方法默认返回</span><code data-lake-id=\"u2e69cc87\" id=\"u2e69cc87\"><span data-lake-id=\"u1473fa49\" id=\"u1473fa49\">true</span></code><span data-lake-id=\"u923bdde9\" id=\"u923bdde9\" class=\"lake-fontsize-12\">，这就是导致每次更新都重新渲染的原因。</span></p><p data-lake-id=\"5f2daf09fc41801b39212fb4bb3b297a\" id=\"5f2daf09fc41801b39212fb4bb3b297a\"><br></p><p data-lake-id=\"22a77c9d4bf8e61d8442b6eecc8471eb\" id=\"22a77c9d4bf8e61d8442b6eecc8471eb\"><span data-lake-id=\"u7b860668\" id=\"u7b860668\" class=\"lake-fontsize-12\">当React将要渲染组件时会执行</span><code data-lake-id=\"ucc419c58\" id=\"ucc419c58\"><span data-lake-id=\"u833864e7\" id=\"u833864e7\">shouldComponentUpdate</span></code><span data-lake-id=\"u7935151b\" id=\"u7935151b\" class=\"lake-fontsize-12\">方法来看它是否返回</span><code data-lake-id=\"uaebf89e2\" id=\"uaebf89e2\"><span data-lake-id=\"u30218fe1\" id=\"u30218fe1\">true</span></code><span data-lake-id=\"uaeb66f83\" id=\"uaeb66f83\" class=\"lake-fontsize-12\">（组件应该更新，也就是重新渲染）。所以需要重写</span><code data-lake-id=\"u45865d5f\" id=\"u45865d5f\"><span data-lake-id=\"ue5eb7ac1\" id=\"ue5eb7ac1\">shouldComponentUpdate</span></code><span data-lake-id=\"ubfabed0c\" id=\"ubfabed0c\" class=\"lake-fontsize-12\">方法让它根据情况返回</span><code data-lake-id=\"u2c70b34e\" id=\"u2c70b34e\"><span data-lake-id=\"ueca747bb\" id=\"ueca747bb\">true</span></code><span data-lake-id=\"ua1f828dd\" id=\"ua1f828dd\" class=\"lake-fontsize-12\">或者</span><code data-lake-id=\"ua379476b\" id=\"ua379476b\"><span data-lake-id=\"u7f73e7c1\" id=\"u7f73e7c1\">false</span></code><span data-lake-id=\"ue37f0b8b\" id=\"ue37f0b8b\" class=\"lake-fontsize-12\">来告诉React什么时候重新渲染什么时候跳过重新渲染。</span></p><h3 data-lake-id=\"7155a405a2c424b056f4c3e8b3aec971\" id=\"7155a405a2c424b056f4c3e8b3aec971\"><span data-lake-id=\"u0d17347a\" id=\"u0d17347a\">13. </span><span data-lake-id=\"u4ebe7eab\" id=\"u4ebe7eab\">React声明组件有哪几种方法，有什么不同？</span></h3><p data-lake-id=\"1e53af03db881024daf36e2c9cba2c2c\" id=\"1e53af03db881024daf36e2c9cba2c2c\"><span data-lake-id=\"u0dc8d5e0\" id=\"u0dc8d5e0\">React 声明组件的三种方式：</span></p><ul list=\"uf9fb5562\"><li fid=\"ub04ea07a\" data-lake-id=\"90b6f1f3ab92489a491229d5aa4c9f8f\" id=\"90b6f1f3ab92489a491229d5aa4c9f8f\"><span data-lake-id=\"u4aab29bf\" id=\"u4aab29bf\">函数式定义的</span><code data-lake-id=\"u8c77677f\" id=\"u8c77677f\"><span data-lake-id=\"ub3f46539\" id=\"ub3f46539\">无状态组件</span></code></li><li fid=\"ub04ea07a\" data-lake-id=\"4d142b3195941f9a7a463fca0ea205bb\" id=\"4d142b3195941f9a7a463fca0ea205bb\"><span data-lake-id=\"u96d1c74c\" id=\"u96d1c74c\">ES5原生方式</span><code data-lake-id=\"ub937f6c6\" id=\"ub937f6c6\"><span data-lake-id=\"uf31af222\" id=\"uf31af222\">React.createClass</span></code><span data-lake-id=\"u889f44e4\" id=\"u889f44e4\">定义的组件</span></li><li fid=\"ub04ea07a\" data-lake-id=\"267cf13506759dac159037f2edfe42f4\" id=\"267cf13506759dac159037f2edfe42f4\"><span data-lake-id=\"u7d8b4e7c\" id=\"u7d8b4e7c\">ES6形式的</span><code data-lake-id=\"u29abe261\" id=\"u29abe261\"><span data-lake-id=\"u03360446\" id=\"u03360446\">extends React.Component</span></code><span data-lake-id=\"u3e0d697b\" id=\"u3e0d697b\">定义的组件</span></li></ul><p data-lake-id=\"8f1231fbf000358bf5cf5e590addf5c5\" id=\"8f1231fbf000358bf5cf5e590addf5c5\"><br></p><p data-lake-id=\"35403eb3e3bb708b7c62aaeff9ecdd3c\" id=\"35403eb3e3bb708b7c62aaeff9ecdd3c\"><strong><span data-lake-id=\"u19882c97\" id=\"u19882c97\">（1）无状态函数式组件</span></strong></p><p data-lake-id=\"302d2cf48cc819fa90538d25b4a8f372\" id=\"302d2cf48cc819fa90538d25b4a8f372\"><span data-lake-id=\"u4b4bdc9c\" id=\"u4b4bdc9c\">它是为了创建纯展示组件，这种组件只负责根据传入的props来展示，不涉及到state状态的操作</span></p><p data-lake-id=\"59ed84b20aa89c5874bd27af487c1090\" id=\"59ed84b20aa89c5874bd27af487c1090\"><span data-lake-id=\"u0e05fc0f\" id=\"u0e05fc0f\">组件不会被实例化，整体渲染性能得到提升，不能访问this对象，不能访问生命周期的方法</span></p><p data-lake-id=\"cf5b613c692f15c0718072ea15334065\" id=\"cf5b613c692f15c0718072ea15334065\"><br></p><p data-lake-id=\"864469b036ddb83453db1c3bed7fd963\" id=\"864469b036ddb83453db1c3bed7fd963\"><strong><span data-lake-id=\"u6907ca0f\" id=\"u6907ca0f\">（2）ES5 原生方式 React.createClass // RFC</span></strong></p><p data-lake-id=\"129937f4be1a880e4d8b3aeb236cfd68\" id=\"129937f4be1a880e4d8b3aeb236cfd68\"><span data-lake-id=\"uc6495747\" id=\"uc6495747\">React.createClass会自绑定函数方法，导致不必要的性能开销，增加代码过时的可能性。</span></p><p data-lake-id=\"2363a690dcc3896bb25209b961da9c25\" id=\"2363a690dcc3896bb25209b961da9c25\"><br></p><p data-lake-id=\"9d1134633be6af111b39e7980fc2075e\" id=\"9d1134633be6af111b39e7980fc2075e\"><strong><span data-lake-id=\"ud6478038\" id=\"ud6478038\">（3）E6继承形式 React.Component // RCC</span></strong></p><p data-lake-id=\"54f40631b91fe58bfed281ff0277758a\" id=\"54f40631b91fe58bfed281ff0277758a\"><span data-lake-id=\"u2ea32fdf\" id=\"u2ea32fdf\">目前极为推荐的创建有状态组件的方式，最终会取代React.createClass形式；相对于 React.createClass可以更好实现代码复用。</span></p><p data-lake-id=\"5bcd3014975d980238ff33c8ed7f96ad\" id=\"5bcd3014975d980238ff33c8ed7f96ad\"><br></p><p data-lake-id=\"11c355cf98363d0391d1fa5333bdecaa\" id=\"11c355cf98363d0391d1fa5333bdecaa\"><strong><span data-lake-id=\"uffe1650e\" id=\"uffe1650e\">无状态组件相对于于后者的区别：</span></strong></p><p data-lake-id=\"56c3f759cd68c0d783e89741a7eb01b6\" id=\"56c3f759cd68c0d783e89741a7eb01b6\"><span data-lake-id=\"u17da2d5a\" id=\"u17da2d5a\">与无状态组件相比，React.createClass和React.Component都是创建有状态的组件，这些组件是要被实例化的，并且可以访问组件的生命周期方法。</span></p><p data-lake-id=\"9e042b2f3cd155d43f29d73546752a31\" id=\"9e042b2f3cd155d43f29d73546752a31\"><br></p><p data-lake-id=\"5ea5fd61f358d69fea09baffbcb3b3ac\" id=\"5ea5fd61f358d69fea09baffbcb3b3ac\"><strong><span data-lake-id=\"ue2c89d1c\" id=\"ue2c89d1c\">React.createClass与React.Component区别：</span></strong></p><p data-lake-id=\"34fb6fe1bc2eba206edbd0ad56c1cf4e\" id=\"34fb6fe1bc2eba206edbd0ad56c1cf4e\"><strong><span data-lake-id=\"uabda2cb5\" id=\"uabda2cb5\">① 函数this自绑定</span></strong></p><ul list=\"u0c48ea93\"><li fid=\"u0a00d55a\" data-lake-id=\"7fd5d65da389809bb79e75c165ac28e7\" id=\"7fd5d65da389809bb79e75c165ac28e7\"><span data-lake-id=\"uf3452e0e\" id=\"uf3452e0e\">React.createClass创建的组件，其每一个成员函数的this都有React自动绑定，函数中的this会被正确设置。</span></li><li fid=\"u0a00d55a\" data-lake-id=\"7873d878acf07e81d4392e9528598b8d\" id=\"7873d878acf07e81d4392e9528598b8d\"><span data-lake-id=\"u61c25e2d\" id=\"u61c25e2d\">React.Component创建的组件，其成员函数不会自动绑定this，需要开发者手动绑定，否则this不能获取当前组件实例对象。</span></li></ul><p data-lake-id=\"d5208221d113f7b15c25ec9ad660ac4a\" id=\"d5208221d113f7b15c25ec9ad660ac4a\"><strong><span data-lake-id=\"ufcd3cd75\" id=\"ufcd3cd75\">② 组件属性类型propTypes及其默认props属性defaultProps配置不同</span></strong></p><ul list=\"u552ec7eb\"><li fid=\"u7ef653b3\" data-lake-id=\"9759b49dfee8b794c1ec04cd6681ab53\" id=\"9759b49dfee8b794c1ec04cd6681ab53\"><span data-lake-id=\"u7454ddfa\" id=\"u7454ddfa\">React.createClass在创建组件时，有关组件props的属性类型及组件默认的属性会作为组件实例的属性来配置，其中defaultProps是使用getDefaultProps的方法来获取默认组件属性的</span></li><li fid=\"u7ef653b3\" data-lake-id=\"4cb5eed406cd001cb3e4118bacf8e681\" id=\"4cb5eed406cd001cb3e4118bacf8e681\"><span data-lake-id=\"ufafb8dc6\" id=\"ufafb8dc6\">React.Component在创建组件时配置这两个对应信息时，他们是作为组件类的属性，不是组件实例的属性，也就是所谓的类的静态属性来配置的。</span></li></ul><p data-lake-id=\"7f7746f60e13607fe172b1b884cd2d3c\" id=\"7f7746f60e13607fe172b1b884cd2d3c\"><strong><span data-lake-id=\"u813dd6db\" id=\"u813dd6db\">③ 组件初始状态state的配置不同</span></strong></p><ul list=\"u811ad0b5\"><li fid=\"u59379cdf\" data-lake-id=\"47bad472bec2fbc84a247ebaec2c105b\" id=\"47bad472bec2fbc84a247ebaec2c105b\"><span data-lake-id=\"uf50e31e7\" id=\"uf50e31e7\">React.createClass创建的组件，其状态state是通过getInitialState方法来配置组件相关的状态；</span></li><li fid=\"u59379cdf\" data-lake-id=\"8017501368618448802c881f036f6829\" id=\"8017501368618448802c881f036f6829\"><span data-lake-id=\"ud491ac9c\" id=\"ud491ac9c\">React.Component创建的组件，其状态state是在constructor中像初始化组件属性一样声明的。</span></li></ul><h3 data-lake-id=\"63e8b941f0cb1b8c25d2cd43386f0488\" id=\"63e8b941f0cb1b8c25d2cd43386f0488\"><span data-lake-id=\"u55dd4e19\" id=\"u55dd4e19\">14. </span><span data-lake-id=\"ufc4bf24f\" id=\"ufc4bf24f\">对</span><span data-lake-id=\"u15d9a80f\" id=\"u15d9a80f\">有状态组件和</span><span data-lake-id=\"u0bf25ad7\" id=\"u0bf25ad7\">无状态组件的理解及使用场景</span></h3><p data-lake-id=\"3451ec16fbc052ae03270a6b02f0f7bc\" id=\"3451ec16fbc052ae03270a6b02f0f7bc\"><strong><span data-lake-id=\"uc1cd8554\" id=\"uc1cd8554\">（1）有状态组件 </span></strong></p><p data-lake-id=\"b70b59fd49036ac5f3e2776f96702b66\" id=\"b70b59fd49036ac5f3e2776f96702b66\"><strong><span data-lake-id=\"ubf85b366\" id=\"ubf85b366\">特点：</span></strong></p><ul list=\"u300ccdea\"><li fid=\"ud8a2eae8\" data-lake-id=\"4bb79315c4ace98d9ab049ff1e32eb58\" id=\"4bb79315c4ace98d9ab049ff1e32eb58\"><span data-lake-id=\"uc3a540ca\" id=\"uc3a540ca\">是类组件 </span></li><li fid=\"ud8a2eae8\" data-lake-id=\"u3bcdbc85\" id=\"u3bcdbc85\"><span data-lake-id=\"u99e8da30\" id=\"u99e8da30\">有继承 </span></li><li fid=\"ud8a2eae8\" data-lake-id=\"u3ffd99e1\" id=\"u3ffd99e1\"><span data-lake-id=\"u6cd66157\" id=\"u6cd66157\">可以使用this</span></li><li fid=\"ud8a2eae8\" data-lake-id=\"3e29f0c7fbaf97cee21c2ffa7729cffb\" id=\"3e29f0c7fbaf97cee21c2ffa7729cffb\"><span data-lake-id=\"u537f0f30\" id=\"u537f0f30\">可以使用react的生命周期</span></li><li fid=\"ud8a2eae8\" data-lake-id=\"89b04a33cfa8f30cc5daf7c32a6841ba\" id=\"89b04a33cfa8f30cc5daf7c32a6841ba\"><span data-lake-id=\"uf64b8e12\" id=\"uf64b8e12\">使用较多，容易频繁触发生命周期钩子函数，影响性能</span></li><li fid=\"ud8a2eae8\" data-lake-id=\"7c2540791dbcc975a52922caaa955e09\" id=\"7c2540791dbcc975a52922caaa955e09\"><span data-lake-id=\"u5b44377b\" id=\"u5b44377b\">内部使用 state，维护自身状态的变化，有状态组件根据外部组件传入的 props 和自身的 state进行渲染。</span></li></ul><p data-lake-id=\"d85f06db7b1d339bc2b49613491506b1\" id=\"d85f06db7b1d339bc2b49613491506b1\"><br></p><p data-lake-id=\"bb624ab73b5aced2283c97985b5cecf6\" id=\"bb624ab73b5aced2283c97985b5cecf6\"><strong><span data-lake-id=\"ub8f81686\" id=\"ub8f81686\">使用场景：</span></strong></p><ul list=\"uc2792e4e\"><li fid=\"uac90ec22\" data-lake-id=\"569e1350440d9a37568922888d2a0242\" id=\"569e1350440d9a37568922888d2a0242\"><span data-lake-id=\"ub6499378\" id=\"ub6499378\">需要使用到状态的。 </span></li><li fid=\"uac90ec22\" data-lake-id=\"e680d9566774f755beba941950d08a1f\" id=\"e680d9566774f755beba941950d08a1f\"><span data-lake-id=\"u3906044a\" id=\"u3906044a\">需要使用状态操作组件的（无状态组件的也可以实现新版本react hooks也可实现）</span></li></ul><p data-lake-id=\"c67489e8e25271be99f54594d5bd5075\" id=\"c67489e8e25271be99f54594d5bd5075\"><br></p><p data-lake-id=\"69762d8dc10c454e45e769bb6fcd783b\" id=\"69762d8dc10c454e45e769bb6fcd783b\"><strong><span data-lake-id=\"u2ce910e3\" id=\"u2ce910e3\">总结：</span></strong></p><p data-lake-id=\"92ec9a26d7b14535f39622c54bb27f80\" id=\"92ec9a26d7b14535f39622c54bb27f80\"><span data-lake-id=\"uba60cad7\" id=\"uba60cad7\">类组件可以维护自身的状态变量，即组件的 state ，类组件还有不同的生命周期方法，可以让开发者能够在组件的不同阶段（挂载、更新、卸载），对组件做更多的控制。类组件则既可以充当无状态组件，也可以充当有状态组件。当一个类组件不需要管理自身状态时，也可称为无状态组件。</span></p><p data-lake-id=\"7351a79d63ada8153200bef47a7dd0c3\" id=\"7351a79d63ada8153200bef47a7dd0c3\"><br></p><p data-lake-id=\"c230ba5dae0cf90fa1157889cbe5129e\" id=\"c230ba5dae0cf90fa1157889cbe5129e\"><strong><span data-lake-id=\"u9430dad4\" id=\"u9430dad4\">（2）无状态组件</span></strong></p><p data-lake-id=\"c6dd28c4a9dff839cf1e2268c388a53a\" id=\"c6dd28c4a9dff839cf1e2268c388a53a\"><strong><span data-lake-id=\"u94be97b3\" id=\"u94be97b3\">特点：</span></strong></p><ul list=\"u66d22d33\"><li fid=\"u887b2a81\" data-lake-id=\"9736fb35c91058aada273766826b3a8b\" id=\"9736fb35c91058aada273766826b3a8b\"><span data-lake-id=\"uc50ce01f\" id=\"uc50ce01f\">不依赖自身的状态state</span></li><li fid=\"u887b2a81\" data-lake-id=\"638c009450294c582d7c1829a25c7197\" id=\"638c009450294c582d7c1829a25c7197\"><span data-lake-id=\"uc8e4e4d7\" id=\"uc8e4e4d7\">可以是类组件或者函数组件。</span></li><li fid=\"u887b2a81\" data-lake-id=\"034ab0e67bdb7c9c2940c9f8529db902\" id=\"034ab0e67bdb7c9c2940c9f8529db902\"><span data-lake-id=\"u5d503742\" id=\"u5d503742\">可以完全避免使用 this 关键字。（由于使用的是箭头函数事件无需绑定）</span></li><li fid=\"u887b2a81\" data-lake-id=\"029ecf78d6d6ae079c3941cc3fd9fb0b\" id=\"029ecf78d6d6ae079c3941cc3fd9fb0b\"><span data-lake-id=\"ud6155753\" id=\"ud6155753\">有更高的性能。当不需要使用生命周期钩子时，应该首先使用无状态函数组件</span></li><li fid=\"u887b2a81\" data-lake-id=\"ca3574ef4fd076717d880d5b6682def0\" id=\"ca3574ef4fd076717d880d5b6682def0\"><span data-lake-id=\"u9568cff0\" id=\"u9568cff0\">组件内部不维护 state ，只根据外部组件传入的 props 进行渲染的组件，当 props 改变时，组件重新渲染。</span></li></ul><p data-lake-id=\"3af1e8a5ed4630956b03f9d6b531e0c1\" id=\"3af1e8a5ed4630956b03f9d6b531e0c1\"><br></p><p data-lake-id=\"14dd60df4e1eed19794e51e72088b08d\" id=\"14dd60df4e1eed19794e51e72088b08d\"><strong><span data-lake-id=\"ufd851ece\" id=\"ufd851ece\">使用场景：</span></strong></p><ul list=\"u4aa5d025\"><li fid=\"u16257f4b\" data-lake-id=\"ebb85f552e88f4325232fc5fa2ac9cf4\" id=\"ebb85f552e88f4325232fc5fa2ac9cf4\"><span data-lake-id=\"ucec9e9ce\" id=\"ucec9e9ce\">组件不需要管理 state，纯展示 </span></li></ul><p data-lake-id=\"4102abc909927c415e5a701f4188dae0\" id=\"4102abc909927c415e5a701f4188dae0\"><br></p><p data-lake-id=\"2e3c25cf456ec5c4713656f15c5ca6e8\" id=\"2e3c25cf456ec5c4713656f15c5ca6e8\"><strong><span data-lake-id=\"u7fb5f62f\" id=\"u7fb5f62f\">优点：</span></strong></p><ul list=\"u285a97d2\"><li fid=\"u5b911c4c\" data-lake-id=\"01ab43beecbf80af736cae8d5841f4c9\" id=\"01ab43beecbf80af736cae8d5841f4c9\"><span data-lake-id=\"ud99ae0d8\" id=\"ud99ae0d8\">简化代码、专注于 render</span></li><li fid=\"u5b911c4c\" data-lake-id=\"4198f07777d2ba698d0c4222096f90c1\" id=\"4198f07777d2ba698d0c4222096f90c1\"><span data-lake-id=\"udd0523a2\" id=\"udd0523a2\">组件不需要被实例化，无生命周期，提升性能。 输出（渲染）只取决于输入（属性），无副作用</span></li><li fid=\"u5b911c4c\" data-lake-id=\"289661831c0f0ecc9db50a7769a3153e\" id=\"289661831c0f0ecc9db50a7769a3153e\"><span data-lake-id=\"u7d2b8e0e\" id=\"u7d2b8e0e\">视图和数据的解耦分离</span></li></ul><p data-lake-id=\"6c92e15a26c6fcfa0034dc798cfb738d\" id=\"6c92e15a26c6fcfa0034dc798cfb738d\"><br></p><p data-lake-id=\"7b1e06f7828367a640b8915d5c7b6c5e\" id=\"7b1e06f7828367a640b8915d5c7b6c5e\"><strong><span data-lake-id=\"u7d2c659d\" id=\"u7d2c659d\">缺点：</span></strong></p><ul list=\"u9637f4cd\"><li fid=\"ubbcb909f\" data-lake-id=\"dccfff2b6f024b0bc315ac5dd962580b\" id=\"dccfff2b6f024b0bc315ac5dd962580b\"><span data-lake-id=\"u62fe27b0\" id=\"u62fe27b0\">无法使用 ref </span></li><li fid=\"ubbcb909f\" data-lake-id=\"u51913e88\" id=\"u51913e88\"><span data-lake-id=\"u1243a2b7\" id=\"u1243a2b7\">无生命周期方法</span></li><li fid=\"ubbcb909f\" data-lake-id=\"2585598a1488242f5f98595ab6bbc419\" id=\"2585598a1488242f5f98595ab6bbc419\"><span data-lake-id=\"u1646b823\" id=\"u1646b823\">无法控制组件的重渲染，因为无法使用shouldComponentUpdate 方法，当组件接受到新的属性时则会重渲染</span></li></ul><p data-lake-id=\"b3693c1ffc1239fe6164176ad5022c7f\" id=\"b3693c1ffc1239fe6164176ad5022c7f\"><br></p><p data-lake-id=\"994fb68bbed1c7db84c299aead0512f4\" id=\"994fb68bbed1c7db84c299aead0512f4\"><strong><span data-lake-id=\"u3252388b\" id=\"u3252388b\">总结：</span></strong></p><p data-lake-id=\"19c0f6550749c9b1700886bc125370a8\" id=\"19c0f6550749c9b1700886bc125370a8\"><span data-lake-id=\"u28cb4383\" id=\"u28cb4383\">组件内部状态且与外部无关的组件，可以考虑用状态组件，这样状态树就不会过于复杂，易于理解和管理。当一个组件不需要管理自身状态时，也就是无状态组件，应该优先设计为函数组件。比如自定义的 </span><code data-lake-id=\"uca783406\" id=\"uca783406\"><span data-lake-id=\"uf9787904\" id=\"uf9787904\">&lt;Button/&gt;</span></code><span data-lake-id=\"u7ca95421\" id=\"u7ca95421\">、 </span><code data-lake-id=\"ub9cfb4a0\" id=\"ub9cfb4a0\"><span data-lake-id=\"u1c79e2b9\" id=\"u1c79e2b9\">&lt;Input /&gt;</span></code><span data-lake-id=\"u31da5587\" id=\"u31da5587\"> 等组件。</span></p><h3 data-lake-id=\"1bdd469bfcfad35b133ba76695c05781\" id=\"1bdd469bfcfad35b133ba76695c05781\"><span data-lake-id=\"uc0a0bbde\" id=\"uc0a0bbde\">15. </span><span data-lake-id=\"u2d234bca\" id=\"u2d234bca\">对R</span><span data-lake-id=\"u13b0b949\" id=\"u13b0b949\">eact中Fragment的理解，它的使用场景是什么？</span></h3><p data-lake-id=\"98cf46424e94819d91509aa59974c6e1\" id=\"98cf46424e94819d91509aa59974c6e1\"><span data-lake-id=\"uffc6bd6b\" id=\"uffc6bd6b\">在React中，组件返回的元素只能有一个根元素。为了不添加多余的DOM节点，我们可以使用Fragment标签来包裹所有的元素，</span><span data-lake-id=\"ue18697f0\" id=\"ue18697f0\">Fragment标签不会渲染出任何元素。</span><span data-lake-id=\"u458f152c\" id=\"u458f152c\">React官方对Fragment的解释：</span></p><blockquote data-lake-id=\"u3310e9a4\" id=\"u3310e9a4\"><p data-lake-id=\"a6137c6b27bda8338be9bb9191cd7216\" id=\"a6137c6b27bda8338be9bb9191cd7216\"><span data-lake-id=\"ufd8e2050\" id=\"ufd8e2050\">React 中的一个常见模式是一个组件返回多个元素。Fragments 允许你将子列表分组，而无需向 DOM 添加额外节点。</span></p></blockquote><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20React%2C%20%7B%20Component%2C%20Fragment%20%7D%20from%20'react'%5Cn%5Cn%2F%2F%20%E4%B8%80%E8%88%AC%E5%BD%A2%E5%BC%8F%5Cnrender()%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3CReact.Fragment%3E%5Cn%20%20%20%20%20%20%3CChildA%20%2F%3E%5Cn%20%20%20%20%20%20%3CChildB%20%2F%3E%5Cn%20%20%20%20%20%20%3CChildC%20%2F%3E%5Cn%20%20%20%20%3C%2FReact.Fragment%3E%5Cn%20%20)%3B%5Cn%7D%5Cn%2F%2F%20%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%86%99%E6%88%90%E4%BB%A5%E4%B8%8B%E5%BD%A2%E5%BC%8F%5Cnrender()%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3C%3E%5Cn%20%20%20%20%20%20%3CChildA%20%2F%3E%5Cn%20%20%20%20%20%20%3CChildB%20%2F%3E%5Cn%20%20%20%20%20%20%3CChildC%20%2F%3E%5Cn%20%20%20%20%3C%2F%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22P9a5w%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"d89b26ecc8f2a04f381cb4f65c0799ab\" id=\"d89b26ecc8f2a04f381cb4f65c0799ab\"><span data-lake-id=\"u07adf058\" id=\"u07adf058\">16. R</span><span data-lake-id=\"u29573b17\" id=\"u29573b17\">eact如何获取组件对应的DOM元素？</span></h3><p data-lake-id=\"f30c2fe836c652f58be46bb894e5f46c\" id=\"f30c2fe836c652f58be46bb894e5f46c\" style=\"text-align: left\"><span data-lake-id=\"u79d88e33\" id=\"u79d88e33\">可以用ref来获取某个子节点的实例，然后通过当前class组件实例的一些特定属性来直接获取子节点实例。ref有三种实现方法:</span></p><ul list=\"u20fedf57\"><li fid=\"ud8649994\" data-lake-id=\"4ff57c5c164a23fa6a58fc8acf550b21\" id=\"4ff57c5c164a23fa6a58fc8acf550b21\" style=\"text-align: left\"><strong><span data-lake-id=\"u9244495f\" id=\"u9244495f\">字符串格式</span></strong><span data-lake-id=\"u7fecdc16\" id=\"u7fecdc16\">：字符串格式，这是React16版本之前用得最多的，例如：</span><code data-lake-id=\"u8938d52a\" id=\"u8938d52a\"><span data-lake-id=\"u3bf21986\" id=\"u3bf21986\">&lt;p ref=&quot;info&quot;&gt;span&lt;/p&gt;</span></code></li><li fid=\"ud8649994\" data-lake-id=\"0e696834173ed225889abb51bde16418\" id=\"0e696834173ed225889abb51bde16418\" style=\"text-align: left\"><strong><span data-lake-id=\"u0c8f7262\" id=\"u0c8f7262\">函数格式</span></strong><span data-lake-id=\"u017b8b6d\" id=\"u017b8b6d\">：ref对应一个方法，该方法有一个参数，也就是对应的节点实例，例如：</span><code data-lake-id=\"u1690c726\" id=\"u1690c726\"><span data-lake-id=\"u98366e13\" id=\"u98366e13\">&lt;p ref={ele =&gt; this.info = ele}&gt;&lt;/p&gt;</span></code></li><li fid=\"ud8649994\" data-lake-id=\"4805bd6ed911b45c2c3af622b2a38527\" id=\"4805bd6ed911b45c2c3af622b2a38527\" style=\"text-align: left\"><strong><span data-lake-id=\"u86135cc5\" id=\"u86135cc5\">createRef方法</span></strong><span data-lake-id=\"u5e522adb\" id=\"u5e522adb\">：React 16提供的一个API，使用React.createRef()来实现 　　　　　　  </span></li></ul><h3 data-lake-id=\"6d891cbdad365030991c14842fe0ab52\" id=\"6d891cbdad365030991c14842fe0ab52\"><span data-lake-id=\"u1e6e934a\" id=\"u1e6e934a\">17. </span><span data-lake-id=\"ua874770f\" id=\"ua874770f\">React中可以在render访问refs吗？为什么？</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3C%3E%5Cn%20%20%3Cspan%20id%3D%5C%22name%5C%22%20ref%3D%7Bthis.spanRef%7D%3E%7Bthis.state.title%7D%3C%2Fspan%3E%5Cn%20%20%3Cspan%3E%7B%5Cn%20%20%20%20%20this.spanRef.current%20%3F%20'%E6%9C%89%E5%80%BC'%20%3A%20'%E6%97%A0%E5%80%BC'%5Cn%20%20%7D%3C%2Fspan%3E%5Cn%3C%2F%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%224RotG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"8866a259fb14abc9c0bd21b2e42a216d\" id=\"8866a259fb14abc9c0bd21b2e42a216d\"><span data-lake-id=\"u5a793411\" id=\"u5a793411\">不可以，render 阶段 DOM 还没有生成，无法获取 DOM。DOM 的获取需要在 pre-commit 阶段和 commit 阶段：</span></p><p data-lake-id=\"31a0df94f22c33d74ed8d3877edcbbf3\" id=\"31a0df94f22c33d74ed8d3877edcbbf3\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1611822510207-8101671e-8b5a-4968-88b1-85d44e078b0b.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A900%2C%22height%22%3A543%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A245839%2C%22originWidth%22%3A2216%2C%22originHeight%22%3A1336%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%2016.4%20Reactversion%20Language%20%E6%9B%B4%E6%96%B0%E6%97%B6%20%E5%8D%B8%E8%BD%BD%E6%97%B6%20%E6%8C%82%E8%BD%BD%E6%97%B6%20constructor%20setState0%20forceUpdate0%20Newprops%20geDerivedStateFromProps%20%5C%22Render%E9%98%B6%E6%AE%B5%5C%22%20%E7%BA%AF%E5%87%80%E4%B8%94%E4%B8%8D%E5%8C%85%E5%90%AB%E5%89%AF%E4%BD%9C%E7%94%A8.%20%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%ABReact%E6%9A%82%20%E5%81%9C%2C%E4%B8%AD%E6%AD%A2%E6%88%96%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8.%20shouldComponentUpdate%20render%20%5C%22pre-commit%E9%98%B6%E6%AE%B5%5C%22%20getSnapshotBeforeUpdate%20%E5%8F%AF%E4%BB%A5%E8%AF%BB%E5%8F%96DOM.%20React%E6%9B%B4%E6%96%B0DOM%E5%92%8Crefs%20%5C%22Commit%E9%98%B6%E6%AE%B5%5C%22%20%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8DOM%2C%E8%BF%90%E8%A1%8C%20%E5%89%AF%E4%BD%9C%E7%94%A8%2C%E5%AE%89%E6%8E%92%E6%9B%B4%E6%96%B0.%20componentDidupdate%20componentDidMount%20ComponentWilUnmount%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1375.4476%2C%22y%22%3A22.68636%2C%22width%22%3A116.1418000000001%2C%22height%22%3A30.639986999999998%2C%22text%22%3A%22%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%22%7D%2C%7B%22x%22%3A1060.2336%2C%22y%22%3A23.522913%2C%22width%22%3A70.27909999999997%2C%22height%22%3A23.375387%2C%22text%22%3A%2216.4%22%7D%2C%7B%22x%22%3A861.66486%2C%22y%22%3A24.550865%2C%22width%22%3A175.1890400000001%2C%22height%22%3A28.551074999999997%2C%22text%22%3A%22Reactversion%22%7D%2C%7B%22x%22%3A1194.7561%2C%22y%22%3A25.809505%2C%22width%22%3A128.67679999999996%2C%22height%22%3A29.155552%2C%22text%22%3A%22Language%22%7D%2C%7B%22x%22%3A1180.6306%2C%22y%22%3A155.79738%2C%22width%22%3A140.41679999999997%2C%22height%22%3A47.08742000000001%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E6%97%B6%22%7D%2C%7B%22x%22%3A1857.2094%2C%22y%22%3A156.09177%2C%22width%22%3A146.24199999999996%2C%22height%22%3A48.19695999999999%2C%22text%22%3A%22%E5%8D%B8%E8%BD%BD%E6%97%B6%22%7D%2C%7B%22x%22%3A521.2291%2C%22y%22%3A156.82204%2C%22width%22%3A145.21619999999996%2C%22height%22%3A47.506080000000026%2C%22text%22%3A%22%E6%8C%82%E8%BD%BD%E6%97%B6%22%7D%2C%7B%22x%22%3A504.5288%2C%22y%22%3A335.18732%2C%22width%22%3A180.27730000000003%2C%22height%22%3A28.86180999999999%2C%22text%22%3A%22constructor%22%7D%2C%7B%22x%22%3A1190.8336%2C%22y%22%3A337.35434%2C%22width%22%3A129.02920000000017%2C%22height%22%3A28.031589999999994%2C%22text%22%3A%22setState0%22%7D%2C%7B%22x%22%3A1404.2316%2C%22y%22%3A337.39575%2C%22width%22%3A185.64229999999998%2C%22height%22%3A31.225529999999992%2C%22text%22%3A%22forceUpdate0%22%7D%2C%7B%22x%22%3A938.6889%2C%22y%22%3A339.01852%2C%22width%22%3A145.36109999999996%2C%22height%22%3A29.821319999999957%2C%22text%22%3A%22Newprops%22%7D%2C%7B%22x%22%3A803.8055%2C%22y%22%3A488.25238%2C%22width%22%3A393.8586999999999%2C%22height%22%3A32.891719999999964%2C%22text%22%3A%22geDerivedStateFromProps%22%7D%2C%7B%22x%22%3A68.50744%2C%22y%22%3A488.588%2C%22width%22%3A209.09351%2C%22height%22%3A35.29536000000002%2C%22text%22%3A%22%5C%22Render%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A36.809628%2C%22y%22%3A543.9687%2C%22width%22%3A261.880652%2C%22height%22%3A29.680600000000027%2C%22text%22%3A%22%E7%BA%AF%E5%87%80%E4%B8%94%E4%B8%8D%E5%8C%85%E5%90%AB%E5%89%AF%E4%BD%9C%E7%94%A8.%22%7D%2C%7B%22x%22%3A56.29196%2C%22y%22%3A585.8528%2C%22width%22%3A230.63290999999998%2C%22height%22%3A27.751750000000015%2C%22text%22%3A%22%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%ABReact%E6%9A%82%22%7D%2C%7B%22x%22%3A31.881323%2C%22y%22%3A625.2177%2C%22width%22%3A266.111677%2C%22height%22%3A29.571669999999926%2C%22text%22%3A%22%E5%81%9C%2C%E4%B8%AD%E6%AD%A2%E6%88%96%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8.%22%7D%2C%7B%22x%22%3A943.6635%2C%22y%22%3A634.1992%2C%22width%22%3A375.6018%2C%22height%22%3A34.282249999999976%2C%22text%22%3A%22shouldComponentUpdate%22%7D%2C%7B%22x%22%3A946.81903%2C%22y%22%3A785.85077%2C%22width%22%3A106.28276999999991%2C%22height%22%3A29.736999999999966%2C%22text%22%3A%22render%22%7D%2C%7B%22x%22%3A36.941963%2C%22y%22%3A899.9742%2C%22width%22%3A273.970387%2C%22height%22%3A32.95730000000003%2C%22text%22%3A%22%5C%22pre-commit%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A1054.984%2C%22y%22%3A931.8906%2C%22width%22%3A391.02560000000017%2C%22height%22%3A34.221770000000106%2C%22text%22%3A%22getSnapshotBeforeUpdate%22%7D%2C%7B%22x%22%3A67.23398%2C%22y%22%3A955.5423%2C%22width%22%3A194.95471999999998%2C%22height%22%3A30.383300000000077%2C%22text%22%3A%22%E5%8F%AF%E4%BB%A5%E8%AF%BB%E5%8F%96DOM.%22%7D%2C%7B%22x%22%3A827.72253%2C%22y%22%3A1081.3967%2C%22width%22%3A343.97567000000004%2C%22height%22%3A32.759900000000016%2C%22text%22%3A%22React%E6%9B%B4%E6%96%B0DOM%E5%92%8Crefs%22%7D%2C%7B%22x%22%3A68.95001%2C%22y%22%3A1108.83%2C%22width%22%3A211.63939%2C%22height%22%3A32.29320000000007%2C%22text%22%3A%22%5C%22Commit%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A43.528275%2C%22y%22%3A1164.7191%2C%22width%22%3A265.281175%2C%22height%22%3A29.875%2C%22text%22%3A%22%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8DOM%2C%E8%BF%90%E8%A1%8C%22%7D%2C%7B%22x%22%3A45.628853%2C%22y%22%3A1203.1514%2C%22width%22%3A239.560997%2C%22height%22%3A32.1268%2C%22text%22%3A%22%E5%89%AF%E4%BD%9C%E7%94%A8%2C%E5%AE%89%E6%8E%92%E6%9B%B4%E6%96%B0.%22%7D%2C%7B%22x%22%3A1082.8804%2C%22y%22%3A1233.2421%2C%22width%22%3A339.2373%2C%22height%22%3A34.03500000000008%2C%22text%22%3A%22componentDidupdate%22%7D%2C%7B%22x%22%3A433.29974%2C%22y%22%3A1233.6285%2C%22width%22%3A322.76136%2C%22height%22%3A32.35509999999999%2C%22text%22%3A%22componentDidMount%22%7D%2C%7B%22x%22%3A1747.4899%2C%22y%22%3A1234.0183%2C%22width%22%3A370.0605999999998%2C%22height%22%3A29.957300000000032%2C%22text%22%3A%22ComponentWilUnmount%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f9f7%22%2C%22id%22%3A%22aAwWm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"2ae224cbfd39d94c809446426d6a3e0b\" id=\"2ae224cbfd39d94c809446426d6a3e0b\"><span data-lake-id=\"ufb4e2de4\" id=\"ufb4e2de4\">18. 对React的插槽(Portals)的理解，如何使用，</span><span data-lake-id=\"u6208f2ca\" id=\"u6208f2ca\">有哪些</span><span data-lake-id=\"ue597f3a3\" id=\"ue597f3a3\">使用场景</span></h3><p data-lake-id=\"31cb68f8f0e820c210864ec63d01b622\" id=\"31cb68f8f0e820c210864ec63d01b622\"><span data-lake-id=\"u67519d0b\" id=\"u67519d0b\">React 官方对 Portals 的定义：</span></p><blockquote data-lake-id=\"u813089cb\" id=\"u813089cb\"><p data-lake-id=\"5298bc5fb15eeca4ab38152d449eecff\" id=\"5298bc5fb15eeca4ab38152d449eecff\"><span data-lake-id=\"u40d8f71d\" id=\"u40d8f71d\">Portal 提供了一种将子节点渲染到存在于父组件以外的 DOM 节点的优秀的方案</span></p></blockquote><p data-lake-id=\"b3070c515a24e0fecad954248b2ec779\" id=\"b3070c515a24e0fecad954248b2ec779\" style=\"text-align: left\"><span data-lake-id=\"u7dd8b538\" id=\"u7dd8b538\">Portals </span><span data-lake-id=\"u28b94368\" id=\"u28b94368\">是</span><span data-lake-id=\"u08e3c917\" id=\"u08e3c917\">React </span><span data-lake-id=\"ueb4866c6\" id=\"ueb4866c6\">16提供的官方解决方案，使得组件可以脱离父组件层级挂载在DOM树的任何位置。通俗来讲，就是我们 render 一个组件，但这个组件的 DOM 结构并不在本组件内。</span></p><p data-lake-id=\"0b151291e5b5f145a57aab9803ace71e\" id=\"0b151291e5b5f145a57aab9803ace71e\" style=\"text-align: left\"><br></p><p data-lake-id=\"7a1fd4c56a942c293ac2e8c12d57157f\" id=\"7a1fd4c56a942c293ac2e8c12d57157f\" style=\"text-align: left\"><span data-lake-id=\"ud4bbf415\" id=\"ud4bbf415\">Portals语法如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22ReactDOM.createPortal(child%2C%20container)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22u2NS3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u332e4639\"><li fid=\"u8fc5b421\" data-lake-id=\"58c71f9bec05f29e2d6ba63c72988637\" id=\"58c71f9bec05f29e2d6ba63c72988637\"><span data-lake-id=\"u2b1b5414\" id=\"u2b1b5414\">第一个参数 child 是可渲染的 React 子项，比如元素，字符串或者片段等;</span></li><li fid=\"u8fc5b421\" data-lake-id=\"9506dd23ddd25a4351e9b5b136f65238\" id=\"9506dd23ddd25a4351e9b5b136f65238\"><span data-lake-id=\"u23536155\" id=\"u23536155\">第二个参数 container 是一个 DOM 元素。</span></li></ul><p data-lake-id=\"c3d656000a1cbbab024a7fd3fbbb25cf\" id=\"c3d656000a1cbbab024a7fd3fbbb25cf\" style=\"text-align: left\"><br></p><p data-lake-id=\"4a75f6826dc32ccdcec5acd637735270\" id=\"4a75f6826dc32ccdcec5acd637735270\" style=\"text-align: left\"><span data-lake-id=\"ub0310d50\" id=\"ub0310d50\">一般情况下，组件的render函数返回的元素会被挂载在它的父级组件上：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20DemoComponent%20from%20'.%2FDemoComponent'%3B%5Cnrender()%20%7B%5Cn%20%20%2F%2F%20DemoComponent%E5%85%83%E7%B4%A0%E4%BC%9A%E8%A2%AB%E6%8C%82%E8%BD%BD%E5%9C%A8id%E4%B8%BAparent%E7%9A%84div%E7%9A%84%E5%85%83%E7%B4%A0%E4%B8%8A%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%20id%3D%5C%22parent%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3CDemoComponent%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ItWSx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"545585ea94710dffbc4d5a78f3711bb3\" id=\"545585ea94710dffbc4d5a78f3711bb3\" style=\"text-align: left\"><span data-lake-id=\"u8cf4ee72\" id=\"u8cf4ee72\">然而，有些元素需要被挂载在更高层级的位置。最典型的应用场景：当父组件具有</span><code data-lake-id=\"u6e56bd25\" id=\"u6e56bd25\"><span data-lake-id=\"uf1bb6111\" id=\"uf1bb6111\">overflow: hidden</span></code><span data-lake-id=\"udb66305f\" id=\"udb66305f\">或者</span><code data-lake-id=\"u2f3d3070\" id=\"u2f3d3070\"><span data-lake-id=\"u68e052e9\" id=\"u68e052e9\">z-index</span></code><span data-lake-id=\"ue58ac895\" id=\"ue58ac895\">的样式设置时，组件有可能被其他元素遮挡，这时就可以考虑要不要使用Portal使组件的挂载脱离父组件。例如：对话框，模态窗。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20DemoComponent%20from%20'.%2FDemoComponent'%3B%5Cnrender()%20%7B%5Cn%20%20%2F%2F%20react%E4%BC%9A%E5%B0%86DemoComponent%E7%BB%84%E4%BB%B6%E7%9B%B4%E6%8E%A5%E6%8C%82%E8%BD%BD%E5%9C%A8%E7%9C%9F%E5%AE%9E%E7%9A%84%20dom%20%E8%8A%82%E7%82%B9%20domNode%20%E4%B8%8A%EF%BC%8C%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E8%BF%98%E5%92%8C16%E7%89%88%E6%9C%AC%E4%B9%8B%E5%89%8D%E7%9B%B8%E5%90%8C%E3%80%82%5Cn%20%20return%20ReactDOM.createPortal(%5Cn%20%20%20%20%3CDemoComponent%20%2F%3E%2C%5Cn%20%20%20%20domNode%2C%5Cn%20%20)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tyrUD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"8cf2099e03d88e246c0f909c8f6974fd\" id=\"8cf2099e03d88e246c0f909c8f6974fd\"><span data-lake-id=\"ub1e8ab09\" id=\"ub1e8ab09\">19. </span><span data-lake-id=\"uc7f46591\" id=\"uc7f46591\">在React中如何避免不必要的render？</span></h3><p data-lake-id=\"34108689c9285cc79c887a68428ed53d\" id=\"34108689c9285cc79c887a68428ed53d\"><span data-lake-id=\"u157eb918\" id=\"u157eb918\">React 基于虚拟 DOM 和高效 Diff 算法的完美配合，实现了对 DOM 最小粒度的更新。大多数情况下，React 对 DOM 的渲染效率足以业务日常。但在个别复杂业务场景下，性能问题依然会困扰我们。此时需要采取一些措施来提升运行性能，其很重要的一个方向，就是避免不必要的渲染（Render）。这里提下优化的点：</span></p><ul list=\"u151e1f44\"><li fid=\"ue2903d0e\" data-lake-id=\"eab8f73bb358a825d2156a96a8d38f95\" id=\"eab8f73bb358a825d2156a96a8d38f95\"><strong><span data-lake-id=\"u8f47e5ca\" id=\"u8f47e5ca\">shouldComponentUpdate 和 PureComponent</span></strong></li></ul><p data-lake-id=\"5b551cfba63423aefc3236570b98bd07\" id=\"5b551cfba63423aefc3236570b98bd07\"><span data-lake-id=\"u7f19f791\" id=\"u7f19f791\">在 React 类组件中，可以利用 shouldComponentUpdate或者 PureComponent 来减少因父组件更新而触发子组件的 render，从而达到目的。shouldComponentUpdate 来决定是否组件是否重新渲染，如果不希望组件重新渲染，返回 false 即可。</span></p><ul list=\"u3c067a31\"><li fid=\"u89bf4ab4\" data-lake-id=\"b02685754433986c20db4c4c03007d7d\" id=\"b02685754433986c20db4c4c03007d7d\"><strong><span data-lake-id=\"u97d51905\" id=\"u97d51905\">利用高阶组件</span></strong></li></ul><p data-lake-id=\"14d35b6855bc5517034b1836d5ec024a\" id=\"14d35b6855bc5517034b1836d5ec024a\"><span data-lake-id=\"uaee4ecbc\" id=\"uaee4ecbc\">在函数组件中，并没有 shouldComponentUpdate 这个生命周期，可以利用高阶组件，封装一个类似 PureComponet 的功能</span></p><ul list=\"u42598530\"><li fid=\"u294ee5a5\" data-lake-id=\"6e3ca3d9412a8e9b8cff3da305f2b1ff\" id=\"6e3ca3d9412a8e9b8cff3da305f2b1ff\"><strong><span data-lake-id=\"u2d664055\" id=\"u2d664055\">使用 React.memo</span></strong></li></ul><p data-lake-id=\"7587eb6072b95a42ed425b20dccc9947\" id=\"7587eb6072b95a42ed425b20dccc9947\"><span data-lake-id=\"u7db5938a\" id=\"u7db5938a\">React.memo 是 React 16.6 新的一个 API，用来缓存组件的渲染，避免不必要的更新，其实也是一个高阶组件，与 PureComponent 十分类似，但不同的是， React.memo只能用于函数组件。</span></p><h3 data-lake-id=\"726bd9bb9acb08c5f535d59bd31f1b04\" id=\"726bd9bb9acb08c5f535d59bd31f1b04\"><span data-lake-id=\"u65d9e98a\" id=\"u65d9e98a\">20. 对 React-Intl 的理解，它的工作原理？</span></h3><p data-lake-id=\"5563bd90b2fad186e643f3f14a0de125\" id=\"5563bd90b2fad186e643f3f14a0de125\" style=\"text-align: left\"><span data-lake-id=\"u76f455af\" id=\"u76f455af\">React-intl是雅虎的语言国际化开源项目FormatJS的一部分，通过其提供的组件和API可以与ReactJS绑定。</span></p><p data-lake-id=\"544acec224de410e3d97b39101d56fc3\" id=\"544acec224de410e3d97b39101d56fc3\" style=\"text-align: left\"><br></p><p data-lake-id=\"69f2d4040eed40e44c91e0ddb749ae9d\" id=\"69f2d4040eed40e44c91e0ddb749ae9d\" style=\"text-align: left\"><span data-lake-id=\"ue9b7b8f4\" id=\"ue9b7b8f4\">React-intl提供了两种使用方法，一种是引用React组件，另一种是直接调取API，官方更加推荐在React项目中使用前者，只有在无法使用React组件的地方，才应该调用框架提供的API。它提供了一系列的React组件，包括数字格式化、字符串格式化、日期格式化等。</span></p><p data-lake-id=\"5ad2dc4e7aaf2e6645fdcd69fa30bc9a\" id=\"5ad2dc4e7aaf2e6645fdcd69fa30bc9a\" style=\"text-align: left\"><br></p><p data-lake-id=\"d51820f47336c441f8db6416e6d1609b\" id=\"d51820f47336c441f8db6416e6d1609b\" style=\"text-align: left\"><span data-lake-id=\"ud753217f\" id=\"ud753217f\">在React-intl中，可以配置不同的语言包，他的工作原理就是根据需要，在语言包之间进行切换。</span></p><h3 data-lake-id=\"a6dd71b21a08e25e0330b0ffbcf7d238\" id=\"a6dd71b21a08e25e0330b0ffbcf7d238\"><span data-lake-id=\"u0586601c\" id=\"u0586601c\">21. </span><span data-lake-id=\"u3a200e93\" id=\"u3a200e93\">对 React context 的理解</span></h3><p data-lake-id=\"de6abc174389b54c51ef4f76a5572859\" id=\"de6abc174389b54c51ef4f76a5572859\"><span data-lake-id=\"u575a0dbe\" id=\"u575a0dbe\">在React中，数据传递一般使用props传递数据，维持单向数据流，这样可以让组件之间的关系变得简单且可预测，但是单项数据流在某些场景中并不适用。单纯一对的父子组件传递并无问题，但要是组件之间层层依赖深入，props就需要层层传递显然，这样做太繁琐了。</span></p><p data-lake-id=\"abc0a0c0915ac6900e1ca3172c9642e6\" id=\"abc0a0c0915ac6900e1ca3172c9642e6\"><br></p><p data-lake-id=\"dfba070a8e8795e47afb81961af0544e\" id=\"dfba070a8e8795e47afb81961af0544e\"><span data-lake-id=\"u049dc1bc\" id=\"u049dc1bc\">Context 提供了一种在组件之间共享此类值的方式，而不必显式地通过组件树的逐层传递 props。</span></p><p data-lake-id=\"7abaaaffbefe387dd7319047187056ae\" id=\"7abaaaffbefe387dd7319047187056ae\"><br></p><p data-lake-id=\"32e5846c5adfc9aa31e346c5ae722478\" id=\"32e5846c5adfc9aa31e346c5ae722478\"><span data-lake-id=\"u9a0d4407\" id=\"u9a0d4407\">可以把context当做是特定一个组件树内共享的store，用来做数据传递。</span><strong><span data-lake-id=\"u355ef176\" id=\"u355ef176\">简单说就是，当你不想在组件树中通过逐层传递props或者state的方式来传递数据时，可以使用Context来实现跨层级的组件数据传递。</span></strong></p><p data-lake-id=\"a94bb3ffe18419428567c77c0820d2c5\" id=\"a94bb3ffe18419428567c77c0820d2c5\"><br></p><p data-lake-id=\"8c6f411e58e03424ef4888d66ecafaa6\" id=\"8c6f411e58e03424ef4888d66ecafaa6\"><span data-lake-id=\"ub2912588\" id=\"ub2912588\">JS的代码块在执行期间，会创建一个相应的作用域链，这个作用域链记录着运行时JS代码块执行期间所能访问的活动对象，包括变量和函数，JS程序通过作用域链访问到代码块内部或者外部的变量和函数。</span></p><p data-lake-id=\"31bd17434b3fb2d3cc68fad3d4a27c3d\" id=\"31bd17434b3fb2d3cc68fad3d4a27c3d\"><br></p><p data-lake-id=\"40a808342adaf6a52ed9c7ab06a86574\" id=\"40a808342adaf6a52ed9c7ab06a86574\"><span data-lake-id=\"u0a36c3bf\" id=\"u0a36c3bf\">假如以JS的作用域链作为类比，React组件提供的Context对象其实就好比一个提供给子组件访问的作用域，而 Context对象的属性可以看成作用域上的活动对象。由于组件 的 Context 由其父节点链上所有组件通 过 getChildContext（）返回的Context对象组合而成，所以，组件通过Context是可以访问到其父组件链上所有节点组件提供的Context的属性。</span></p><h3 data-lake-id=\"0b0c2635451e8423c800e1a996ec3dda\" id=\"0b0c2635451e8423c800e1a996ec3dda\"><span data-lake-id=\"u9d2ce413\" id=\"u9d2ce413\">22. 为什么React并不推荐优先考虑使用Context？</span></h3><ul list=\"ufd8e0b7f\"><li fid=\"ue7ed2c84\" data-lake-id=\"bd15dbae59e82ecaccaf77cff23f4950\" id=\"bd15dbae59e82ecaccaf77cff23f4950\"><span data-lake-id=\"u7773d43f\" id=\"u7773d43f\">Context目前还处于实验阶段，可能会在后面的发行版本中有很大的变化，事实上这种情况已经发生了，所以为了避免给今后升级带来大的影响和麻烦，不建议在app中使用context。</span></li><li fid=\"ue7ed2c84\" data-lake-id=\"0e4d42cc57f3cc75ae75a4c7fba5e471\" id=\"0e4d42cc57f3cc75ae75a4c7fba5e471\"><span data-lake-id=\"u843f2869\" id=\"u843f2869\">尽管不建议在app中使用context，但是独有组件而言，由于影响范围小于app，如果可以做到高内聚，不破坏组件树之间的依赖关系，可以考虑使用context</span></li><li fid=\"ue7ed2c84\" data-lake-id=\"37daa5e5720e6f1c13ce6cd64e8af754\" id=\"37daa5e5720e6f1c13ce6cd64e8af754\"><span data-lake-id=\"u306328d0\" id=\"u306328d0\">对于组件之间的数据通信或者状态管理，有效使用props或者state解决，然后再考虑使用第三方的成熟库进行解决，以上的方法都不是最佳的方案的时候，在考虑context。</span></li><li fid=\"ue7ed2c84\" data-lake-id=\"06933f87d72b051d092ff0352b13bf05\" id=\"06933f87d72b051d092ff0352b13bf05\"><span data-lake-id=\"u42d979b7\" id=\"u42d979b7\">context的更新需要通过setState()触发，但是这并不是很可靠的，Context支持跨组件的访问，但是如果中间的子组件通过一些方法不影响更新，比如 shouldComponentUpdate() 返回false 那么不能保证Context的更新一定可以使用Context的子组件，因此，Context的可靠性需要关注</span></li></ul><h3 data-lake-id=\"29910abcd3bdd1e6cdb330333cfc968a\" id=\"29910abcd3bdd1e6cdb330333cfc968a\"><span data-lake-id=\"u3c6f6b9f\" id=\"u3c6f6b9f\">23. React中什么是受控组件和</span><span data-lake-id=\"ub1ea645d\" id=\"ub1ea645d\" style=\"background-color: transparent\">非控组件？</span></h3><p data-lake-id=\"efde4d9a78f4885952ff7a50953e9abf\" id=\"efde4d9a78f4885952ff7a50953e9abf\"><strong><span data-lake-id=\"u631de4a7\" id=\"u631de4a7\" style=\"background-color: transparent\">（1）受控组件</span></strong></p><p data-lake-id=\"799f2a5833a9c236d31bee5ced98a232\" id=\"799f2a5833a9c236d31bee5ced98a232\"><span data-lake-id=\"u7ce5fad4\" id=\"u7ce5fad4\">在使用表单来收集用户输入时，例如&lt;input&gt;&lt;select&gt;&lt;textearea&gt;等元素都要绑定一个change事件，当表单的状态发生变化，就会触发onChange事件，更新组件的state。这种组件在React中被称为</span><strong><span data-lake-id=\"ue284fc52\" id=\"ue284fc52\">受控组件</span></strong><span data-lake-id=\"uddb92e70\" id=\"uddb92e70\">，在受控组件中，组件渲染出的状态与它的value或checked属性相对应，react通过这种方式消除了组件的局部状态，使整个状态可控。react官方推荐使用受控表单组件。</span></p><p data-lake-id=\"569bbbe87c58d8b5435d2c22e7838437\" id=\"569bbbe87c58d8b5435d2c22e7838437\"><br></p><p data-lake-id=\"edd0e783ea573906c7c4cf9edf2cd879\" id=\"edd0e783ea573906c7c4cf9edf2cd879\"><span data-lake-id=\"u961de6c2\" id=\"u961de6c2\">受控组件更新state的流程：</span></p><ul list=\"u9a3c38c2\"><li fid=\"u13099780\" data-lake-id=\"2d1f2f7451a78c4a862a70731b48534f\" id=\"2d1f2f7451a78c4a862a70731b48534f\"><span data-lake-id=\"u27f150f6\" id=\"u27f150f6\">可以通过初始state中设置表单的默认值</span></li><li fid=\"u13099780\" data-lake-id=\"5264b15b883336cb63c57b9703369178\" id=\"5264b15b883336cb63c57b9703369178\"><span data-lake-id=\"ue6b205a3\" id=\"ue6b205a3\">每当表单的值发生变化时，调用onChange事件处理器</span></li><li fid=\"u13099780\" data-lake-id=\"e5b7c417c26c2a6a93f7619e4eb555f7\" id=\"e5b7c417c26c2a6a93f7619e4eb555f7\"><span data-lake-id=\"uc349f524\" id=\"uc349f524\">事件处理器通过事件对象e拿到改变后的状态，并更新组件的state</span></li><li fid=\"u13099780\" data-lake-id=\"268f499f3908eeae17e68ee768c18ade\" id=\"268f499f3908eeae17e68ee768c18ade\"><span data-lake-id=\"u6fc87500\" id=\"u6fc87500\">一旦通过setState方法更新state，就会触发视图的重新渲染，完成表单组件的更新</span></li></ul><p data-lake-id=\"faa7e4dee8b50d0d2c6fcb5f147e60a2\" id=\"faa7e4dee8b50d0d2c6fcb5f147e60a2\"><br></p><p data-lake-id=\"74375370bbc25cdfd45e239f72d7f110\" id=\"74375370bbc25cdfd45e239f72d7f110\"><strong><span data-lake-id=\"u989a594b\" id=\"u989a594b\">受控组件缺陷：</span></strong></p><p data-lake-id=\"93b2d5621ed0b32193e05470bc50f068\" id=\"93b2d5621ed0b32193e05470bc50f068\"><span data-lake-id=\"u14595516\" id=\"u14595516\">表单元素的值都是由React组件进行管理，当有多个输入框，或者多个这种组件时，如果想同时获取到全部的值就必须每个都要编写事件处理函数，这会让代码看着很臃肿，所以为了解决这种情况，出现了非受控组件。</span></p><p data-lake-id=\"2bb826a82e082b8a3584d8e81d39f868\" id=\"2bb826a82e082b8a3584d8e81d39f868\"><br></p><p data-lake-id=\"f8275d0660c263a6d897bdee4a2ac134\" id=\"f8275d0660c263a6d897bdee4a2ac134\"><strong><span data-lake-id=\"u0d59c583\" id=\"u0d59c583\">（2）非受控组件</span></strong></p><p data-lake-id=\"e2ed5a044ccaa2b3eeb3caa5a8a95e0d\" id=\"e2ed5a044ccaa2b3eeb3caa5a8a95e0d\"><span data-lake-id=\"u368c5050\" id=\"u368c5050\">如果一个表单组件没有value props（单选和复选按钮对应的是checked props）时，就可以称为非受控组件。在非受控组件中，可以使用一个ref来从DOM获得表单值。而不是为每个状态更新编写一个事件处理程序。</span></p><p data-lake-id=\"72164da723b5a0e611af7497055f8a60\" id=\"72164da723b5a0e611af7497055f8a60\"><br></p><p data-lake-id=\"4b5a5d3b53888fa342eebadc49a58628\" id=\"4b5a5d3b53888fa342eebadc49a58628\"><span data-lake-id=\"ub6d6e461\" id=\"ub6d6e461\">React官方的解释：</span></p><blockquote data-lake-id=\"u1ddaabb4\" id=\"u1ddaabb4\"><p data-lake-id=\"d1a752038c603af4dd962dddc1a45d2e\" id=\"d1a752038c603af4dd962dddc1a45d2e\"><span data-lake-id=\"u87ce0687\" id=\"u87ce0687\">要编写一个非受控组件，而不是为每个状态更新都编写数据处理函数，你可以</span><span data-lake-id=\"ud22c878a\" id=\"ud22c878a\">使用 ref</span><span data-lake-id=\"ub0298bc0\" id=\"ub0298bc0\">来从 DOM 节点中获取表单数据。</span></p><p data-lake-id=\"6a9196d836df02f340b16970997f6be7\" id=\"6a9196d836df02f340b16970997f6be7\"><br></p><p data-lake-id=\"b638ee8b98b3d2e93f0be03d037c5dfa\" id=\"b638ee8b98b3d2e93f0be03d037c5dfa\"><span data-lake-id=\"u15a55236\" id=\"u15a55236\">因为非受控组件将真实数据储存在 DOM 节点中，所以在使用非受控组件时，有时候反而更容易同时集成 React 和非 React 代码。如果你不介意代码美观性，并且希望快速编写代码，使用非受控组件往往可以减少你的代码量。否则，你应该使用受控组件。</span></p></blockquote><p data-lake-id=\"e962410d3500ae93a4d59d1641eab369\" id=\"e962410d3500ae93a4d59d1641eab369\"><br></p><p data-lake-id=\"b9165787951d6da7eeb3fd20fa1358ea\" id=\"b9165787951d6da7eeb3fd20fa1358ea\"><span data-lake-id=\"u6d09ad76\" id=\"u6d09ad76\">例如，下面的代码在非受控组件中接收单个属性：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20NameForm%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.handleSubmit%20%3D%20this.handleSubmit.bind(this)%3B%5Cn%20%20%7D%5Cn%20%20handleSubmit(event)%20%7B%5Cn%20%20%20%20alert('A%20name%20was%20submitted%3A%20'%20%2B%20this.input.value)%3B%5Cn%20%20%20%20event.preventDefault()%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cform%20onSubmit%3D%7Bthis.handleSubmit%7D%3E%5Cn%20%20%20%20%20%20%20%20%3Clabel%3E%5Cn%20%20%20%20%20%20%20%20%20%20Name%3A%5Cn%20%20%20%20%20%20%20%20%20%20%3Cinput%20type%3D%5C%22text%5C%22%20ref%3D%7B(input)%20%3D%3E%20this.input%20%3D%20input%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Flabel%3E%5Cn%20%20%20%20%20%20%20%20%3Cinput%20type%3D%5C%22submit%5C%22%20value%3D%5C%22Submit%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3C%2Fform%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22eNVDM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"9b13c3f554942531ed54a33bddd98fbc\" id=\"9b13c3f554942531ed54a33bddd98fbc\"><strong><span data-lake-id=\"u42d8706e\" id=\"u42d8706e\">总结：</span></strong><span data-lake-id=\"u8ede7afa\" id=\"u8ede7afa\">页面中所有输入类的DOM如果是现用现取的称为非受控组件，而通过setState将输入的值维护到了state中，需要时再从state中取出，这里的数据就受到了state的控制，称为受控组件。</span></p><h3 data-lake-id=\"d5fce19e1a7064474462d242e9eb4ab1\" id=\"d5fce19e1a7064474462d242e9eb4ab1\"><span data-lake-id=\"u9a706181\" id=\"u9a706181\">24. R</span><span data-lake-id=\"uef14b4a3\" id=\"uef14b4a3\">eact中refs的作用是什么？有哪些应用场景？</span></h3><p data-lake-id=\"ad3bcc6ef9d80ffbf46eab379c31512d\" id=\"ad3bcc6ef9d80ffbf46eab379c31512d\"><span data-lake-id=\"u8c4a1c62\" id=\"u8c4a1c62\">Refs 提供了一种方式，用于访问在 render 方法中创建的 React 元素或 DOM 节点。Refs 应该谨慎使用，如下场景使用 Refs 比较适合：</span></p><ul list=\"ue19a34fa\"><li fid=\"u31cd72da\" data-lake-id=\"0a9969fc68e183144587a29fbbd6ee39\" id=\"0a9969fc68e183144587a29fbbd6ee39\"><span data-lake-id=\"ua8794c36\" id=\"ua8794c36\">处理焦点、文本选择或者媒体的控制</span></li><li fid=\"u31cd72da\" data-lake-id=\"768043f38441a9040ff6728288c6505c\" id=\"768043f38441a9040ff6728288c6505c\"><span data-lake-id=\"u0e4964bf\" id=\"u0e4964bf\">触发必要的动画</span></li><li fid=\"u31cd72da\" data-lake-id=\"366aab749041534ef5fe9b2ecdcc6f0e\" id=\"366aab749041534ef5fe9b2ecdcc6f0e\"><span data-lake-id=\"u4a34886d\" id=\"u4a34886d\">集成第三方 DOM 库</span></li></ul><p data-lake-id=\"f63d894392b93bebe074906f615ad12d\" id=\"f63d894392b93bebe074906f615ad12d\"><br></p><p data-lake-id=\"a9262b6d811acd6e72ac38484b0e80c8\" id=\"a9262b6d811acd6e72ac38484b0e80c8\"><span data-lake-id=\"uc0290aea\" id=\"uc0290aea\">Refs 是使用 </span><code data-lake-id=\"u4af3e78a\" id=\"u4af3e78a\"><span data-lake-id=\"ub76ded19\" id=\"ub76ded19\">React.createRef()</span></code><span data-lake-id=\"u576ca332\" id=\"u576ca332\"> 方法创建的，他通过 </span><code data-lake-id=\"ub5cc4d74\" id=\"ub5cc4d74\"><span data-lake-id=\"ue89447f1\" id=\"ue89447f1\">ref</span></code><span data-lake-id=\"u2f053ed5\" id=\"u2f053ed5\"> 属性附加到 React 元素上。要在整个组件中使用 Refs，需要将 </span><code data-lake-id=\"ub5957694\" id=\"ub5957694\"><span data-lake-id=\"ud8ada208\" id=\"ud8ada208\">ref</span></code><span data-lake-id=\"u24f165a3\" id=\"u24f165a3\"> 在构造函数中分配给其实例属性：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20MyComponent%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%5Cn%20%20%20%20this.myRef%20%3D%20React.createRef()%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20%3Cdiv%20ref%3D%7Bthis.myRef%7D%20%2F%3E%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22KaRnh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"04268d2ad775fe56a80890667ee17410\" id=\"04268d2ad775fe56a80890667ee17410\"><span data-lake-id=\"u3b64c5f4\" id=\"u3b64c5f4\">由于函数组件没有实例，因此不能在函数组件上直接使用 </span><code data-lake-id=\"u8eb669e7\" id=\"u8eb669e7\"><span data-lake-id=\"u7bc40127\" id=\"u7bc40127\">ref</span></code><span data-lake-id=\"ubb38c33c\" id=\"ubb38c33c\">：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20MyFunctionalComponent()%20%7B%5Cn%20%20return%20%3Cinput%20%2F%3E%3B%5Cn%7D%5Cnclass%20Parent%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.textInput%20%3D%20React.createRef()%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20%2F%2F%20%E8%BF%99%E5%B0%86%E4%B8%8D%E4%BC%9A%E5%B7%A5%E4%BD%9C%EF%BC%81%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3CMyFunctionalComponent%20ref%3D%7Bthis.textInput%7D%20%2F%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Nn3F4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"811b60734865194f460dc75bfd58dfcf\" id=\"811b60734865194f460dc75bfd58dfcf\"><span data-lake-id=\"u2c6330ca\" id=\"u2c6330ca\">但可以通过闭合的帮助在函数组件内部进行使用 Refs：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20CustomTextInput(props)%20%7B%5Cn%20%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%BF%85%E9%A1%BB%E5%A3%B0%E6%98%8E%20textInput%EF%BC%8C%E8%BF%99%E6%A0%B7%20ref%20%E5%9B%9E%E8%B0%83%E6%89%8D%E5%8F%AF%E4%BB%A5%E5%BC%95%E7%94%A8%E5%AE%83%5Cn%20%20let%20textInput%20%3D%20null%3B%5Cn%20%20function%20handleClick()%20%7B%5Cn%20%20%20%20textInput.focus()%3B%5Cn%20%20%7D%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3Cinput%5Cn%20%20%20%20%20%20%20%20type%3D%5C%22text%5C%22%5Cn%20%20%20%20%20%20%20%20ref%3D%7B(input)%20%3D%3E%20%7B%20textInput%20%3D%20input%3B%20%7D%7D%20%2F%3E%5Cn%20%20%20%20%20%20%3Cinput%5Cn%20%20%20%20%20%20%20%20type%3D%5C%22button%5C%22%5Cn%20%20%20%20%20%20%20%20value%3D%5C%22Focus%20the%20text%20input%5C%22%5Cn%20%20%20%20%20%20%20%20onClick%3D%7BhandleClick%7D%5Cn%20%20%20%20%20%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%20%20%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22E5BrY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"29418a78abe5eeb34ca1649ec2e12f84\" id=\"29418a78abe5eeb34ca1649ec2e12f84\"><strong><span data-lake-id=\"u3558c9d7\" id=\"u3558c9d7\">注意：</span></strong></p><ul list=\"uc43967f9\"><li fid=\"u6a547776\" data-lake-id=\"6a75ef042aa47c1e2bbcc8b4b47609a8\" id=\"6a75ef042aa47c1e2bbcc8b4b47609a8\"><span data-lake-id=\"uced6091c\" id=\"uced6091c\">不应该过度的使用 Refs</span></li><li fid=\"u6a547776\" data-lake-id=\"619559364ce20d735810cb253468b254\" id=\"619559364ce20d735810cb253468b254\"><code data-lake-id=\"u9b93a143\" id=\"u9b93a143\"><span data-lake-id=\"u87cce2c3\" id=\"u87cce2c3\">ref</span></code><span data-lake-id=\"u4a6d8dc3\" id=\"u4a6d8dc3\"> 的返回值取决于节点的类型：    </span></li></ul><ul list=\"u40e29a19\" data-lake-indent=\"1\"><li fid=\"u64db0eb4\" data-lake-id=\"bec1b991357e3eb9501014321d9fe05d\" id=\"bec1b991357e3eb9501014321d9fe05d\"><span data-lake-id=\"u08504de4\" id=\"u08504de4\">当 </span><code data-lake-id=\"ud625d5c1\" id=\"ud625d5c1\"><span data-lake-id=\"ufac9e145\" id=\"ufac9e145\">ref</span></code><span data-lake-id=\"udb41e291\" id=\"udb41e291\"> 属性被用于一个普通的 HTML 元素时，</span><code data-lake-id=\"uade0415a\" id=\"uade0415a\"><span data-lake-id=\"ud4e0c8af\" id=\"ud4e0c8af\">React.createRef()</span></code><span data-lake-id=\"u0e6d00f0\" id=\"u0e6d00f0\"> 将接收底层 DOM 元素作为他的 </span><code data-lake-id=\"u339cc088\" id=\"u339cc088\"><span data-lake-id=\"u1a1b1c2a\" id=\"u1a1b1c2a\">current</span></code><span data-lake-id=\"uf61f421c\" id=\"uf61f421c\"> 属性以创建 </span><code data-lake-id=\"uc6faa68e\" id=\"uc6faa68e\"><span data-lake-id=\"u2acc5f93\" id=\"u2acc5f93\">ref</span></code><span data-lake-id=\"ub5665b12\" id=\"ub5665b12\">。</span></li><li fid=\"u64db0eb4\" data-lake-id=\"13b46e543741f4849e7586df261f0634\" id=\"13b46e543741f4849e7586df261f0634\"><span data-lake-id=\"ucb4bdb0a\" id=\"ucb4bdb0a\">当 </span><code data-lake-id=\"u5b638517\" id=\"u5b638517\"><span data-lake-id=\"ub40c9f9e\" id=\"ub40c9f9e\">ref</span></code><span data-lake-id=\"u10280d66\" id=\"u10280d66\"> 属性被用于一个自定义的类组件时，</span><code data-lake-id=\"u72ed61ed\" id=\"u72ed61ed\"><span data-lake-id=\"u557af5f5\" id=\"u557af5f5\">ref</span></code><span data-lake-id=\"u97704002\" id=\"u97704002\"> 对象将接收该组件已挂载的实例作为他的 </span><code data-lake-id=\"u31f0f025\" id=\"u31f0f025\"><span data-lake-id=\"u00f5db76\" id=\"u00f5db76\">current</span></code><span data-lake-id=\"u20e09892\" id=\"u20e09892\">。</span></li></ul><ul list=\"u34de236f\"><li fid=\"u71ea91e4\" data-lake-id=\"0dcfd777306bba77c05b4a7a16d200da\" id=\"0dcfd777306bba77c05b4a7a16d200da\"><span data-lake-id=\"u3b8e623f\" id=\"u3b8e623f\">当在父组件中需要访问子组件中的 </span><code data-lake-id=\"ua187713a\" id=\"ua187713a\"><span data-lake-id=\"u2c117aae\" id=\"u2c117aae\">ref</span></code><span data-lake-id=\"uce05e26f\" id=\"uce05e26f\"> 时可使用传递 Refs 或回调 Refs。</span></li></ul><h3 data-lake-id=\"b18741e49f9404df730f211b0da57a20\" id=\"b18741e49f9404df730f211b0da57a20\"><span data-lake-id=\"u7948bea5\" id=\"u7948bea5\">25. </span><span data-lake-id=\"u34c78781\" id=\"u34c78781\">React中除了在构造函数中绑定this，还有别的方式吗？</span></h3><ul list=\"ucc594de7\"><li fid=\"ub95c8a31\" data-lake-id=\"082287ee012a0cba164a59ba6c09d168\" id=\"082287ee012a0cba164a59ba6c09d168\"><span data-lake-id=\"u31e6ed68\" id=\"u31e6ed68\">在构造函数中绑定this</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22constructor(props)%7B%5Cn%20%20%20%20%20%20super(props)%3B%20%5Cn%20%20%20%20%20%20%20this.state%3D%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20msg%3A'hello%20world'%2C%5Cn%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20this.getMsg%20%3D%20this.getMsg.bind(this)%5Cn%20%20%20%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OpHgi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u881e3421\"><li fid=\"ue859ae9c\" data-lake-id=\"e1271ce7ef7bbcbee2f1141841a6c4fe\" id=\"e1271ce7ef7bbcbee2f1141841a6c4fe\"><span data-lake-id=\"u89a10197\" id=\"u89a10197\" class=\"lake-fontsize-12\">函数定义的时候使用箭头函数</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22constructor(props)%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.state%3D%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20msg%3A'hello%20world'%2C%5Cn%20%20%20%20%7D%5Cn%20%20%20%20render()%7B%5Cn%20%20%20%20%20%20%3Cbutton%20onClcik%3D%7B()%3D%3E%7Balert(this.state.msg)%7D%7D%3E%E7%82%B9%E6%88%91%3C%2Fbutton%3E%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22b5d2u%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u87a6b819\"><li fid=\"u5cbc970b\" data-lake-id=\"e1dae5acc1477f047d2998ca0d7d3867\" id=\"e1dae5acc1477f047d2998ca0d7d3867\"><span data-lake-id=\"u6ac58d5b\" id=\"u6ac58d5b\" class=\"lake-fontsize-12\">函数调用是使用bind绑定this</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20%3Cbutton%20onClick%3D%7Bthis.getMsg.bind(this)%7D%3E%E7%82%B9%E6%88%91%3C%2Fbutton%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ZaN1s%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"d0f9ce0b0423a92ca440e96a2a943573\" id=\"d0f9ce0b0423a92ca440e96a2a943573\"><span data-lake-id=\"uf01e29e6\" id=\"uf01e29e6\">26. </span><span data-lake-id=\"u7390414b\" id=\"u7390414b\">React组件的构造函数有什么作用？它</span><span data-lake-id=\"u676a2c89\" id=\"u676a2c89\">是必须的吗？</span></h3><p data-lake-id=\"9fbd0351ff4835e6beb7feb3c080c3f2\" id=\"9fbd0351ff4835e6beb7feb3c080c3f2\"><span data-lake-id=\"u749d531a\" id=\"u749d531a\" class=\"lake-fontsize-12\">构造函数主要用于两个目的：</span></p><ul list=\"u604bf478\"><li fid=\"u71b03666\" data-lake-id=\"3c36b906155306f4ff2985da4b8d9797\" id=\"3c36b906155306f4ff2985da4b8d9797\"><span data-lake-id=\"u968eafdc\" id=\"u968eafdc\" class=\"lake-fontsize-12\">通过将对象分配给this.state来初始化本地状态 </span></li><li fid=\"u71b03666\" data-lake-id=\"c19c15319d80d27419f6561ddf2f0653\" id=\"c19c15319d80d27419f6561ddf2f0653\"><span data-lake-id=\"u53dbadc8\" id=\"u53dbadc8\" class=\"lake-fontsize-12\">将事件处理程序方法绑定到实例上</span></li></ul><p data-lake-id=\"6e7fe6c2851a72f00dea3d8cef05ff2e\" id=\"6e7fe6c2851a72f00dea3d8cef05ff2e\"><br></p><p data-lake-id=\"1f4366a83afa39c2bb7be85053ae7cae\" id=\"1f4366a83afa39c2bb7be85053ae7cae\"><span data-lake-id=\"u293caf62\" id=\"u293caf62\">所以，当在React class中需要设置state的初始值或者绑定事件时，需要加上构造函数，官方Demo：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20LikeButton%20extends%20React.Component%20%7B%5Cn%20%20constructor()%20%7B%5Cn%20%20%20%20super()%3B%5Cn%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20liked%3A%20false%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20this.handleClick%20%3D%20this.handleClick.bind(this)%3B%5Cn%20%20%7D%5Cn%20%20handleClick()%20%7B%5Cn%20%20%20%20this.setState(%7Bliked%3A%20!this.state.liked%7D)%3B%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20const%20text%20%3D%20this.state.liked%20%3F%20'liked'%20%3A%20'haven%5C%5C't%20liked'%3B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20onClick%3D%7Bthis.handleClick%7D%3E%5Cn%20%20%20%20%20%20%20%20You%20%7Btext%7D%20this.%20Click%20to%20toggle.%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5CnReactDOM.render(%5Cn%20%20%3CLikeButton%20%2F%3E%2C%5Cn%20%20document.getElementById('example')%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%225sFRO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f2c48dd7469d533c0bb2e8759a517efd\" id=\"f2c48dd7469d533c0bb2e8759a517efd\"><span data-lake-id=\"ua831044f\" id=\"ua831044f\">构造函数用来新建父类的this对象；子类必须在constructor方法中调用super方法；否则新建实例时会报错；因为子类没有自己的this对象，而是继承父类的this对象，然后对其进行加工。如果不调用super方法；子类就得不到this对象。</span></p><p data-lake-id=\"b7fc2ddc37c6e2d98244c4efacb3f638\" id=\"b7fc2ddc37c6e2d98244c4efacb3f638\"><br></p><p data-lake-id=\"a27b52166145ec70e0d55043168528da\" id=\"a27b52166145ec70e0d55043168528da\"><strong><span data-lake-id=\"ue486dc48\" id=\"ue486dc48\">注意：</span></strong></p><ul list=\"uef6db029\"><li fid=\"u5365bc71\" data-lake-id=\"3f4c31aa03d7f4be45c093585443aecc\" id=\"3f4c31aa03d7f4be45c093585443aecc\"><span data-lake-id=\"u09e3f4eb\" id=\"u09e3f4eb\" class=\"lake-fontsize-12\">constructor () 必须配上 super(), 如果要在constructor 内部使用 this.props 就要 传入props , 否则不用</span></li><li fid=\"u5365bc71\" data-lake-id=\"aa4ef965bfd661cc9931ca623c1330da\" id=\"aa4ef965bfd661cc9931ca623c1330da\"><span data-lake-id=\"ufd43202f\" id=\"ufd43202f\" class=\"lake-fontsize-12\">JavaScript中的 bind 每次都会返回一个新的函数, 为了性能等考虑, 尽量在constructor中绑定事件</span></li></ul><h3 data-lake-id=\"6914ee7af8d6c5357018045f145285b7\" id=\"6914ee7af8d6c5357018045f145285b7\"><span data-lake-id=\"ucc49b2d5\" id=\"ucc49b2d5\">27. </span><span data-lake-id=\"uc220a13a\" id=\"uc220a13a\">React.forwardRef是</span><span data-lake-id=\"u90954268\" id=\"u90954268\">什么</span><span data-lake-id=\"u7c4b597e\" id=\"u7c4b597e\">？它有什么作用？</span></h3><p data-lake-id=\"244f2318d7f7f21f52c69e2c6c182b65\" id=\"244f2318d7f7f21f52c69e2c6c182b65\"><span data-lake-id=\"u28590e91\" id=\"u28590e91\">React.forwardRef 会创建一个React组件，这个组件能够将其接受的 ref 属性转发到其组件树下的另一个组件中。这种技术并不常见，但在以下两种场景中特别有用：</span></p><ul list=\"uf49e01a3\"><li fid=\"u6fa6d28f\" data-lake-id=\"aff84ca060a8b2e08d9948a46f630d36\" id=\"aff84ca060a8b2e08d9948a46f630d36\"><span data-lake-id=\"u7ecda560\" id=\"u7ecda560\">转发 refs 到 DOM 组件</span></li><li fid=\"u6fa6d28f\" data-lake-id=\"eb81c7826a7aa28f174ade0ff15af357\" id=\"eb81c7826a7aa28f174ade0ff15af357\"><span data-lake-id=\"u38829370\" id=\"u38829370\">在高阶组件中转发 refs</span></li></ul><h3 data-lake-id=\"aba725aa4adad32ea7793ed66887d3d2\" id=\"aba725aa4adad32ea7793ed66887d3d2\"><span data-lake-id=\"u9059d9a5\" id=\"u9059d9a5\">28. 类组件与函数组件有什么异同？</span></h3><p data-lake-id=\"4317c0181d6f1e732ff332133849e610\" id=\"4317c0181d6f1e732ff332133849e610\"><strong><span data-lake-id=\"u065c028c\" id=\"u065c028c\">相同点：</span></strong></p><p data-lake-id=\"cb3e87a5956ed687601e4b23f17b82f2\" id=\"cb3e87a5956ed687601e4b23f17b82f2\"><span data-lake-id=\"u9930dd8e\" id=\"u9930dd8e\">组件是 React 可复用的最小代码片段，它们会返回要在页面中渲染的 React 元素。也正因为组件是 React 的最小编码单位，所以无论是函数组件还是类组件，在使用方式和最终呈现效果上都是完全一致的。</span></p><p data-lake-id=\"f1df4fb8ba9b2cda6eacdd24cc3a5b36\" id=\"f1df4fb8ba9b2cda6eacdd24cc3a5b36\"><br></p><p data-lake-id=\"240ed982618a952e9e8febd404b1ddf9\" id=\"240ed982618a952e9e8febd404b1ddf9\"><span data-lake-id=\"u15dde145\" id=\"u15dde145\">我们甚至可以将一个类组件改写成函数组件，或者把函数组件改写成一个类组件（虽然并不推荐这种重构行为）。从使用者的角度而言，很难从使用体验上区分两者，而且在现代浏览器中，闭包和类的性能只在极端场景下才会有明显的差别。所以，基本可认为两者作为组件是完全一致的。</span></p><p data-lake-id=\"ffad9131901a1f2e3b8510b2c58fe8b9\" id=\"ffad9131901a1f2e3b8510b2c58fe8b9\"><br></p><p data-lake-id=\"75df852435c0fce3376f1ca351f6e456\" id=\"75df852435c0fce3376f1ca351f6e456\"><strong><span data-lake-id=\"ufdf713b7\" id=\"ufdf713b7\">不同点：</span></strong></p><ul list=\"u8b18d772\"><li fid=\"u38b4f231\" data-lake-id=\"0a71d313920ecc6ff9cd767e9db468f1\" id=\"0a71d313920ecc6ff9cd767e9db468f1\"><span data-lake-id=\"uc5f21a05\" id=\"uc5f21a05\">它们在开发时的心智模型上却存在巨大的差异。类组件是基于面向对象编程的，它主打的是继承、生命周期等核心概念；而函数组件内核是函数式编程，主打的是 immutable、没有副作用、引用透明等特点。</span></li><li fid=\"u38b4f231\" data-lake-id=\"cb0c6817fe98caf99de3798ab5841966\" id=\"cb0c6817fe98caf99de3798ab5841966\"><span data-lake-id=\"u953f1f82\" id=\"u953f1f82\">之前，在使用场景上，如果存在需要使用生命周期的组件，那么主推类组件；设计模式上，如果需要使用继承，那么主推类组件。但现在由于 React Hooks 的推出，生命周期概念的淡出，函数组件可以完全取代类组件。其次继承并不是组件最佳的设计模式，官方更推崇“组合优于继承”的设计概念，所以类组件在这方面的优势也在淡出。</span></li><li fid=\"u38b4f231\" data-lake-id=\"6244644c4823fc7e65657dc2985adfef\" id=\"6244644c4823fc7e65657dc2985adfef\"><span data-lake-id=\"u143feaa2\" id=\"u143feaa2\">性能优化上，类组件主要依靠 shouldComponentUpdate 阻断渲染来提升性能，而函数组件依靠 React.memo 缓存渲染结果来提升性能。</span></li><li fid=\"u38b4f231\" data-lake-id=\"12a58b92c56ffe7e20cee76b50b5d18e\" id=\"12a58b92c56ffe7e20cee76b50b5d18e\"><span data-lake-id=\"u1e4667c9\" id=\"u1e4667c9\">从上手程度而言，类组件更容易上手，从未来趋势上看，由于React Hooks 的推出，函数组件成了社区未来主推的方案。</span></li><li fid=\"u38b4f231\" data-lake-id=\"785c4a37db9d5762769528a93df5a0e2\" id=\"785c4a37db9d5762769528a93df5a0e2\"><span data-lake-id=\"uc8777439\" id=\"uc8777439\">类组件在未来时间切片与并发模式中，由于生命周期带来的复杂度，并不易于优化。而函数组件本身轻量简单，且在 Hooks 的基础上提供了比原先更细粒度的逻辑组织与复用，更能适应 React 的未来发展。</span></li></ul><p data-lake-id=\"ucdaeae28\" id=\"ucdaeae28\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673894869537-8ece0d75-d830-4296-9ffa-dfe4fd9216a1.png%22%2C%22taskId%22%3A%22uc7bebae5-6385-4e46-baf6-c0cf8e3d1a3%22%2C%22clientId%22%3A%22u43a0eb18-2ac0-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u6dec1731%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"2ee8aef565aaae9e421ebc40d85b31ee\" id=\"2ee8aef565aaae9e421ebc40d85b31ee\"><span data-lake-id=\"u53183dc7\" id=\"u53183dc7\">二、数据管理</span></h2><h3 data-lake-id=\"c68d1d8aca4c48525a0abd3b03159f70\" id=\"c68d1d8aca4c48525a0abd3b03159f70\"><span data-lake-id=\"u99f52286\" id=\"u99f52286\">1. </span><span data-lake-id=\"u2591e16e\" id=\"u2591e16e\">React setState </span><span data-lake-id=\"u0fab4103\" id=\"u0fab4103\">调用的原理</span></h3><p data-lake-id=\"39196b455cdad823bdb5941cb153c158\" id=\"39196b455cdad823bdb5941cb153c158\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1611908814278-be06f25f-ee6f-44d5-93f1-c0a24eecd456.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A790%2C%22height%22%3A624%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A44035%2C%22originWidth%22%3A790%2C%22originHeight%22%3A624%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22setState%20engueueSetState%20engueueUpdate%20false%20isBatchingUpdates%20true%20%E5%BE%AA%E7%8E%AF%E6%9B%B4%E6%96%B0%20%E7%BB%84%E4%BB%B6%E5%85%A5%E9%98%9F%20dirtyComponents%20dirtyComponents%20%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%BB%84%E4%BB%B6%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A345.819%2C%22y%22%3A50.66005%2C%22width%22%3A81.3829%2C%22height%22%3A15.777280000000005%2C%22text%22%3A%22setState%22%7D%2C%7B%22x%22%3A308.13126%2C%22y%22%3A148.01697%2C%22width%22%3A164.94628999999998%2C%22height%22%3A16.989000000000004%2C%22text%22%3A%22engueueSetState%22%7D%2C%7B%22x%22%3A314.39612%2C%22y%22%3A245.30904%2C%22width%22%3A151.54394000000002%2C%22height%22%3A18.567879999999974%2C%22text%22%3A%22engueueUpdate%22%7D%2C%7B%22x%22%3A629.1928%2C%22y%22%3A364.5444%2C%22width%22%3A42.359449999999924%2C%22height%22%3A17.76031999999998%2C%22text%22%3A%22false%22%7D%2C%7B%22x%22%3A298.6907%2C%22y%22%3A366.02658%2C%22width%22%3A183.55466%2C%22height%22%3A19.704349999999977%2C%22text%22%3A%22isBatchingUpdates%22%7D%2C%7B%22x%22%3A113.28375%2C%22y%22%3A368.05383%2C%22width%22%3A35.810850000000016%2C%22height%22%3A13.892830000000004%2C%22text%22%3A%22true%22%7D%2C%7B%22x%22%3A613.7104%2C%22y%22%3A511.73764%2C%22width%22%3A81.77049999999997%2C%22height%22%3A20.886959999999988%2C%22text%22%3A%22%E5%BE%AA%E7%8E%AF%E6%9B%B4%E6%96%B0%22%7D%2C%7B%22x%22%3A89.7253%2C%22y%22%3A526.63556%2C%22width%22%3A81.31279%2C%22height%22%3A19.686939999999936%2C%22text%22%3A%22%E7%BB%84%E4%BB%B6%E5%85%A5%E9%98%9F%22%7D%2C%7B%22x%22%3A572.26306%2C%22y%22%3A539.9049%2C%22width%22%3A165.69934%2C%22height%22%3A17.550500000000056%2C%22text%22%3A%22dirtyComponents%22%7D%2C%7B%22x%22%3A48.690624%2C%22y%22%3A553.0264%2C%22width%22%3A165.124636%2C%22height%22%3A18.362150000000042%2C%22text%22%3A%22dirtyComponents%22%7D%2C%7B%22x%22%3A594.92255%2C%22y%22%3A561.84375%2C%22width%22%3A121.05124999999998%2C%22height%22%3A20.05200000000002%2C%22text%22%3A%22%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%BB%84%E4%BB%B6%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23130d0d%22%2C%22id%22%3A%22zcZh4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"21d01a36770f061ad0813c528e720ee4\" id=\"21d01a36770f061ad0813c528e720ee4\"><span data-lake-id=\"ubc0e9260\" id=\"ubc0e9260\">具体的执行过程如下（源码级解析）：</span></p><ul list=\"ub382d628\"><li fid=\"uf36c0319\" data-lake-id=\"89575638836e199a6849c389a2ab3ffc\" id=\"89575638836e199a6849c389a2ab3ffc\"><span data-lake-id=\"u3b64ee66\" id=\"u3b64ee66\">首先调用了</span><code data-lake-id=\"u4cd2de5a\" id=\"u4cd2de5a\"><span data-lake-id=\"u28e52a53\" id=\"u28e52a53\">setState</span></code><span data-lake-id=\"u05ea2bf7\" id=\"u05ea2bf7\"> 入口函数，</span><span data-lake-id=\"u96b37121\" id=\"u96b37121\">入口函数在这里就是充当一个分发器的角色，根据入参的不同，将其分发到不同的功能函数中去；</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22ReactComponent.prototype.setState%20%3D%20function%20(partialState%2C%20callback)%20%7B%5Cn%20%20this.updater.enqueueSetState(this%2C%20partialState)%3B%5Cn%20%20if%20(callback)%20%7B%5Cn%20%20%20%20this.updater.enqueueCallback(this%2C%20callback%2C%20'setState')%3B%5Cn%20%20%7D%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22QY9qS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u7d6d0dc6\"><li fid=\"u588a9b96\" data-lake-id=\"d5b33b10c0cf36fe484f42757d27f244\" id=\"d5b33b10c0cf36fe484f42757d27f244\"><code data-lake-id=\"u89a96ad7\" id=\"u89a96ad7\"><span data-lake-id=\"udbcfcb99\" id=\"udbcfcb99\">enqueueSetState</span></code><span data-lake-id=\"uc520a523\" id=\"uc520a523\"> 方法将新的 </span><code data-lake-id=\"u6584192b\" id=\"u6584192b\"><span data-lake-id=\"u6e824cbc\" id=\"u6e824cbc\">state</span></code><span data-lake-id=\"u8a67185d\" id=\"u8a67185d\"> 放进组件的状态队列里，并调用 </span><code data-lake-id=\"u567ad58f\" id=\"u567ad58f\"><span data-lake-id=\"u742fe94f\" id=\"u742fe94f\">enqueueUpdate</span></code><span data-lake-id=\"ucb29ad75\" id=\"ucb29ad75\"> 来处理将要更新的实例对象；</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22enqueueSetState%3A%20function%20(publicInstance%2C%20partialState)%20%7B%5Cn%20%20%2F%2F%20%E6%A0%B9%E6%8D%AE%20this%20%E6%8B%BF%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%5Cn%20%20var%20internalInstance%20%3D%20getInternalInstanceReadyForUpdate(publicInstance%2C%20'setState')%3B%5Cn%20%20%2F%2F%20%E8%BF%99%E4%B8%AA%20queue%20%E5%AF%B9%E5%BA%94%E7%9A%84%E5%B0%B1%E6%98%AF%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%E7%9A%84%20state%20%E6%95%B0%E7%BB%84%5Cn%20%20var%20queue%20%3D%20internalInstance._pendingStateQueue%20%7C%7C%20(internalInstance._pendingStateQueue%20%3D%20%5B%5D)%3B%5Cn%20%20queue.push(partialState)%3B%5Cn%20%20%2F%2F%20%20enqueueUpdate%20%E7%94%A8%E6%9D%A5%E5%A4%84%E7%90%86%E5%BD%93%E5%89%8D%E7%9A%84%E7%BB%84%E4%BB%B6%E5%AE%9E%E4%BE%8B%5Cn%20%20enqueueUpdate(internalInstance)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jwWKx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u748a2ddd\"><li fid=\"u41bb6795\" data-lake-id=\"52ab0d0990fb9bed60ec88cab42924f2\" id=\"52ab0d0990fb9bed60ec88cab42924f2\"><span data-lake-id=\"u9bfd09f4\" id=\"u9bfd09f4\"> 在 </span><code data-lake-id=\"uaba81dec\" id=\"uaba81dec\"><span data-lake-id=\"u0bb7ddb0\" id=\"u0bb7ddb0\">enqueueUpdate</span></code><span data-lake-id=\"u2c385ba4\" id=\"u2c385ba4\"> 方法中引出了一个关键的对象——</span><code data-lake-id=\"ue298f6c7\" id=\"ue298f6c7\"><span data-lake-id=\"u4de0215e\" id=\"u4de0215e\">batchingStrategy</span></code><span data-lake-id=\"u3bdbc231\" id=\"u3bdbc231\">，该对象所具备的</span><code data-lake-id=\"u8203d2b5\" id=\"u8203d2b5\"><span data-lake-id=\"u3e667268\" id=\"u3e667268\">isBatchingUpdates</span></code><span data-lake-id=\"u61e7cb58\" id=\"u61e7cb58\"> 属性直接决定了当下是要走更新流程，还是应该排队等待；如果轮到执行，就调用 </span><code data-lake-id=\"ubf20bfe2\" id=\"ubf20bfe2\"><span data-lake-id=\"u04ec151b\" id=\"u04ec151b\">batchedUpdates</span></code><span data-lake-id=\"uc6048996\" id=\"uc6048996\"> 方法来直接发起更新流程。由此可以推测，</span><code data-lake-id=\"ubcfc7971\" id=\"ubcfc7971\"><span data-lake-id=\"ubf7f2ede\" id=\"ubf7f2ede\">batchingStrategy</span></code><span data-lake-id=\"u09d44375\" id=\"u09d44375\"> 或许正是 React 内部专门用于管控批量更新的对象。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20enqueueUpdate(component)%20%7B%5Cn%20%20ensureInjected()%3B%5Cn%20%20%2F%2F%20%E6%B3%A8%E6%84%8F%E8%BF%99%E4%B8%80%E5%8F%A5%E6%98%AF%E9%97%AE%E9%A2%98%E7%9A%84%E5%85%B3%E9%94%AE%EF%BC%8CisBatchingUpdates%E6%A0%87%E8%AF%86%E7%9D%80%E5%BD%93%E5%89%8D%E6%98%AF%E5%90%A6%E5%A4%84%E4%BA%8E%E6%89%B9%E9%87%8F%E5%88%9B%E5%BB%BA%2F%E6%9B%B4%E6%96%B0%E7%BB%84%E4%BB%B6%E7%9A%84%E9%98%B6%E6%AE%B5%5Cn%20%20if%20(!batchingStrategy.isBatchingUpdates)%20%7B%5Cn%20%20%20%20%2F%2F%20%E8%8B%A5%E5%BD%93%E5%89%8D%E6%B2%A1%E6%9C%89%E5%A4%84%E4%BA%8E%E6%89%B9%E9%87%8F%E5%88%9B%E5%BB%BA%2F%E6%9B%B4%E6%96%B0%E7%BB%84%E4%BB%B6%E7%9A%84%E9%98%B6%E6%AE%B5%EF%BC%8C%E5%88%99%E7%AB%8B%E5%8D%B3%E6%9B%B4%E6%96%B0%E7%BB%84%E4%BB%B6%5Cn%20%20%20%20batchingStrategy.batchedUpdates(enqueueUpdate%2C%20component)%3B%5Cn%20%20%20%20return%3B%5Cn%20%20%7D%5Cn%20%20%2F%2F%20%E5%90%A6%E5%88%99%EF%BC%8C%E5%85%88%E6%8A%8A%E7%BB%84%E4%BB%B6%E5%A1%9E%E5%85%A5%20dirtyComponents%20%E9%98%9F%E5%88%97%E9%87%8C%EF%BC%8C%E8%AE%A9%E5%AE%83%E2%80%9C%E5%86%8D%E7%AD%89%E7%AD%89%E2%80%9D%5Cn%20%20dirtyComponents.push(component)%3B%5Cn%20%20if%20(component._updateBatchNumber%20%3D%3D%20null)%20%7B%5Cn%20%20%20%20component._updateBatchNumber%20%3D%20updateBatchNumber%20%2B%201%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22weSEt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"6392f17ca0535f1271508557b59d5a22\" id=\"6392f17ca0535f1271508557b59d5a22\"><strong><span data-lake-id=\"ua485be18\" id=\"ua485be18\">注意：</span></strong><code data-lake-id=\"u2da4be63\" id=\"u2da4be63\"><span data-lake-id=\"ue75f3668\" id=\"ue75f3668\">batchingStrategy</span></code><span data-lake-id=\"u98cf9fa4\" id=\"u98cf9fa4\"> 对象可以理解为“锁管理器”。这里的“锁”，是指 React 全局唯一的 </span><code data-lake-id=\"u8e2d8f2c\" id=\"u8e2d8f2c\"><span data-lake-id=\"ud79c530b\" id=\"ud79c530b\">isBatchingUpdates</span></code><span data-lake-id=\"u9d7d65f1\" id=\"u9d7d65f1\"> 变量，</span><code data-lake-id=\"u360f3590\" id=\"u360f3590\"><span data-lake-id=\"ub5cb2f90\" id=\"ub5cb2f90\">isBatchingUpdates</span></code><span data-lake-id=\"uc1594eb6\" id=\"uc1594eb6\"> 的初始值是 </span><code data-lake-id=\"ua9fae25b\" id=\"ua9fae25b\"><span data-lake-id=\"u077284e6\" id=\"u077284e6\">false</span></code><span data-lake-id=\"u3dcba311\" id=\"u3dcba311\">，意味着“当前并未进行任何批量更新操作”。每当 React 调用 </span><code data-lake-id=\"u46fd1f13\" id=\"u46fd1f13\"><span data-lake-id=\"u4cfeaafa\" id=\"u4cfeaafa\">batchedUpdate</span></code><span data-lake-id=\"u0794c2be\" id=\"u0794c2be\"> 去执行更新动作时，会先把这个锁给“锁上”（置为 </span><code data-lake-id=\"u912959e7\" id=\"u912959e7\"><span data-lake-id=\"u66ff57ff\" id=\"u66ff57ff\">true</span></code><span data-lake-id=\"u445fe3cb\" id=\"u445fe3cb\">），表明“现在正处于批量更新过程中”。当锁被“锁上”的时候，任何需要更新的组件都只能暂时进入 </span><code data-lake-id=\"u72ddab78\" id=\"u72ddab78\"><span data-lake-id=\"uff489228\" id=\"uff489228\">dirtyComponents</span></code><span data-lake-id=\"uf89285ef\" id=\"uf89285ef\"> 里排队等候下一次的批量更新，而不能随意“插队”。此处体现的“任务锁”的思想，是 React 面对大量状态仍然能够实现有序分批处理的基石。</span></p><h3 data-lake-id=\"0f51fe587d5de38c26cb3b6fc6638905\" id=\"0f51fe587d5de38c26cb3b6fc6638905\"><span data-lake-id=\"udda31428\" id=\"udda31428\">2. </span><span data-lake-id=\"uf4e15083\" id=\"uf4e15083\">React setState 调用之后发生了什么？是同步还是异步？</span></h3><p data-lake-id=\"a665835df94449c03ebabdf14cd7a97c\" id=\"a665835df94449c03ebabdf14cd7a97c\"><strong><span data-lake-id=\"u0566d180\" id=\"u0566d180\">（1）React中setState后发生了什么</span></strong></p><p data-lake-id=\"31da8d3781fe494e46d3867aeb8c4bd5\" id=\"31da8d3781fe494e46d3867aeb8c4bd5\"><span data-lake-id=\"u82f5c220\" id=\"u82f5c220\">在代码中调用setState函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发调和过程(Reconciliation)。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个UI界面。</span></p><p data-lake-id=\"uf8834b95\" id=\"uf8834b95\"><br></p><p data-lake-id=\"4e177063d9c6d523a771f2aa16e1ba2f\" id=\"4e177063d9c6d523a771f2aa16e1ba2f\"><span data-lake-id=\"ud12bdf9f\" id=\"ud12bdf9f\">在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。</span></p><p data-lake-id=\"4794f566992783b4ca9b9b4e3f5d91d8\" id=\"4794f566992783b4ca9b9b4e3f5d91d8\"><br></p><p data-lake-id=\"c1f5ee0326eb505410b41a747570eecf\" id=\"c1f5ee0326eb505410b41a747570eecf\"><span data-lake-id=\"ub8eb8f77\" id=\"ub8eb8f77\">如果在短时间内频繁setState。React会将state的改变压入栈中，在合适的时机，批量更新state和视图，达到提高性能的效果。</span></p><p data-lake-id=\"75f6c98785ec7b536f042c9ea68fdda1\" id=\"75f6c98785ec7b536f042c9ea68fdda1\"><br></p><p data-lake-id=\"59d81e4f31b7fd312355302d67a888d9\" id=\"59d81e4f31b7fd312355302d67a888d9\"><strong><span data-lake-id=\"ua620c60c\" id=\"ua620c60c\">（2）setState 是同步还是异步的</span></strong></p><p data-lake-id=\"bacd467c93885b656c37ccccab74f716\" id=\"bacd467c93885b656c37ccccab74f716\"><span data-lake-id=\"ub35fa0ea\" id=\"ub35fa0ea\">假如所有setState是同步的，意味着每执行一次setState时（有可能一个同步代码中，多次setState），都重新vnode diff + dom修改，这对性能来说是极为不好的。如果是异步，则可以把一个同步代码中的多个setState合并成一次组件更新。所以默认是异步的，但是在一些情况下是同步的。</span></p><p data-lake-id=\"9fdf425d6ca06661a360dd7f7e560356\" id=\"9fdf425d6ca06661a360dd7f7e560356\"><br></p><p data-lake-id=\"b12b70768307d5593c81826bffe55055\" id=\"b12b70768307d5593c81826bffe55055\"><span data-lake-id=\"uf86f1b41\" id=\"uf86f1b41\">setState 并不是单纯同步/异步的，它的表现会因调用场景的不同而不同。在源码中，通过 isBatchingUpdates 来判断setState 是先存进 state 队列还是直接更新，如果值为 true 则执行异步操作，为 false 则直接更新。</span></p><ul list=\"u19e46d08\"><li fid=\"uba8663a6\" data-lake-id=\"1d96ec297d05260142a2268a2d21974d\" id=\"1d96ec297d05260142a2268a2d21974d\"><strong><span data-lake-id=\"u8bcfd9c0\" id=\"u8bcfd9c0\">异步：</span></strong><span data-lake-id=\"u6e7760fd\" id=\"u6e7760fd\">在 React 可以控制的地方，就为 true，比如在 React 生命周期事件和合成事件中，都会走合并操作，延迟更新的策略。</span></li><li fid=\"uba8663a6\" data-lake-id=\"bb8c7474b7a633f02a45fb2e15f789d4\" id=\"bb8c7474b7a633f02a45fb2e15f789d4\"><strong><span data-lake-id=\"u46a2c904\" id=\"u46a2c904\">同步：</span></strong><span data-lake-id=\"u28ca4480\" id=\"u28ca4480\">在 React 无法控制的地方，比如原生事件，具体就是在 addEventListener 、setTimeout、setInterval 等事件中，就只能同步更新。</span></li></ul><p data-lake-id=\"f54562e09fc8d9c26fd73cd34484a19c\" id=\"f54562e09fc8d9c26fd73cd34484a19c\"><br></p><p data-lake-id=\"54beaec69a31ee2b8bc03eacb2b5638a\" id=\"54beaec69a31ee2b8bc03eacb2b5638a\"><span data-lake-id=\"u5cb57a31\" id=\"u5cb57a31\">一般认为，做异步设计是为了性能优化、减少渲染次数：</span></p><ul list=\"u834621c9\"><li fid=\"ua92052b2\" data-lake-id=\"52d3240713fba0b4a5139ab1fd425894\" id=\"52d3240713fba0b4a5139ab1fd425894\"><code data-lake-id=\"uf07ce6ff\" id=\"uf07ce6ff\"><span data-lake-id=\"u5d0ac1ae\" id=\"u5d0ac1ae\" style=\"background-color: transparent\">setState</span></code><span data-lake-id=\"uace7a8e1\" id=\"uace7a8e1\" style=\"background-color: transparent\">设计为异步，可以显著的提升性能。</span><span data-lake-id=\"ued1475ce\" id=\"ued1475ce\">如果每次调用 </span><code data-lake-id=\"ubc283a5c\" id=\"ubc283a5c\"><span data-lake-id=\"uad07f413\" id=\"uad07f413\">setState</span></code><span data-lake-id=\"u4d227cca\" id=\"u4d227cca\">都进行一次更新，那么意味着</span><code data-lake-id=\"ue5934a90\" id=\"ue5934a90\"><span data-lake-id=\"u15386c49\" id=\"u15386c49\">render</span></code><span data-lake-id=\"uc446cbff\" id=\"uc446cbff\">函数会被频繁调用，界面重新渲染，这样效率是很低的；最好的办法应该是获取到多个更新，之后进行批量更新； </span></li><li fid=\"ua92052b2\" data-lake-id=\"efaea7ba3464ad28564242ab892f73f7\" id=\"efaea7ba3464ad28564242ab892f73f7\"><span data-lake-id=\"u54bc9311\" id=\"u54bc9311\">如果同步更新了</span><code data-lake-id=\"ud2201441\" id=\"ud2201441\"><span data-lake-id=\"uf786b112\" id=\"uf786b112\">state</span></code><span data-lake-id=\"u1e67eca4\" id=\"u1e67eca4\">，但是还没有执行</span><code data-lake-id=\"uab019001\" id=\"uab019001\"><span data-lake-id=\"u8979fa0e\" id=\"u8979fa0e\">render</span></code><span data-lake-id=\"u3ce5be07\" id=\"u3ce5be07\">函数，那么</span><code data-lake-id=\"u238eaaf0\" id=\"u238eaaf0\"><span data-lake-id=\"u3df7ad72\" id=\"u3df7ad72\">state</span></code><span data-lake-id=\"u967a643d\" id=\"u967a643d\">和</span><code data-lake-id=\"u24c53e43\" id=\"u24c53e43\"><span data-lake-id=\"u04312642\" id=\"u04312642\">props</span></code><span data-lake-id=\"u993f88f0\" id=\"u993f88f0\">不能保持同步。</span><code data-lake-id=\"u68b74871\" id=\"u68b74871\"><span data-lake-id=\"ue543f844\" id=\"ue543f844\">state</span></code><span data-lake-id=\"ua25c68ac\" id=\"ua25c68ac\">和</span><code data-lake-id=\"uf0923a83\" id=\"uf0923a83\"><span data-lake-id=\"uacd79493\" id=\"uacd79493\">props</span></code><span data-lake-id=\"u80a5a02f\" id=\"u80a5a02f\">不能保持一致性，会在开发中产生很多的问题；</span></li></ul><h3 data-lake-id=\"6108bec5a580d5ab755622e72773cf65\" id=\"6108bec5a580d5ab755622e72773cf65\"><span data-lake-id=\"udffaad4d\" id=\"udffaad4d\">3. </span><span data-lake-id=\"uaa39b361\" id=\"uaa39b361\">R</span><span data-lake-id=\"ubd6362f5\" id=\"ubd6362f5\">eact中的setState批量更新的过程是什么？</span></h3><p data-lake-id=\"8cb6369e95909b144de200bdc436949b\" id=\"8cb6369e95909b144de200bdc436949b\"><span data-lake-id=\"u038a55de\" id=\"u038a55de\">调用 </span><code data-lake-id=\"u79d82b2e\" id=\"u79d82b2e\"><span data-lake-id=\"u82118db1\" id=\"u82118db1\">setState</span></code><span data-lake-id=\"uc53c3c61\" id=\"uc53c3c61\"> 时，组件的 </span><code data-lake-id=\"u14b4eaba\" id=\"u14b4eaba\"><span data-lake-id=\"ub74062db\" id=\"ub74062db\">state</span></code><span data-lake-id=\"u02ded52a\" id=\"u02ded52a\"> 并不会立即改变， </span><code data-lake-id=\"ub97cb113\" id=\"ub97cb113\"><span data-lake-id=\"u87584925\" id=\"u87584925\">setState</span></code><span data-lake-id=\"u753a55a2\" id=\"u753a55a2\"> 只是把要修改的 </span><code data-lake-id=\"uad2b51f6\" id=\"uad2b51f6\"><span data-lake-id=\"ubf2e773c\" id=\"ubf2e773c\">state</span></code><span data-lake-id=\"u443dbed3\" id=\"u443dbed3\"> 放入一个队列， </span><code data-lake-id=\"u41fe0f4c\" id=\"u41fe0f4c\"><span data-lake-id=\"u538d8999\" id=\"u538d8999\">React</span></code><span data-lake-id=\"uabd69ea0\" id=\"uabd69ea0\"> 会优化真正的执行时机，并出于性能原因，会将 </span><code data-lake-id=\"u55b12eaf\" id=\"u55b12eaf\"><span data-lake-id=\"uf5af5c4f\" id=\"uf5af5c4f\">React</span></code><span data-lake-id=\"uea63c135\" id=\"uea63c135\"> 事件处理程序中的多次</span><code data-lake-id=\"u92d847d1\" id=\"u92d847d1\"><span data-lake-id=\"u4c53fd0d\" id=\"u4c53fd0d\">React</span></code><span data-lake-id=\"u63e2a165\" id=\"u63e2a165\"> 事件处理程序中的多次 </span><code data-lake-id=\"u715f244a\" id=\"u715f244a\"><span data-lake-id=\"u1edf5618\" id=\"u1edf5618\">setState</span></code><span data-lake-id=\"u306ac776\" id=\"u306ac776\"> 的状态修改合并成一次状态修改。 最终更新只产生一次组件及其子组件的重新渲染，这对于大型应用程序中的性能提升至关重要。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22this.setState(%7B%5Cn%20%20count%3A%20this.state.count%20%2B%201%20%20%20%20%3D%3D%3D%3E%20%20%20%20%E5%85%A5%E9%98%9F%EF%BC%8C%5Bcount%2B1%E7%9A%84%E4%BB%BB%E5%8A%A1%5D%5Cn%7D)%3B%5Cnthis.setState(%7B%5Cn%20%20count%3A%20this.state.count%20%2B%201%20%20%20%20%3D%3D%3D%3E%20%20%20%20%E5%85%A5%E9%98%9F%EF%BC%8C%5Bcount%2B1%E7%9A%84%E4%BB%BB%E5%8A%A1%EF%BC%8Ccount%2B1%E7%9A%84%E4%BB%BB%E5%8A%A1%5D%5Cn%7D)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E2%86%93%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E5%90%88%E5%B9%B6%20state%EF%BC%8C%5Bcount%2B1%E7%9A%84%E4%BB%BB%E5%8A%A1%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E2%86%93%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%E6%89%A7%E8%A1%8C%20count%2B1%E7%9A%84%E4%BB%BB%E5%8A%A1%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22O23r6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"556e697ef2e0bf007655f1394993f1ec\" id=\"556e697ef2e0bf007655f1394993f1ec\"><span data-lake-id=\"u6ad8332d\" id=\"u6ad8332d\">需要注意的是，只要同步代码还在执行，“攒起来”这个动作就不会停止。（注：这里之所以多次 +1 最终只有一次生效，是因为在同一个方法中多次 setState 的合并动作不是单纯地将更新累加。比如这里对于相同属性的设置，React 只会为其保留最后一次的更新）。</span></p><h3 data-lake-id=\"309176f952d83810a38124efbe243bf5\" id=\"309176f952d83810a38124efbe243bf5\"><span data-lake-id=\"ud5d40de7\" id=\"ud5d40de7\">4.  React中有使用过getDefaultProps吗？它有什么作用？</span></h3><p data-lake-id=\"6634f46fdc981f1d8ef861d5e0ff43af\" id=\"6634f46fdc981f1d8ef861d5e0ff43af\"><span data-lake-id=\"ub2d2b720\" id=\"ub2d2b720\">通过实现组件的getDefaultProps，对属性设置默认值（ES5的写法）：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20ShowTitle%20%3D%20React.createClass(%7B%5Cn%20%20getDefaultProps%3Afunction()%7B%5Cn%20%20%20%20return%7B%5Cn%20%20%20%20%20%20title%20%3A%20%5C%22React%5C%22%5Cn%20%20%20%20%7D%5Cn%20%20%7D%2C%5Cn%20%20render%20%3A%20function()%7B%5Cn%20%20%20%20return%20%3Ch1%3E%7Bthis.props.title%7D%3C%2Fh1%3E%5Cn%20%20%7D%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uVJ1l%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"9f3d04a9318f42b99c018144a25b28da\" id=\"9f3d04a9318f42b99c018144a25b28da\"><span data-lake-id=\"u87b74963\" id=\"u87b74963\">5. R</span><span data-lake-id=\"ue44624f7\" id=\"ue44624f7\">eact中setState的第二个参数作用是什么？</span></h3><p data-lake-id=\"30fcf0fff688a431982f64085bf653db\" id=\"30fcf0fff688a431982f64085bf653db\" style=\"text-align: justify\"><code data-lake-id=\"u85881ad0\" id=\"u85881ad0\"><span data-lake-id=\"u7d091cba\" id=\"u7d091cba\">setState</span></code><span data-lake-id=\"u727b62a2\" id=\"u727b62a2\"> 的第二个参数是一个可选的回调函数。这个回调函数将在组件重新渲染后执行。等价于在 </span><code data-lake-id=\"ue79d637b\" id=\"ue79d637b\"><span data-lake-id=\"uea1e2422\" id=\"uea1e2422\">componentDidUpdate</span></code><span data-lake-id=\"ub1dc198d\" id=\"ub1dc198d\"> 生命周期内执行。通常建议使用 </span><code data-lake-id=\"ua1217296\" id=\"ua1217296\"><span data-lake-id=\"u04b1377c\" id=\"u04b1377c\">componentDidUpdate</span></code><span data-lake-id=\"u17d1b6b2\" id=\"u17d1b6b2\"> 来代替此方式。在这个回调函数中你可以拿到更新后 </span><code data-lake-id=\"u539d2c64\" id=\"u539d2c64\"><span data-lake-id=\"u1920d0f7\" id=\"u1920d0f7\">state</span></code><span data-lake-id=\"u61e1593d\" id=\"u61e1593d\"> 的值：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22this.setState(%7B%5Cn%20%20%20%20key1%3A%20newState1%2C%5Cn%20%20%20%20key2%3A%20newState2%2C%5Cn%20%20%20%20...%5Cn%7D%2C%20callback)%20%2F%2F%20%E7%AC%AC%E4%BA%8C%E4%B8%AA%E5%8F%82%E6%95%B0%E6%98%AF%20state%20%E6%9B%B4%E6%96%B0%E5%AE%8C%E6%88%90%E5%90%8E%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%225yKwP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"05b0abd951923f39584bf3e8d19f8f9a\" id=\"05b0abd951923f39584bf3e8d19f8f9a\"><span data-lake-id=\"udab61686\" id=\"udab61686\">6. React中的setState和replaceState的区别是什么？</span></h3><p data-lake-id=\"a36fc1ea6bae4ec0008e09b5506bc1d9\" id=\"a36fc1ea6bae4ec0008e09b5506bc1d9\"><strong><span data-lake-id=\"uf792ac8a\" id=\"uf792ac8a\">（1）</span></strong><strong><span data-lake-id=\"u2d01db02\" id=\"u2d01db02\">setState()</span></strong></p><p data-lake-id=\"7a63d2d177bd5f08b9ea089dd66c404d\" id=\"7a63d2d177bd5f08b9ea089dd66c404d\"><span data-lake-id=\"ufad3d603\" id=\"ufad3d603\">setState()用于设置状态对象，其语法如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22setState(object%20nextState%5B%2C%20function%20callback%5D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Un48C%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u03028ba9\"><li fid=\"u9c1d370d\" data-lake-id=\"86cc596c57efb70623e340f670fe7fe7\" id=\"86cc596c57efb70623e340f670fe7fe7\"><span data-lake-id=\"ue24f5fc7\" id=\"ue24f5fc7\">nextState，将要设置的新状态，该状态会和当前的state合并</span></li><li fid=\"u9c1d370d\" data-lake-id=\"5e1ae808574920e6516bbf0bc5018cf3\" id=\"5e1ae808574920e6516bbf0bc5018cf3\"><span data-lake-id=\"u4f2bab06\" id=\"u4f2bab06\">callback，可选参数，回调函数。该函数会在setState设置成功，且组件重新渲染后调用。</span></li></ul><p data-lake-id=\"3bc264f89bdf85ae5713ed610003f8aa\" id=\"3bc264f89bdf85ae5713ed610003f8aa\"><br></p><p data-lake-id=\"95488cde0a5aebfe3974d85ab1022dfe\" id=\"95488cde0a5aebfe3974d85ab1022dfe\"><span data-lake-id=\"ue2cac789\" id=\"ue2cac789\">合并nextState和当前state，并重新渲染组件。setState是React事件处理函数中和请求回调函数中触发UI更新的主要方法。</span></p><p data-lake-id=\"c8f6d12f81e09443af49c4378ad8fc63\" id=\"c8f6d12f81e09443af49c4378ad8fc63\"><br></p><p data-lake-id=\"a462b3744eed629a1e45a3996e4e1d43\" id=\"a462b3744eed629a1e45a3996e4e1d43\"><strong><span data-lake-id=\"u1bc4a465\" id=\"u1bc4a465\">（2）</span></strong><strong><span data-lake-id=\"u41ac6a1e\" id=\"u41ac6a1e\">replaceState()</span></strong></p><p data-lake-id=\"fa7f36dee70b5287ddc4bc562a6227e7\" id=\"fa7f36dee70b5287ddc4bc562a6227e7\"><span data-lake-id=\"u64b088fb\" id=\"u64b088fb\">replaceState()方法与setState()类似，但是方法只会保留nextState中状态，原state不在nextState中的状态都会被删除。其语法如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22replaceState(object%20nextState%5B%2C%20function%20callback%5D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FdxkT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"udbd2ae53\"><li fid=\"u02fa0275\" data-lake-id=\"68aa889adfa3475816b773ed71eb7c1f\" id=\"68aa889adfa3475816b773ed71eb7c1f\"><span data-lake-id=\"ubdeba156\" id=\"ubdeba156\">nextState，将要设置的新状态，该状态会替换当前的state。</span></li><li fid=\"u02fa0275\" data-lake-id=\"9bdf37b90992d773294fa4d33730067c\" id=\"9bdf37b90992d773294fa4d33730067c\"><span data-lake-id=\"u5e4513d7\" id=\"u5e4513d7\">callback，可选参数，回调函数。该函数会在replaceState设置成功，且组件重新渲染后调用。</span></li></ul><p data-lake-id=\"6e18b3765593a33107c2552f0842be08\" id=\"6e18b3765593a33107c2552f0842be08\"><br></p><p data-lake-id=\"10083d33ddd6ba8d9c30dd4e9aa8bef0\" id=\"10083d33ddd6ba8d9c30dd4e9aa8bef0\"><strong><span data-lake-id=\"u64dcc34a\" id=\"u64dcc34a\">总结：</span></strong><span data-lake-id=\"uf3f9f0e3\" id=\"uf3f9f0e3\">setState 是修改其中的部分状态，相当于 Object.assign，只是覆盖，不会减少原来的状态。而replaceState 是完全替换原来的状态，相当于赋值，将原来的 state 替换为另一个对象，如果新状态属性减少，那么 state 中就没有这个状态了。</span></p><h3 data-lake-id=\"bc92bf8d9ee723dc00a8168a4e51dcab\" id=\"bc92bf8d9ee723dc00a8168a4e51dcab\"><span data-lake-id=\"u55cd6c24\" id=\"u55cd6c24\">7. 在React中组件的this.state和setState有什么区别？</span></h3><p data-lake-id=\"8ebd1a97e3fcd1da0057f725944ccd57\" id=\"8ebd1a97e3fcd1da0057f725944ccd57\"><span data-lake-id=\"ub6184f60\" id=\"ub6184f60\">this.state通常是用来初始化state的，this.setState是用来修改state值的。如果初始化了state之后再使用this.state，之前的state会被覆盖掉，如果使用this.setState，只会替换掉相应的state值。所以，如果想要修改state的值，就需要使用setState，而不能直接修改state，直接修改state之后页面是不会更新的。</span></p><h3 data-lake-id=\"1b490b19b0157423d6e8e2b1a26851ca\" id=\"1b490b19b0157423d6e8e2b1a26851ca\"><span data-lake-id=\"u24cea68a\" id=\"u24cea68a\">8. </span><span data-lake-id=\"u64108c3f\" id=\"u64108c3f\">state 是怎么注入到组件的，从 reducer 到组件经历了什么样的过程</span></h3><p data-lake-id=\"7ad6aab33d0a3326b801ec8161fc3293\" id=\"7ad6aab33d0a3326b801ec8161fc3293\"><span data-lake-id=\"ue0b8d98d\" id=\"ue0b8d98d\">通过connect和mapStateToProps将state注入到组件中：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20connect%20%7D%20from%20'react-redux'%5Cnimport%20%7B%20setVisibilityFilter%20%7D%20from%20'%40%2Freducers%2FTodo%2Factions'%5Cnimport%20Link%20from%20'%40%2Fcontainers%2FTodo%2Fcomponents%2FLink'%5Cn%5Cnconst%20mapStateToProps%20%3D%20(state%2C%20ownProps)%20%3D%3E%20(%7B%5Cn%20%20%20%20active%3A%20ownProps.filter%20%3D%3D%3D%20state.visibilityFilter%5Cn%7D)%5Cn%5Cnconst%20mapDispatchToProps%20%3D%20(dispatch%2C%20ownProps)%20%3D%3E%20(%7B%5Cn%20%20%20%20setFilter%3A%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20dispatch(setVisibilityFilter(ownProps.filter))%5Cn%20%20%20%20%7D%5Cn%7D)%5Cn%5Cnexport%20default%20connect(%5Cn%20%20%20%20mapStateToProps%2C%5Cn%20%20%20%20mapDispatchToProps%5Cn)(Link)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qTNiG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"494a9fe87d4b711cfe1caf72fdb72714\" id=\"494a9fe87d4b711cfe1caf72fdb72714\"><span data-lake-id=\"uc576dee7\" id=\"uc576dee7\">上面代码中，active就是注入到Link组件中的状态。 mapStateToProps（state，ownProps）中带有两个参数，含义是∶</span></p><ul list=\"ue9e839d3\"><li fid=\"u9431b12d\" data-lake-id=\"85772d83295405a1428ca247b4a10dac\" id=\"85772d83295405a1428ca247b4a10dac\"><span data-lake-id=\"udd38b046\" id=\"udd38b046\">state-store管理的全局状态对象，所有都组件状态数据都存储在该对象中。</span></li><li fid=\"u9431b12d\" data-lake-id=\"53c4b8e93c054a37481b122de76d193d\" id=\"53c4b8e93c054a37481b122de76d193d\"><span data-lake-id=\"u4314e727\" id=\"u4314e727\">ownProps 组件通过props传入的参数。 </span></li></ul><p data-lake-id=\"c28b39d80f27b47b6956ee60e0c0b92a\" id=\"c28b39d80f27b47b6956ee60e0c0b92a\"><br></p><p data-lake-id=\"1da16b298311a6a75321a4fdfc4d857e\" id=\"1da16b298311a6a75321a4fdfc4d857e\"><strong><span data-lake-id=\"u486bbc6d\" id=\"u486bbc6d\">reducer 到组件经历的过程：</span></strong></p><ul list=\"uc168745b\"><li fid=\"uf75be1bc\" data-lake-id=\"d89c55b806f2083e99b7b0ad1796d19a\" id=\"d89c55b806f2083e99b7b0ad1796d19a\"><span data-lake-id=\"u95106591\" id=\"u95106591\">reducer对action对象处理，更新组件状态，并将新的状态值返回store。</span></li><li fid=\"uf75be1bc\" data-lake-id=\"d79c054cd710f0850b4351fb7b425a2b\" id=\"d79c054cd710f0850b4351fb7b425a2b\"><span data-lake-id=\"u51308596\" id=\"u51308596\">通过connect（mapStateToProps，mapDispatchToProps）（Component）对组件 Component进行升级，此时将状态值从store取出并作为props参数传递到组件。</span></li></ul><p data-lake-id=\"8e5eb5c3085e8d1a491b3fcd51aed548\" id=\"8e5eb5c3085e8d1a491b3fcd51aed548\"><br></p><p data-lake-id=\"9dd03db29347e1336ea181d75e21ea8a\" id=\"9dd03db29347e1336ea181d75e21ea8a\"><strong><span data-lake-id=\"ub1e29d3c\" id=\"ub1e29d3c\">高阶组件实现源码∶</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20React%20from%20'react'%5Cnimport%20PropTypes%20from%20'prop-types'%5Cn%5Cn%2F%2F%20%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%20contect%20%5Cnexport%20const%20connect%20%3D%20(mapStateToProps%2C%20mapDispatchToProps)%20%3D%3E%20(WrappedComponent)%20%3D%3E%20%7B%5Cn%20%20%20%20class%20Connect%20extends%20React.Component%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E9%80%9A%E8%BF%87%E5%AF%B9context%E8%B0%83%E7%94%A8%E8%8E%B7%E5%8F%96store%5Cn%20%20%20%20%20%20%20%20static%20contextTypes%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20store%3A%20PropTypes.object%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20constructor()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20super()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20allProps%3A%20%7B%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E7%AC%AC%E4%B8%80%E9%81%8D%E9%9C%80%E5%88%9D%E5%A7%8B%E5%8C%96%E6%89%80%E6%9C%89%E7%BB%84%E4%BB%B6%E5%88%9D%E5%A7%8B%E7%8A%B6%E6%80%81%5Cn%20%20%20%20%20%20%20%20componentWillMount()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20const%20store%20%3D%20this.context.store%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this._updateProps()%5Cn%20%20%20%20%20%20%20%20%20%20%20%20store.subscribe(()%20%3D%3E%20this._updateProps())%3B%20%2F%2F%20%E5%8A%A0%E5%85%A5_updateProps()%E8%87%B3store%E9%87%8C%E7%9A%84%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6%E5%88%97%E8%A1%A8%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%89%A7%E8%A1%8Caction%E5%90%8E%E6%9B%B4%E6%96%B0props%EF%BC%8C%E4%BD%BF%E7%BB%84%E4%BB%B6%E5%8F%AF%E4%BB%A5%E6%9B%B4%E6%96%B0%E8%87%B3%E6%9C%80%E6%96%B0%E7%8A%B6%E6%80%81%EF%BC%88%E7%B1%BB%E4%BC%BC%E4%BA%8EsetState%EF%BC%89%5Cn%20%20%20%20%20%20%20%20_updateProps()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20const%20store%20%3D%20this.context.store%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20let%20stateProps%20%3D%20mapStateToProps%20%3F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mapStateToProps(store.getState()%2C%20this.props)%20%3A%20%7B%7D%20%2F%2F%20%E9%98%B2%E6%AD%A2%20mapStateToProps%20%E6%B2%A1%E6%9C%89%E4%BC%A0%E5%85%A5%5Cn%20%20%20%20%20%20%20%20%20%20%20%20let%20dispatchProps%20%3D%20mapDispatchToProps%20%3F%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mapDispatchToProps(store.dispatch%2C%20this.props)%20%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20dispatch%3A%20store.dispatch%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%20%2F%2F%20%E9%98%B2%E6%AD%A2%20mapDispatchToProps%20%E6%B2%A1%E6%9C%89%E4%BC%A0%E5%85%A5%5Cn%20%20%20%20%20%20%20%20%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20allProps%3A%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20...stateProps%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20...dispatchProps%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20...this.props%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%3CWrappedComponent%20%7B...this.state.allProps%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20Connect%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22MkzwN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"5f35541309bf75af9add0c361aa640f8\" id=\"5f35541309bf75af9add0c361aa640f8\"><span data-lake-id=\"u8cb93329\" id=\"u8cb93329\">9. </span><span data-lake-id=\"u48011bcb\" id=\"u48011bcb\">R</span><span data-lake-id=\"u48e1b4e9\" id=\"u48e1b4e9\">eact组件的state和props有什么区别？</span></h3><p data-lake-id=\"402c1d306bf8723e8894558dbc5ff6dd\" id=\"402c1d306bf8723e8894558dbc5ff6dd\"><strong><span data-lake-id=\"ub6673bd1\" id=\"ub6673bd1\">（1）props</span></strong></p><p data-lake-id=\"587be59c6f14df9a6ba008f41b3d4c6f\" id=\"587be59c6f14df9a6ba008f41b3d4c6f\"><span data-lake-id=\"u6940b878\" id=\"u6940b878\">props是一个从外部传进组件的参数，主要作为就是从父组件向子组件传递数据，它具有可读性和不变性，只能通过外部组件主动传入新的props来重新渲染子组件，否则子组件的props以及展现形式不会改变。</span></p><p data-lake-id=\"14b6ad51140bf31d38bfbc7aeaa4f5c2\" id=\"14b6ad51140bf31d38bfbc7aeaa4f5c2\"><strong><span data-lake-id=\"u3308095b\" id=\"u3308095b\">（2）state</span></strong></p><p data-lake-id=\"632b8c29e1680c8dc521c21ee069138b\" id=\"632b8c29e1680c8dc521c21ee069138b\"><span data-lake-id=\"uebd4fd0b\" id=\"uebd4fd0b\">state的主要作用是用于组件保存、控制以及修改自己的状态，它只能在constructor中初始化，它算是组件的私有属性，不可通过外部访问和修改，只能通过组件内部的this.setState来修改，修改state属性会导致组件的重新渲染。</span></p><p data-lake-id=\"19e86ba0a898abb67b727dd20755224d\" id=\"19e86ba0a898abb67b727dd20755224d\"><strong><span data-lake-id=\"ubdd0cd0c\" id=\"ubdd0cd0c\">（3）区别</span></strong></p><ul list=\"ubf1cb55d\"><li fid=\"u2520d755\" data-lake-id=\"f40c0e0e62fe40ed0bd0685bd7538dcd\" id=\"f40c0e0e62fe40ed0bd0685bd7538dcd\"><span data-lake-id=\"u74f5f783\" id=\"u74f5f783\">props 是传递给组件的（类似于函数的形参），而state 是在组件内被组件自己管理的（类似于在一个函数内声明的变量）。</span></li><li fid=\"u2520d755\" data-lake-id=\"f5861e66d077583642082a383966eda7\" id=\"f5861e66d077583642082a383966eda7\"><span data-lake-id=\"u78b7315e\" id=\"u78b7315e\">props 是不可修改的，所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</span></li><li fid=\"u2520d755\" data-lake-id=\"2b4fa4c7fbf513ef5b8a65cf2fe81a51\" id=\"2b4fa4c7fbf513ef5b8a65cf2fe81a51\"><span data-lake-id=\"ub8f4ea85\" id=\"ub8f4ea85\">state 是在组件中创建的，一般在 constructor中初始化 state。state 是多变的、可以修改，每次setState都异步更新的。</span></li></ul><h3 data-lake-id=\"66625cad509136970eac2e60f78f1302\" id=\"66625cad509136970eac2e60f78f1302\"><span data-lake-id=\"u893eb205\" id=\"u893eb205\">10. </span><span data-lake-id=\"u7e5c62c3\" id=\"u7e5c62c3\">React中的props</span><span data-lake-id=\"ua59433c2\" id=\"ua59433c2\">为什么</span><span data-lake-id=\"u9b3ffe57\" id=\"u9b3ffe57\">是只读的？</span></h3><p data-lake-id=\"21129c5ac65912c7930bd3129b82d13b\" id=\"21129c5ac65912c7930bd3129b82d13b\"><code data-lake-id=\"uc3f1507b\" id=\"uc3f1507b\"><span data-lake-id=\"ue9d9d5c3\" id=\"ue9d9d5c3\">this.props</span></code><span data-lake-id=\"u71383da3\" id=\"u71383da3\">是组件之间沟通的一个接口，原则上来讲，它只能从父组件流向子组件。React具有浓重的函数式编程的思想。</span></p><p data-lake-id=\"89210ff83f6badba9c93d66acc0d53e2\" id=\"89210ff83f6badba9c93d66acc0d53e2\"><br></p><p data-lake-id=\"912a0ff80a2657877436fb5eacb4162d\" id=\"912a0ff80a2657877436fb5eacb4162d\"><span data-lake-id=\"ud162fdbf\" id=\"ud162fdbf\">提到函数式编程就要提一个概念：纯函数。它有几个特点：</span></p><ul list=\"ucde64898\"><li fid=\"u894d78a7\" data-lake-id=\"c0a28173cc9a5f8d3cbd936d4f63f846\" id=\"c0a28173cc9a5f8d3cbd936d4f63f846\"><span data-lake-id=\"u4793a3cf\" id=\"u4793a3cf\">给定相同的输入，总是返回相同的输出。</span></li><li fid=\"u894d78a7\" data-lake-id=\"60666b95c45f4845b24dddcbb442713f\" id=\"60666b95c45f4845b24dddcbb442713f\"><span data-lake-id=\"ue5107abe\" id=\"ue5107abe\">过程没有副作用。</span></li><li fid=\"u894d78a7\" data-lake-id=\"735edd28f1ee8a60cd6763db425fc569\" id=\"735edd28f1ee8a60cd6763db425fc569\"><span data-lake-id=\"u99b28045\" id=\"u99b28045\">不依赖外部状态。</span></li></ul><p data-lake-id=\"364bc813d6af11368fbd000635ea4786\" id=\"364bc813d6af11368fbd000635ea4786\"><br></p><p data-lake-id=\"273e8bea736b27fead87998f66bf5c7a\" id=\"273e8bea736b27fead87998f66bf5c7a\"><code data-lake-id=\"ue07449ba\" id=\"ue07449ba\"><span data-lake-id=\"u6dc8b178\" id=\"u6dc8b178\">this.props</span></code><span data-lake-id=\"ua4128c4a\" id=\"ua4128c4a\" class=\"lake-fontsize-12\">就是汲取了纯函数的思想。props的不可以变性就保证的相同的输入，页面显示的内容是一样的，并且不会产生副作用</span></p><h3 data-lake-id=\"f362f1047f1b72bc27f3aed45add2ea5\" id=\"f362f1047f1b72bc27f3aed45add2ea5\"><span data-lake-id=\"u0d1491af\" id=\"u0d1491af\">11. </span><span data-lake-id=\"u3d39f397\" id=\"u3d39f397\">在React中组件的props改变时更新组件的有哪些方法？</span></h3><p data-lake-id=\"f9557f5a8be59905729dc6a073e6168c\" id=\"f9557f5a8be59905729dc6a073e6168c\"><span data-lake-id=\"u0e707df3\" id=\"u0e707df3\">在一个组件传入的props更新时重新渲染该组件常用的方法是在</span><code data-lake-id=\"ud3c984bf\" id=\"ud3c984bf\"><span data-lake-id=\"u1433b9ef\" id=\"u1433b9ef\">componentWillReceiveProps</span></code><span data-lake-id=\"u5d796c9f\" id=\"u5d796c9f\">中将新的props更新到组件的state中（这种state被成为派生状态（Derived State）），从而实现重新渲染。React 16.3中还引入了一个新的钩子函数</span><code data-lake-id=\"u52249027\" id=\"u52249027\"><span data-lake-id=\"u12f09c96\" id=\"u12f09c96\">getDerivedStateFromProps</span></code><span data-lake-id=\"uff693102\" id=\"uff693102\">来专门实现这一需求。</span></p><p data-lake-id=\"cddf86b521148d37f4d0407c4659ab94\" id=\"cddf86b521148d37f4d0407c4659ab94\"><br></p><p data-lake-id=\"958b29bfd6c879b1301687882899be09\" id=\"958b29bfd6c879b1301687882899be09\"><strong><span data-lake-id=\"ufcd759ed\" id=\"ufcd759ed\">（1）</span></strong><strong><span data-lake-id=\"u9a54c4e9\" id=\"u9a54c4e9\" class=\"lake-fontsize-12\">componentWillReceiveProps（已废弃）</span></strong></p><p data-lake-id=\"43ea9263948655f7799718db11f349dd\" id=\"43ea9263948655f7799718db11f349dd\"><span data-lake-id=\"u1d8f7156\" id=\"u1d8f7156\" class=\"lake-fontsize-12\">在react的componentWillReceiveProps(nextProps)生命周期中，可以在子组件的render函数执行前，通过this.props获取旧的属性，通过nextProps获取新的props，对比两次props是否相同，从而更新子组件自己的state。</span></p><p data-lake-id=\"5ccb93a65699e2475dc5bcd56ca39173\" id=\"5ccb93a65699e2475dc5bcd56ca39173\"><br></p><p data-lake-id=\"4a2cc9977eb6826a0b3fb7f92ce82411\" id=\"4a2cc9977eb6826a0b3fb7f92ce82411\"><span data-lake-id=\"ufe5e6578\" id=\"ufe5e6578\" class=\"lake-fontsize-12\">这样的好处是，可以将数据请求放在这里进行执行，需要传的参数则从componentWillReceiveProps(nextProps)中获取。而不必将所有的请求都放在父组件中。于是该请求只会在该组件渲染时才会发出，从而减轻请求负担。</span></p><p data-lake-id=\"a6c3d7b15034dedd855f08ffb43e38c2\" id=\"a6c3d7b15034dedd855f08ffb43e38c2\"><strong><span data-lake-id=\"uc406e4e5\" id=\"uc406e4e5\" class=\"lake-fontsize-12\">（2）</span></strong><strong><span data-lake-id=\"u9a76d890\" id=\"u9a76d890\">getDerivedStateFromProps（16.3引入）</span></strong></p><p data-lake-id=\"f4879ba76e5138611463971dbfd94e9b\" id=\"f4879ba76e5138611463971dbfd94e9b\"><span data-lake-id=\"ue9189ee9\" id=\"ue9189ee9\">这个生命周期函数是为了替代</span><code data-lake-id=\"u15f1a86e\" id=\"u15f1a86e\"><span data-lake-id=\"u83960d1c\" id=\"u83960d1c\">componentWillReceiveProps</span></code><span data-lake-id=\"u6d8d65a1\" id=\"u6d8d65a1\">存在的，所以在需要使用</span><code data-lake-id=\"uf96cebf4\" id=\"uf96cebf4\"><span data-lake-id=\"u483fc8c5\" id=\"u483fc8c5\">componentWillReceiveProps</span></code><span data-lake-id=\"ue0c7810f\" id=\"ue0c7810f\">时，就可以考虑使用</span><code data-lake-id=\"u820095be\" id=\"u820095be\"><span data-lake-id=\"u2d6824da\" id=\"u2d6824da\">getDerivedStateFromProps</span></code><span data-lake-id=\"uf6a3ac1a\" id=\"uf6a3ac1a\">来进行替代。</span></p><p data-lake-id=\"49e99b8efc9c335f160cf4d8c7714b65\" id=\"49e99b8efc9c335f160cf4d8c7714b65\"><br></p><p data-lake-id=\"abdbbadec1ea445a64b8d60572b20ca1\" id=\"abdbbadec1ea445a64b8d60572b20ca1\"><span data-lake-id=\"u449f4803\" id=\"u449f4803\">两者的参数是不相同的，而</span><code data-lake-id=\"u458444e8\" id=\"u458444e8\"><span data-lake-id=\"uae483901\" id=\"uae483901\">getDerivedStateFromProps</span></code><span data-lake-id=\"u2218592e\" id=\"u2218592e\">是一个静态函数，也就是这个函数不能通过this访问到class的属性，也并不推荐直接访问属性。而是应该通过参数提供的nextProps以及prevState来进行判断，根据新传入的props来映射到state。</span></p><p data-lake-id=\"1c3fb196803ecdcfefa13366c066c336\" id=\"1c3fb196803ecdcfefa13366c066c336\"><br></p><p data-lake-id=\"30ba80ea072300a2ccdc085c2581287b\" id=\"30ba80ea072300a2ccdc085c2581287b\"><span data-lake-id=\"u29738eb3\" id=\"u29738eb3\">需要注意的是，</span><strong><span data-lake-id=\"u545ec8e4\" id=\"u545ec8e4\">如果props传入的内容不需要影响到你的state，那么就需要返回一个null</span></strong><span data-lake-id=\"uf4ca1e27\" id=\"uf4ca1e27\">，这个返回值是必须的，所以尽量将其写到函数的末尾：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22static%20getDerivedStateFromProps(nextProps%2C%20prevState)%20%7B%5Cn%20%20%20%20const%20%7Btype%7D%20%3D%20nextProps%3B%5Cn%20%20%20%20%2F%2F%20%E5%BD%93%E4%BC%A0%E5%85%A5%E7%9A%84type%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%9B%B4%E6%96%B0state%5Cn%20%20%20%20if%20(type%20!%3D%3D%20prevState.type)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20type%2C%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20%E5%90%A6%E5%88%99%EF%BC%8C%E5%AF%B9%E4%BA%8Estate%E4%B8%8D%E8%BF%9B%E8%A1%8C%E4%BB%BB%E4%BD%95%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20return%20null%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gstnv%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"fecb4f6e0265b87e02130491aaaad717\" id=\"fecb4f6e0265b87e02130491aaaad717\"><span data-lake-id=\"u00ec26bb\" id=\"u00ec26bb\">12. </span><span data-lake-id=\"u16bb658a\" id=\"u16bb658a\">React中怎么检验props？</span><span data-lake-id=\"u9ca58c26\" id=\"u9ca58c26\">验证props的目的是什么？</span></h3><p data-lake-id=\"306e1e6a59b4e226eacde4e56f2f031c\" id=\"306e1e6a59b4e226eacde4e56f2f031c\"><strong><span data-lake-id=\"u139b6643\" id=\"u139b6643\">React</span></strong><span data-lake-id=\"u9583f1d8\" id=\"u9583f1d8\" class=\"lake-fontsize-11\">为我们提供了</span><strong><span data-lake-id=\"u1725e992\" id=\"u1725e992\">PropTypes</span></strong><span data-lake-id=\"u0cd5a8ad\" id=\"u0cd5a8ad\" class=\"lake-fontsize-11\">以供验证使用。当我们向</span><strong><span data-lake-id=\"uafc239c5\" id=\"uafc239c5\">Props</span></strong><span data-lake-id=\"u8233951f\" id=\"u8233951f\" class=\"lake-fontsize-11\">传入的数据无效（向Props传入的数据类型和验证的数据类型不符）就会在控制台发出警告信息。</span><span data-lake-id=\"uc236cfc7\" id=\"uc236cfc7\" class=\"lake-fontsize-11\">它可以避免随着应用越来越复杂从而出现的问题。并且，它还可以让程序变得更易读。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20PropTypes%20from%20'prop-types'%3B%5Cn%5Cnclass%20Greeting%20extends%20React.Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Ch1%3EHello%2C%20%7Bthis.props.name%7D%3C%2Fh1%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%5CnGreeting.propTypes%20%3D%20%7B%5Cn%20%20name%3A%20PropTypes.string%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%223lgKl%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3fbfd84cde140202087e9c22b5c5c44a\" id=\"3fbfd84cde140202087e9c22b5c5c44a\"><span data-lake-id=\"u674a5c68\" id=\"u674a5c68\">当然，如果项目汇中使用了TypeScript，那么就可以不用PropTypes来校验，而使用TypeScript定义接口来校验props。</span></p><h2 data-lake-id=\"da0857db40195bc2d32e9b43f4a7a499\" id=\"da0857db40195bc2d32e9b43f4a7a499\"><span data-lake-id=\"u180f2572\" id=\"u180f2572\">三、</span><span data-lake-id=\"u873132c7\" id=\"u873132c7\">生命周期</span></h2><h3 data-lake-id=\"8d2e40a78457345652310ad2ee0b60e1\" id=\"8d2e40a78457345652310ad2ee0b60e1\"><span data-lake-id=\"u86dda851\" id=\"u86dda851\">1. </span><span data-lake-id=\"uf99db1d4\" id=\"uf99db1d4\">React的生命周期有哪些？</span></h3><p data-lake-id=\"efd8bee1b11ab52d803134c5b0e3c429\" id=\"efd8bee1b11ab52d803134c5b0e3c429\"><span data-lake-id=\"uf7dbe7c7\" id=\"uf7dbe7c7\"> React 通常将组件生命周期分为三个阶段：</span></p><ul list=\"u405a8c0f\"><li fid=\"ubdfba082\" data-lake-id=\"54f4ea9c785767e43da9105b0471c9dc\" id=\"54f4ea9c785767e43da9105b0471c9dc\"><span data-lake-id=\"u138e839f\" id=\"u138e839f\">装载阶段（Mount），组件第一次在DOM树中被渲染的过程；</span></li><li fid=\"ubdfba082\" data-lake-id=\"bdf6b9f85b57aeeec47b5bdb64f7323b\" id=\"bdf6b9f85b57aeeec47b5bdb64f7323b\"><span data-lake-id=\"u9e446996\" id=\"u9e446996\">更新过程（Update），组件状态发生变化，重新更新渲染的过程；</span></li><li fid=\"ubdfba082\" data-lake-id=\"c3cefb2892e1f682889c65ebcae94f75\" id=\"c3cefb2892e1f682889c65ebcae94f75\"><span data-lake-id=\"u240a332f\" id=\"u240a332f\">卸载过程（Unmount），组件从DOM树中被移除的过程；</span></li></ul><p data-lake-id=\"af436e4995040f5bdba4ff46c4e9734b\" id=\"af436e4995040f5bdba4ff46c4e9734b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1611914193870-a5a93315-a094-40aa-959a-e3e3c58c8a96.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A933%2C%22height%22%3A564%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A242860%2C%22originWidth%22%3A1866%2C%22originHeight%22%3A1127%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%2016.4%20Reactversion%20Language%20%E6%9B%B4%E6%96%B0%E6%97%B6%20%E6%8C%82%E8%BD%BD%E6%97%B6%20%E5%8D%B8%E8%BD%BD%E6%97%B6%20setState0%20forceupdate0%20constructor%20Newprops%20%5C%22Render%E9%98%B6%E6%AE%B5%5C%22%20geDerivedStateFromProps%20%E7%BA%AF%E5%87%80%E4%B8%94%E4%B8%8D%E5%8C%85%E5%90%AB%E5%89%AF%E4%BD%9C%E7%94%A8.%20%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%ABReact%E6%9A%82%20%E5%81%9C%2C%E4%B8%AD%E6%AD%A2%E6%88%96%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8.%20shouldComponentUpdate%20render%20%5C%22Pre-commit%E9%98%B6%E6%AE%B5%5C%22%20getSnapshotBeforeUpdate%20%E5%8F%AF%E4%BB%A5%E8%AF%BB%E5%8F%96DOM.%20React%E6%9B%B4%E6%96%B0DOM%E5%92%8Crefs%20%5C%22Commit%E9%98%B6%E6%AE%B5%5C%22%20%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8DOM%2C%E8%BF%90%E8%A1%8C%20%E5%89%AF%E4%BD%9C%E7%94%A8%2C%E5%AE%89%E6%8E%92%E6%9B%B4%E6%96%B0.%20componentDidupdate%20componentwillUnmount%20componentDidMount%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A1154.0729%2C%22y%22%3A14.77002%2C%22width%22%3A92.58510000000001%2C%22height%22%3A22.554472999999994%2C%22text%22%3A%22%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%22%7D%2C%7B%22x%22%3A897.3988%2C%22y%22%3A16.86581%2C%22width%22%3A53.40289999999993%2C%22height%22%3A19.411038%2C%22text%22%3A%2216.4%22%7D%2C%7B%22x%22%3A733.97675%2C%22y%22%3A17.249216%2C%22width%22%3A142.51144999999997%2C%22height%22%3A22.944903999999998%2C%22text%22%3A%22Reactversion%22%7D%2C%7B%22x%22%3A1007.2688%2C%22y%22%3A19.027733%2C%22width%22%3A102.94299999999998%2C%22height%22%3A21.837321999999997%2C%22text%22%3A%22Language%22%7D%2C%7B%22x%22%3A990.29126%2C%22y%22%3A125.34418%2C%22width%22%3A119.10464000000002%2C%22height%22%3A40.71409%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E6%97%B6%22%7D%2C%7B%22x%22%3A442.47754%2C%22y%22%3A127.041084%2C%22width%22%3A119.98775999999998%2C%22height%22%3A39.16008599999999%2C%22text%22%3A%22%E6%8C%82%E8%BD%BD%E6%97%B6%22%7D%2C%7B%22x%22%3A1555.553%2C%22y%22%3A127.559135%2C%22width%22%3A119.05899999999997%2C%22height%22%3A37.673895000000016%2C%22text%22%3A%22%E5%8D%B8%E8%BD%BD%E6%97%B6%22%7D%2C%7B%22x%22%3A1001.0342%2C%22y%22%3A277.0663%2C%22width%22%3A105.55520000000001%2C%22height%22%3A24.487169999999992%2C%22text%22%3A%22setState0%22%7D%2C%7B%22x%22%3A1181.4014%2C%22y%22%3A277.2348%2C%22width%22%3A149.2242000000001%2C%22height%22%3A24.159099999999967%2C%22text%22%3A%22forceupdate0%22%7D%2C%7B%22x%22%3A429.52423%2C%22y%22%3A278.482%2C%22width%22%3A146.20157000000006%2C%22height%22%3A21.852319999999963%2C%22text%22%3A%22constructor%22%7D%2C%7B%22x%22%3A789.6945%2C%22y%22%3A278.56836%2C%22width%22%3A118.61495000000002%2C%22height%22%3A24.345979999999997%2C%22text%22%3A%22Newprops%22%7D%2C%7B%22x%22%3A65.057434%2C%22y%22%3A403.83368%2C%22width%22%3A168.535996%2C%22height%22%3A30.562989999999957%2C%22text%22%3A%22%5C%22Render%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A683.7521%2C%22y%22%3A406.62228%2C%22width%22%3A317.2033399999999%2C%22height%22%3A23.17124000000001%2C%22text%22%3A%22geDerivedStateFromProps%22%7D%2C%7B%22x%22%3A32.135193%2C%22y%22%3A451.14737%2C%22width%22%3A222.734057%2C%22height%22%3A26.099149999999952%2C%22text%22%3A%22%E7%BA%AF%E5%87%80%E4%B8%94%E4%B8%8D%E5%8C%85%E5%90%AB%E5%89%AF%E4%BD%9C%E7%94%A8.%22%7D%2C%7B%22x%22%3A53.66997%2C%22y%22%3A485.885%2C%22width%22%3A189.78888%2C%22height%22%3A23.99394000000001%2C%22text%22%3A%22%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%ABReact%E6%9A%82%22%7D%2C%7B%22x%22%3A31.578535%2C%22y%22%3A518.2777%2C%22width%22%3A223.29416500000002%2C%22height%22%3A26.150949999999966%2C%22text%22%3A%22%E5%81%9C%2C%E4%B8%AD%E6%AD%A2%E6%88%96%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8.%22%7D%2C%7B%22x%22%3A797.6504%2C%22y%22%3A529.5759%2C%22width%22%3A302.2396000000001%2C%22height%22%3A24.39569999999992%2C%22text%22%3A%22shouldComponentUpdate%22%7D%2C%7B%22x%22%3A800.4475%2C%22y%22%3A655.02136%2C%22width%22%3A84.44370000000004%2C%22height%22%3A22.833940000000098%2C%22text%22%3A%22render%22%7D%2C%7B%22x%22%3A40.112236%2C%22y%22%3A751.21606%2C%22width%22%3A218.59342400000003%2C%22height%22%3A27.439880000000016%2C%22text%22%3A%22%5C%22Pre-commit%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A892.9354%2C%22y%22%3A777.03143%2C%22width%22%3A312.08119999999997%2C%22height%22%3A27.194470000000024%2C%22text%22%3A%22getSnapshotBeforeUpdate%22%7D%2C%7B%22x%22%3A65.029465%2C%22y%22%3A797.0733%2C%22width%22%3A158.84905500000002%2C%22height%22%3A24.70150000000001%2C%22text%22%3A%22%E5%8F%AF%E4%BB%A5%E8%AF%BB%E5%8F%96DOM.%22%7D%2C%7B%22x%22%3A703.8045%2C%22y%22%3A900.64215%2C%22width%22%3A280.66846%2C%22height%22%3A26.637249999999995%2C%22text%22%3A%22React%E6%9B%B4%E6%96%B0DOM%E5%92%8Crefs%22%7D%2C%7B%22x%22%3A62.425438%2C%22y%22%3A922.55695%2C%22width%22%3A175.80625199999997%2C%22height%22%3A30.913549999999987%2C%22text%22%3A%22%5C%22Commit%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A38.901234%2C%22y%22%3A972.03613%2C%22width%22%3A223.28864600000003%2C%22height%22%3A24.091670000000022%2C%22text%22%3A%22%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8DOM%2C%E8%BF%90%E8%A1%8C%22%7D%2C%7B%22x%22%3A43.10812%2C%22y%22%3A1005.7187%2C%22width%22%3A199.20749%2C%22height%22%3A25.131299999999896%2C%22text%22%3A%22%E5%89%AF%E4%BD%9C%E7%94%A8%2C%E5%AE%89%E6%8E%92%E6%9B%B4%E6%96%B0.%22%7D%2C%7B%22x%22%3A910.055%2C%22y%22%3A1030.2579%2C%22width%22%3A280.11469999999997%2C%22height%22%3A28.113599999999906%2C%22text%22%3A%22componentDidupdate%22%7D%2C%7B%22x%22%3A1465.0714%2C%22y%22%3A1030.6844%2C%22width%22%3A305.0028%2C%22height%22%3A28.33459999999991%2C%22text%22%3A%22componentwillUnmount%22%7D%2C%7B%22x%22%3A371.01666%2C%22y%22%3A1033.0415%2C%22width%22%3A264.53463999999997%2C%22height%22%3A23.011999999999944%2C%22text%22%3A%22componentDidMount%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f9f7%22%2C%22id%22%3A%22V9laI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h4 data-lake-id=\"02fb1ce09342004ea0ec71aaca08fc75\" id=\"02fb1ce09342004ea0ec71aaca08fc75\"><span data-lake-id=\"uac432fe6\" id=\"uac432fe6\">1）组件挂载阶段</span></h4><p data-lake-id=\"55e64a9665409c4ba4c4f45e9d53e0c0\" id=\"55e64a9665409c4ba4c4f45e9d53e0c0\" style=\"text-align: justify\"><span data-lake-id=\"u2341116a\" id=\"u2341116a\">挂载阶段组件被创建，然后组件实例插入到 DOM 中，完成组件的第一次渲染，该过程只会发生一次，在此阶段会依次调用以下这些方法：</span></p><ul list=\"ubc9cabc1\"><li fid=\"u8c3fe573\" data-lake-id=\"f039a4541282b921903b3bd8553aefeb\" id=\"f039a4541282b921903b3bd8553aefeb\"><span data-lake-id=\"u2add5573\" id=\"u2add5573\">constructor</span></li><li fid=\"u8c3fe573\" data-lake-id=\"09fe2a1c3d9f3fab5fcd2b57f027a00e\" id=\"09fe2a1c3d9f3fab5fcd2b57f027a00e\"><span data-lake-id=\"ub94623b2\" id=\"ub94623b2\">getDerivedStateFromProps</span></li><li fid=\"u8c3fe573\" data-lake-id=\"315eaac227945ee6736cb879ed58a4f7\" id=\"315eaac227945ee6736cb879ed58a4f7\"><span data-lake-id=\"ucac385ff\" id=\"ucac385ff\">render</span></li><li fid=\"u8c3fe573\" data-lake-id=\"e15816da2784ff6f8fd5835bd8b859e3\" id=\"e15816da2784ff6f8fd5835bd8b859e3\"><span data-lake-id=\"u35433d1b\" id=\"u35433d1b\">componentDidMount</span></li></ul><h5 data-lake-id=\"990b529c03553726ffcb9baa075672c9\" id=\"990b529c03553726ffcb9baa075672c9\"><span data-lake-id=\"u39e72e3b\" id=\"u39e72e3b\">（1）</span><span data-lake-id=\"ua7f4eb7c\" id=\"ua7f4eb7c\">constructor</span></h5><p data-lake-id=\"0b0943c9b0a32a789a58a52a3996e1a8\" id=\"0b0943c9b0a32a789a58a52a3996e1a8\"><span data-lake-id=\"ub1571fa0\" id=\"ub1571fa0\">组件的构造函数，第一个被执行，若没有显式定义它，会有一个默认的构造函数，但是若显式定义了构造函数，我们必须在构造函数中执行 </span><code data-lake-id=\"ucbe13222\" id=\"ucbe13222\"><span data-lake-id=\"u58409efa\" id=\"u58409efa\">super(props)</span></code><span data-lake-id=\"u673cf194\" id=\"u673cf194\">，否则无法在构造函数中拿到this。</span></p><p data-lake-id=\"100b9355f686d51348189eacee03cbb9\" id=\"100b9355f686d51348189eacee03cbb9\"><br></p><p data-lake-id=\"579a318efaa49f01feee64b545ff4d22\" id=\"579a318efaa49f01feee64b545ff4d22\"><span data-lake-id=\"u86d500c0\" id=\"u86d500c0\">如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数</span><strong><span data-lake-id=\"u910faec1\" id=\"u910faec1\">Constructor</span></strong><span data-lake-id=\"ue9282ace\" id=\"ue9282ace\">。</span></p><p data-lake-id=\"c7518b69e4becd96b3924a9dc8282f70\" id=\"c7518b69e4becd96b3924a9dc8282f70\"><br></p><p data-lake-id=\"ca38e37665de765e9459b5174accc6cf\" id=\"ca38e37665de765e9459b5174accc6cf\"><span data-lake-id=\"u6da2695b\" id=\"u6da2695b\">constructor中通常只做两件事： </span></p><ul list=\"ud10ef781\"><li fid=\"u2a1891ef\" data-lake-id=\"89dc2c3afc16ff9d2d0168c6ab8f324a\" id=\"89dc2c3afc16ff9d2d0168c6ab8f324a\"><span data-lake-id=\"u9deaee64\" id=\"u9deaee64\">初始化组件的 state</span></li><li fid=\"u2a1891ef\" data-lake-id=\"fd7f42ea2a8dc87fa08abbd636234a61\" id=\"fd7f42ea2a8dc87fa08abbd636234a61\"><span data-lake-id=\"u5114e20c\" id=\"u5114e20c\">给事件处理方法绑定 this</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22constructor(props)%20%7B%5Cn%20%20super(props)%3B%5Cn%20%20%2F%2F%20%E4%B8%8D%E8%A6%81%E5%9C%A8%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%AD%E8%B0%83%E7%94%A8%20setState%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E7%BB%99%20state%20%E8%AE%BE%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%80%BC%5Cn%20%20this.state%20%3D%20%7B%20counter%3A%200%20%7D%5Cn%20%20this.handleClick%20%3D%20this.handleClick.bind(this)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%222lsCK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"745311f3d7939921b26f24a37cec762d\" id=\"745311f3d7939921b26f24a37cec762d\"><span data-lake-id=\"u63bf9de8\" id=\"u63bf9de8\">（2）getDerivedStateFromProps</span></h5><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22static%20getDerivedStateFromProps(props%2C%20state)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%226o5rq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"0ab5f94bc412455c04c22d54845f9cae\" id=\"0ab5f94bc412455c04c22d54845f9cae\" style=\"text-align: justify\"><span data-lake-id=\"u5a705905\" id=\"u5a705905\">这是个静态方法，所以不能在这个函数里使用 </span><code data-lake-id=\"u79618d7a\" id=\"u79618d7a\"><span data-lake-id=\"ud03e5c4d\" id=\"ud03e5c4d\">this</span></code><span data-lake-id=\"u1e191716\" id=\"u1e191716\">，有两个参数 </span><code data-lake-id=\"ud8fe69ff\" id=\"ud8fe69ff\"><span data-lake-id=\"u04723d21\" id=\"u04723d21\">props</span></code><span data-lake-id=\"u575a9c62\" id=\"u575a9c62\"> 和 </span><code data-lake-id=\"u8ea99a78\" id=\"u8ea99a78\"><span data-lake-id=\"u86f711a8\" id=\"u86f711a8\">state</span></code><span data-lake-id=\"u69ec743c\" id=\"u69ec743c\">，分别指接收到的新参数和当前组件的 </span><code data-lake-id=\"ue8c1077d\" id=\"ue8c1077d\"><span data-lake-id=\"u3f18a5d4\" id=\"u3f18a5d4\">state</span></code><span data-lake-id=\"u1e460cbe\" id=\"u1e460cbe\"> 对象，这个函数会返回一个对象用来更新当前的 </span><code data-lake-id=\"u9e39d904\" id=\"u9e39d904\"><span data-lake-id=\"ud1ed7017\" id=\"ud1ed7017\">state</span></code><span data-lake-id=\"uf951328a\" id=\"uf951328a\"> 对象，如果不需要更新可以返回 </span><code data-lake-id=\"u5d04665a\" id=\"u5d04665a\"><span data-lake-id=\"u6f034b92\" id=\"u6f034b92\">null</span></code><span data-lake-id=\"u0c73d085\" id=\"u0c73d085\">。</span></p><p data-lake-id=\"4936e3c36e88805782063a17cf36e37c\" id=\"4936e3c36e88805782063a17cf36e37c\" style=\"text-align: justify\"><br></p><p data-lake-id=\"80063052b72155f1260f7a44e9026838\" id=\"80063052b72155f1260f7a44e9026838\" style=\"text-align: justify\"><span data-lake-id=\"u55c2b636\" id=\"u55c2b636\">该函数会在装载时，接收到新的 </span><code data-lake-id=\"ue789a8a7\" id=\"ue789a8a7\"><span data-lake-id=\"u4477cfae\" id=\"u4477cfae\">props</span></code><span data-lake-id=\"uee164fd8\" id=\"uee164fd8\"> 或者调用了 </span><code data-lake-id=\"ucaad8c20\" id=\"ucaad8c20\"><span data-lake-id=\"u4ff5f62a\" id=\"u4ff5f62a\">setState</span></code><span data-lake-id=\"ufd2bd3da\" id=\"ufd2bd3da\"> 和 </span><code data-lake-id=\"ufe4326b0\" id=\"ufe4326b0\"><span data-lake-id=\"u58121973\" id=\"u58121973\">forceUpdate</span></code><span data-lake-id=\"u69bacaa5\" id=\"u69bacaa5\"> 时被调用。如当接收到新的属性想修改 </span><code data-lake-id=\"u2b90f0fb\" id=\"u2b90f0fb\"><span data-lake-id=\"uae13fbfe\" id=\"uae13fbfe\">state</span></code><span data-lake-id=\"u2437f0b7\" id=\"u2437f0b7\"> ，就可以使用。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%BD%93%20props.counter%20%E5%8F%98%E5%8C%96%E6%97%B6%EF%BC%8C%E8%B5%8B%E5%80%BC%E7%BB%99%20state%20%5Cnclass%20App%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%5Cn%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20counter%3A%200%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20static%20getDerivedStateFromProps(props%2C%20state)%20%7B%5Cn%20%20%20%20if%20(props.counter%20!%3D%3D%20state.counter)%20%7B%5Cn%20%20%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20%20%20counter%3A%20props.counter%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20null%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20handleClick%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20counter%3A%20this.state.counter%20%2B%201%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Ch1%20onClick%3D%7Bthis.handleClick%7D%3EHello%2C%20world!%7Bthis.state.counter%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%220CV07%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4a6c2dfab86a22c51511a368deea5de2\" id=\"4a6c2dfab86a22c51511a368deea5de2\" style=\"text-align: justify\"><span data-lake-id=\"u8a8ee120\" id=\"u8a8ee120\">现在可以显式传入 </span><code data-lake-id=\"u5c1dc676\" id=\"u5c1dc676\"><span data-lake-id=\"u1c5f70f7\" id=\"u1c5f70f7\">counter</span></code><span data-lake-id=\"u7cbbf121\" id=\"u7cbbf121\"> ，但是这里有个问题，如果想要通过点击实现 </span><code data-lake-id=\"u127884e6\" id=\"u127884e6\"><span data-lake-id=\"ue8c47387\" id=\"ue8c47387\">state.counter</span></code><span data-lake-id=\"u0a9781ff\" id=\"u0a9781ff\"> 的增加，但这时会发现值不会发生任何变化，一直保持 </span><code data-lake-id=\"ub43ba096\" id=\"ub43ba096\"><span data-lake-id=\"ub3b882c3\" id=\"ub3b882c3\">props</span></code><span data-lake-id=\"u4f52b73c\" id=\"u4f52b73c\"> 传进来的值。这是由于在 React 16.4^ 的版本中 </span><code data-lake-id=\"u16bb15ab\" id=\"u16bb15ab\"><span data-lake-id=\"uf6398ccc\" id=\"uf6398ccc\">setState</span></code><span data-lake-id=\"u411d1f11\" id=\"u411d1f11\"> 和 </span><code data-lake-id=\"u046a7e88\" id=\"u046a7e88\"><span data-lake-id=\"u0f2eb8af\" id=\"u0f2eb8af\">forceUpdate</span></code><span data-lake-id=\"uf24bb592\" id=\"uf24bb592\"> 也会触发这个生命周期，所以当组件内部 </span><code data-lake-id=\"u460b7c30\" id=\"u460b7c30\"><span data-lake-id=\"u7ec0cda2\" id=\"u7ec0cda2\">state</span></code><span data-lake-id=\"u8715fde5\" id=\"u8715fde5\"> 变化后，就会重新走这个方法，同时会把 </span><code data-lake-id=\"u0e78a369\" id=\"u0e78a369\"><span data-lake-id=\"u9a97ca50\" id=\"u9a97ca50\">state</span></code><span data-lake-id=\"ub183f05b\" id=\"ub183f05b\"> 值赋值为 </span><code data-lake-id=\"ue07ab8fa\" id=\"ue07ab8fa\"><span data-lake-id=\"u2a3367d3\" id=\"u2a3367d3\">props</span></code><span data-lake-id=\"uc428dc6d\" id=\"uc428dc6d\"> 的值。因此需要多加一个字段来记录之前的 </span><code data-lake-id=\"uc77c4557\" id=\"uc77c4557\"><span data-lake-id=\"u6f69112b\" id=\"u6f69112b\">props</span></code><span data-lake-id=\"ua88352b4\" id=\"ua88352b4\"> 值，这样就会解决上述问题。具体如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E8%BF%99%E9%87%8C%E5%8F%AA%E5%88%97%E5%87%BA%E9%9C%80%E8%A6%81%E5%8F%98%E5%8C%96%E7%9A%84%E5%9C%B0%E6%96%B9%5Cnclass%20App%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%5Cn%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20%2F%2F%20%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%20preCounter%20%E6%9D%A5%E8%AE%B0%E5%BD%95%E4%B9%8B%E5%89%8D%E7%9A%84%20props%20%E4%BC%A0%E6%9D%A5%E7%9A%84%E5%80%BC%5Cn%20%20%20%20%20%20preCounter%3A%200%2C%5Cn%20%20%20%20%20%20counter%3A%200%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20static%20getDerivedStateFromProps(props%2C%20state)%20%7B%5Cn%20%20%20%20%2F%2F%20%E8%B7%9F%20state.preCounter%20%E8%BF%9B%E8%A1%8C%E6%AF%94%E8%BE%83%5Cn%20%20%20%20if%20(props.counter%20!%3D%3D%20state.preCounter)%20%7B%5Cn%20%20%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20%20%20counter%3A%20props.counter%2C%5Cn%20%20%20%20%20%20%20%20preCounter%3A%20props.counter%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20null%5Cn%20%20%7D%5Cn%20%20handleClick%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20counter%3A%20this.state.counter%20%2B%201%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Ch1%20onClick%3D%7Bthis.handleClick%7D%3EHello%2C%20world!%7Bthis.state.counter%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jEjTs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"9c9f3d8dc1502c5d49e6ceee41d52061\" id=\"9c9f3d8dc1502c5d49e6ceee41d52061\"><span data-lake-id=\"u34f9cee2\" id=\"u34f9cee2\">（3）render</span></h5><p data-lake-id=\"0b884555cd84473020588b13fe2faaba\" id=\"0b884555cd84473020588b13fe2faaba\" style=\"text-align: justify\"><span data-lake-id=\"u138a3dab\" id=\"u138a3dab\">render是React 中最核心的方法，一个组件中必须要有这个方法，它会根据状态 </span><code data-lake-id=\"u428856a1\" id=\"u428856a1\"><span data-lake-id=\"u280082da\" id=\"u280082da\">state</span></code><span data-lake-id=\"ub462ff3b\" id=\"ub462ff3b\"> 和属性 </span><code data-lake-id=\"ua6eecb9f\" id=\"ua6eecb9f\"><span data-lake-id=\"u2e03089d\" id=\"u2e03089d\">props</span></code><span data-lake-id=\"u8588869b\" id=\"u8588869b\"> 渲染组件。这个函数只做一件事，就是返回需要渲染的内容，所以不要在这个函数内做其他业务逻辑，通常调用该方法会返回以下类型中一个：</span></p><ul list=\"ua20e3ce1\"><li fid=\"uf2282e34\" data-lake-id=\"214e7e766321d9f378705ef7790fca5f\" id=\"214e7e766321d9f378705ef7790fca5f\"><strong><span data-lake-id=\"ua43c77f5\" id=\"ua43c77f5\">React 元素</span></strong><span data-lake-id=\"uf6b22de6\" id=\"uf6b22de6\">：这里包括原生的 DOM 以及 React 组件；</span></li><li fid=\"uf2282e34\" data-lake-id=\"5b661cb2e58f36bfbf70884fa2056337\" id=\"5b661cb2e58f36bfbf70884fa2056337\"><strong><span data-lake-id=\"u0ad16a16\" id=\"u0ad16a16\">数组和 Fragment（片段）</span></strong><span data-lake-id=\"ueed289aa\" id=\"ueed289aa\">：可以返回多个元素；</span></li><li fid=\"uf2282e34\" data-lake-id=\"162a9947574daf0f1b03ed9c2dc99767\" id=\"162a9947574daf0f1b03ed9c2dc99767\"><strong><span data-lake-id=\"u0b7b974f\" id=\"u0b7b974f\">Portals（插槽）</span></strong><span data-lake-id=\"u94cf19a0\" id=\"u94cf19a0\">：可以将子元素渲染到不同的 DOM 子树种；</span></li><li fid=\"uf2282e34\" data-lake-id=\"2b732975955b73d60e18f6ad52698b8a\" id=\"2b732975955b73d60e18f6ad52698b8a\"><strong><span data-lake-id=\"uc977e347\" id=\"uc977e347\">字符串和数字</span></strong><span data-lake-id=\"u56f4f15c\" id=\"u56f4f15c\">：被渲染成 DOM 中的 text 节点；</span></li><li fid=\"uf2282e34\" data-lake-id=\"555509a7528beed9a4dced09885b4a75\" id=\"555509a7528beed9a4dced09885b4a75\"><strong><span data-lake-id=\"uc0201b7a\" id=\"uc0201b7a\">布尔值或 null</span></strong><span data-lake-id=\"u5a2f64d1\" id=\"u5a2f64d1\">：不渲染任何内容。</span></li></ul><h5 data-lake-id=\"cbe03af0f49ff899691562ef8af8cc5f\" id=\"cbe03af0f49ff899691562ef8af8cc5f\"><span data-lake-id=\"ue8bc5514\" id=\"ue8bc5514\">（4）componentDidMount() </span></h5><p data-lake-id=\"64768435cfb6237b3efe31eb1fcba7dc\" id=\"64768435cfb6237b3efe31eb1fcba7dc\"><span data-lake-id=\"ufccd6aaa\" id=\"ufccd6aaa\">componentDidMount()</span><span data-lake-id=\"u809cca9e\" id=\"u809cca9e\">会在组件挂载后（插入 DOM 树中）立即调。该阶段通常进行以下操作：</span></p><ul list=\"u6748a09b\"><li fid=\"ua69fe2d1\" data-lake-id=\"57840bc2f102ccf37200bbecca1ade53\" id=\"57840bc2f102ccf37200bbecca1ade53\"><span data-lake-id=\"u1df6dbe8\" id=\"u1df6dbe8\">执行依赖于DOM的操作；</span></li><li fid=\"ua69fe2d1\" data-lake-id=\"a8dcc8bdc7032f5120aeae359897f344\" id=\"a8dcc8bdc7032f5120aeae359897f344\"><span data-lake-id=\"u3caf79f8\" id=\"u3caf79f8\">发送网络请求；（官方建议）</span></li><li fid=\"ua69fe2d1\" data-lake-id=\"8d61e160e79bc6c303a9df8a8ae12dde\" id=\"8d61e160e79bc6c303a9df8a8ae12dde\"><span data-lake-id=\"u50f1c568\" id=\"u50f1c568\">添加订阅消息（会在componentWillUnmount取消订阅）；</span></li></ul><p data-lake-id=\"7653b82a49a8c66e192a98ca96718012\" id=\"7653b82a49a8c66e192a98ca96718012\" style=\"text-align: justify\"><br></p><p data-lake-id=\"7884485258eab3366066b2c1a37da904\" id=\"7884485258eab3366066b2c1a37da904\" style=\"text-align: justify\"><span data-lake-id=\"ub52872e7\" id=\"ub52872e7\">如果在 </span><code data-lake-id=\"u9a58d8d8\" id=\"u9a58d8d8\"><span data-lake-id=\"u0f98024c\" id=\"u0f98024c\">componentDidMount</span></code><span data-lake-id=\"ua232182c\" id=\"ua232182c\"> 中调用 </span><code data-lake-id=\"u2aaad970\" id=\"u2aaad970\"><span data-lake-id=\"ub60a8468\" id=\"ub60a8468\">setState</span></code><span data-lake-id=\"u452b045d\" id=\"u452b045d\"> ，就会触发一次额外的渲染，多调用了一次 </span><code data-lake-id=\"u813a2a88\" id=\"u813a2a88\"><span data-lake-id=\"ub2d10c2e\" id=\"ub2d10c2e\">render</span></code><span data-lake-id=\"ufdcb330b\" id=\"ufdcb330b\"> 函数，由于它是在浏览器刷新屏幕前执行的，所以用户对此是没有感知的，但是我应当避免这样使用，这样会带来一定的性能问题，尽量是在 </span><code data-lake-id=\"u659efd7c\" id=\"u659efd7c\"><span data-lake-id=\"ub7f254cb\" id=\"ub7f254cb\">constructor</span></code><span data-lake-id=\"u1974b289\" id=\"u1974b289\"> 中初始化 </span><code data-lake-id=\"u7cefb833\" id=\"u7cefb833\"><span data-lake-id=\"uf61865d5\" id=\"uf61865d5\">state</span></code><span data-lake-id=\"u2d1e950d\" id=\"u2d1e950d\"> 对象。</span></p><p data-lake-id=\"c95fd24d466a4bacadf17b0a60301bb9\" id=\"c95fd24d466a4bacadf17b0a60301bb9\" style=\"text-align: justify\"><br></p><p data-lake-id=\"8529fd89eb75e1454866f3468edbd836\" id=\"8529fd89eb75e1454866f3468edbd836\" style=\"text-align: justify\"><span data-lake-id=\"u7448cc1b\" id=\"u7448cc1b\">在组件装载之后，将计数数字变为1：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20App%20extends%20React.Component%20%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%5Cn%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20counter%3A%200%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20componentDidMount%20()%20%7B%5Cn%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20counter%3A%201%5Cn%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%20%20render%20()%20%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22counter%5C%22%3E%5Cn%20%20%20%20%20%20%20%20counter%E5%80%BC%3A%20%7B%20this.state.counter%20%7D%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kaHP2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"a3da2ae1aa503f9f044305c6d3a53c1d\" id=\"a3da2ae1aa503f9f044305c6d3a53c1d\"><span data-lake-id=\"ucdf84f95\" id=\"ucdf84f95\">2）组件更新阶段</span></h4><p data-lake-id=\"c5e73a2ba902e01792d1d93642c82f45\" id=\"c5e73a2ba902e01792d1d93642c82f45\" style=\"text-align: justify\"><span data-lake-id=\"uf6a33700\" id=\"uf6a33700\">当组件的 </span><code data-lake-id=\"u41149037\" id=\"u41149037\"><span data-lake-id=\"u54c475ac\" id=\"u54c475ac\">props</span></code><span data-lake-id=\"u67c7a5ea\" id=\"u67c7a5ea\"> 改变了，或组件内部调用了 </span><code data-lake-id=\"u48c04703\" id=\"u48c04703\"><span data-lake-id=\"u5794e8e2\" id=\"u5794e8e2\">setState/forceUpdate</span></code><span data-lake-id=\"u7e550cff\" id=\"u7e550cff\">，会触发更新重新渲染，这个过程可能会发生多次。这个阶段会依次调用下面这些方法：</span></p><ul list=\"ue17e88d0\"><li fid=\"udd1324fc\" data-lake-id=\"de6814c4949d84f77872b69f90ccc113\" id=\"de6814c4949d84f77872b69f90ccc113\"><span data-lake-id=\"u033ead65\" id=\"u033ead65\">getDerivedStateFromProps</span></li><li fid=\"udd1324fc\" data-lake-id=\"013d7b02843a22902097f1199b3daf21\" id=\"013d7b02843a22902097f1199b3daf21\"><span data-lake-id=\"u32edc6aa\" id=\"u32edc6aa\">shouldComponentUpdate</span></li><li fid=\"udd1324fc\" data-lake-id=\"80e5b3457a962f3730fb7bf6805be973\" id=\"80e5b3457a962f3730fb7bf6805be973\"><span data-lake-id=\"u916ada59\" id=\"u916ada59\">render</span></li><li fid=\"udd1324fc\" data-lake-id=\"f1680fc68b2fd4abea1e3ba2c254d19c\" id=\"f1680fc68b2fd4abea1e3ba2c254d19c\"><span data-lake-id=\"ub9c60a61\" id=\"ub9c60a61\">getSnapshotBeforeUpdate</span></li><li fid=\"udd1324fc\" data-lake-id=\"4d8418e74814653020bbe0585dcf2f9b\" id=\"4d8418e74814653020bbe0585dcf2f9b\"><span data-lake-id=\"ub0148466\" id=\"ub0148466\">componentDidUpdate</span></li></ul><h5 data-lake-id=\"0146f3a062e986e0997ff5f5883b8b0d\" id=\"0146f3a062e986e0997ff5f5883b8b0d\"><span data-lake-id=\"u86cebcc5\" id=\"u86cebcc5\">（1）</span><span data-lake-id=\"u76d9dd44\" id=\"u76d9dd44\">shouldComponentUpdate</span></h5><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22shouldComponentUpdate(nextProps%2C%20nextState)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mbNjY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"e3c791c6425cf0e101dd2f710e4f9ef8\" id=\"e3c791c6425cf0e101dd2f710e4f9ef8\" style=\"text-align: justify\"><span data-lake-id=\"u885be01d\" id=\"u885be01d\">在说这个生命周期函数之前，来看两个问题：</span></p><ul list=\"u737e5c09\"><li fid=\"ue8e09d8d\" data-lake-id=\"2f3ab1db9a9b61f94f5f7890f41e3af1\" id=\"2f3ab1db9a9b61f94f5f7890f41e3af1\"><strong><span data-lake-id=\"u4660bc39\" id=\"u4660bc39\">setState 函数在任何情况下都会导致组件重新渲染吗？例如下面这种情况：</span></strong></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22this.setState(%7Bnumber%3A%20this.state.number%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22K8QjB%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u3d2478dd\"><li fid=\"u72940212\" data-lake-id=\"23f42ae415bd212359d3792c8f9758a4\" id=\"23f42ae415bd212359d3792c8f9758a4\"><strong><span data-lake-id=\"u29526212\" id=\"u29526212\">如果没有调用 setState，props 值也没有变化，是不是组件就不会重新渲染？</span></strong></li></ul><p data-lake-id=\"456bfd489b8a03960ed2954e1ee0a7c8\" id=\"456bfd489b8a03960ed2954e1ee0a7c8\"><br></p><p data-lake-id=\"2b43be992c673f65d5b1a2f74aa96684\" id=\"2b43be992c673f65d5b1a2f74aa96684\"><span data-lake-id=\"u83923796\" id=\"u83923796\">第一个问题答案是 </span><strong><span data-lake-id=\"u7ec2be30\" id=\"u7ec2be30\">会</span></strong><span data-lake-id=\"ub41ff4bc\" id=\"ub41ff4bc\"> ，第二个问题如果是父组件重新渲染时，不管传入的 props 有没有变化，都会引起子组件的重新渲染。</span></p><p data-lake-id=\"d6c8f0b43f6f7b8b23cfb47e4a34d189\" id=\"d6c8f0b43f6f7b8b23cfb47e4a34d189\"><br></p><p data-lake-id=\"931683590e0401ce3b51646370a4bbe8\" id=\"931683590e0401ce3b51646370a4bbe8\"><span data-lake-id=\"ucf3b599b\" id=\"ucf3b599b\">那么有没有什么方法解决在这两个场景下不让组件重新渲染进而提升性能呢？这个时候 </span><code data-lake-id=\"uf6c7ed74\" id=\"uf6c7ed74\"><span data-lake-id=\"uae78c4f5\" id=\"uae78c4f5\">shouldComponentUpdate</span></code><span data-lake-id=\"ua3c29d15\" id=\"ua3c29d15\"> 登场了，这个生命周期函数是用来提升速度的，它是在重新渲染组件开始前触发的，默认返回 </span><code data-lake-id=\"ue3bcd914\" id=\"ue3bcd914\"><span data-lake-id=\"ud3aaafed\" id=\"ud3aaafed\">true</span></code><span data-lake-id=\"u3495e3a8\" id=\"u3495e3a8\">，可以比较 </span><code data-lake-id=\"u4adbb142\" id=\"u4adbb142\"><span data-lake-id=\"uf8281f88\" id=\"uf8281f88\">this.props</span></code><span data-lake-id=\"u8cdb4e8a\" id=\"u8cdb4e8a\"> 和 </span><code data-lake-id=\"u10729492\" id=\"u10729492\"><span data-lake-id=\"u136c2a49\" id=\"u136c2a49\">nextProps</span></code><span data-lake-id=\"ub33617a1\" id=\"ub33617a1\"> ，</span><code data-lake-id=\"u6fe40de5\" id=\"u6fe40de5\"><span data-lake-id=\"u554e7b49\" id=\"u554e7b49\">this.state</span></code><span data-lake-id=\"u708f3af6\" id=\"u708f3af6\"> 和 </span><code data-lake-id=\"u840624b1\" id=\"u840624b1\"><span data-lake-id=\"u3c186abb\" id=\"u3c186abb\">nextState</span></code><span data-lake-id=\"u2a1ce3a0\" id=\"u2a1ce3a0\"> 值是否变化，来确认返回 true 或者 </span><code data-lake-id=\"u20ed9db2\" id=\"u20ed9db2\"><span data-lake-id=\"u9a4a519a\" id=\"u9a4a519a\">false</span></code><span data-lake-id=\"u7c57a25c\" id=\"u7c57a25c\">。当返回 </span><code data-lake-id=\"ue3f95fff\" id=\"ue3f95fff\"><span data-lake-id=\"u24d72dc2\" id=\"u24d72dc2\">false</span></code><span data-lake-id=\"u585fee61\" id=\"u585fee61\"> 时，组件的更新过程停止，后续的 </span><code data-lake-id=\"u4c3776eb\" id=\"u4c3776eb\"><span data-lake-id=\"u05e7fafc\" id=\"u05e7fafc\">render</span></code><span data-lake-id=\"ub8980bb6\" id=\"ub8980bb6\">、</span><code data-lake-id=\"u09eaea16\" id=\"u09eaea16\"><span data-lake-id=\"u7e1fdc68\" id=\"u7e1fdc68\">componentDidUpdate</span></code><span data-lake-id=\"u4243908b\" id=\"u4243908b\"> 也不会被调用。</span></p><p data-lake-id=\"3f131664c4e98e74e04d337511b6da9d\" id=\"3f131664c4e98e74e04d337511b6da9d\" style=\"text-align: justify\"><br></p><p data-lake-id=\"fed7d94d0692f1488b412b6f85855efd\" id=\"fed7d94d0692f1488b412b6f85855efd\" style=\"text-align: justify\"><strong><span data-lake-id=\"uaf15e680\" id=\"uaf15e680\">注意：</span></strong><span data-lake-id=\"uf9b0b715\" id=\"uf9b0b715\">添加 </span><code data-lake-id=\"u00fd9df9\" id=\"u00fd9df9\"><span data-lake-id=\"ued5cc5b1\" id=\"ued5cc5b1\">shouldComponentUpdate</span></code><span data-lake-id=\"u32845329\" id=\"u32845329\"> 方法时，不建议使用深度相等检查（如使用 </span><code data-lake-id=\"u09961d20\" id=\"u09961d20\"><span data-lake-id=\"u52364018\" id=\"u52364018\">JSON.stringify()</span></code><span data-lake-id=\"ufaeddb5e\" id=\"ufaeddb5e\">），因为深比较效率很低，可能会比重新渲染组件效率还低。而且该方法维护比较困难，建议使用该方法会产生明显的性能提升时使用。</span></p><h5 data-lake-id=\"b23068d709f8e4d272ce7ca10fdc862f\" id=\"b23068d709f8e4d272ce7ca10fdc862f\"><span data-lake-id=\"u4895bba9\" id=\"u4895bba9\">（2）getSnapshotBeforeUpdate</span></h5><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22getSnapshotBeforeUpdate(prevProps%2C%20prevState)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22AhAht%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"a2f85210a3c22dfe5906d27d82bf4bf2\" id=\"a2f85210a3c22dfe5906d27d82bf4bf2\" style=\"text-align: justify\"><span data-lake-id=\"u7e13343e\" id=\"u7e13343e\">这个方法在 </span><code data-lake-id=\"ucd79b713\" id=\"ucd79b713\"><span data-lake-id=\"u7b8dd22e\" id=\"u7b8dd22e\">render</span></code><span data-lake-id=\"uf1c26c08\" id=\"uf1c26c08\"> 之后，</span><code data-lake-id=\"u7f2eced7\" id=\"u7f2eced7\"><span data-lake-id=\"u9185c38c\" id=\"u9185c38c\">componentDidUpdate</span></code><span data-lake-id=\"ue7d59e7b\" id=\"ue7d59e7b\"> 之前调用，有两个参数 </span><code data-lake-id=\"ud18881b3\" id=\"ud18881b3\"><span data-lake-id=\"u675304ea\" id=\"u675304ea\">prevProps</span></code><span data-lake-id=\"u5137ab77\" id=\"u5137ab77\"> 和 </span><code data-lake-id=\"u039f02d9\" id=\"u039f02d9\"><span data-lake-id=\"u31c2da9a\" id=\"u31c2da9a\">prevState</span></code><span data-lake-id=\"u7eba8483\" id=\"u7eba8483\">，表示更新之前的 </span><code data-lake-id=\"u7b13c929\" id=\"u7b13c929\"><span data-lake-id=\"u8a2c2fa6\" id=\"u8a2c2fa6\">props</span></code><span data-lake-id=\"u0f83e056\" id=\"u0f83e056\"> 和 </span><code data-lake-id=\"u94c99c68\" id=\"u94c99c68\"><span data-lake-id=\"u36d772ca\" id=\"u36d772ca\">state</span></code><span data-lake-id=\"ud91148bb\" id=\"ud91148bb\">，这个函数必须要和 </span><code data-lake-id=\"ubcead831\" id=\"ubcead831\"><span data-lake-id=\"u7d3b1d2d\" id=\"u7d3b1d2d\">componentDidUpdate</span></code><span data-lake-id=\"udfeec6f3\" id=\"udfeec6f3\"> 一起使用，并且要有一个返回值，默认是 </span><code data-lake-id=\"u8761b4ea\" id=\"u8761b4ea\"><span data-lake-id=\"uf6444f1d\" id=\"uf6444f1d\">null</span></code><span data-lake-id=\"u9efa0237\" id=\"u9efa0237\">，这个返回值作为第三个参数传给 </span><code data-lake-id=\"ufc480698\" id=\"ufc480698\"><span data-lake-id=\"uaec8b601\" id=\"uaec8b601\">componentDidUpdate</span></code><span data-lake-id=\"u844dd3fa\" id=\"u844dd3fa\">。</span></p><h5 data-lake-id=\"c9a33201bd2bff6e9d76db6bfb1dd330\" id=\"c9a33201bd2bff6e9d76db6bfb1dd330\"><span data-lake-id=\"u711e2962\" id=\"u711e2962\">（3）componentDidUpdate</span></h5><p data-lake-id=\"082ccdff4ded87716d0943dfbf6f6fb9\" id=\"082ccdff4ded87716d0943dfbf6f6fb9\"><span data-lake-id=\"u8e8cc313\" id=\"u8e8cc313\">componentDidUpdate() 会在更新后会被立即调用，首次渲染不会执行此方法。 </span><span data-lake-id=\"u6cd60769\" id=\"u6cd60769\">该阶段通常进行以下操作：</span></p><ul list=\"u458aba8b\"><li fid=\"u51fe64b9\" data-lake-id=\"22da43859242a2f1d505a9e7c1bdb08d\" id=\"22da43859242a2f1d505a9e7c1bdb08d\"><span data-lake-id=\"uf19d4e70\" id=\"uf19d4e70\">当组件更新后，对 DOM 进行操作； </span></li><li fid=\"u51fe64b9\" data-lake-id=\"e5cb2d75fbbce47c1033706c38721a79\" id=\"e5cb2d75fbbce47c1033706c38721a79\"><span data-lake-id=\"ue4625637\" id=\"ue4625637\">如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；（例如，当 props 未发生变化时，则不会执行网络请求）。 </span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22componentDidUpdate(prevProps%2C%20prevState%2C%20snapshot)%7B%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22bKT7h%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"86645d1e589e2b79e91022fd25dee811\" id=\"86645d1e589e2b79e91022fd25dee811\"><span data-lake-id=\"u14a091f2\" id=\"u14a091f2\">该方法有三个参数：</span></p><ul list=\"u5d351c82\"><li fid=\"u80aab770\" data-lake-id=\"80c6f8d967dc6f29479143a41ff49e90\" id=\"80c6f8d967dc6f29479143a41ff49e90\"><span data-lake-id=\"ua40ec1ac\" id=\"ua40ec1ac\">prevProps: 更新前的props</span></li><li fid=\"u80aab770\" data-lake-id=\"ec45871af0dd6bf75479a7897a0f00dd\" id=\"ec45871af0dd6bf75479a7897a0f00dd\"><span data-lake-id=\"ud6ee0f16\" id=\"ud6ee0f16\">prevState: 更新前的state</span></li><li fid=\"u80aab770\" data-lake-id=\"1c052bf68b3619fce8720b6d4d259d3d\" id=\"1c052bf68b3619fce8720b6d4d259d3d\"><span data-lake-id=\"u63bf9048\" id=\"u63bf9048\">snapshot: getSnapshotBeforeUpdate()生命周期的返回值</span></li></ul><h4 data-lake-id=\"bb0963bf54cfaf06d7e1be6ac9319e4c\" id=\"bb0963bf54cfaf06d7e1be6ac9319e4c\"><span data-lake-id=\"u4d63920c\" id=\"u4d63920c\">3）组件卸载阶段</span></h4><p data-lake-id=\"5b771af5b3cae2e069101e1ba1d674d5\" id=\"5b771af5b3cae2e069101e1ba1d674d5\"><span data-lake-id=\"u12f664f4\" id=\"u12f664f4\">卸载阶段只有一个生命周期函数，</span><span data-lake-id=\"uaea45139\" id=\"uaea45139\">componentWillUnmount() 会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作：</span></p><ul list=\"uba964175\"><li fid=\"ue031b201\" data-lake-id=\"5eac8fbbc6b6ec2a0f537f2dc8a9be01\" id=\"5eac8fbbc6b6ec2a0f537f2dc8a9be01\"><span data-lake-id=\"u107037a3\" id=\"u107037a3\">清除 timer，取消网络请求或清除</span></li><li fid=\"ue031b201\" data-lake-id=\"19b11d9bdd617214d86d1cb0a31c036e\" id=\"19b11d9bdd617214d86d1cb0a31c036e\"><span data-lake-id=\"u4dd9f652\" id=\"u4dd9f652\">取消在 componentDidMount() 中创建的订阅等；</span></li></ul><p data-lake-id=\"9c8a056a85dffd14600d2b166d6fb432\" id=\"9c8a056a85dffd14600d2b166d6fb432\"><span data-lake-id=\"u8022efd2\" id=\"u8022efd2\">这个生命周期在一个组件被卸载和销毁之前被调用，因此你不应该再这个方法中使用 </span><code data-lake-id=\"u68b0ab15\" id=\"u68b0ab15\"><span data-lake-id=\"u762378fb\" id=\"u762378fb\">setState</span></code><span data-lake-id=\"uc4024072\" id=\"uc4024072\">，因为组件一旦被卸载，就不会再装载，也就不会重新渲染。</span></p><h4 data-lake-id=\"1dcacac1f226a826a8f7e5c0b9c9ccc5\" id=\"1dcacac1f226a826a8f7e5c0b9c9ccc5\"><span data-lake-id=\"u94513516\" id=\"u94513516\">4）错误处理阶段</span></h4><p data-lake-id=\"55a0e5cbd9ca41fcfd28b21c622658c3\" id=\"55a0e5cbd9ca41fcfd28b21c622658c3\"><span data-lake-id=\"uf3ad0cab\" id=\"uf3ad0cab\">componentDidCatch(error, info)，此生命周期在后代组件抛出错误后被调用。 它接收两个参数∶</span></p><ul list=\"u12e50adf\"><li fid=\"u25d1fa83\" data-lake-id=\"6f4974369d044707cc4fbd747d2f7c6b\" id=\"6f4974369d044707cc4fbd747d2f7c6b\"><span data-lake-id=\"u4ba6460f\" id=\"u4ba6460f\">error：抛出的错误。</span></li><li fid=\"u25d1fa83\" data-lake-id=\"32a3ba5d4b9e35f776f465cdd503e91f\" id=\"32a3ba5d4b9e35f776f465cdd503e91f\"><span data-lake-id=\"u88ef93db\" id=\"u88ef93db\">info：带有 componentStack key 的对象，其中包含有关组件引发错误的栈信息</span></li></ul><p data-lake-id=\"c67bbe6714f88f033446327311632a9e\" id=\"c67bbe6714f88f033446327311632a9e\"><br></p><p data-lake-id=\"6af4d51d751fcf28d1aa0abfd886552a\" id=\"6af4d51d751fcf28d1aa0abfd886552a\"><span data-lake-id=\"udfa0953b\" id=\"udfa0953b\">React常见的生命周期如下：</span></p><p data-lake-id=\"6f37ac6886ca09fd01eb09a033136d59\" id=\"6f37ac6886ca09fd01eb09a033136d59\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1606974748814-56e52599-8cda-4305-8135-eaf64d75fbb9.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1126%2C%22height%22%3A467%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A61496%2C%22originWidth%22%3A1126%2C%22originHeight%22%3A467%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%20Reactversion%2016.4%20Language%20%E5%8D%B8%E8%BD%BD%E6%97%B6%20%E6%9B%B4%E6%96%B0%E6%97%B6%20%E6%8C%82%E8%BD%BD%E6%97%B6%20constructor%20setstate0%20forceupdate0%20%5C%22Render%E9%98%B6%E6%AE%B5%5C%22%20Newprops%20%E7%BA%AF%E5%87%80%E4%B8%94%E4%B8%8D%E5%8C%85%E5%90%AB%E5%89%AF%E4%BD%9C%E7%94%A8.%20%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%ABReact%E6%9A%82%20%E5%81%9C%2C%E4%B8%AD%E6%AD%A2%E6%88%96%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8.%20render%20React%E6%9B%B4%E6%96%B0DOM%E5%92%8Crefs%20Commit%E9%98%B6%E6%AE%B5%5C%22%20%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8DOM%2C%E8%BF%90%E8%A1%8C%20%E4%BD%9C%E7%94%A8%2C%E5%AE%89%E6%8E%92%E6%9B%B4%E6%96%B0.%20ComponentWilUnmount%20componentDidupdate%20componentDidMount%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A706.39764%2C%22y%22%3A18.510155%2C%22width%22%3A53.46565999999996%2C%22height%22%3A14.998222000000002%2C%22text%22%3A%22%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%22%7D%2C%7B%22x%22%3A447.22476%2C%22y%22%3A18.738115%2C%22width%22%3A86.79334%2C%22height%22%3A14.925207%2C%22text%22%3A%22Reactversion%22%7D%2C%7B%22x%22%3A549.79047%2C%22y%22%3A19.609463%2C%22width%22%3A38.15643%2C%22height%22%3A13.114031999999998%2C%22text%22%3A%2216.4%22%7D%2C%7B%22x%22%3A612.1921%2C%22y%22%3A21.462324%2C%22width%22%3A64.83140000000003%2C%22height%22%3A13.439692000000004%2C%22text%22%3A%22Language%22%7D%2C%7B%22x%22%3A926.2703%2C%22y%22%3A84.54374%2C%22width%22%3A74.88389999999993%2C%22height%22%3A25.482960000000006%2C%22text%22%3A%22%E5%8D%B8%E8%BD%BD%E6%97%B6%22%7D%2C%7B%22x%22%3A596.0844%2C%22y%22%3A84.514244%2C%22width%22%3A73.70576000000005%2C%22height%22%3A25.417205999999993%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%E6%97%B6%22%7D%2C%7B%22x%22%3A277.8146%2C%22y%22%3A84.9031%2C%22width%22%3A72.39710000000002%2C%22height%22%3A25.820610000000002%2C%22text%22%3A%22%E6%8C%82%E8%BD%BD%E6%97%B6%22%7D%2C%7B%22x%22%3A267.8516%2C%22y%22%3A175.48459%2C%22width%22%3A92.49052999999998%2C%22height%22%3A14.018810000000002%2C%22text%22%3A%22constructor%22%7D%2C%7B%22x%22%3A590.71735%2C%22y%22%3A176.80113%2C%22width%22%3A64.82768999999996%2C%22height%22%3A14.436309999999992%2C%22text%22%3A%22setstate0%22%7D%2C%7B%22x%22%3A692.8486%2C%22y%22%3A177.11963%2C%22width%22%3A91.67886999999996%2C%22height%22%3A14.559599999999989%2C%22text%22%3A%22forceupdate0%22%7D%2C%7B%22x%22%3A41.744358%2C%22y%22%3A177.17282%2C%22width%22%3A107.124742%2C%22height%22%3A18.701809999999995%2C%22text%22%3A%22%5C%22Render%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A482.21597%2C%22y%22%3A177.78146%2C%22width%22%3A71.52983%2C%22height%22%3A12.171009999999995%2C%22text%22%3A%22Newprops%22%7D%2C%7B%22x%22%3A26.189016%2C%22y%22%3A206.145%2C%22width%22%3A130.69866399999998%2C%22height%22%3A15.570759999999979%2C%22text%22%3A%22%E7%BA%AF%E5%87%80%E4%B8%94%E4%B8%8D%E5%8C%85%E5%90%AB%E5%89%AF%E4%BD%9C%E7%94%A8.%22%7D%2C%7B%22x%22%3A33.958855%2C%22y%22%3A227.19817%2C%22width%22%3A120.971195%2C%22height%22%3A14.41977%2C%22text%22%3A%22%E5%8F%AF%E8%83%BD%E4%BC%9A%E8%A2%ABReact%E6%9A%82%22%7D%2C%7B%22x%22%3A24.74641%2C%22y%22%3A247.24855%2C%22width%22%3A134.38926%2C%22height%22%3A14.175190000000015%2C%22text%22%3A%22%E5%81%9C%2C%E4%B8%AD%E6%AD%A2%E6%88%96%E9%87%8D%E6%96%B0%E5%90%AF%E5%8A%A8.%22%7D%2C%7B%22x%22%3A477.7697%2C%22y%22%3A252.1991%2C%22width%22%3A52.81526000000002%2C%22height%22%3A13.784199999999998%2C%22text%22%3A%22render%22%7D%2C%7B%22x%22%3A415.9701%2C%22y%22%3A325.49207%2C%22width%22%3A173.38850000000002%2C%22height%22%3A18.689779999999985%2C%22text%22%3A%22React%E6%9B%B4%E6%96%B0DOM%E5%92%8Crefs%22%7D%2C%7B%22x%22%3A42.881214%2C%22y%22%3A339.78754%2C%22width%22%3A106.225336%2C%22height%22%3A17.674440000000004%2C%22text%22%3A%22Commit%E9%98%B6%E6%AE%B5%5C%22%22%7D%2C%7B%22x%22%3A28.231464%2C%22y%22%3A367.56598%2C%22width%22%3A135.53208600000002%2C%22height%22%3A15.799859999999967%2C%22text%22%3A%22%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8DOM%2C%E8%BF%90%E8%A1%8C%22%7D%2C%7B%22x%22%3A30.474203%2C%22y%22%3A388.20084%2C%22width%22%3A120.873597%2C%22height%22%3A15.890929999999969%2C%22text%22%3A%22%E4%BD%9C%E7%94%A8%2C%E5%AE%89%E6%8E%92%E6%9B%B4%E6%96%B0.%22%7D%2C%7B%22x%22%3A870.69617%2C%22y%22%3A401.1675%2C%22width%22%3A187.9163299999999%2C%22height%22%3A19.102919999999983%2C%22text%22%3A%22ComponentWilUnmount%22%7D%2C%7B%22x%22%3A546.5421%2C%22y%22%3A402.22287%2C%22width%22%3A172.04175999999995%2C%22height%22%3A17.423530000000028%2C%22text%22%3A%22componentDidupdate%22%7D%2C%7B%22x%22%3A233.12424%2C%22y%22%3A403.36005%2C%22width%22%3A162.96926000000002%2C%22height%22%3A16.129909999999995%2C%22text%22%3A%22componentDidMount%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23faf9f8%22%2C%22id%22%3A%22sxIbJ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"263c2ebb71c82ea1787d45b14797633f\" id=\"263c2ebb71c82ea1787d45b14797633f\"><strong><span data-lake-id=\"uc42f01f6\" id=\"uc42f01f6\">React常见生命周期的过程大致如下：</span></strong></p><ul list=\"u13dc9998\"><li fid=\"ucc01d1e8\" data-lake-id=\"90ba36a63a22af2571d27f3fba6b15ac\" id=\"90ba36a63a22af2571d27f3fba6b15ac\"><span data-lake-id=\"u8c52c96b\" id=\"u8c52c96b\">挂载阶段，首先执行</span><span data-lake-id=\"u33b22fc5\" id=\"u33b22fc5\">constructor构造方法，来创建组件</span></li><li fid=\"ucc01d1e8\" data-lake-id=\"cc57e24009b35585e6b242bc0fcbf240\" id=\"cc57e24009b35585e6b242bc0fcbf240\"><span data-lake-id=\"ud4c72fc2\" id=\"ud4c72fc2\">创建完成之后，就会执行render方法，该方法会返回需要渲染的内容</span></li><li fid=\"ucc01d1e8\" data-lake-id=\"2539dacbb2c03e48ab0bdea72ce747c1\" id=\"2539dacbb2c03e48ab0bdea72ce747c1\"><span data-lake-id=\"u45905247\" id=\"u45905247\">随后，React会将需要渲染的内容挂载到DOM树上</span></li><li fid=\"ucc01d1e8\" data-lake-id=\"d7e9db7b666367c7bb344258f8e7cabe\" id=\"d7e9db7b666367c7bb344258f8e7cabe\"><strong><span data-lake-id=\"ue814a408\" id=\"ue814a408\">挂载完成之后就会执行</span></strong><strong><span data-lake-id=\"u2012af9d\" id=\"u2012af9d\">componentDidMount生命周期函数</span></strong></li><li fid=\"ucc01d1e8\" data-lake-id=\"bf80f1cda9b17c5184ddf8ab7dfc00aa\" id=\"bf80f1cda9b17c5184ddf8ab7dfc00aa\"><span data-lake-id=\"u93b3a990\" id=\"u93b3a990\">如果我们给组件创建一个props（用于组件通信）、调用setState（更改state中的数据）、调用forceUpdate（强制更新组件）时，都会重新调用render函数</span></li><li fid=\"ucc01d1e8\" data-lake-id=\"96b6089eda500dd38272d14a6109b645\" id=\"96b6089eda500dd38272d14a6109b645\"><span data-lake-id=\"u974548dc\" id=\"u974548dc\">render函数重新执行之后，就会重新进行DOM树的挂载</span></li><li fid=\"ucc01d1e8\" data-lake-id=\"033ee7f5a02a6e5fc97a373c88cd31fb\" id=\"033ee7f5a02a6e5fc97a373c88cd31fb\"><strong><span data-lake-id=\"uaa39ef63\" id=\"uaa39ef63\">挂载完成之后就会执行</span></strong><strong><span data-lake-id=\"u13799af6\" id=\"u13799af6\">componentDidUpdate生命周期函数</span></strong></li><li fid=\"ucc01d1e8\" data-lake-id=\"d20a7bdf67f85560b76e130189a4fab5\" id=\"d20a7bdf67f85560b76e130189a4fab5\"><strong><span data-lake-id=\"u0da31c8e\" id=\"u0da31c8e\">当移除组件时，就会执行</span></strong><strong><span data-lake-id=\"u3a0daecc\" id=\"u3a0daecc\">componentWillUnmount生命周期函数</span></strong></li></ul><p data-lake-id=\"2b8488c569675dea18dbca31e1922535\" id=\"2b8488c569675dea18dbca31e1922535\"><br></p><p data-lake-id=\"168819fff00aea396e0d950f05aeded8\" id=\"168819fff00aea396e0d950f05aeded8\"><strong><span data-lake-id=\"udb7056f5\" id=\"udb7056f5\">React主要生命周期总结：</span></strong></p><ol list=\"ubdaeee2c\"><li fid=\"u9e10a76c\" data-lake-id=\"fcfc744e5d13fd6dc212cde767fc05ee\" id=\"fcfc744e5d13fd6dc212cde767fc05ee\"><strong><span data-lake-id=\"ufd2e7688\" id=\"ufd2e7688\">getDefaultProps</span></strong><span data-lake-id=\"uc98d719d\" id=\"uc98d719d\">：这个函数会在组件创建之前被调用一次（有且仅有一次），它被用来初始化组件的 Props；</span></li><li fid=\"u9e10a76c\" data-lake-id=\"d306c59e21cd6ebbe42ac20a3e4f5427\" id=\"d306c59e21cd6ebbe42ac20a3e4f5427\"><strong><span data-lake-id=\"ua7a9a970\" id=\"ua7a9a970\">getInitialState</span></strong><span data-lake-id=\"ucf20c0c7\" id=\"ucf20c0c7\">：用于初始化组件的 state 值；</span></li><li fid=\"u9e10a76c\" data-lake-id=\"ec2af2a0cf6448754a2d77815f14fe54\" id=\"ec2af2a0cf6448754a2d77815f14fe54\"><strong><span data-lake-id=\"u276856db\" id=\"u276856db\">componentWillMount</span></strong><span data-lake-id=\"ue6dfa7b5\" id=\"ue6dfa7b5\">：在组件创建后、render 之前，会走到 componentWillMount 阶段。这个阶段我个人一直没用过、非常鸡肋。后来React 官方已经不推荐大家在 componentWillMount 里做任何事情、到现在 </span><strong><span data-lake-id=\"u96a04bdb\" id=\"u96a04bdb\">React16 直接废弃了这个生命周期</span></strong><span data-lake-id=\"ubbab7693\" id=\"ubbab7693\">，足见其鸡肋程度了；</span></li><li fid=\"u9e10a76c\" data-lake-id=\"700a95a781c6bf4462d9b0841c6bf379\" id=\"700a95a781c6bf4462d9b0841c6bf379\"><strong><span data-lake-id=\"ubba908bb\" id=\"ubba908bb\">render</span></strong><span data-lake-id=\"ufa72951f\" id=\"ufa72951f\">：这是所有生命周期中唯一一个你必须要实现的方法。一般来说需要返回一个 jsx 元素，这时 React 会根据 props 和 state 来把组件渲染到界面上；不过有时，你可能不想渲染任何东西，这种情况下让它返回 null 或者 false 即可；</span></li><li fid=\"u9e10a76c\" data-lake-id=\"2325cc013f479e47c79d7ad776dd70ce\" id=\"2325cc013f479e47c79d7ad776dd70ce\"><strong><span data-lake-id=\"u51bcda04\" id=\"u51bcda04\">componentDidMount</span></strong><span data-lake-id=\"ud45cc7fa\" id=\"ud45cc7fa\">：会在组件挂载后（插入 DOM 树中后）立即调用，标志着组件挂载完成。一些操作如果依赖获取到 DOM 节点信息，我们就会放在这个阶段来做。此外，这还是 React 官方推荐的发起 ajax 请求的时机。该方法和 componentWillMount 一样，有且仅有一次调用。</span></li></ol><h3 data-lake-id=\"c2463b3e10751240982161e13425e5fb\" id=\"c2463b3e10751240982161e13425e5fb\"><span data-lake-id=\"ua31420fb\" id=\"ua31420fb\">2. </span><span data-lake-id=\"u47d893bf\" id=\"u47d893bf\">React </span><span data-lake-id=\"u7e902e6a\" id=\"u7e902e6a\">废弃了哪些生命周期？为什么？</span></h3><p data-lake-id=\"e44a1c375b1b172d86300f552beebf3a\" id=\"e44a1c375b1b172d86300f552beebf3a\"><span data-lake-id=\"u237769bb\" id=\"u237769bb\">被废弃的三个函数都是在render之前，因为fber的出现，很可能因为高优先级任务的出现而打断现有任务导致它们会被执行多次。另外的一个原因则是，React想约束使用者，好的框架能够让人不得已写出容易维护和扩展的代码，这一点又是从何谈起，可以从新增加以及即将废弃的生命周期分析入手</span></p><p data-lake-id=\"57bc3d13306ecf40f8e7394ed2f355c5\" id=\"57bc3d13306ecf40f8e7394ed2f355c5\"><strong><span data-lake-id=\"uf3e36608\" id=\"uf3e36608\">1) componentWillMount</span></strong></p><p data-lake-id=\"f18a89415cb09b745ec2012fc08e8795\" id=\"f18a89415cb09b745ec2012fc08e8795\"><span data-lake-id=\"ube67edbb\" id=\"ube67edbb\">首先这个函数的功能完全可以使用componentDidMount和 constructor来代替，异步获取的数据的情况上面已经说明了，而如果抛去异步获取数据，其余的即是初始化而已，这些功能都可以在constructor中执行，除此之外，如果在 willMount 中订阅事件，但在服务端这并不会执行 willUnMount事件，也就是说服务端会导致内存泄漏所以componentWilIMount完全可以不使用，但使用者有时候难免因为各 种各样的情况在 componentWilMount中做一些操作，那么React为了约束开发者，干脆就抛掉了这个API </span></p><p data-lake-id=\"40c13dca899228d03254560523ee32a8\" id=\"40c13dca899228d03254560523ee32a8\"><strong><span data-lake-id=\"u0360a2d2\" id=\"u0360a2d2\">2) componentWillReceiveProps</span></strong></p><p data-lake-id=\"0920c8b519e8c8daacc068aa832e6f3a\" id=\"0920c8b519e8c8daacc068aa832e6f3a\"><span data-lake-id=\"uf6dc8f0d\" id=\"uf6dc8f0d\">在老版本的 React 中，如果组件自身的某个 state 跟其 props 密切相关的话，一直都没有一种很优雅的处理方式去更新 state，而是需要在 componentWilReceiveProps 中判断前后两个 props 是否相同，如果不同再将新的 props更新到相应的 state 上去。这样做一来会破坏 state 数据的单一数据源，导致组件状态变得不可预测，另一方面也会增加组件的重绘次数。类似的业务需求也有很多，如一个可以横向滑动的列表，当前高亮的 Tab 显然隶属于列表自身的时，根据传入的某个值，直接定位到某个 Tab。为了解决这些问题，React引入了第一个新的生命周期：getDerivedStateFromProps。它有以下的优点∶</span></p><ul list=\"u92fd3543\"><li fid=\"ub0bfdcaa\" data-lake-id=\"1543ea103dab6382ddb17d1139d1edb7\" id=\"1543ea103dab6382ddb17d1139d1edb7\"><span data-lake-id=\"ufa66ab6d\" id=\"ufa66ab6d\">getDSFP是静态方法，在这里不能使用this，也就是一个纯函数，开发者不能写出副作用的代码</span></li><li fid=\"ub0bfdcaa\" data-lake-id=\"cad0abbdf8da51b2b29fe11d9c2eff76\" id=\"cad0abbdf8da51b2b29fe11d9c2eff76\"><span data-lake-id=\"ufa11d608\" id=\"ufa11d608\">开发者只能通过prevState而不是prevProps来做对比，保证了state和props之间的简单关系以及不需要处理第一次渲染时prevProps为空的情况</span></li><li fid=\"ub0bfdcaa\" data-lake-id=\"8a5e50b90751d8828abcd862076898ce\" id=\"8a5e50b90751d8828abcd862076898ce\"><span data-lake-id=\"u592b6f24\" id=\"u592b6f24\">基于第一点，将状态变化（setState）和昂贵操作（tabChange）区分开，更加便于 render 和 commit 阶段操作或者说优化。 </span></li></ul><p data-lake-id=\"03f7dcaa2b161427a8abf5eeb5e1eb87\" id=\"03f7dcaa2b161427a8abf5eeb5e1eb87\"><strong><span data-lake-id=\"uf7932501\" id=\"uf7932501\">3) componentWillUpdate</span></strong></p><p data-lake-id=\"118fe308754036649358534295c21fc4\" id=\"118fe308754036649358534295c21fc4\"><span data-lake-id=\"ue8661887\" id=\"ue8661887\">与 componentWillReceiveProps 类似，许多开发者也会在 componentWillUpdate 中根据 props 的变化去触发一些回调 。 但不论是 componentWilReceiveProps 还 是 componentWilUpdate，都有可能在一次更新中被调用多次，也就是说写在这里的回调函数也有可能会被调用多次，这显然是不可取的。与 componentDidMount 类 似， componentDidUpdate 也不存在这样的问题，一次更新中 componentDidUpdate 只会被调用一次，所以将原先写在 componentWillUpdate 中 的 回 调 迁 移 至 componentDidUpdate 就可以解决这个问题。</span></p><p data-lake-id=\"72dc50f8d6deae29d084e6263ae6e41a\" id=\"72dc50f8d6deae29d084e6263ae6e41a\"><br></p><p data-lake-id=\"8f5b5c8bf1cd26fe03d00b67ee2909f4\" id=\"8f5b5c8bf1cd26fe03d00b67ee2909f4\"><span data-lake-id=\"uf3c3b32a\" id=\"uf3c3b32a\">另外一种情况则是需要获取DOM元素状态，但是由于在fber中，render可打断，可能在wilMount中获取到的元素状态很可能与实际需要的不同，这个通常可以使用第二个新增的生命函数的解决 getSnapshotBeforeUpdate(prevProps, prevState)</span></p><p data-lake-id=\"4e21dd91ebdbe03cbffdac7c69aef8e3\" id=\"4e21dd91ebdbe03cbffdac7c69aef8e3\"><strong><span data-lake-id=\"u932a57d7\" id=\"u932a57d7\">4) getSnapshotBeforeUpdate(prevProps, prevState)</span></strong></p><p data-lake-id=\"12bf7c4da63b1e5ba8019b549a8e19ad\" id=\"12bf7c4da63b1e5ba8019b549a8e19ad\"><span data-lake-id=\"u95d12799\" id=\"u95d12799\">返回的值作为componentDidUpdate的第三个参数。与willMount不同的是，getSnapshotBeforeUpdate会在最终确定的render执行之前执行，也就是能保证其获取到的元素状态与didUpdate中获取到的元素状态相同。官方参考代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20ScrollingList%20extends%20React.Component%20%7B%5Cn%20%20constructor(props)%20%7B%5Cn%20%20%20%20super(props)%3B%5Cn%20%20%20%20this.listRef%20%3D%20React.createRef()%3B%5Cn%20%20%7D%5Cn%5Cn%20%20getSnapshotBeforeUpdate(prevProps%2C%20prevState)%20%7B%5Cn%20%20%20%20%2F%2F%20%E6%88%91%E4%BB%AC%E6%98%AF%E5%90%A6%E5%9C%A8%20list%20%E4%B8%AD%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%9A%84%20items%20%EF%BC%9F%5Cn%20%20%20%20%2F%2F%20%E6%8D%95%E8%8E%B7%E6%BB%9A%E5%8A%A8%E2%80%8B%E2%80%8B%E4%BD%8D%E7%BD%AE%E4%BB%A5%E4%BE%BF%E6%88%91%E4%BB%AC%E7%A8%8D%E5%90%8E%E8%B0%83%E6%95%B4%E6%BB%9A%E5%8A%A8%E4%BD%8D%E7%BD%AE%E3%80%82%5Cn%20%20%20%20if%20(prevProps.list.length%20%3C%20this.props.list.length)%20%7B%5Cn%20%20%20%20%20%20const%20list%20%3D%20this.listRef.current%3B%5Cn%20%20%20%20%20%20return%20list.scrollHeight%20-%20list.scrollTop%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20null%3B%5Cn%20%20%7D%5Cn%5Cn%20%20componentDidUpdate(prevProps%2C%20prevState%2C%20snapshot)%20%7B%5Cn%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%88%91%E4%BB%AC%20snapshot%20%E6%9C%89%E5%80%BC%EF%BC%8C%E8%AF%B4%E6%98%8E%E6%88%91%E4%BB%AC%E5%88%9A%E5%88%9A%E6%B7%BB%E5%8A%A0%E4%BA%86%E6%96%B0%E7%9A%84%20items%EF%BC%8C%5Cn%20%20%20%20%2F%2F%20%E8%B0%83%E6%95%B4%E6%BB%9A%E5%8A%A8%E4%BD%8D%E7%BD%AE%E4%BD%BF%E5%BE%97%E8%BF%99%E4%BA%9B%E6%96%B0%20items%20%E4%B8%8D%E4%BC%9A%E5%B0%86%E6%97%A7%E7%9A%84%20items%20%E6%8E%A8%E5%87%BA%E8%A7%86%E5%9B%BE%E3%80%82%5Cn%20%20%20%20%2F%2F%EF%BC%88%E8%BF%99%E9%87%8C%E7%9A%84%20snapshot%20%E6%98%AF%20getSnapshotBeforeUpdate%20%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC%EF%BC%89%5Cn%20%20%20%20if%20(snapshot%20!%3D%3D%20null)%20%7B%5Cn%20%20%20%20%20%20const%20list%20%3D%20this.listRef.current%3B%5Cn%20%20%20%20%20%20list.scrollTop%20%3D%20list.scrollHeight%20-%20snapshot%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20ref%3D%7Bthis.listRef%7D%3E%7B%2F*%20...contents...%20*%2F%7D%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%229CGAA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"c73dff10490a3674923753282bf6753b\" id=\"c73dff10490a3674923753282bf6753b\"><span data-lake-id=\"u6f1aa9ab\" id=\"u6f1aa9ab\">3. React </span><span data-lake-id=\"u349a6f1f\" id=\"u349a6f1f\">16.X 中 props 改变后在哪个生命周期中处理</span></h3><p data-lake-id=\"076b1a6fc08d51de7c8a3ca123e89f84\" id=\"076b1a6fc08d51de7c8a3ca123e89f84\"><strong><span data-lake-id=\"u72094b75\" id=\"u72094b75\">在getDerivedStateFromProps中进行处理。</span></strong></p><p data-lake-id=\"91c95c861230748ff405f8b40002df3f\" id=\"91c95c861230748ff405f8b40002df3f\"><br></p><p data-lake-id=\"7198cd6b6a5520b34bba668b5fd783b4\" id=\"7198cd6b6a5520b34bba668b5fd783b4\"><span data-lake-id=\"u59b55bab\" id=\"u59b55bab\">这个生命周期函数是为了替代</span><code data-lake-id=\"u12f53047\" id=\"u12f53047\"><span data-lake-id=\"u325a22d9\" id=\"u325a22d9\">componentWillReceiveProps</span></code><span data-lake-id=\"u50dfa8c1\" id=\"u50dfa8c1\">存在的，所以在需要使用</span><code data-lake-id=\"u81239f59\" id=\"u81239f59\"><span data-lake-id=\"u3d4b9327\" id=\"u3d4b9327\">componentWillReceiveProps</span></code><span data-lake-id=\"u63278aeb\" id=\"u63278aeb\">时，就可以考虑使用</span><code data-lake-id=\"u4868c943\" id=\"u4868c943\"><span data-lake-id=\"uef05f052\" id=\"uef05f052\">getDerivedStateFromProps</span></code><span data-lake-id=\"u9812d79e\" id=\"u9812d79e\">来进行替代。</span></p><p data-lake-id=\"775bc4e585e23eadcb8cd740d17df81c\" id=\"775bc4e585e23eadcb8cd740d17df81c\"><br></p><p data-lake-id=\"0f60be880038e6ad7da18d0f6cd57d36\" id=\"0f60be880038e6ad7da18d0f6cd57d36\"><span data-lake-id=\"u8a0df9bc\" id=\"u8a0df9bc\">两者的参数是不相同的，而</span><code data-lake-id=\"u43a01e76\" id=\"u43a01e76\"><span data-lake-id=\"udf04094e\" id=\"udf04094e\">getDerivedStateFromProps</span></code><span data-lake-id=\"u1d7ac5ea\" id=\"u1d7ac5ea\">是一个静态函数，也就是这个函数不能通过this访问到class的属性，也并不推荐直接访问属性。而是应该通过参数提供的nextProps以及prevState来进行判断，根据新传入的props来映射到state。</span></p><p data-lake-id=\"bd2fb154cc8fe64a02280e5b8b45bc37\" id=\"bd2fb154cc8fe64a02280e5b8b45bc37\"><br></p><p data-lake-id=\"43323baa8b2f89786b5264ff0f58cdc5\" id=\"43323baa8b2f89786b5264ff0f58cdc5\"><span data-lake-id=\"ucdc6b1b8\" id=\"ucdc6b1b8\">需要注意的是，</span><strong><span data-lake-id=\"ufdf3cdf4\" id=\"ufdf3cdf4\">如果props传入的内容不需要影响到你的state，那么就需要返回一个null</span></strong><span data-lake-id=\"u38256d5f\" id=\"u38256d5f\">，这个返回值是必须的，所以尽量将其写到函数的末尾：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22static%20getDerivedStateFromProps(nextProps%2C%20prevState)%20%7B%5Cn%20%20%20%20const%20%7Btype%7D%20%3D%20nextProps%3B%5Cn%20%20%20%20%2F%2F%20%E5%BD%93%E4%BC%A0%E5%85%A5%E7%9A%84type%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E6%9B%B4%E6%96%B0state%5Cn%20%20%20%20if%20(type%20!%3D%3D%20prevState.type)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20type%2C%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%2F%2F%20%E5%90%A6%E5%88%99%EF%BC%8C%E5%AF%B9%E4%BA%8Estate%E4%B8%8D%E8%BF%9B%E8%A1%8C%E4%BB%BB%E4%BD%95%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20return%20null%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Cv2cu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"1b8aa9428c54fd9d5190ef22e9f8bc45\" id=\"1b8aa9428c54fd9d5190ef22e9f8bc45\"><span data-lake-id=\"u1c2a5e6d\" id=\"u1c2a5e6d\">4. </span><span data-lake-id=\"ua139cba2\" id=\"ua139cba2\">React </span><span data-lake-id=\"ue57a2090\" id=\"ue57a2090\">性能优化在哪个生命周期？它优化的原理是什么？</span></h3><p data-lake-id=\"3c39f81e9f74b4ee9f125f54959ac127\" id=\"3c39f81e9f74b4ee9f125f54959ac127\"><span data-lake-id=\"u3c23f5f5\" id=\"u3c23f5f5\">react的父级组件的render函数重新渲染会引起子组件的render方法的重新渲染。但是，有的时候子组件的接受父组件的数据没有变动。子组件render的执行会影响性能，这时就可以使用shouldComponentUpdate来解决这个问题。</span></p><p data-lake-id=\"4c47dc8651b8dac44a211ab7026e379c\" id=\"4c47dc8651b8dac44a211ab7026e379c\"><br></p><p data-lake-id=\"38dceb79cf7b0361f31136cda4497258\" id=\"38dceb79cf7b0361f31136cda4497258\"><span data-lake-id=\"ud98d7a38\" id=\"ud98d7a38\">使用方法如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22shouldComponentUpdate(nexrProps)%20%7B%5Cn%20%20%20%20if%20(this.props.num%20%3D%3D%3D%20nexrProps.num)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20false%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20true%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OjTa1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"23c0fb49925a86ddcf40b1ab24242990\" id=\"23c0fb49925a86ddcf40b1ab24242990\" style=\"text-align: left\"><span data-lake-id=\"u84b90b3d\" id=\"u84b90b3d\">shouldComponentUpdate提供了两个参数nextProps和nextState，表示下一次props和一次state的值，当函数返回false时候，render()方法不执行，组件也就不会渲染，返回true时，组件照常重渲染。此方法就是拿当前props中值和下一次props中的值进行对比，数据相等时，返回false，反之返回true。</span></p><p data-lake-id=\"60cd8d444a7705600343146de7af69eb\" id=\"60cd8d444a7705600343146de7af69eb\" style=\"text-align: left\"><br></p><p data-lake-id=\"22c504c1f947b851a33fff9816ee8280\" id=\"22c504c1f947b851a33fff9816ee8280\" style=\"text-align: left\"><span data-lake-id=\"u2a582e0e\" id=\"u2a582e0e\">需要注意，在进行新旧对比的时候，是</span><strong><span data-lake-id=\"u8a23b8ce\" id=\"u8a23b8ce\">浅对比，</span></strong><span data-lake-id=\"u5512fe1d\" id=\"u5512fe1d\">也就是说如果比较的数据时引用数据类型，只要数据的引用的地址没变，即使内容变了，也会被判定为true。</span></p><p data-lake-id=\"88e72e1b0fd918d3c87ae450871b054e\" id=\"88e72e1b0fd918d3c87ae450871b054e\" style=\"text-align: left\"><br></p><p data-lake-id=\"2ca0faadc85e2c259b25fb5d14b1c2da\" id=\"2ca0faadc85e2c259b25fb5d14b1c2da\" style=\"text-align: left\"><span data-lake-id=\"ub5ae0eef\" id=\"ub5ae0eef\">面对这个问题，可以使用如下方法进行解决：</span></p><p data-lake-id=\"8c1616edd1f7ed0632192f49faa5f565\" id=\"8c1616edd1f7ed0632192f49faa5f565\" style=\"text-align: left\"><span data-lake-id=\"ufcf0279c\" id=\"ufcf0279c\">（1）使用setState改变数据之前，先采用ES6中assgin进行拷贝，但是assgin只深拷贝的数据的第一层，所以说不是最完美的解决办法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20o2%20%3D%20Object.assign(%7B%7D%2Cthis.state.obj)%5Cn%20%20%20%20o2.student.count%20%3D%20'00000'%3B%5Cn%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20%20%20obj%3A%20o2%2C%5Cn%20%20%20%20%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cZ0ek%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4e179e755d3928c73703c1de42ed1312\" id=\"4e179e755d3928c73703c1de42ed1312\" style=\"text-align: left\"><span data-lake-id=\"u3602910f\" id=\"u3602910f\">（2）使用JSON.parse(JSON.stringfy())进行深拷贝，但是遇到数据为undefined和函数时就会错。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20o2%20%3D%20JSON.parse(JSON.stringify(this.state.obj))%5Cn%20%20%20%20o2.student.count%20%3D%20'00000'%3B%5Cn%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20%20%20obj%3A%20o2%2C%5Cn%20%20%20%20%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cTjo4%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"05c99ea372cd9d4b921438f80c070d16\" id=\"05c99ea372cd9d4b921438f80c070d16\"><span data-lake-id=\"u9fa4847f\" id=\"u9fa4847f\">5. </span><span data-lake-id=\"u9da7c23d\" id=\"u9da7c23d\">state 和 props 触发更新的生命周期分别有什么区别？</span></h3><p data-lake-id=\"ab88f1f4b4836fedc1df632699172f8f\" id=\"ab88f1f4b4836fedc1df632699172f8f\"><strong><span data-lake-id=\"ube984c1a\" id=\"ube984c1a\">state 更新流程：</span></strong></p><p data-lake-id=\"62ff455b0dd7d348b44c59cdb405d092\" id=\"62ff455b0dd7d348b44c59cdb405d092\" style=\"text-align: justify\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1616079696588-fe9625ce-a23f-42ef-ae52-247b29b5ee3c.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1040%2C%22height%22%3A650%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1040%2C%22originHeight%22%3A650%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fafafa%22%2C%22id%22%3A%22F2uZP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"92ef9870bf69e134838c4fea4a0e64be\" id=\"92ef9870bf69e134838c4fea4a0e64be\" style=\"text-align: justify\"><span data-lake-id=\"uda5afa2d\" id=\"uda5afa2d\">这个过程当中涉及的函数：</span></p><ol list=\"ua5ea0ded\"><li fid=\"u577d32d1\" data-lake-id=\"452c847f5a325918946b89a42e89b0c6\" id=\"452c847f5a325918946b89a42e89b0c6\"><span data-lake-id=\"u719acec0\" id=\"u719acec0\">shouldComponentUpdate: 当组件的 state 或 props 发生改变时，都会首先触发这个生命周期函数。它会接收两个参数：nextProps, nextState——它们分别代表传入的新 props 和新的 state 值。拿到这两个值之后，我们就可以通过一些对比逻辑来决定是否有 re-render（重渲染）的必要了。如果该函数的返回值为 false，则生命周期终止，反之继续；</span></li></ol><blockquote data-lake-id=\"u9a957b87\" id=\"u9a957b87\"><p data-lake-id=\"efee6c38566807167dbd2e2deca33e4a\" id=\"efee6c38566807167dbd2e2deca33e4a\" style=\"text-align: justify\"><span data-lake-id=\"ub4a4f29f\" id=\"ub4a4f29f\" style=\"background-color: #F5F5F5\">注意：此方法仅作为</span><strong><span data-lake-id=\"u63357d4b\" id=\"u63357d4b\" style=\"background-color: #F5F5F5\">性能优化的方式</span></strong><span data-lake-id=\"u0f4af726\" id=\"u0f4af726\" style=\"background-color: #F5F5F5\">而存在。不要企图依靠此方法来“阻止”渲染，因为这可能会产生 bug。应该</span><strong><span data-lake-id=\"u65b815b2\" id=\"u65b815b2\" style=\"background-color: #F5F5F5\">考虑使用内置的 PureComponent 组件</span></strong><span data-lake-id=\"ua949ae4c\" id=\"ua949ae4c\" style=\"background-color: #F5F5F5\">，而不是手动编写 </span><code data-lake-id=\"u876d769d\" id=\"u876d769d\"><span data-lake-id=\"u49b128bb\" id=\"u49b128bb\" style=\"background-color: #F5F5F5\">shouldComponentUpdate()</span></code></p></blockquote><ol list=\"u501e0704\" start=\"2\"><li fid=\"ucfc44ef0\" data-lake-id=\"6c7462d44db95073384d02782e9d7f15\" id=\"6c7462d44db95073384d02782e9d7f15\"><span data-lake-id=\"u7d1eeb82\" id=\"u7d1eeb82\">componentWillUpdate：当组件的 state 或 props 发生改变时，会在渲染之前调用 componentWillUpdate。componentWillUpdate </span><strong><span data-lake-id=\"u080d067f\" id=\"u080d067f\">是 React16 废弃的三个生命周期之一</span></strong><span data-lake-id=\"u667c409f\" id=\"u667c409f\">。过去，我们可能希望能在这个阶段去收集一些必要的信息（比如更新前的 DOM 信息等等），现在我们完全可以在 React16 的 getSnapshotBeforeUpdate 中去做这些事；</span></li><li fid=\"ucfc44ef0\" data-lake-id=\"4ee331ab79411e78d29d845c777f4d08\" id=\"4ee331ab79411e78d29d845c777f4d08\"><span data-lake-id=\"u91e8bb38\" id=\"u91e8bb38\">componentDidUpdate：componentDidUpdate() 会在UI更新后会被立即调用。它接收 prevProps（上一次的 props 值）作为入参，也就是说在此处我们仍然可以进行 props 值对比（再次说明 componentWillUpdate 确实鸡肋哈）。</span></li></ol><p data-lake-id=\"ua4c2438c\" id=\"ua4c2438c\"><strong><span data-lake-id=\"u46fec1a6\" id=\"u46fec1a6\">​</span></strong><br></p><p data-lake-id=\"28f3fe7ef06e3e1b980a8e7f69c2d98c\" id=\"28f3fe7ef06e3e1b980a8e7f69c2d98c\"><strong><span data-lake-id=\"ue890c8be\" id=\"ue890c8be\">props 更新流程：</span></strong></p><p data-lake-id=\"bde2075fd39160498a1b9b3dd3cade18\" id=\"bde2075fd39160498a1b9b3dd3cade18\" style=\"text-align: justify\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1616079696446-71709f4d-1b94-4405-9538-5167ed5e4f2a.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1042%2C%22height%22%3A776%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1042%2C%22originHeight%22%3A776%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fafafa%22%2C%22id%22%3A%22YFzTF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"9290ec4ae6179aca75260a3db08cb317\" id=\"9290ec4ae6179aca75260a3db08cb317\" style=\"text-align: justify\"><span data-lake-id=\"uce46fd49\" id=\"uce46fd49\">相对于 state 更新，props 更新后唯一的区别是增加了对 componentWillReceiveProps 的调用。关于 componentWillReceiveProps，需要知道这些事情：</span></p><ul list=\"ue1cdb0ab\"><li fid=\"ub3c0d5a1\" data-lake-id=\"b31e981ec7eafcf9bd0d0b5ef2e3ed12\" id=\"b31e981ec7eafcf9bd0d0b5ef2e3ed12\"><span data-lake-id=\"ua5df753e\" id=\"ua5df753e\">componentWillReceiveProps：它在Component接受到新的 props 时被触发。componentWillReceiveProps 会接收一个名为 nextProps 的参数（对应新的 props 值）。</span><strong><span data-lake-id=\"u6294aa19\" id=\"u6294aa19\">该生命周期是 React16 废弃掉的三个生命周期之一</span></strong><span data-lake-id=\"u2391d5c7\" id=\"u2391d5c7\">。在它被废弃前，可以用它来比较 this.props 和 nextProps 来重新setState。在 React16 中，用一个类似的新生命周期 getDerivedStateFromProps 来代替它。</span></li></ul><h3 data-lake-id=\"b75bdbe861c53e813f8f288f1fec6115\" id=\"b75bdbe861c53e813f8f288f1fec6115\"><span data-lake-id=\"u0c4926e0\" id=\"u0c4926e0\">6. R</span><span data-lake-id=\"ubf44e882\" id=\"ubf44e882\">eact中发起网络请求应该在哪个生命周期中进行？为什么？</span></h3><p data-lake-id=\"af8e5bc463ac22512248bb160d2cdb75\" id=\"af8e5bc463ac22512248bb160d2cdb75\"><span data-lake-id=\"ua6f295c9\" id=\"ua6f295c9\">对于异步请求，最好放在componentDidMount中去操作，对于同步的状态改变，可以放在componentWillMount中，一般用的比较少。</span></p><p data-lake-id=\"3b03cd307343b6d6bd711597e435aba9\" id=\"3b03cd307343b6d6bd711597e435aba9\"><br></p><p data-lake-id=\"ba2c31af9a5a6ab210e25101b71d8b7b\" id=\"ba2c31af9a5a6ab210e25101b71d8b7b\"><span data-lake-id=\"ud64003c3\" id=\"ud64003c3\">如果认为在componentWillMount里发起请求能提早获得结果，这种想法其实是错误的，通常componentWillMount比componentDidMount早不了多少微秒，网络上任何一点延迟，这一点差异都可忽略不计。</span></p><p data-lake-id=\"866da31e96bfe2dfa11e4d9cb25c11b6\" id=\"866da31e96bfe2dfa11e4d9cb25c11b6\"><br></p><p data-lake-id=\"d0c19e8fab06197cf6307f538546c4f3\" id=\"d0c19e8fab06197cf6307f538546c4f3\"><strong><span data-lake-id=\"uecdcc655\" id=\"uecdcc655\">react的生命周期：</span></strong><span data-lake-id=\"u84dd4886\" id=\"u84dd4886\">constructor() -&gt; componentWillMount() -&gt; render() -&gt; componentDidMount()</span></p><p data-lake-id=\"0b3edb4b3aa6f65e51b7c011aae5986a\" id=\"0b3edb4b3aa6f65e51b7c011aae5986a\"><br></p><p data-lake-id=\"26609076d62ce1a9b291c8b991a37193\" id=\"26609076d62ce1a9b291c8b991a37193\"><span data-lake-id=\"u91985250\" id=\"u91985250\">上面这些方法的调用是有次序的，由上而下依次调用。</span></p><ul list=\"ua36a03df\"><li fid=\"u71e64870\" data-lake-id=\"db0ee39a7328a45040d0f803408ef279\" id=\"db0ee39a7328a45040d0f803408ef279\"><span data-lake-id=\"u5d93260b\" id=\"u5d93260b\">constructor被调用是在组件准备要挂载的最开始，此时组件尚未挂载到网页上。</span></li><li fid=\"u71e64870\" data-lake-id=\"accbbb73db7badb5e110f2e5344ff68b\" id=\"accbbb73db7badb5e110f2e5344ff68b\"><span data-lake-id=\"u9c985f23\" id=\"u9c985f23\">componentWillMount方法的调用在constructor之后，在render之前，在这方法里的代码调用setState方法不会触发重新render，所以它一般不会用来作加载数据之用。</span></li><li fid=\"u71e64870\" data-lake-id=\"35dbc80f337b82ecf550175df7ffa5df\" id=\"35dbc80f337b82ecf550175df7ffa5df\"><span data-lake-id=\"u86b23406\" id=\"u86b23406\">componentDidMount方法中的代码，是在组件已经完全挂载到网页上才会调用被执行，所以可以保证数据的加载。此外，在这方法中调用setState方法，会触发重新渲染。所以，官方设计这个方法就是用来加载外部数据用的，或处理其他的副作用代码。与组件上的数据无关的加载，也可以在constructor里做，但constructor是做组件state初绐化工作，并不是做加载数据这工作的，constructor里也不能setState，还有加载的时间太长或者出错，页面就无法加载出来。所以有副作用的代码都会集中在componentDidMount方法里。</span></li></ul><p data-lake-id=\"d4a2bce8f293214028b3ca2f98407422\" id=\"d4a2bce8f293214028b3ca2f98407422\"><br></p><p data-lake-id=\"f86f87e21b107ff32d7a3366d27b59ff\" id=\"f86f87e21b107ff32d7a3366d27b59ff\"><span data-lake-id=\"u4601fa2c\" id=\"u4601fa2c\">总结：</span></p><ul list=\"uda62e6e8\"><li fid=\"u0afec99b\" data-lake-id=\"6d8c0d63bfa6fa709f0adaa2db48d323\" id=\"6d8c0d63bfa6fa709f0adaa2db48d323\"><span data-lake-id=\"u0db0132f\" id=\"u0db0132f\">跟服务器端渲染（同构）有关系，如果在componentWillMount里面获取数据，fetch data会执行两次，一次在服务器端一次在客户端。在componentDidMount中可以解决这个问题，componentWillMount同样也会render两次。</span></li><li fid=\"u0afec99b\" data-lake-id=\"b7aa3330b057d4320ecd027d481d8e3e\" id=\"b7aa3330b057d4320ecd027d481d8e3e\"><span data-lake-id=\"u9a5c3c5f\" id=\"u9a5c3c5f\">在componentWillMount中fetch data，数据一定在render后才能到达，如果忘记了设置初始状态，用户体验不好。</span></li><li fid=\"u0afec99b\" data-lake-id=\"e1a34d8091636ac0fd36c7c811ba522f\" id=\"e1a34d8091636ac0fd36c7c811ba522f\"><span data-lake-id=\"uc92c7b9d\" id=\"uc92c7b9d\">react16.0以后，componentWillMount可能会被执行多次。</span></li></ul><h3 data-lake-id=\"033fafb33a48936b7f38cbfd709f80dd\" id=\"033fafb33a48936b7f38cbfd709f80dd\"><span data-lake-id=\"u42b0b2a2\" id=\"u42b0b2a2\">7. React 16中新生命周期有哪些</span></h3><p data-lake-id=\"7932ea4111ec2022f0cb35547f21f6e6\" id=\"7932ea4111ec2022f0cb35547f21f6e6\" style=\"text-align: justify\"><span data-lake-id=\"u11abfd1e\" id=\"u11abfd1e\">关于 React16 开始应用的新生命周期：</span></p><p data-lake-id=\"fa9a8a22a7d3006fe8542237195c58c2\" id=\"fa9a8a22a7d3006fe8542237195c58c2\" style=\"text-align: justify\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1616079836302-3fdd2b2a-6d54-4a7e-92bd-86a6aa27aea6.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1978%2C%22height%22%3A1002%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1978%2C%22originHeight%22%3A1002%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f5f3%22%2C%22id%22%3A%22mXxAK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"84ed38152b2bae7e21b0580fc0617ef6\" id=\"84ed38152b2bae7e21b0580fc0617ef6\" style=\"text-align: justify\"><span data-lake-id=\"u9911cf58\" id=\"u9911cf58\">可以看出，React16 自上而下地对生命周期做了另一种维度的解读：</span></p><ul list=\"uab0068ba\"><li fid=\"u1c112954\" data-lake-id=\"604b90e9e7995a55ff2e93bc17e76ac8\" id=\"604b90e9e7995a55ff2e93bc17e76ac8\"><strong><span data-lake-id=\"ue7ba01df\" id=\"ue7ba01df\">Render 阶段</span></strong><span data-lake-id=\"u9c240634\" id=\"u9c240634\">：用于计算一些必要的状态信息。这个阶段可能会被 React 暂停，这一点和 React16 引入的 Fiber 架构（我们后面会重点讲解）是有关的；</span></li><li fid=\"u1c112954\" data-lake-id=\"32bd7c67e95ff62a362421ff0c6875db\" id=\"32bd7c67e95ff62a362421ff0c6875db\"><strong><span data-lake-id=\"u277fb453\" id=\"u277fb453\">Pre-commit阶段</span></strong><span data-lake-id=\"ue01b282c\" id=\"ue01b282c\">：所谓“commit”，这里指的是“更新真正的 DOM 节点”这个动作。所谓 Pre-commit，就是说我在这个阶段其实还并没有去更新真实的 DOM，不过 DOM 信息已经是可以读取的了；</span></li><li fid=\"u1c112954\" data-lake-id=\"ec0a48ac29a4b37de4cd0b023c74b95b\" id=\"ec0a48ac29a4b37de4cd0b023c74b95b\"><strong><span data-lake-id=\"ue1e527bc\" id=\"ue1e527bc\">Commit 阶段</span></strong><span data-lake-id=\"u7c5f4db8\" id=\"u7c5f4db8\">：在这一步，React 会完成真实 DOM 的更新工作。Commit 阶段，我们可以拿到真实 DOM（包括 refs）。</span></li></ul><p data-lake-id=\"010cf274f7c5b6cfe1827ef129364f49\" id=\"010cf274f7c5b6cfe1827ef129364f49\" style=\"text-align: justify\"><br></p><p data-lake-id=\"60e2edbab83d3e70fb40dbe55d3258eb\" id=\"60e2edbab83d3e70fb40dbe55d3258eb\" style=\"text-align: justify\"><span data-lake-id=\"u3d185442\" id=\"u3d185442\">与此同时，新的生命周期在流程方面，仍然遵循“挂载”、“更新”、“卸载”这三个广义的划分方式。它们分别对应到：</span></p><ul list=\"ue82a8b8c\"><li fid=\"uabfa917b\" data-lake-id=\"0d9d07854468fbe8e106388cae4cd465\" id=\"0d9d07854468fbe8e106388cae4cd465\"><span data-lake-id=\"ubcec665e\" id=\"ubcec665e\">挂载过程：</span></li></ul><ul list=\"ue1a1d81e\" data-lake-indent=\"1\"><li fid=\"u8f5cfd49\" data-lake-id=\"2756df7d381351a95936258f5adf1bba\" id=\"2756df7d381351a95936258f5adf1bba\"><strong><span data-lake-id=\"ubee027fa\" id=\"ubee027fa\">constructor</span></strong></li><li fid=\"u8f5cfd49\" data-lake-id=\"b94fa511e5d48ad7c15a0be0eccec6c9\" id=\"b94fa511e5d48ad7c15a0be0eccec6c9\"><strong><span data-lake-id=\"u73eb90a3\" id=\"u73eb90a3\">getDerivedStateFromProps</span></strong></li><li fid=\"u8f5cfd49\" data-lake-id=\"b7fa95457073ad842e8da9ddf249f886\" id=\"b7fa95457073ad842e8da9ddf249f886\"><strong><span data-lake-id=\"uf3eccfb0\" id=\"uf3eccfb0\">render</span></strong></li><li fid=\"u8f5cfd49\" data-lake-id=\"6d94de7ac02ef530a0ae2e71c82cb1e2\" id=\"6d94de7ac02ef530a0ae2e71c82cb1e2\"><strong><span data-lake-id=\"ued7c54f6\" id=\"ued7c54f6\">componentDidMount</span></strong></li></ul><ul list=\"udd4f8b6a\"><li fid=\"u0966f444\" data-lake-id=\"3a2c91e6890b00280b477125a93597c1\" id=\"3a2c91e6890b00280b477125a93597c1\"><span data-lake-id=\"u4b904fe8\" id=\"u4b904fe8\">更新过程：</span></li></ul><ul list=\"ucc513aa8\" data-lake-indent=\"1\"><li fid=\"udfac459f\" data-lake-id=\"338874fecd90a91fe882048cd481e423\" id=\"338874fecd90a91fe882048cd481e423\"><strong><span data-lake-id=\"u3e20370f\" id=\"u3e20370f\">getDerivedStateFromProps</span></strong></li><li fid=\"udfac459f\" data-lake-id=\"eb4d80571e0cf426a13212fd561f1189\" id=\"eb4d80571e0cf426a13212fd561f1189\"><strong><span data-lake-id=\"u6c143b50\" id=\"u6c143b50\">shouldComponentUpdate</span></strong></li><li fid=\"udfac459f\" data-lake-id=\"a55cf46cfbf2bbae8a3b6499ed915eac\" id=\"a55cf46cfbf2bbae8a3b6499ed915eac\"><strong><span data-lake-id=\"u79451a77\" id=\"u79451a77\">render</span></strong></li><li fid=\"udfac459f\" data-lake-id=\"98518f9e1ce5e017f59b3cfcbe5fd2c8\" id=\"98518f9e1ce5e017f59b3cfcbe5fd2c8\"><strong><span data-lake-id=\"u94a65a59\" id=\"u94a65a59\">getSnapshotBeforeUpdate</span></strong></li><li fid=\"udfac459f\" data-lake-id=\"56375274b1d09cb23fef5c8d0fb7e59e\" id=\"56375274b1d09cb23fef5c8d0fb7e59e\"><strong><span data-lake-id=\"ufdfb87e2\" id=\"ufdfb87e2\">componentDidUpdate</span></strong></li></ul><ul list=\"ud45e144c\"><li fid=\"ub4548949\" data-lake-id=\"bf1226cb89461ef20b4c70bf04d47cb5\" id=\"bf1226cb89461ef20b4c70bf04d47cb5\"><span data-lake-id=\"ud1c779df\" id=\"ud1c779df\">卸载过程：</span></li></ul><ul list=\"ufb8409f8\" data-lake-indent=\"1\"><li fid=\"ua8cdc3dc\" data-lake-id=\"b438ff7e0be450af1dc865059a40beff\" id=\"b438ff7e0be450af1dc865059a40beff\"><strong><span data-lake-id=\"ud283c6b3\" id=\"ud283c6b3\">componentWillUnmount</span></strong></li></ul><p data-lake-id=\"ua25dcb31\" id=\"ua25dcb31\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673894938259-95330dd6-d7bc-46f9-8950-cc6b6a205a2a.png%22%2C%22taskId%22%3A%22ue90c3561-181d-41b6-9578-f45c88eccd7%22%2C%22clientId%22%3A%22u43a0eb18-2ac0-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22ue303c6b5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"28960406671dc71c56b53ae6c3d94b5b\" id=\"28960406671dc71c56b53ae6c3d94b5b\"><span data-lake-id=\"ud9cefa3c\" id=\"ud9cefa3c\">四、</span><span data-lake-id=\"u7063136d\" id=\"u7063136d\">组件通信</span></h2><p data-lake-id=\"7c2f8df78bbb938fdbf239301ea689c9\" id=\"7c2f8df78bbb938fdbf239301ea689c9\"><span data-lake-id=\"u0b3ccd69\" id=\"u0b3ccd69\">React组件间通信常见的几种情况:</span></p><ul list=\"u22d29266\"><li fid=\"ue600400b\" data-lake-id=\"8b3d894e67d21f3f6760ef585e570cfe\" id=\"8b3d894e67d21f3f6760ef585e570cfe\"><span data-lake-id=\"u98f6c4ce\" id=\"u98f6c4ce\">父组件向子组件通信</span></li><li fid=\"ue600400b\" data-lake-id=\"7356187d1ae1e523806b1893978714e9\" id=\"7356187d1ae1e523806b1893978714e9\"><span data-lake-id=\"u4dcbe94e\" id=\"u4dcbe94e\">子组件向父组件通信</span></li><li fid=\"ue600400b\" data-lake-id=\"51ba0c48c8078e345183faed79e5e9a9\" id=\"51ba0c48c8078e345183faed79e5e9a9\"><span data-lake-id=\"udcd59803\" id=\"udcd59803\">跨级组件通信</span></li><li fid=\"ue600400b\" data-lake-id=\"be1ce0118419d7a4b31d981fd4dafa7b\" id=\"be1ce0118419d7a4b31d981fd4dafa7b\"><span data-lake-id=\"uc0c5584f\" id=\"uc0c5584f\">非嵌套关系的组件通信</span></li></ul><h3 data-lake-id=\"085d3f69af994c54b7cdea7fd31291b0\" id=\"085d3f69af994c54b7cdea7fd31291b0\"><span data-lake-id=\"ucc54b01f\" id=\"ucc54b01f\">1. </span><span data-lake-id=\"u29847fd2\" id=\"u29847fd2\">父子组件</span><span data-lake-id=\"u43e1d5cf\" id=\"u43e1d5cf\">的通信方式？</span></h3><p data-lake-id=\"c422608ca0ce06ef4e34e8722262bb0a\" id=\"c422608ca0ce06ef4e34e8722262bb0a\"><strong><span data-lake-id=\"ub8e5920c\" id=\"ub8e5920c\">父组件向子组件通信</span></strong><span data-lake-id=\"uf88d65e5\" id=\"uf88d65e5\">：父组件通过 props 向子组件传递需要的信息。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%AD%90%E7%BB%84%E4%BB%B6%3A%20Child%5Cnconst%20Child%20%3D%20props%20%3D%3E%7B%5Cn%20%20return%20%3Cp%3E%7Bprops.name%7D%3C%2Fp%3E%5Cn%7D%5Cn%2F%2F%20%E7%88%B6%E7%BB%84%E4%BB%B6%20Parent%5Cnconst%20Parent%20%3D%20()%3D%3E%7B%5Cn%20%20%20%20return%20%3CChild%20name%3D%5C%22react%5C%22%3E%3C%2FChild%3E%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22odwpy%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"c5fb1edc32f97a418368fd5bf2f18265\" id=\"c5fb1edc32f97a418368fd5bf2f18265\"><strong><span data-lake-id=\"ua5a3a8b2\" id=\"ua5a3a8b2\">子组件向父组件通信</span></strong><span data-lake-id=\"ub69eb54a\" id=\"ub69eb54a\">：: props+回调的方式。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%AD%90%E7%BB%84%E4%BB%B6%3A%20Child%5Cnconst%20Child%20%3D%20props%20%3D%3E%7B%5Cn%20%20const%20cb%20%3D%20msg%20%3D%3E%7B%5Cn%20%20%20%20%20%20return%20()%3D%3E%7B%5Cn%20%20%20%20%20%20%20%20%20%20props.callback(msg)%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20return%20(%5Cn%20%20%20%20%20%20%3Cbutton%20onClick%3D%7Bcb(%5C%22%E4%BD%A0%E5%A5%BD!%5C%22)%7D%3E%E4%BD%A0%E5%A5%BD%3C%2Fbutton%3E%5Cn%20%20)%5Cn%7D%5Cn%2F%2F%20%E7%88%B6%E7%BB%84%E4%BB%B6%20Parent%5Cnclass%20Parent%20extends%20Component%20%7B%5Cn%20%20%20%20callback(msg)%7B%5Cn%20%20%20%20%20%20%20%20console.log(msg)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20render()%7B%5Cn%20%20%20%20%20%20%20%20return%20%3CChild%20callback%3D%7Bthis.callback.bind(this)%7D%3E%3C%2FChild%3E%20%20%20%20%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22iPcjO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"78dd478534f365acdc4438b0aa6222a0\" id=\"78dd478534f365acdc4438b0aa6222a0\"><span data-lake-id=\"ud9c620ef\" id=\"ud9c620ef\">2. 跨级组件</span><span data-lake-id=\"ufe3e195b\" id=\"ufe3e195b\">的通信方式？</span></h3><p data-lake-id=\"205950abe7487be10d246ee7b812c6db\" id=\"205950abe7487be10d246ee7b812c6db\"><span data-lake-id=\"u22a50a2f\" id=\"u22a50a2f\">父组件向子组件的子组件通信，向更深层子组件通信：</span></p><ul list=\"uc1ee6d34\"><li fid=\"u7bdeb31d\" data-lake-id=\"70cbc13b24ea6db814e6693685c5cc78\" id=\"70cbc13b24ea6db814e6693685c5cc78\"><span data-lake-id=\"u69c7a029\" id=\"u69c7a029\">使用props，利用中间组件层层传递,但是如果父组件结构较深，那么中间每一层组件都要去传递props，增加了复杂度，并且这些props并不是中间组件自己需要的。</span></li><li fid=\"u7bdeb31d\" data-lake-id=\"579155f73096f86a088f6f64050a74b9\" id=\"579155f73096f86a088f6f64050a74b9\"><span data-lake-id=\"u58dd8508\" id=\"u58dd8508\">使用context，context相当于一个大容器，可以把要通信的内容放在这个容器中，这样不管嵌套多深，都可以随意取用，对于跨越多层的全局数据可以使用context实现。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20context%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E8%B7%A8%E7%BA%A7%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1%20%5Cn%2F%2F%20Context%20%E8%AE%BE%E8%AE%A1%E7%9B%AE%E7%9A%84%E6%98%AF%E4%B8%BA%E4%BA%86%E5%85%B1%E4%BA%AB%E9%82%A3%E4%BA%9B%E5%AF%B9%E4%BA%8E%E4%B8%80%E4%B8%AA%E7%BB%84%E4%BB%B6%E6%A0%91%E8%80%8C%E8%A8%80%E6%98%AF%E2%80%9C%E5%85%A8%E5%B1%80%E2%80%9D%E7%9A%84%E6%95%B0%E6%8D%AE%5Cnconst%20BatteryContext%20%3D%20createContext()%3B%5Cn%2F%2F%20%20%E5%AD%90%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AD%90%E7%BB%84%E4%BB%B6%20%5Cnclass%20GrandChild%20extends%20Component%20%7B%5Cn%20%20%20%20render()%7B%5Cn%20%20%20%20%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CBatteryContext.Consumer%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20color%20%3D%3E%20%3Ch1%20style%3D%7B%7B%5C%22color%5C%22%3Acolor%7D%7D%3E%E6%88%91%E6%98%AF%E7%BA%A2%E8%89%B2%E7%9A%84%3A%7Bcolor%7D%3C%2Fh1%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2FBatteryContext.Consumer%3E%5Cn%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%2F%2F%20%20%E5%AD%90%E7%BB%84%E4%BB%B6%5Cnconst%20Child%20%3D%20()%20%3D%3E%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%3CGrandChild%2F%3E%5Cn%20%20%20%20)%5Cn%7D%5Cn%2F%2F%20%E7%88%B6%E7%BB%84%E4%BB%B6%5Cnclass%20Parent%20extends%20Component%20%7B%5Cn%20%20%20%20%20%20state%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20color%3A%5C%22red%5C%22%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20render()%7B%5Cn%20%20%20%20%20%20%20%20%20%20const%20%7Bcolor%7D%20%3D%20this.state%5Cn%20%20%20%20%20%20%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%20%20%3CBatteryContext.Provider%20value%3D%7Bcolor%7D%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CChild%3E%3C%2FChild%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3C%2FBatteryContext.Provider%3E%5Cn%20%20%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TMOr5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"899a9133870521995641a7156cee44a0\" id=\"899a9133870521995641a7156cee44a0\"><span data-lake-id=\"u9d0ef832\" id=\"u9d0ef832\">3. 非嵌套关系组件</span><span data-lake-id=\"u4c62340d\" id=\"u4c62340d\">的通信方式？</span></h3><p data-lake-id=\"10903c7fdb6c84a708158a5fbc5468e2\" id=\"10903c7fdb6c84a708158a5fbc5468e2\"><span data-lake-id=\"u5342301a\" id=\"u5342301a\">即没有任何包含关系的组件，包括兄弟组件以及不在同一个父级中的非兄弟组件。</span></p><ul list=\"u418663a8\"><li fid=\"u6a703ff1\" data-lake-id=\"e43013d92eb176a0d17ce412d9a5286c\" id=\"e43013d92eb176a0d17ce412d9a5286c\"><span data-lake-id=\"u5565ae52\" id=\"u5565ae52\">可以使用自定义事件通信（发布订阅模式）</span></li><li fid=\"u6a703ff1\" data-lake-id=\"158feeec76adb9ec966ef7dd542a5e76\" id=\"158feeec76adb9ec966ef7dd542a5e76\"><span data-lake-id=\"u5590c610\" id=\"u5590c610\">可以通过redux等进行全局状态管理</span></li><li fid=\"u6a703ff1\" data-lake-id=\"528838d50304aec54e5f47e3ff30a859\" id=\"528838d50304aec54e5f47e3ff30a859\"><span data-lake-id=\"ue65fd3aa\" id=\"ue65fd3aa\">如果是兄弟组件通信，可以找到这两个兄弟节点共同的父节点, 结合父子间通信方式进行通信。</span></li></ul><h3 data-lake-id=\"9ef53d95cddf0fe976860be2b7c5d7f8\" id=\"9ef53d95cddf0fe976860be2b7c5d7f8\"><span data-lake-id=\"u6c8d3390\" id=\"u6c8d3390\">4. 如何解决 props 层级过深的问题</span></h3><ul list=\"u26f2295a\"><li fid=\"ub033c2fe\" data-lake-id=\"15cd96b0423db02360f31d6927f4a40d\" id=\"15cd96b0423db02360f31d6927f4a40d\"><span data-lake-id=\"u7200f7ee\" id=\"u7200f7ee\">使用Context API：提供一种组件之间的状态共享，而不必通过显式组件树逐层传递props；</span></li><li fid=\"ub033c2fe\" data-lake-id=\"9c2483fcbf4d55a67a7faa79aad39988\" id=\"9c2483fcbf4d55a67a7faa79aad39988\"><span data-lake-id=\"ud96e7541\" id=\"ud96e7541\">使用Redux等状态库。</span></li></ul><h3 data-lake-id=\"82c4eea5fa47f8f1812870ef9e7243cb\" id=\"82c4eea5fa47f8f1812870ef9e7243cb\"><span data-lake-id=\"ueb0e1a43\" id=\"ueb0e1a43\">5. 组件通信的方式有哪些</span></h3><ul list=\"u375d1663\"><li fid=\"u11c833b7\" data-lake-id=\"732ef77ecee8a0e546dd8af7afbbfb1d\" id=\"732ef77ecee8a0e546dd8af7afbbfb1d\"><strong><span data-lake-id=\"uae8cc5eb\" id=\"uae8cc5eb\" style=\"background-color: transparent\">⽗组件向⼦组件通讯</span></strong><span data-lake-id=\"u72238ab5\" id=\"u72238ab5\" style=\"background-color: transparent\">: </span><span data-lake-id=\"u381e3aa1\" id=\"u381e3aa1\" style=\"background-color: transparent\">⽗组件可以向⼦组件通过传 </span><span data-lake-id=\"ua724d437\" id=\"ua724d437\" style=\"background-color: transparent\">props </span><span data-lake-id=\"u5451d4d7\" id=\"u5451d4d7\" style=\"background-color: transparent\">的⽅式，向⼦组件进⾏通讯 </span></li><li fid=\"u11c833b7\" data-lake-id=\"8ac01137bb4482c50faf118ad38b5ad9\" id=\"8ac01137bb4482c50faf118ad38b5ad9\"><strong><span data-lake-id=\"u1d79741d\" id=\"u1d79741d\">⼦组件向⽗组件通讯</span></strong><span data-lake-id=\"ua4f2e67a\" id=\"ua4f2e67a\">: props+回调的⽅式，⽗组件向⼦组件传递props进⾏通讯，此props为作⽤域为⽗组件⾃身的函 数，⼦组件调⽤该函数，将⼦组件想要传递的信息，作为参数，传递到⽗组件的作⽤域中 </span></li><li fid=\"u11c833b7\" data-lake-id=\"2b68395c22995935dfef2c2e7909974e\" id=\"2b68395c22995935dfef2c2e7909974e\"><strong><span data-lake-id=\"uf56c4f1f\" id=\"uf56c4f1f\">兄弟组件通信</span></strong><span data-lake-id=\"udd0ceccd\" id=\"udd0ceccd\">: </span><span data-lake-id=\"ua7593932\" id=\"ua7593932\">找到这两个兄弟节点共同的⽗节点</span><span data-lake-id=\"u21adcd87\" id=\"u21adcd87\">,</span><span data-lake-id=\"u37d83ea8\" id=\"u37d83ea8\">结合上⾯两种⽅式由⽗节点转发信息进⾏通信 </span></li><li fid=\"u11c833b7\" data-lake-id=\"3ae768d8a3e322728f13850b02ba4a80\" id=\"3ae768d8a3e322728f13850b02ba4a80\"><strong><span data-lake-id=\"ubf4e6ea5\" id=\"ubf4e6ea5\">跨层级通信</span></strong><span data-lake-id=\"u80a03168\" id=\"u80a03168\">: Context 设计⽬的是为了共享那些对于⼀个组件树⽽⾔是“全局”的数据，例如当前认证的⽤户、主题或⾸选语⾔，对于跨越多层的全局数据通过 Context 通信再适合不过 </span></li><li fid=\"u11c833b7\" data-lake-id=\"51a9e3c2356a62b3e2f05f4d994aeae9\" id=\"51a9e3c2356a62b3e2f05f4d994aeae9\"><strong><span data-lake-id=\"u644371b4\" id=\"u644371b4\">发布订阅模式</span></strong><span data-lake-id=\"ue4458bee\" id=\"ue4458bee\">: </span><span data-lake-id=\"u424a2bcd\" id=\"u424a2bcd\">发布者发布事件，订阅者监听事件并做出反应</span><span data-lake-id=\"u63befe8d\" id=\"u63befe8d\">,</span><span data-lake-id=\"u4af05d93\" id=\"u4af05d93\">我们可以通过引⼊</span><span data-lake-id=\"ua14a7acf\" id=\"ua14a7acf\">event</span><span data-lake-id=\"ue33bf945\" id=\"ue33bf945\">模块进⾏通信 </span></li><li fid=\"u11c833b7\" data-lake-id=\"e2883b75eb26921e1b38109a0abebcdd\" id=\"e2883b75eb26921e1b38109a0abebcdd\"><strong><span data-lake-id=\"ubacdb4f3\" id=\"ubacdb4f3\">全局状态管理⼯具</span></strong><span data-lake-id=\"uc3a4490b\" id=\"uc3a4490b\">: 借助Redux或者Mobx等全局状态管理⼯具进⾏通信,这种⼯具会维护⼀个全局状态中⼼Store,并根据不同的事件产⽣新的状态</span></li></ul><h2 data-lake-id=\"1c1e1a7e97e096d563a3f5ff865dd45a\" id=\"1c1e1a7e97e096d563a3f5ff865dd45a\"><span data-lake-id=\"u7119d8b2\" id=\"u7119d8b2\">五、</span><span data-lake-id=\"u9e846bc3\" id=\"u9e846bc3\">路由</span></h2><h3 data-lake-id=\"0d44374526e14666d6ecfbc3e0c87f84\" id=\"0d44374526e14666d6ecfbc3e0c87f84\"><span data-lake-id=\"u51e5922d\" id=\"u51e5922d\">1. </span><span data-lake-id=\"ua1269f96\" id=\"ua1269f96\">React-Router的实现原理是什么？</span></h3><p data-lake-id=\"558367a297afdc45d9a530b9bf9958fb\" id=\"558367a297afdc45d9a530b9bf9958fb\"><span data-lake-id=\"u5c1c6dfe\" id=\"u5c1c6dfe\">客户端路由实现的思想：</span></p><ul list=\"uec529ac7\"><li fid=\"u0c4d8afc\" data-lake-id=\"23802dbe24c828cbbbcd7d0394778d46\" id=\"23802dbe24c828cbbbcd7d0394778d46\"><span data-lake-id=\"u9200fb72\" id=\"u9200fb72\">基于 hash 的路由：通过监听</span><code data-lake-id=\"u0efc8165\" id=\"u0efc8165\"><span data-lake-id=\"u9e60462b\" id=\"u9e60462b\">hashchange</span></code><span data-lake-id=\"u9c6297ba\" id=\"u9c6297ba\">事件，感知 hash 的变化</span></li></ul><ul list=\"ue979995a\" data-lake-indent=\"1\"><li fid=\"u3396fb00\" data-lake-id=\"c2ca218cdc1c9c52adcc83fb53cad201\" id=\"c2ca218cdc1c9c52adcc83fb53cad201\"><span data-lake-id=\"u1eacc4d7\" id=\"u1eacc4d7\">改变 hash 可以直接通过 location.hash=xxx</span></li></ul><ul list=\"u294c1e02\"><li fid=\"u4bfe78ff\" data-lake-id=\"9052af88b6e649eb9ffb01ef514781b1\" id=\"9052af88b6e649eb9ffb01ef514781b1\"><span data-lake-id=\"u2d7275fc\" id=\"u2d7275fc\">基于 H5 history 路由：</span></li></ul><ul list=\"u1ab3ef48\" data-lake-indent=\"1\"><li fid=\"u697807c7\" data-lake-id=\"5f448745862e7f01931d8e4389910a27\" id=\"5f448745862e7f01931d8e4389910a27\"><span data-lake-id=\"u0aba2f89\" id=\"u0aba2f89\">改变 url 可以通过 history.pushState 和 resplaceState 等，会将URL压入堆栈，同时能够应用 </span><code data-lake-id=\"u3b1b5c92\" id=\"u3b1b5c92\"><span data-lake-id=\"u45bc733a\" id=\"u45bc733a\">history.go()</span></code><span data-lake-id=\"ued2c05ba\" id=\"ued2c05ba\"> 等 API</span></li><li fid=\"u697807c7\" data-lake-id=\"72ecdf6772c492717893fca763053549\" id=\"72ecdf6772c492717893fca763053549\"><span data-lake-id=\"ua5b842c9\" id=\"ua5b842c9\">监听 url 的变化可以通过自定义事件触发实现</span></li></ul><p data-lake-id=\"fac7e99e1eabdd5002f6038e88b49e0e\" id=\"fac7e99e1eabdd5002f6038e88b49e0e\" style=\"text-align: justify\"><br></p><p data-lake-id=\"a0beaa8f08de54b6aff9324b87a51b38\" id=\"a0beaa8f08de54b6aff9324b87a51b38\" style=\"text-align: justify\"><strong><span data-lake-id=\"ucb7123e9\" id=\"ucb7123e9\">react-router 实现的思想：</span></strong></p><ul list=\"ubc3ed55f\"><li fid=\"u88f6ac06\" data-lake-id=\"eabb9415dbdb96b288eabcd7fd84b56d\" id=\"eabb9415dbdb96b288eabcd7fd84b56d\"><span data-lake-id=\"u6403dc9b\" id=\"u6403dc9b\">基于 </span><code data-lake-id=\"ubf08616e\" id=\"ubf08616e\"><span data-lake-id=\"u627f783c\" id=\"u627f783c\">history</span></code><span data-lake-id=\"u4fc77d79\" id=\"u4fc77d79\"> 库来实现上述不同的客户端路由实现思想，并且能够保存历史记录等，磨平浏览器差异，上层无感知</span></li><li fid=\"u88f6ac06\" data-lake-id=\"c4a0a619cca54eac606c5b1e96899c27\" id=\"c4a0a619cca54eac606c5b1e96899c27\"><span data-lake-id=\"u9996a17d\" id=\"u9996a17d\">通过维护的列表，在每次 URL 发生变化的回收，通过配置的 路由路径，匹配到对应的 Component，并且 render</span></li></ul><h3 data-lake-id=\"36b47e018e0438fdb982cc33559e4a77\" id=\"36b47e018e0438fdb982cc33559e4a77\"><span data-lake-id=\"u5a302b87\" id=\"u5a302b87\">2. 如何配置 React-Router 实现路由切换</span></h3><p data-lake-id=\"26605cbfdb11aaf2931dcd584af52b4a\" id=\"26605cbfdb11aaf2931dcd584af52b4a\"><strong><span data-lake-id=\"u23444e8f\" id=\"u23444e8f\">（1）使用 &lt;Route&gt; 组件</span></strong></p><p data-lake-id=\"7e673ecdb81e6f78dd9302615527da82\" id=\"7e673ecdb81e6f78dd9302615527da82\"><span data-lake-id=\"uce45f705\" id=\"uce45f705\">路由匹配是通过比较 &lt;Route&gt; 的 path 属性和当前地址的 pathname 来实现的。当一个 &lt;Route&gt; 匹配成功时，它将渲染其内容，当它不匹配时就会渲染 null。没有路径的 &lt;Route&gt; 将始终被匹配。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20when%20location%20%3D%20%7B%20pathname%3A%20'%2Fabout'%20%7D%5Cn%3CRoute%20path%3D'%2Fabout'%20component%3D%7BAbout%7D%2F%3E%20%2F%2F%20renders%20%3CAbout%2F%3E%5Cn%3CRoute%20path%3D'%2Fcontact'%20component%3D%7BContact%7D%2F%3E%20%2F%2F%20renders%20null%5Cn%3CRoute%20component%3D%7BAlways%7D%2F%3E%20%2F%2F%20renders%20%3CAlways%2F%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22l1vnq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b7f19df5abaeec0f1de9581748e0d69a\" id=\"b7f19df5abaeec0f1de9581748e0d69a\"><strong><span data-lake-id=\"ud6144da1\" id=\"ud6144da1\">（2）结合使用 &lt;Switch&gt; 组件和 &lt;Route&gt; 组件</span></strong></p><p data-lake-id=\"c2d1968f8a2a3e99e8f044395fd8e21e\" id=\"c2d1968f8a2a3e99e8f044395fd8e21e\"><span data-lake-id=\"uf307feeb\" id=\"uf307feeb\">&lt;Switch&gt; 用于将 &lt;Route&gt; 分组。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3CSwitch%3E%5Cn%20%20%20%20%3CRoute%20exact%20path%3D%5C%22%2F%5C%22%20component%3D%7BHome%7D%20%2F%3E%5Cn%20%20%20%20%3CRoute%20path%3D%5C%22%2Fabout%5C%22%20component%3D%7BAbout%7D%20%2F%3E%5Cn%20%20%20%20%3CRoute%20path%3D%5C%22%2Fcontact%5C%22%20component%3D%7BContact%7D%20%2F%3E%5Cn%3C%2FSwitch%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vaXwZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"20c2344197f74803f55379814038fe33\" id=\"20c2344197f74803f55379814038fe33\"><span data-lake-id=\"u6cdfbed7\" id=\"u6cdfbed7\">&lt;Switch&gt; 不是分组 &lt;Route&gt; 所必须的，但他通常很有用。 一个 &lt;Switch&gt; 会遍历其所有的子 &lt;Route&gt;元素，并仅渲染与当前地址匹配的第一个元素。</span></p><p data-lake-id=\"a0569f650aaf563513cdae46252f6844\" id=\"a0569f650aaf563513cdae46252f6844\"><strong><span data-lake-id=\"ub9d6c981\" id=\"ub9d6c981\">（3）使用 &lt;Link&gt;、 &lt;NavLink&gt;、&lt;Redirect&gt; 组件</span></strong></p><p data-lake-id=\"713fc228867c35f791c8d6fc9c1c1cfb\" id=\"713fc228867c35f791c8d6fc9c1c1cfb\"><span data-lake-id=\"u45805c2e\" id=\"u45805c2e\">&lt;Link&gt; 组件来在你的应用程序中创建链接。无论你在何处渲染一个 &lt;Link&gt; ，都会在应用程序的 HTML 中渲染锚（&lt;a&gt;）。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3CLink%20to%3D%5C%22%2F%5C%22%3EHome%3C%2FLink%3E%20%20%20%5Cn%2F%2F%20%3Ca%20href%3D'%2F'%3EHome%3C%2Fa%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22DqBRu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"49a4d2ed4ad03354f5a57da0a3c9b785\" id=\"49a4d2ed4ad03354f5a57da0a3c9b785\"><span data-lake-id=\"u3475951d\" id=\"u3475951d\">&lt;NavLink&gt; 是一种特殊类型的 &lt;Link&gt; 当它的 to属性与当前地址匹配时，可以将其定义为&quot;活跃的&quot;。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20location%20%3D%20%7B%20pathname%3A%20'%2Freact'%20%7D%5Cn%3CNavLink%20to%3D%5C%22%2Freact%5C%22%20activeClassName%3D%5C%22hurray%5C%22%3E%5Cn%20%20%20%20React%5Cn%3C%2FNavLink%3E%5Cn%2F%2F%20%3Ca%20href%3D'%2Freact'%20className%3D'hurray'%3EReact%3C%2Fa%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GANls%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"0e6895665795a4ccee325213e1c4c27c\" id=\"0e6895665795a4ccee325213e1c4c27c\"><span data-lake-id=\"u72b27574\" id=\"u72b27574\">当我们想强制导航时，可以渲染一个</span><span data-lake-id=\"u5dc75f5d\" id=\"u5dc75f5d\">&lt;Redirect&gt;，当一个&lt;Redirect&gt;渲染时，它将使用它的to属性进行定向。</span></p><h3 data-lake-id=\"ea778e1889b6ce91e230ea3c2f13c07f\" id=\"ea778e1889b6ce91e230ea3c2f13c07f\"><span data-lake-id=\"u51046b6e\" id=\"u51046b6e\">3. </span><span data-lake-id=\"ufa9db2d7\" id=\"ufa9db2d7\">React-Router怎么设置重定向？</span></h3><p data-lake-id=\"ca3573efb4359cb114c5a85d70ea3e03\" id=\"ca3573efb4359cb114c5a85d70ea3e03\"><span data-lake-id=\"u929af75e\" id=\"u929af75e\">使用&lt;Redirect&gt;组件实现路由的重定向：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3CSwitch%3E%5Cn%20%20%3CRedirect%20from%3D'%2Fusers%2F%3Aid'%20to%3D'%2Fusers%2Fprofile%2F%3Aid'%2F%3E%5Cn%20%20%3CRoute%20path%3D'%2Fusers%2Fprofile%2F%3Aid'%20component%3D%7BProfile%7D%2F%3E%5Cn%3C%2FSwitch%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22g8tS9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"dd3f206a9391a75876ea380a109020ec\" id=\"dd3f206a9391a75876ea380a109020ec\"><span data-lake-id=\"u83efcb88\" id=\"u83efcb88\">当请求 </span><code data-lake-id=\"u75fbbf65\" id=\"u75fbbf65\"><span data-lake-id=\"u2e50f8fa\" id=\"u2e50f8fa\">/users/:id</span></code><span data-lake-id=\"uc5e45580\" id=\"uc5e45580\"> 被重定向去 </span><code data-lake-id=\"uffa7e5f9\" id=\"uffa7e5f9\"><span data-lake-id=\"uf5e39eb1\" id=\"uf5e39eb1\">'/users/profile/:id'</span></code><span data-lake-id=\"u893b5501\" id=\"u893b5501\">：</span></p><ul list=\"u6113c4b3\"><li fid=\"ue4388a2f\" data-lake-id=\"b6299c4c0fe53734d9bb248f6a8a6106\" id=\"b6299c4c0fe53734d9bb248f6a8a6106\"><span data-lake-id=\"u46fa3200\" id=\"u46fa3200\">属性 </span><code data-lake-id=\"ue129ce08\" id=\"ue129ce08\"><span data-lake-id=\"u7215659a\" id=\"u7215659a\">from: string</span></code><span data-lake-id=\"u133036a5\" id=\"u133036a5\">：需要匹配的将要被重定向路径。</span></li><li fid=\"ue4388a2f\" data-lake-id=\"14d51375cc14816327ce2b5ee6430870\" id=\"14d51375cc14816327ce2b5ee6430870\"><span data-lake-id=\"uf9b40a3c\" id=\"uf9b40a3c\">属性 </span><code data-lake-id=\"ua38e626f\" id=\"ua38e626f\"><span data-lake-id=\"u49fc3314\" id=\"u49fc3314\">to: string</span></code><span data-lake-id=\"u0fb3a7bc\" id=\"u0fb3a7bc\">：重定向的 URL 字符串</span></li><li fid=\"ue4388a2f\" data-lake-id=\"93d2a6eb9ce6b2b6427b0c79fdde40e8\" id=\"93d2a6eb9ce6b2b6427b0c79fdde40e8\"><span data-lake-id=\"uecfb178c\" id=\"uecfb178c\">属性 </span><code data-lake-id=\"ud92058e7\" id=\"ud92058e7\"><span data-lake-id=\"u6671846b\" id=\"u6671846b\">to: object</span></code><span data-lake-id=\"u78db9bcb\" id=\"u78db9bcb\">：重定向的 location 对象</span></li><li fid=\"ue4388a2f\" data-lake-id=\"6088ca1c031f5fc0a1a70cc13396f0d4\" id=\"6088ca1c031f5fc0a1a70cc13396f0d4\"><span data-lake-id=\"ue3700536\" id=\"ue3700536\">属性 </span><code data-lake-id=\"u848a1383\" id=\"u848a1383\"><span data-lake-id=\"u60bbf9d9\" id=\"u60bbf9d9\">push: bool</span></code><span data-lake-id=\"uab755dbd\" id=\"uab755dbd\">：若为真，重定向操作将会把新地址加入到访问历史记录里面，并且无法回退到前面的页面。</span></li></ul><h3 data-lake-id=\"64319a26e1399bebad422be521762123\" id=\"64319a26e1399bebad422be521762123\"><span data-lake-id=\"u3fa755f6\" id=\"u3fa755f6\">4. </span><span data-lake-id=\"u6ffb6678\" id=\"u6ffb6678\">react-router 里的 Link 标签和 a 标签的区别</span></h3><p data-lake-id=\"529cfb815e2a4678dfd74815de63390d\" id=\"529cfb815e2a4678dfd74815de63390d\"><span data-lake-id=\"u22527a30\" id=\"u22527a30\">从最终渲染的 DOM 来看，这两者都是链接，都是 标签，区别是∶ </span></p><p data-lake-id=\"a48dd2ced702993e46737279bc330393\" id=\"a48dd2ced702993e46737279bc330393\"><span data-lake-id=\"ueae3a37a\" id=\"ueae3a37a\">&lt;Link&gt;是react-router 里实现路由跳转的链接，一般配合&lt;Route&gt; 使用，react-router接管了其默认的链接跳转行为，区别于传统的页面跳转，&lt;Link&gt; 的“跳转”行为只会触发相匹配的&lt;Route&gt;对应的页面内容更新，而不会刷新整个页面。</span></p><p data-lake-id=\"3d7d5cb9daeed7187494beddd5a71735\" id=\"3d7d5cb9daeed7187494beddd5a71735\"><br></p><p data-lake-id=\"b9a226d433e4381451c4c417bdb6a23d\" id=\"b9a226d433e4381451c4c417bdb6a23d\"><span data-lake-id=\"u064c8b61\" id=\"u064c8b61\">&lt;Link&gt;做了3件事情:</span></p><ul list=\"u6dcf1997\"><li fid=\"u6dfa1961\" data-lake-id=\"229e776972ec25a6a1c692ad9857253e\" id=\"229e776972ec25a6a1c692ad9857253e\"><span data-lake-id=\"u24241830\" id=\"u24241830\">有onclick那就执行onclick</span></li><li fid=\"u6dfa1961\" data-lake-id=\"6c7e125f76842d20c6a5b68d46d6d5b8\" id=\"6c7e125f76842d20c6a5b68d46d6d5b8\"><span data-lake-id=\"u6b7659bb\" id=\"u6b7659bb\">click的时候阻止a标签默认事件</span></li><li fid=\"u6dfa1961\" data-lake-id=\"5e2055dcca5a417cfbe653c45543d40c\" id=\"5e2055dcca5a417cfbe653c45543d40c\"><span data-lake-id=\"u51615ef4\" id=\"u51615ef4\">根据跳转href(即是to)，用history (web前端路由两种方式之一，history &amp; hash)跳转，此时只是链接变了，并没有刷新页面而&lt;a&gt;标签就是普通的超链接了，用于从当前页面跳转到href指向的另一 个页面(非锚点情况)。</span></li></ul><p data-lake-id=\"187464802ab353b8c646c168824c0d40\" id=\"187464802ab353b8c646c168824c0d40\"><br></p><p data-lake-id=\"2650353ab167ed9ca5e84199e251bc9f\" id=\"2650353ab167ed9ca5e84199e251bc9f\"><span data-lake-id=\"ue11720bc\" id=\"ue11720bc\">a标签默认事件禁掉之后做了什么才实现了跳转?</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20domArr%20%3D%20document.getElementsByTagName('a')%5Cn%5B...domArr%5D.forEach(item%3D%3E%7B%5Cn%20%20%20%20item.addEventListener('click'%2Cfunction%20()%20%7B%5Cn%20%20%20%20%20%20%20%20location.href%20%3D%20this.href%5Cn%20%20%20%20%7D)%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TbwpT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"550804ba3b0fcdb274bbc58fe65140f6\" id=\"550804ba3b0fcdb274bbc58fe65140f6\"><span data-lake-id=\"ubcc99059\" id=\"ubcc99059\">5. React-Router如何获取URL的参数和历史对象？</span></h3><p data-lake-id=\"fa1b8d1b0bcb181ae89102914fc99ee4\" id=\"fa1b8d1b0bcb181ae89102914fc99ee4\"><strong><span data-lake-id=\"u07e6f5c2\" id=\"u07e6f5c2\">（1）获取URL的参数</span></strong></p><ul list=\"uaa281e72\"><li fid=\"uc5eebc49\" data-lake-id=\"35e1e2cc52aeec9fab2fde4f0b1f2f7b\" id=\"35e1e2cc52aeec9fab2fde4f0b1f2f7b\"><strong><span data-lake-id=\"u0f24297f\" id=\"u0f24297f\">get传值</span></strong></li></ul><p data-lake-id=\"ed2adec857b8e09503788843dc3bf286\" id=\"ed2adec857b8e09503788843dc3bf286\"><span data-lake-id=\"ue37afa52\" id=\"ue37afa52\">路由配置还是普通的配置，如：</span><code data-lake-id=\"u7ddbb6b0\" id=\"u7ddbb6b0\"><span data-lake-id=\"u2b962e59\" id=\"u2b962e59\">'admin'</span></code><span data-lake-id=\"ufdac8a54\" id=\"ufdac8a54\">，传参方式如：</span><code data-lake-id=\"uc4777ba1\" id=\"uc4777ba1\"><span data-lake-id=\"ub1bae0a6\" id=\"ub1bae0a6\">'admin?id='1111''</span></code><span data-lake-id=\"u009b54ea\" id=\"u009b54ea\">。通过</span><code data-lake-id=\"uf717c712\" id=\"uf717c712\"><span data-lake-id=\"uaf632f92\" id=\"uaf632f92\">this.props.location.search</span></code><span data-lake-id=\"u9a2f8a8d\" id=\"u9a2f8a8d\">获取url获取到一个字符串</span><code data-lake-id=\"u5ae097e2\" id=\"u5ae097e2\"><span data-lake-id=\"uc92818e0\" id=\"uc92818e0\">'?id='1111'</span></code></p><p data-lake-id=\"7cdcabeceb701a2aa31f2266eb42ee1d\" id=\"7cdcabeceb701a2aa31f2266eb42ee1d\"><span data-lake-id=\"uabd59de9\" id=\"uabd59de9\">可以用url，qs，querystring，浏览器提供的api URLSearchParams对象或者自己封装的方法去解析出id的值。</span></p><ul list=\"u25bf9944\"><li fid=\"uda480d9b\" data-lake-id=\"db3067aa0996162d74fe58867bd8cb0c\" id=\"db3067aa0996162d74fe58867bd8cb0c\"><strong><span data-lake-id=\"u181fb250\" id=\"u181fb250\">动态路由传值</span></strong></li></ul><p data-lake-id=\"2f3dd7e83b4a064df116db1a8e2fc31a\" id=\"2f3dd7e83b4a064df116db1a8e2fc31a\"><span data-lake-id=\"u22f90870\" id=\"u22f90870\">路由需要配置成动态路由：如</span><code data-lake-id=\"ub20fa475\" id=\"ub20fa475\"><span data-lake-id=\"u72d0fe48\" id=\"u72d0fe48\">path='/admin/:id'</span></code><span data-lake-id=\"u2866d8b8\" id=\"u2866d8b8\">，传参方式，如</span><code data-lake-id=\"uebdbdd96\" id=\"uebdbdd96\"><span data-lake-id=\"u6c9e78d4\" id=\"u6c9e78d4\">'admin/111'</span></code><span data-lake-id=\"u5e7fe9be\" id=\"u5e7fe9be\">。通过</span><code data-lake-id=\"u4ccbc4b4\" id=\"u4ccbc4b4\"><span data-lake-id=\"u0ddb1ac7\" id=\"u0ddb1ac7\">this.props.match.params.id</span></code><span data-lake-id=\"u7534c189\" id=\"u7534c189\"> 取得url中的动态路由id部分的值，除此之外还可以通过</span><code data-lake-id=\"u85af8e64\" id=\"u85af8e64\"><span data-lake-id=\"ud73336ea\" id=\"ud73336ea\">useParams（Hooks）</span></code><span data-lake-id=\"u6fe151e1\" id=\"u6fe151e1\">来获取</span></p><ul list=\"u653ee7f8\"><li fid=\"u7cc71d3e\" data-lake-id=\"d70216bc5b1102ad33a4903268125962\" id=\"d70216bc5b1102ad33a4903268125962\"><strong><span data-lake-id=\"uf7e2ed44\" id=\"uf7e2ed44\">通过query或state传值</span></strong></li></ul><p data-lake-id=\"7a62aa89fcfd5d931613186b70b4ef12\" id=\"7a62aa89fcfd5d931613186b70b4ef12\"><span data-lake-id=\"ucdfa5873\" id=\"ucdfa5873\">传参方式如：在Link组件的to属性中可以传递对象</span><code data-lake-id=\"u9f68e0af\" id=\"u9f68e0af\"><span data-lake-id=\"u1d2f6309\" id=\"u1d2f6309\">{pathname:'/admin',query:'111',state:'111'};</span></code><span data-lake-id=\"u3f1d7a62\" id=\"u3f1d7a62\">。通过</span><code data-lake-id=\"ucff4ce98\" id=\"ucff4ce98\"><span data-lake-id=\"u4cd4f7a7\" id=\"u4cd4f7a7\">this.props.location.state</span></code><span data-lake-id=\"u3d9bde31\" id=\"u3d9bde31\">或</span><code data-lake-id=\"u343579a0\" id=\"u343579a0\"><span data-lake-id=\"u31c92482\" id=\"u31c92482\">this.props.location.query</span></code><span data-lake-id=\"u1533e2e2\" id=\"u1533e2e2\">来获取即可，传递的参数可以是对象、数组等，但是存在缺点就是只要刷新页面，参数就会丢失。</span></p><p data-lake-id=\"2ed6ba0a3bf9f8e2f2c05748d1864c50\" id=\"2ed6ba0a3bf9f8e2f2c05748d1864c50\"><strong><span data-lake-id=\"u4fbd8a4e\" id=\"u4fbd8a4e\">（2）获取历史对象</span></strong></p><ul list=\"ua7552503\"><li fid=\"uf62e8ebe\" data-lake-id=\"61a49583a55574d208cd3e2efc3170f3\" id=\"61a49583a55574d208cd3e2efc3170f3\"><span data-lake-id=\"uf6c0ce8c\" id=\"uf6c0ce8c\">如果React &gt;= 16.8 时可以使用 React Router中提供的Hooks</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20useHistory%20%7D%20from%20%5C%22react-router-dom%5C%22%3B%5Cnlet%20history%20%3D%20useHistory()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22iflQi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"04c5c455c54999bb33e7b09654ee2f46\" id=\"04c5c455c54999bb33e7b09654ee2f46\"><span data-lake-id=\"u464a4b77\" id=\"u464a4b77\">2.使用this.props.history获取历史对象</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22let%20history%20%3D%20this.props.history%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dNRCk%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"ca2ba7af8ad8c6dbb01da4fa36915f5d\" id=\"ca2ba7af8ad8c6dbb01da4fa36915f5d\"><span data-lake-id=\"ue5d16572\" id=\"ue5d16572\">6. React-Router 4怎样在路由变化时重新渲染同一个组件？</span></h3><p data-lake-id=\"f75e8e147434eb9702ff8f231aff489f\" id=\"f75e8e147434eb9702ff8f231aff489f\"><span data-lake-id=\"u990378a5\" id=\"u990378a5\">当路由变化时，即组件的props发生了变化，会调用componentWillReceiveProps等生命周期钩子。那需要做的只是： 当路由改变时，根据路由，也去请求数据：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20NewsList%20extends%20Component%20%7B%5Cn%20%20componentDidMount%20()%20%7B%5Cn%20%20%20%20%20this.fetchData(this.props.location)%3B%5Cn%20%20%7D%5Cn%20%20%5Cn%20%20fetchData(location)%20%7B%5Cn%20%20%20%20const%20type%20%3D%20location.pathname.replace('%2F'%2C%20'')%20%7C%7C%20'top'%5Cn%20%20%20%20this.props.dispatch(fetchListData(type))%5Cn%20%20%7D%5Cn%20%20componentWillReceiveProps(nextProps)%20%7B%5Cn%20%20%20%20%20if%20(nextProps.location.pathname%20!%3D%20this.props.location.pathname)%20%7B%5Cn%20%20%20%20%20%20%20%20%20this.fetchData(nextProps.location)%3B%5Cn%20%20%20%20%20%7D%20%5Cn%20%20%7D%5Cn%20%20render%20()%20%7B%5Cn%20%20%20%20...%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jcVL7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"e7ae4fca69f871ebfcc87b38c170cc46\" id=\"e7ae4fca69f871ebfcc87b38c170cc46\" style=\"text-align: left\"><span data-lake-id=\"ubba594e0\" id=\"ubba594e0\">利用生命周期</span><span data-lake-id=\"ubbdcac83\" id=\"ubbdcac83\">componentWillReceiveProps</span><span data-lake-id=\"uebdba021\" id=\"uebdba021\">，进行重新render的预处理操作。</span></p><h3 data-lake-id=\"efc2f4dcddf42d1bdc5dc16f81be69d7\" id=\"efc2f4dcddf42d1bdc5dc16f81be69d7\"><span data-lake-id=\"uc7ff7c53\" id=\"uc7ff7c53\">7. React-Router的路由有几种模式？</span></h3><p data-lake-id=\"7ea01fd1e0b5699cd8838767de6e0ead\" id=\"7ea01fd1e0b5699cd8838767de6e0ead\"><span data-lake-id=\"uf4720606\" id=\"uf4720606\">React-Router 支持使用 hash（对应 HashRouter）和 browser（对应 BrowserRouter） 两种路由规则， react-router-dom 提供了 BrowserRouter 和 HashRouter 两个组件来实现应用的 UI 和 URL 同步：</span></p><ul list=\"uf0686b45\"><li fid=\"udc8184d4\" data-lake-id=\"5cff3763930e446c94392a640dd4efbd\" id=\"5cff3763930e446c94392a640dd4efbd\"><span data-lake-id=\"u57c9cbdf\" id=\"u57c9cbdf\">BrowserRouter 创建的 URL 格式：</span><a href=\"http://xxx.com/path\" target=\"_blank\" data-lake-id=\"u7e81a058\" id=\"u7e81a058\"><span data-lake-id=\"uaaf3ca5b\" id=\"uaaf3ca5b\">http://xxx.com/path</span></a></li><li fid=\"udc8184d4\" data-lake-id=\"c5ef0f4bc74bee4a60a5b809ad5d871c\" id=\"c5ef0f4bc74bee4a60a5b809ad5d871c\"><span data-lake-id=\"u1a3d08d2\" id=\"u1a3d08d2\">HashRouter 创建的 URL 格式：</span><a href=\"http://xxx.com/#/path\" target=\"_blank\" data-lake-id=\"u7ec902c7\" id=\"u7ec902c7\"><span data-lake-id=\"u2e07aab5\" id=\"u2e07aab5\">http://xxx.com/#/path</span></a></li></ul><p data-lake-id=\"71bd0713f0fd09c839c72b6fbff1d135\" id=\"71bd0713f0fd09c839c72b6fbff1d135\"><br></p><p data-lake-id=\"fbf685cc3206670d306d29a59e930923\" id=\"fbf685cc3206670d306d29a59e930923\"><strong><span data-lake-id=\"u051e270b\" id=\"u051e270b\">（1）BrowserRouter</span></strong></p><p data-lake-id=\"fefccc550a5f99c588ad44163b274bd3\" id=\"fefccc550a5f99c588ad44163b274bd3\" style=\"text-align: justify\"><span data-lake-id=\"ue1075ca6\" id=\"ue1075ca6\">它使用 HTML5 提供的 history API（pushState、replaceState 和 popstate 事件）来保持 UI 和 URL 的同步。由此可以看出，</span><strong><span data-lake-id=\"u74e16874\" id=\"u74e16874\">BrowserRouter 是使用 HTML 5 的 history API 来控制路由跳转的：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3CBrowserRouter%5Cn%20%20%20%20basename%3D%7Bstring%7D%5Cn%20%20%20%20forceRefresh%3D%7Bbool%7D%5Cn%20%20%20%20getUserConfirmation%3D%7Bfunc%7D%5Cn%20%20%20%20keyLength%3D%7Bnumber%7D%5Cn%2F%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22KJEkT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"e6548909794a2f4fb08d47633f39f3d9\" id=\"e6548909794a2f4fb08d47633f39f3d9\"><strong><span data-lake-id=\"u2fbaea78\" id=\"u2fbaea78\">其中的属性如下：</span></strong></p><ul list=\"uf038be02\"><li fid=\"uea690edb\" data-lake-id=\"b52e09b95101878bc6177ce0a870abc5\" id=\"b52e09b95101878bc6177ce0a870abc5\"><span data-lake-id=\"u9bf1ffc4\" id=\"u9bf1ffc4\">basename 所有路由的基准 URL。basename 的正确格式是前面有一个前导斜杠，但不能有尾部斜杠；</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3CBrowserRouter%20basename%3D%5C%22%2Fcalendar%5C%22%3E%5Cn%20%20%20%20%3CLink%20to%3D%5C%22%2Ftoday%5C%22%20%2F%3E%5Cn%3C%2FBrowserRouter%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%221O9vn%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"fa8674a6582be882446301f305d53a28\" id=\"fa8674a6582be882446301f305d53a28\" style=\"text-align: justify\"><span data-lake-id=\"u695ff314\" id=\"u695ff314\">等同于</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ca%20href%3D%5C%22%2Fcalendar%2Ftoday%5C%22%20%2F%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%229f1Cc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u9edd21ee\"><li fid=\"u5387a6a3\" data-lake-id=\"381b171e19d87c3ff8c55c4a70262307\" id=\"381b171e19d87c3ff8c55c4a70262307\"><span data-lake-id=\"u5a53fd98\" id=\"u5a53fd98\">forceRefresh 如果为 true，在导航的过程中整个页面将会刷新。一般情况下，只有在不支持 HTML5 history API 的浏览器中使用此功能；</span></li><li fid=\"u5387a6a3\" data-lake-id=\"677c6ea8851dda33885d4c8945eb1ec4\" id=\"677c6ea8851dda33885d4c8945eb1ec4\"><span data-lake-id=\"u8f7f589d\" id=\"u8f7f589d\">getUserConfirmation 用于确认导航的函数，默认使用 window.confirm。例如，当从 /a 导航至 /b 时，会使用默认的 confirm 函数弹出一个提示，用户点击确定后才进行导航，否则不做任何处理；</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E8%BF%99%E6%98%AF%E9%BB%98%E8%AE%A4%E7%9A%84%E7%A1%AE%E8%AE%A4%E5%87%BD%E6%95%B0%5Cnconst%20getConfirmation%20%3D%20(message%2C%20callback)%20%3D%3E%20%7B%5Cn%20%20const%20allowTransition%20%3D%20window.confirm(message)%3B%5Cn%20%20callback(allowTransition)%3B%5Cn%7D%5Cn%3CBrowserRouter%20getUserConfirmation%3D%7BgetConfirmation%7D%20%2F%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22XLNcD%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><blockquote data-lake-id=\"u24fcdd24\" id=\"u24fcdd24\"><p data-lake-id=\"1b51afa9c816906599403f90220f0d6a\" id=\"1b51afa9c816906599403f90220f0d6a\" style=\"text-align: justify\"><span data-lake-id=\"u09420c39\" id=\"u09420c39\" style=\"background-color: #F5F5F5\">需要配合</span><code data-lake-id=\"ub1e7dffc\" id=\"ub1e7dffc\"><span data-lake-id=\"u3bd70c2f\" id=\"u3bd70c2f\" style=\"background-color: #F5F5F5\">&lt;Prompt&gt;</span></code><span data-lake-id=\"u95f74d0d\" id=\"u95f74d0d\" style=\"background-color: #F5F5F5\"> 一起使用。</span></p></blockquote><ul list=\"uc0c7d0e7\"><li fid=\"u3a07181f\" data-lake-id=\"462c7e466eba1f5c5d28088300fae41d\" id=\"462c7e466eba1f5c5d28088300fae41d\"><span data-lake-id=\"uc08a0d74\" id=\"uc08a0d74\">KeyLength 用来设置 Location.Key 的长度。</span></li></ul><p data-lake-id=\"351c4cdccb35c6f3acd9caca16d98fb3\" id=\"351c4cdccb35c6f3acd9caca16d98fb3\"><br></p><p data-lake-id=\"18fb4b6fc46ab4742c59b5444dca153d\" id=\"18fb4b6fc46ab4742c59b5444dca153d\"><strong><span data-lake-id=\"u78d918f4\" id=\"u78d918f4\">（2）HashRouter</span></strong></p><p data-lake-id=\"3c24616e829c8858494087e35dad5cf5\" id=\"3c24616e829c8858494087e35dad5cf5\" style=\"text-align: justify\"><span data-lake-id=\"ufb3ee651\" id=\"ufb3ee651\">使用 URL 的 hash 部分（即 window.location.hash）来保持 UI 和 URL 的同步。由此可以看出，</span><strong><span data-lake-id=\"u49c4568e\" id=\"u49c4568e\">HashRouter 是通过 URL 的 hash 属性来控制路由跳转的：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3CHashRouter%5Cn%20%20%20%20basename%3D%7Bstring%7D%5Cn%20%20%20%20getUserConfirmation%3D%7Bfunc%7D%5Cn%20%20%20%20hashType%3D%7Bstring%7D%20%20%5Cn%2F%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jEfM5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"6fe8c653fefd129ebcbcdd0ba43c7d5a\" id=\"6fe8c653fefd129ebcbcdd0ba43c7d5a\"><strong><span data-lake-id=\"u9acbf6d7\" id=\"u9acbf6d7\">其中的参数如下</span></strong><span data-lake-id=\"uf21cdc14\" id=\"uf21cdc14\">：</span></p><ul list=\"u26dab311\"><li fid=\"u731b86af\" data-lake-id=\"76fdeb75b3e002afb23045ccf79f63b8\" id=\"76fdeb75b3e002afb23045ccf79f63b8\"><span data-lake-id=\"u60be5b00\" id=\"u60be5b00\">basename, getUserConfirmation 和 </span><code data-lake-id=\"uecfd10d6\" id=\"uecfd10d6\"><span data-lake-id=\"ud4871f5f\" id=\"ud4871f5f\">BrowserRouter</span></code><span data-lake-id=\"ubd63250f\" id=\"ubd63250f\"> 功能一样；</span></li><li fid=\"u731b86af\" data-lake-id=\"62776c50011828245af2ded25403e4e4\" id=\"62776c50011828245af2ded25403e4e4\"><span data-lake-id=\"uf0dfa752\" id=\"uf0dfa752\">hashType window.location.hash 使用的 hash 类型，有如下几种：</span></li></ul><ul list=\"u176112fd\" data-lake-indent=\"1\"><li fid=\"ua9c9b060\" data-lake-id=\"fdaec1f479406459376a067e24cbc85b\" id=\"fdaec1f479406459376a067e24cbc85b\"><span data-lake-id=\"u8a362a70\" id=\"u8a362a70\">slash - 后面跟一个斜杠，例如 #/ 和 #/sunshine/lollipops；</span></li><li fid=\"ua9c9b060\" data-lake-id=\"c60333c07c1c2bd43dbd3ce0fdcaecba\" id=\"c60333c07c1c2bd43dbd3ce0fdcaecba\"><span data-lake-id=\"ua88ef6db\" id=\"ua88ef6db\">noslash - 后面没有斜杠，例如 # 和 #sunshine/lollipops；</span></li><li fid=\"ua9c9b060\" data-lake-id=\"42539e2421554b2862c2f19ea2f81ff0\" id=\"42539e2421554b2862c2f19ea2f81ff0\"><span data-lake-id=\"u942fc780\" id=\"u942fc780\">hashbang - Google 风格的 ajax crawlable，例如 #!/ 和 #!/sunshine/lollipops。</span></li></ul><h3 data-lake-id=\"ff4b04da6a1a886e85bc252613c3c4b0\" id=\"ff4b04da6a1a886e85bc252613c3c4b0\"><span data-lake-id=\"ueda53b73\" id=\"ueda53b73\">8. React-Router 4的Switch有什么用？</span></h3><p data-lake-id=\"27e09d5af0edc095054af0dafad5d568\" id=\"27e09d5af0edc095054af0dafad5d568\"><span data-lake-id=\"ue933918e\" id=\"ue933918e\">Switch 通常被用来包裹 Route，用于渲染与路径匹配的第一个子 </span><code data-lake-id=\"u6387923c\" id=\"u6387923c\"><span data-lake-id=\"u66d42c9e\" id=\"u66d42c9e\">&lt;Route&gt;</span></code><span data-lake-id=\"u2821ca0b\" id=\"u2821ca0b\"> 或 </span><code data-lake-id=\"u4e583d9c\" id=\"u4e583d9c\"><span data-lake-id=\"u0d1cb040\" id=\"u0d1cb040\">&lt;Redirect&gt;</span></code><span data-lake-id=\"uf3201423\" id=\"uf3201423\">，它里面不能放其他元素。</span></p><p data-lake-id=\"4961f665064cea4e04ec4921871172b6\" id=\"4961f665064cea4e04ec4921871172b6\"><br></p><p data-lake-id=\"e94c86211511f03936b2076376cd7e49\" id=\"e94c86211511f03936b2076376cd7e49\" style=\"text-align: justify\"><span data-lake-id=\"u843e1f5a\" id=\"u843e1f5a\">假如不加 </span><code data-lake-id=\"uecedb9b0\" id=\"uecedb9b0\"><span data-lake-id=\"u15ba78ff\" id=\"u15ba78ff\">&lt;Switch&gt;</span></code><span data-lake-id=\"u9827daaf\" id=\"u9827daaf\"> ：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20Route%20%7D%20from%20'react-router-dom'%5Cn%5Cn%3CRoute%20path%3D%5C%22%2F%5C%22%20component%3D%7BHome%7D%3E%3C%2FRoute%3E%5Cn%3CRoute%20path%3D%5C%22%2Flogin%5C%22%20component%3D%7BLogin%7D%3E%3C%2FRoute%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22F7l99%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"15c7bb16637166debaebf80e4a460c15\" id=\"15c7bb16637166debaebf80e4a460c15\" style=\"text-align: justify\"><span data-lake-id=\"u02236224\" id=\"u02236224\">Route 组件的 path 属性用于匹配路径，因为需要匹配 </span><code data-lake-id=\"u056708d4\" id=\"u056708d4\"><span data-lake-id=\"u9194aec9\" id=\"u9194aec9\">/</span></code><span data-lake-id=\"u3a1a39b3\" id=\"u3a1a39b3\"> 到 </span><code data-lake-id=\"ud02de989\" id=\"ud02de989\"><span data-lake-id=\"ue7742a1c\" id=\"ue7742a1c\">Home</span></code><span data-lake-id=\"u5f903603\" id=\"u5f903603\">，匹配 </span><code data-lake-id=\"u112177f7\" id=\"u112177f7\"><span data-lake-id=\"uf512622a\" id=\"uf512622a\">/login</span></code><span data-lake-id=\"ud7b62e7c\" id=\"ud7b62e7c\"> 到 </span><code data-lake-id=\"u91275a23\" id=\"u91275a23\"><span data-lake-id=\"ued650304\" id=\"ued650304\">Login</span></code><span data-lake-id=\"u651a992e\" id=\"u651a992e\">，所以需要两个 Route，但是不能这么写。这样写的话，</span><span data-lake-id=\"uec9feee9\" id=\"uec9feee9\">当 URL 的 path 为 “/login” 时，</span><code data-lake-id=\"u64052c8a\" id=\"u64052c8a\"><span data-lake-id=\"u27e8c817\" id=\"u27e8c817\">&lt;Route path=&quot;/&quot; /&gt;</span></code><span data-lake-id=\"u3969246a\" id=\"u3969246a\">和</span><code data-lake-id=\"u35032cf3\" id=\"u35032cf3\"><span data-lake-id=\"ubb03fbb7\" id=\"ubb03fbb7\">&lt;Route path=&quot;/login&quot; /&gt;</span></code><span data-lake-id=\"u123160d2\" id=\"u123160d2\"> 都会被匹配，因此页面会展示 Home 和 Login 两个组件。这时就需要借助 </span><code data-lake-id=\"ua72fb156\" id=\"ua72fb156\"><span data-lake-id=\"u22169796\" id=\"u22169796\">&lt;Switch&gt;</span></code><span data-lake-id=\"uaf44e625\" id=\"uaf44e625\"> 来做到只显示一个匹配组件：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20Switch%2C%20Route%7D%20from%20'react-router-dom'%5Cn%20%20%20%20%5Cn%3CSwitch%3E%5Cn%20%20%20%20%3CRoute%20path%3D%5C%22%2F%5C%22%20component%3D%7BHome%7D%3E%3C%2FRoute%3E%5Cn%20%20%20%20%3CRoute%20path%3D%5C%22%2Flogin%5C%22%20component%3D%7BLogin%7D%3E%3C%2FRoute%3E%5Cn%3C%2FSwitch%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%2255fjQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"29e840eb45664d7c06a6ac29f057095a\" id=\"29e840eb45664d7c06a6ac29f057095a\" style=\"text-align: justify\"><span data-lake-id=\"u09f0e882\" id=\"u09f0e882\">此时，再访问 “/login” 路径时，却只显示了 Home 组件。这是就用到了exact属性，它</span><span data-lake-id=\"u6ff028ed\" id=\"u6ff028ed\">的作用就是精确匹配路径，经常与</span><code data-lake-id=\"uc410a175\" id=\"uc410a175\"><span data-lake-id=\"u6b4718f5\" id=\"u6b4718f5\">&lt;Switch&gt;</span></code><span data-lake-id=\"u0464e107\" id=\"u0464e107\"> 联合使用。只有当 URL 和该 </span><code data-lake-id=\"ubbe8f3fa\" id=\"ubbe8f3fa\"><span data-lake-id=\"u73a4667f\" id=\"u73a4667f\">&lt;Route&gt;</span></code><span data-lake-id=\"u438bf63a\" id=\"u438bf63a\"> 的 path 属性完全一致的情况下才能匹配上：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%20Switch%2C%20Route%7D%20from%20'react-router-dom'%5Cn%20%20%20%5Cn%3CSwitch%3E%5Cn%20%20%20%3CRoute%20exact%20path%3D%5C%22%2F%5C%22%20component%3D%7BHome%7D%3E%3C%2FRoute%3E%5Cn%20%20%20%3CRoute%20exact%20path%3D%5C%22%2Flogin%5C%22%20component%3D%7BLogin%7D%3E%3C%2FRoute%3E%5Cn%3C%2FSwitch%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22S1mRb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"c5858f5855668cfe1c047f0f470acab2\" id=\"c5858f5855668cfe1c047f0f470acab2\"><span data-lake-id=\"u9259d32e\" id=\"u9259d32e\">六、</span><span data-lake-id=\"u8516f5b2\" id=\"u8516f5b2\">Redux</span></h2><h3 data-lake-id=\"a03a11ff2cec9e9af1df9a4ecc2009dc\" id=\"a03a11ff2cec9e9af1df9a4ecc2009dc\"><span data-lake-id=\"uadf9e56f\" id=\"uadf9e56f\">1. </span><span data-lake-id=\"u4fce0a2d\" id=\"u4fce0a2d\">对 Redux 的理解，主要解决什么问题</span></h3><p data-lake-id=\"cfb7492846b5d147005786e1f6e80f2a\" id=\"cfb7492846b5d147005786e1f6e80f2a\"><span data-lake-id=\"u97ac10ba\" id=\"u97ac10ba\">React是视图层框架。Redux是一个用来管理数据状态和UI状态的JavaScript应用工具。随着JavaScript单页应用（SPA）开发日趋复杂， JavaScript需要管理比任何时候都要多的state（状态）， Redux就是降低管理难度的。（Redux支持React、Angular、jQuery甚至纯JavaScript）。</span></p><p data-lake-id=\"93efd2d99b1815152bf3e9a57a84c502\" id=\"93efd2d99b1815152bf3e9a57a84c502\"><br></p><p data-lake-id=\"186fbdab1f6309f56439a7647601c2cc\" id=\"186fbdab1f6309f56439a7647601c2cc\"><span data-lake-id=\"u789add31\" id=\"u789add31\">在 React 中，UI 以组件的形式来搭建，组件之间可以嵌套组合。但 React 中组件间通信的数据流是单向的，顶层组件可以通过 props 属性向下层组件传递数据，而下层组件不能向上层组件传递数据，兄弟组件之间同样不能。这样简单的单向数据流支撑起了 React 中的数据可控性。</span></p><p data-lake-id=\"5f3044e2839f4b5e5c5974d7cb2c58cb\" id=\"5f3044e2839f4b5e5c5974d7cb2c58cb\"><br></p><p data-lake-id=\"e9d06ca033641c319e8e3de952bb8d20\" id=\"e9d06ca033641c319e8e3de952bb8d20\"><span data-lake-id=\"u5a075caf\" id=\"u5a075caf\">当项目越来越大的时候，管理数据的事件或回调函数将越来越多，也将越来越不好管理。管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等。state 的管理在大项目中相当复杂。</span></p><p data-lake-id=\"1f9bc70bc31005944f0977ac7518a4c8\" id=\"1f9bc70bc31005944f0977ac7518a4c8\"><br></p><p data-lake-id=\"16b9a9a1ba0fbdf35b80600c867576aa\" id=\"16b9a9a1ba0fbdf35b80600c867576aa\"><span data-lake-id=\"ub0a3a84b\" id=\"ub0a3a84b\">Redux 提供了一个叫 store 的统一仓储库，组件通过 dispatch 将 state 直接传入store，不用通过其他的组件。并且组件通过 subscribe 从 store获取到 state 的改变。使用了 Redux，所有的组件都可以从 store 中获取到所需的 state，他们也能从store 获取到 state 的改变。这比组件之间互相传递数据清晰明朗的多。</span></p><p data-lake-id=\"0dc52051724876e7e79a887a4a73cce4\" id=\"0dc52051724876e7e79a887a4a73cce4\"><br></p><p data-lake-id=\"1b809578616702540d43847ae59fa3be\" id=\"1b809578616702540d43847ae59fa3be\"><strong><span data-lake-id=\"uee93746b\" id=\"uee93746b\">主要解决的问题：</span></strong></p><p data-lake-id=\"856b5b7614651dac7598379d70476cfb\" id=\"856b5b7614651dac7598379d70476cfb\"><span data-lake-id=\"u82048551\" id=\"u82048551\">单纯的Redux只是一个状态机，是没有UI呈现的，react- redux作用是将Redux的状态机和React的UI呈现绑定在一起，当你dispatch action改变state的时候，会自动更新页面。</span></p><h3 data-lake-id=\"c0a440f2a58e1ed281562f346f6dcc34\" id=\"c0a440f2a58e1ed281562f346f6dcc34\"><span data-lake-id=\"u9ad287b9\" id=\"u9ad287b9\">2. </span><span data-lake-id=\"ufcf8ef68\" id=\"ufcf8ef68\">Redux 原理及工作流程</span></h3><p data-lake-id=\"56089d5c71f3c7f7598791dd79de1d79\" id=\"56089d5c71f3c7f7598791dd79de1d79\"><strong><span data-lake-id=\"ub7b9edeb\" id=\"ub7b9edeb\">（1）原理</span></strong></p><p data-lake-id=\"2b5e2409e8ac40acbe961c7a09f9786a\" id=\"2b5e2409e8ac40acbe961c7a09f9786a\"><span data-lake-id=\"u8a7ed4df\" id=\"u8a7ed4df\">Redux源码主要分为以下几个模块文件</span></p><ul list=\"u92e4b61a\"><li fid=\"uef40a6b1\" data-lake-id=\"b1fee83cc25ff831764efd2a2fdd5277\" id=\"b1fee83cc25ff831764efd2a2fdd5277\"><span data-lake-id=\"uc50e46df\" id=\"uc50e46df\">compose.js 提供从右到左进行函数式编程</span></li><li fid=\"uef40a6b1\" data-lake-id=\"7e5eb3c3b52651442cd2b8ade1f73b7c\" id=\"7e5eb3c3b52651442cd2b8ade1f73b7c\"><span data-lake-id=\"u71752be6\" id=\"u71752be6\">createStore.js 提供作为生成唯一store的函数</span></li><li fid=\"uef40a6b1\" data-lake-id=\"ecd5bccbcfd5c805cd7b841a9148fe5d\" id=\"ecd5bccbcfd5c805cd7b841a9148fe5d\"><span data-lake-id=\"ue5a50203\" id=\"ue5a50203\">combineReducers.js 提供合并多个reducer的函数，保证store的唯一性</span></li><li fid=\"uef40a6b1\" data-lake-id=\"53a1949faf8923c030a209ec469ae081\" id=\"53a1949faf8923c030a209ec469ae081\"><span data-lake-id=\"u1857a7d1\" id=\"u1857a7d1\">bindActionCreators.js 可以让开发者在不直接接触dispacth的前提下进行更改state的操作</span></li><li fid=\"uef40a6b1\" data-lake-id=\"0036e5fcae0e26210e3477b506899664\" id=\"0036e5fcae0e26210e3477b506899664\"><span data-lake-id=\"u882a6421\" id=\"u882a6421\">applyMiddleware.js 这个方法通过中间件来增强dispatch的功能</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20actionTypes%20%3D%20%7B%5Cn%20%20%20%20ADD%3A%20'ADD'%2C%5Cn%20%20%20%20CHANGEINFO%3A%20'CHANGEINFO'%2C%5Cn%7D%5Cn%5Cnconst%20initState%20%3D%20%7B%5Cn%20%20%20%20info%3A%20'%E5%88%9D%E5%A7%8B%E5%8C%96'%2C%5Cn%7D%5Cn%5Cnexport%20default%20function%20initReducer(state%3DinitState%2C%20action)%20%7B%5Cn%20%20%20%20switch(action.type)%20%7B%5Cn%20%20%20%20%20%20%20%20case%20actionTypes.CHANGEINFO%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20...state%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20info%3A%20action.preload.info%20%7C%7C%20''%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20default%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%7B%20...state%20%7D%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cnexport%20default%20function%20createStore(reducer%2C%20initialState%2C%20middleFunc)%20%7B%5Cn%5Cn%20%20%20%20if%20(initialState%20%26%26%20typeof%20initialState%20%3D%3D%3D%20'function')%20%7B%5Cn%20%20%20%20%20%20%20%20middleFunc%20%3D%20initialState%3B%5Cn%20%20%20%20%20%20%20%20initialState%20%3D%20undefined%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20let%20currentState%20%3D%20initialState%3B%5Cn%5Cn%20%20%20%20const%20listeners%20%3D%20%5B%5D%3B%5Cn%5Cn%20%20%20%20if%20(middleFunc%20%26%26%20typeof%20middleFunc%20%3D%3D%3D%20'function')%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%81%E8%A3%85dispatch%20%5Cn%20%20%20%20%20%20%20%20return%20middleFunc(createStore)(reducer%2C%20initialState)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20const%20getState%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20return%20currentState%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20const%20dispatch%20%3D%20(action)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20currentState%20%3D%20reducer(currentState%2C%20action)%3B%5Cn%5Cn%20%20%20%20%20%20%20%20listeners.forEach(listener%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20listener()%3B%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20const%20subscribe%20%3D%20(listener)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20listeners.push(listener)%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20%20%20getState%2C%5Cn%20%20%20%20%20%20%20%20dispatch%2C%5Cn%20%20%20%20%20%20%20%20subscribe%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hQ7t5%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4f5a3175799147aeb74c51a6ed1b7060\" id=\"4f5a3175799147aeb74c51a6ed1b7060\"><strong><span data-lake-id=\"u15d44bd5\" id=\"u15d44bd5\">（2）工作流程</span></strong></p><ul list=\"ub3a003a8\"><li fid=\"u81a95eda\" data-lake-id=\"4e39157a8542e9d935a6935145013bf8\" id=\"4e39157a8542e9d935a6935145013bf8\"><span data-lake-id=\"ue531590c\" id=\"ue531590c\">const store= createStore（fn）生成数据; </span></li><li fid=\"u81a95eda\" data-lake-id=\"dd9ac47694f7c8e9f83554ad39e96652\" id=\"dd9ac47694f7c8e9f83554ad39e96652\"><span data-lake-id=\"u288df9b7\" id=\"u288df9b7\">action: {type: Symble('action01), payload:'payload' }定义行为; </span></li><li fid=\"u81a95eda\" data-lake-id=\"a05610c273bc46a541d4c01d385f97ee\" id=\"a05610c273bc46a541d4c01d385f97ee\"><span data-lake-id=\"u2cb479ae\" id=\"u2cb479ae\">dispatch发起action：store.dispatch(doSomething('action001')); </span></li><li fid=\"u81a95eda\" data-lake-id=\"6616f119d1dcdac6d4bc0225012ee363\" id=\"6616f119d1dcdac6d4bc0225012ee363\"><span data-lake-id=\"u4136dbfb\" id=\"u4136dbfb\">reducer：处理action，返回新的state;</span></li></ul><p data-lake-id=\"48400de776c203ed46a396b5957aa4ab\" id=\"48400de776c203ed46a396b5957aa4ab\"><br></p><p data-lake-id=\"6b4ee27138fc7530b37126763a90c9fc\" id=\"6b4ee27138fc7530b37126763a90c9fc\"><span data-lake-id=\"u870ed6a4\" id=\"u870ed6a4\">通俗点解释：</span></p><ul list=\"uf5e2a3c8\"><li fid=\"u247d734a\" data-lake-id=\"207ee17bf64b5778aa343d55b49fbb34\" id=\"207ee17bf64b5778aa343d55b49fbb34\"><span data-lake-id=\"ubb425459\" id=\"ubb425459\">首先，用户（通过View）发出Action，发出方式就用到了dispatch方法</span></li><li fid=\"u247d734a\" data-lake-id=\"15f342f4060a6adef5e755421d9356d0\" id=\"15f342f4060a6adef5e755421d9356d0\"><span data-lake-id=\"u27b5fc2e\" id=\"u27b5fc2e\">然后，Store自动调用Reducer，并且传入两个参数：当前State和收到的Action，Reducer会返回新的State</span></li><li fid=\"u247d734a\" data-lake-id=\"d1e6b1fc1b8c4c609aeea33243fd682e\" id=\"d1e6b1fc1b8c4c609aeea33243fd682e\"><span data-lake-id=\"u73ee66fe\" id=\"u73ee66fe\">State—旦有变化，Store就会调用监听函数，来更新View</span></li></ul><p data-lake-id=\"509534bdc6eaf6dbbdd283a2ea53608c\" id=\"509534bdc6eaf6dbbdd283a2ea53608c\"><br></p><p data-lake-id=\"b4f36678253d52fe9e450d176117e8ec\" id=\"b4f36678253d52fe9e450d176117e8ec\"><span data-lake-id=\"ud2b63634\" id=\"ud2b63634\">以 store 为核心，可以把它看成数据存储中心，但是他要更改数据的时候不能直接修改，数据修改更新的角色由Reducers来担任，store只做存储，中间人，当Reducers的更新完成以后会通过store的订阅来通知react component，组件把新的状态重新获取渲染，组件中也能主动发送action，创建action后这个动作是不会执行的，所以要dispatch这个action，让store通过reducers去做更新React Component 就是react的每个组件。</span></p><h3 data-lake-id=\"b74c05e4f51e469863e364a83f758f0e\" id=\"b74c05e4f51e469863e364a83f758f0e\"><span data-lake-id=\"ue1fb95bc\" id=\"ue1fb95bc\">3. Redux 中异步的请求怎么处理</span></h3><p data-lake-id=\"d26cd812c909667871abcbe3581ee163\" id=\"d26cd812c909667871abcbe3581ee163\"><span data-lake-id=\"u84893deb\" id=\"u84893deb\">可以在 </span><span data-lake-id=\"uadbd362b\" id=\"uadbd362b\">componentDidmount </span><span data-lake-id=\"u28093d8a\" id=\"u28093d8a\">中直接进⾏请求⽆须借助redux。但是在⼀定规模的项⽬中</span><span data-lake-id=\"u7a761793\" id=\"u7a761793\">,</span><span data-lake-id=\"u64582213\" id=\"u64582213\">上述⽅法很难进⾏异步流的管理</span><span data-lake-id=\"uccfe96d8\" id=\"uccfe96d8\">,</span><span data-lake-id=\"u064cb7a4\" id=\"u064cb7a4\">通常情况下我们会借助</span><span data-lake-id=\"u0b37b246\" id=\"u0b37b246\">redux</span><span data-lake-id=\"u23dbf973\" id=\"u23dbf973\">的异步中间件进⾏异步处理。redux</span><span data-lake-id=\"uc0fb56e7\" id=\"uc0fb56e7\">异步流中间件其实有很多</span><span data-lake-id=\"ubdd30253\" id=\"ubdd30253\">，</span><span data-lake-id=\"ucc0dbb4d\" id=\"ucc0dbb4d\">当下主流的异步中间件有两种</span><span data-lake-id=\"uef7eaf5b\" id=\"uef7eaf5b\">redux-thunk</span><span data-lake-id=\"u4a5607f6\" id=\"u4a5607f6\">、</span><span data-lake-id=\"u0ee026bb\" id=\"u0ee026bb\">redux-saga。</span></p><p data-lake-id=\"c6b9980d9d25ae52242025b12e5f0494\" id=\"c6b9980d9d25ae52242025b12e5f0494\"><strong><span data-lake-id=\"ub6ae9646\" id=\"ub6ae9646\">（1）使用react-thunk中间件</span></strong></p><p data-lake-id=\"5310e218e38cd5b0621bb73045c2b30f\" id=\"5310e218e38cd5b0621bb73045c2b30f\"><strong><span data-lake-id=\"ub723d140\" id=\"ub723d140\">redux-thunk</span></strong><span data-lake-id=\"u442f9f44\" id=\"u442f9f44\">优点</span><strong><span data-lake-id=\"ud7c8f6ab\" id=\"ud7c8f6ab\">: </span></strong></p><ul list=\"ua6494e4b\"><li fid=\"u18f3419f\" data-lake-id=\"33234b266da988edb4a6fa77af45aabd\" id=\"33234b266da988edb4a6fa77af45aabd\"><span data-lake-id=\"u2966f315\" id=\"u2966f315\">体积⼩</span><span data-lake-id=\"uc99d5e8c\" id=\"uc99d5e8c\">: redux-thunk</span><span data-lake-id=\"u02730cc4\" id=\"u02730cc4\">的实现⽅式很简单</span><span data-lake-id=\"u72dfc9b4\" id=\"u72dfc9b4\">,</span><span data-lake-id=\"uc364c1c8\" id=\"uc364c1c8\">只有不到</span><span data-lake-id=\"ua327adee\" id=\"ua327adee\">20</span><span data-lake-id=\"u7f311053\" id=\"u7f311053\">⾏代码 </span></li><li fid=\"u18f3419f\" data-lake-id=\"aedbaf88b4d919ae74337e886ca44dad\" id=\"aedbaf88b4d919ae74337e886ca44dad\"><span data-lake-id=\"u06a9d63b\" id=\"u06a9d63b\">使⽤简单</span><span data-lake-id=\"u710d2d0e\" id=\"u710d2d0e\">: redux-thunk</span><span data-lake-id=\"u7650d51d\" id=\"u7650d51d\">没有引⼊像</span><span data-lake-id=\"u4c8abd41\" id=\"u4c8abd41\">redux-saga</span><span data-lake-id=\"uda43b9b0\" id=\"uda43b9b0\">或者</span><span data-lake-id=\"ua9acc648\" id=\"ua9acc648\">redux-observable</span><span data-lake-id=\"u0be076ac\" id=\"u0be076ac\">额外的范式</span><span data-lake-id=\"u4f8155fa\" id=\"u4f8155fa\">,</span><span data-lake-id=\"u04f20073\" id=\"u04f20073\">上⼿简单 </span></li></ul><p data-lake-id=\"5a3f10d1d4d2b757363fd1c8de414edc\" id=\"5a3f10d1d4d2b757363fd1c8de414edc\"><strong><span data-lake-id=\"ufe5c25ac\" id=\"ufe5c25ac\">redux-thunk</span></strong><span data-lake-id=\"ued438ac4\" id=\"ued438ac4\">缺陷</span><strong><span data-lake-id=\"u59e3042f\" id=\"u59e3042f\">: </span></strong></p><ul list=\"ua41d7d98\"><li fid=\"ud12b7cf8\" data-lake-id=\"561b24f43d4d383106e3709efba4fd09\" id=\"561b24f43d4d383106e3709efba4fd09\"><span data-lake-id=\"u83526652\" id=\"u83526652\">样板代码过多</span><span data-lake-id=\"u46cf25c0\" id=\"u46cf25c0\">: </span><span data-lake-id=\"u1fa16b6c\" id=\"u1fa16b6c\">与</span><span data-lake-id=\"ue7627887\" id=\"ue7627887\">redux</span><span data-lake-id=\"u8328a41a\" id=\"u8328a41a\">本身⼀样</span><span data-lake-id=\"u82bf2a59\" id=\"u82bf2a59\">,</span><span data-lake-id=\"u792688d4\" id=\"u792688d4\">通常⼀个请求需要⼤量的代码</span><span data-lake-id=\"u234e0ddd\" id=\"u234e0ddd\">,</span><span data-lake-id=\"u0ffa7e4a\" id=\"u0ffa7e4a\">⽽且很多都是重复性质的 </span></li><li fid=\"ud12b7cf8\" data-lake-id=\"17947ceb08b96d6a54f94a6ee54549e8\" id=\"17947ceb08b96d6a54f94a6ee54549e8\"><span data-lake-id=\"u6676657f\" id=\"u6676657f\">耦合严重</span><span data-lake-id=\"u2decdd3d\" id=\"u2decdd3d\">: </span><span data-lake-id=\"ub8ed74c6\" id=\"ub8ed74c6\">异步操作与</span><span data-lake-id=\"u93ef4951\" id=\"u93ef4951\">redux</span><span data-lake-id=\"u4ff14bc0\" id=\"u4ff14bc0\">的</span><span data-lake-id=\"u681d3187\" id=\"u681d3187\">action</span><span data-lake-id=\"ud61f47b5\" id=\"ud61f47b5\">偶合在⼀起</span><span data-lake-id=\"u34bda52f\" id=\"u34bda52f\">,</span><span data-lake-id=\"ueb02c891\" id=\"ueb02c891\">不⽅便管理 </span></li><li fid=\"ud12b7cf8\" data-lake-id=\"1d3182edd02e149ad481694d1995ac3b\" id=\"1d3182edd02e149ad481694d1995ac3b\"><span data-lake-id=\"ubb546f72\" id=\"ubb546f72\">功能孱弱</span><span data-lake-id=\"u464fd4c5\" id=\"u464fd4c5\">: </span><span data-lake-id=\"u52270176\" id=\"u52270176\">有⼀些实际开发中常⽤的功能需要⾃⼰进⾏封装 </span></li></ul><p data-lake-id=\"e2a7e1f851d7ba04364a40e300bee2f2\" id=\"e2a7e1f851d7ba04364a40e300bee2f2\"><br></p><p data-lake-id=\"10518b86e8852b3b14c41adb20f8f6f2\" id=\"10518b86e8852b3b14c41adb20f8f6f2\"><span data-lake-id=\"uf8a391b9\" id=\"uf8a391b9\">使用步骤：</span></p><ul list=\"uc0090e3c\"><li fid=\"ubf636350\" data-lake-id=\"9ad7d3a778f922906bea98e61bf3c85e\" id=\"9ad7d3a778f922906bea98e61bf3c85e\"><span data-lake-id=\"u43df5d71\" id=\"u43df5d71\">配置中间件，在store的创建中配置</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7BcreateStore%2C%20applyMiddleware%2C%20compose%7D%20from%20'redux'%3B%5Cnimport%20reducer%20from%20'.%2Freducer'%3B%5Cnimport%20thunk%20from%20'redux-thunk'%5Cn%5Cn%2F%2F%20%E8%AE%BE%E7%BD%AE%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%5Cnconst%20composeEnhancers%20%3D%20window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__%20%3F%20window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(%7B%7D)%20%3A%20compose%3B%5Cn%2F%2F%20%E8%AE%BE%E7%BD%AE%E4%B8%AD%E9%97%B4%E4%BB%B6%5Cnconst%20enhancer%20%3D%20composeEnhancers(%5Cn%20%20applyMiddleware(thunk)%5Cn)%3B%5Cn%5Cnconst%20store%20%3D%20createStore(reducer%2C%20enhancer)%3B%5Cn%5Cnexport%20default%20store%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22KQfb6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u5a107d8d\"><li fid=\"uccf6a3aa\" data-lake-id=\"e886774d22e875e2623c3cc321aa0170\" id=\"e886774d22e875e2623c3cc321aa0170\"><span data-lake-id=\"u32bebf9a\" id=\"u32bebf9a\">添加一个返回函数的actionCreator，将异步请求逻辑放在里面</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F**%5Cn%20%20%E5%8F%91%E9%80%81get%E8%AF%B7%E6%B1%82%EF%BC%8C%E5%B9%B6%E7%94%9F%E6%88%90%E7%9B%B8%E5%BA%94action%EF%BC%8C%E6%9B%B4%E6%96%B0store%E7%9A%84%E5%87%BD%E6%95%B0%5Cn%20%20%40param%20url%20%7Bstring%7D%20%E8%AF%B7%E6%B1%82%E5%9C%B0%E5%9D%80%5Cn%20%20%40param%20func%20%7Bfunction%7D%20%E7%9C%9F%E6%AD%A3%E9%9C%80%E8%A6%81%E7%94%9F%E6%88%90%E7%9A%84action%E5%AF%B9%E5%BA%94%E7%9A%84actionCreator%5Cn%20%20%40return%20%7Bfunction%7D%20%5Cn*%2F%5Cn%2F%2F%20dispatch%E4%B8%BA%E8%87%AA%E5%8A%A8%E6%8E%A5%E6%94%B6%E7%9A%84store.dispatch%E5%87%BD%E6%95%B0%20%5Cnexport%20const%20getHttpAction%20%3D%20(url%2C%20func)%20%3D%3E%20(dispatch)%20%3D%3E%20%7B%5Cn%20%20%20%20axios.get(url).then(function(res)%7B%5Cn%20%20%20%20%20%20%20%20const%20action%20%3D%20func(res.data)%5Cn%20%20%20%20%20%20%20%20dispatch(action)%5Cn%20%20%20%20%7D)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%229efP7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u63e5819f\"><li fid=\"u6e813e76\" data-lake-id=\"16dc68f786c7bb6e6afe03e83e27f47b\" id=\"16dc68f786c7bb6e6afe03e83e27f47b\"><span data-lake-id=\"u551a0a24\" id=\"u551a0a24\">生成action，并发送action</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22componentDidMount()%7B%5Cn%20%20%20%20var%20action%20%3D%20getHttpAction('%2FgetData'%2C%20getInitTodoItemAction)%5Cn%20%20%20%20%2F%2F%20%E5%8F%91%E9%80%81%E5%87%BD%E6%95%B0%E7%B1%BB%E5%9E%8B%E7%9A%84action%E6%97%B6%EF%BC%8C%E8%AF%A5action%E7%9A%84%E5%87%BD%E6%95%B0%E4%BD%93%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%5Cn%20%20%20%20store.dispatch(action)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22sZO8n%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"729af93d961cc0d1b0c52b455983ba81\" id=\"729af93d961cc0d1b0c52b455983ba81\"><strong><span data-lake-id=\"u7d7f7fc4\" id=\"u7d7f7fc4\">（2）使用redux-saga中间件</span></strong></p><p data-lake-id=\"5beb88832d2ccc8e2f09721eeaabde78\" id=\"5beb88832d2ccc8e2f09721eeaabde78\"><strong><span data-lake-id=\"u5fc8df71\" id=\"u5fc8df71\">redux-saga</span></strong><span data-lake-id=\"u8fff1289\" id=\"u8fff1289\">优点</span><strong><span data-lake-id=\"u1d0e13cb\" id=\"u1d0e13cb\">: </span></strong></p><ul list=\"uf17d379a\"><li fid=\"u8b9b6743\" data-lake-id=\"d0f3c64515907bb37ac661fab865c2e6\" id=\"d0f3c64515907bb37ac661fab865c2e6\"><span data-lake-id=\"ua86e4e4f\" id=\"ua86e4e4f\">异步解耦</span><span data-lake-id=\"ub2b9324b\" id=\"ub2b9324b\">: </span><span data-lake-id=\"u8914a3ef\" id=\"u8914a3ef\">异步操作被被转移到单独 </span><span data-lake-id=\"uae24fa9a\" id=\"uae24fa9a\">saga.js </span><span data-lake-id=\"u43def655\" id=\"u43def655\">中，不再是掺杂在 </span><span data-lake-id=\"u4b713839\" id=\"u4b713839\">action.js </span><span data-lake-id=\"ubf48b452\" id=\"ubf48b452\">或 </span><span data-lake-id=\"ufd57a14d\" id=\"ufd57a14d\">component.js </span><span data-lake-id=\"udab04e6f\" id=\"udab04e6f\">中 </span></li><li fid=\"u8b9b6743\" data-lake-id=\"883359070bbc82cdfc9178352777649d\" id=\"883359070bbc82cdfc9178352777649d\"><span data-lake-id=\"ua7e89af2\" id=\"ua7e89af2\">action</span><span data-lake-id=\"udcb5c8b1\" id=\"udcb5c8b1\">摆脱</span><span data-lake-id=\"uab5171e5\" id=\"uab5171e5\">thunk function: dispatch </span><span data-lake-id=\"ub46ec274\" id=\"ub46ec274\">的参数依然是⼀个纯粹的 </span><span data-lake-id=\"u1fcd9030\" id=\"u1fcd9030\">action (FSA)</span><span data-lake-id=\"u879eba75\" id=\"u879eba75\">，⽽不是充满 </span><span data-lake-id=\"u088eec8e\" id=\"u088eec8e\">“</span><span data-lake-id=\"u62c6f4db\" id=\"u62c6f4db\">⿊魔法</span><span data-lake-id=\"ub2e9daa3\" id=\"ub2e9daa3\">” thunk function </span></li><li fid=\"u8b9b6743\" data-lake-id=\"53a0194976fa1c8efc90359c2439d810\" id=\"53a0194976fa1c8efc90359c2439d810\"><span data-lake-id=\"u6ac26667\" id=\"u6ac26667\">异常处理</span><span data-lake-id=\"u193c579b\" id=\"u193c579b\">: </span><span data-lake-id=\"ub758575c\" id=\"ub758575c\">受益于 </span><span data-lake-id=\"u0e4e91d3\" id=\"u0e4e91d3\">generator function </span><span data-lake-id=\"u4ca7eabc\" id=\"u4ca7eabc\">的 </span><span data-lake-id=\"ua76572ed\" id=\"ua76572ed\">saga </span><span data-lake-id=\"uc0c02e23\" id=\"uc0c02e23\">实现，代码异常</span><span data-lake-id=\"u2c171b11\" id=\"u2c171b11\">/</span><span data-lake-id=\"ub2b6f24a\" id=\"ub2b6f24a\">请求失败 都可以直接通过 </span><span data-lake-id=\"u75f67d55\" id=\"u75f67d55\">try/catch 语法直接捕获处理</span></li><li fid=\"u8b9b6743\" data-lake-id=\"b0c28ff97befb740cd2cdd865a730731\" id=\"b0c28ff97befb740cd2cdd865a730731\"><span data-lake-id=\"u92caac8c\" id=\"u92caac8c\">功能强⼤</span><span data-lake-id=\"uaa429796\" id=\"uaa429796\">: redux-saga</span><span data-lake-id=\"u889c3e54\" id=\"u889c3e54\">提供了⼤量的</span><span data-lake-id=\"u6d2ab6c3\" id=\"u6d2ab6c3\">Saga </span><span data-lake-id=\"uc848186b\" id=\"uc848186b\">辅助函数和</span><span data-lake-id=\"u640e3437\" id=\"u640e3437\">Effect </span><span data-lake-id=\"u32124c48\" id=\"u32124c48\">创建器供开发者使⽤</span><span data-lake-id=\"u07e47ad8\" id=\"u07e47ad8\">,开发者⽆须封装或者简单封装即可使⽤ </span></li><li fid=\"u8b9b6743\" data-lake-id=\"88380fba719dd3bd547e401eb3ba43f2\" id=\"88380fba719dd3bd547e401eb3ba43f2\"><span data-lake-id=\"u882f69ef\" id=\"u882f69ef\">灵活</span><span data-lake-id=\"ud8fdfaaa\" id=\"ud8fdfaaa\">: redux-saga</span><span data-lake-id=\"uf66ae700\" id=\"uf66ae700\">可以将多个</span><span data-lake-id=\"u66a979a2\" id=\"u66a979a2\">Saga</span><span data-lake-id=\"u52289f1a\" id=\"u52289f1a\">可以串⾏</span><span data-lake-id=\"u30dbef21\" id=\"u30dbef21\">/</span><span data-lake-id=\"u6fec4fef\" id=\"u6fec4fef\">并⾏组合起来</span><span data-lake-id=\"u3be8763b\" id=\"u3be8763b\">,</span><span data-lake-id=\"ufdef8f30\" id=\"ufdef8f30\">形成⼀个⾮常实⽤的异步</span><span data-lake-id=\"ud015ef0e\" id=\"ud015ef0e\">flow </span></li><li fid=\"u8b9b6743\" data-lake-id=\"886e478280c130e04118b51d605e5649\" id=\"886e478280c130e04118b51d605e5649\"><span data-lake-id=\"ue90ca8a2\" id=\"ue90ca8a2\">易测试，提供了各种</span><span data-lake-id=\"u4ed08aa7\" id=\"u4ed08aa7\">case</span><span data-lake-id=\"u94b61db0\" id=\"u94b61db0\">的测试⽅案，包括</span><span data-lake-id=\"u763a6cab\" id=\"u763a6cab\">mock task</span><span data-lake-id=\"ubf5e0048\" id=\"ubf5e0048\">，分⽀覆盖等等 </span></li></ul><p data-lake-id=\"54b0dfbdbdf3677aa10f9cc9c8f642e6\" id=\"54b0dfbdbdf3677aa10f9cc9c8f642e6\"><br></p><p data-lake-id=\"d38b1e7f3e776337bca487c2bb8ce04a\" id=\"d38b1e7f3e776337bca487c2bb8ce04a\"><strong><span data-lake-id=\"ue04c13f0\" id=\"ue04c13f0\">redux-saga</span></strong><span data-lake-id=\"uaea842c6\" id=\"uaea842c6\">缺陷</span><strong><span data-lake-id=\"u0aae69a2\" id=\"u0aae69a2\">: </span></strong></p><ul list=\"ufcc7bac0\"><li fid=\"ua474fb04\" data-lake-id=\"4c46021bcc794c9245df5998f1cda26d\" id=\"4c46021bcc794c9245df5998f1cda26d\"><span data-lake-id=\"uc4a13c41\" id=\"uc4a13c41\">额外的学习成本</span><span data-lake-id=\"uf2402540\" id=\"uf2402540\">: redux-saga</span><span data-lake-id=\"u1ac8c62d\" id=\"u1ac8c62d\">不仅在使⽤难以理解的 </span><span data-lake-id=\"uf9aac3a8\" id=\"uf9aac3a8\">generator function,</span><span data-lake-id=\"uc3490e04\" id=\"uc3490e04\">⽽且有数⼗个</span><span data-lake-id=\"u5ddaa2e3\" id=\"u5ddaa2e3\">API,</span><span data-lake-id=\"u9e71cbe6\" id=\"u9e71cbe6\">学习成本远超redux-thunk,</span><span data-lake-id=\"uacc92cd2\" id=\"uacc92cd2\">最重要的是你的额外学习成本是只服务于这个库的</span><span data-lake-id=\"u4c579e06\" id=\"u4c579e06\">,</span><span data-lake-id=\"ubdc23378\" id=\"ubdc23378\">与</span><span data-lake-id=\"u993bd26a\" id=\"u993bd26a\">redux-observable</span><span data-lake-id=\"u4d25caf4\" id=\"u4d25caf4\">不同</span><span data-lake-id=\"u8e8e2bb6\" id=\"u8e8e2bb6\">,redux-observable虽然也有额外学习成本但是背后是</span><span data-lake-id=\"ub41affa5\" id=\"ub41affa5\">rxjs</span><span data-lake-id=\"u3cb77c3a\" id=\"u3cb77c3a\">和⼀整套思想 </span></li><li fid=\"ua474fb04\" data-lake-id=\"ddea8d6fdcca7f4560bc8e3f5cb3cfc5\" id=\"ddea8d6fdcca7f4560bc8e3f5cb3cfc5\"><span data-lake-id=\"u0426ff0f\" id=\"u0426ff0f\">体积庞⼤</span><span data-lake-id=\"uae9ad1be\" id=\"uae9ad1be\">: </span><span data-lake-id=\"u01791029\" id=\"u01791029\">体积略⼤</span><span data-lake-id=\"u8e7cec06\" id=\"u8e7cec06\">,</span><span data-lake-id=\"ub18a3d9a\" id=\"ub18a3d9a\">代码近</span><span data-lake-id=\"u4e6a312e\" id=\"u4e6a312e\">2000</span><span data-lake-id=\"udb95a597\" id=\"udb95a597\">⾏，</span><span data-lake-id=\"u0884c3e4\" id=\"u0884c3e4\">min</span><span data-lake-id=\"uc8ffb875\" id=\"uc8ffb875\">版</span><span data-lake-id=\"u4c30794d\" id=\"u4c30794d\">25KB</span><span data-lake-id=\"u7ca3cec5\" id=\"u7ca3cec5\">左右 </span></li><li fid=\"ua474fb04\" data-lake-id=\"67e98654ce92198692b8ab2f512893f4\" id=\"67e98654ce92198692b8ab2f512893f4\"><span data-lake-id=\"u22aa2125\" id=\"u22aa2125\">功能过剩</span><span data-lake-id=\"u74389248\" id=\"u74389248\">: </span><span data-lake-id=\"u652e0038\" id=\"u652e0038\">实际上并发控制等功能很难⽤到</span><span data-lake-id=\"ubc5fea01\" id=\"ubc5fea01\">,</span><span data-lake-id=\"uc4a044e7\" id=\"uc4a044e7\">但是我们依然需要引⼊这些代码 </span></li><li fid=\"ua474fb04\" data-lake-id=\"f7fcd5b656fd8b285b6304bf8993de20\" id=\"f7fcd5b656fd8b285b6304bf8993de20\"><span data-lake-id=\"u83d36809\" id=\"u83d36809\">ts</span><span data-lake-id=\"ubac9f33c\" id=\"ubac9f33c\">⽀持不友好</span><span data-lake-id=\"u986f581e\" id=\"u986f581e\">: yield</span><span data-lake-id=\"u9da810f0\" id=\"u9da810f0\">⽆法返回</span><span data-lake-id=\"u6a5f9f3b\" id=\"u6a5f9f3b\">TS</span><span data-lake-id=\"u3d79f1cd\" id=\"u3d79f1cd\">类型 </span></li></ul><p data-lake-id=\"95b890169a9a8ae83399b8a2af3511d4\" id=\"95b890169a9a8ae83399b8a2af3511d4\"><br></p><p data-lake-id=\"28c7aaae2a1962ab2f7e0f51470c983d\" id=\"28c7aaae2a1962ab2f7e0f51470c983d\"><span data-lake-id=\"u05d428cb\" id=\"u05d428cb\">redux-saga可以捕获action，然后执行一个函数，那么可以把异步代码放在这个函数中，使用步骤如下：</span></p><ul list=\"u62a84872\"><li fid=\"u61e58c4c\" data-lake-id=\"3d3eececf980a10ae1eba3764732c376\" id=\"3d3eececf980a10ae1eba3764732c376\"><span data-lake-id=\"u4fdfb2a3\" id=\"u4fdfb2a3\">配置中间件</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7BcreateStore%2C%20applyMiddleware%2C%20compose%7D%20from%20'redux'%3B%5Cnimport%20reducer%20from%20'.%2Freducer'%3B%5Cnimport%20createSagaMiddleware%20from%20'redux-saga'%5Cnimport%20TodoListSaga%20from%20'.%2Fsagas'%5Cn%5Cnconst%20composeEnhancers%20%3D%20window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__%20%3F%20window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(%7B%7D)%20%3A%20compose%3B%5Cnconst%20sagaMiddleware%20%3D%20createSagaMiddleware()%5Cn%5Cnconst%20enhancer%20%3D%20composeEnhancers(%5Cn%20%20applyMiddleware(sagaMiddleware)%5Cn)%3B%5Cn%5Cnconst%20store%20%3D%20createStore(reducer%2C%20enhancer)%3B%5CnsagaMiddleware.run(TodoListSaga)%5Cn%5Cnexport%20default%20store%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%222RzKc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ub5d3c222\"><li fid=\"u6f553283\" data-lake-id=\"048f7bc4eed40706e650d5f47b0a3d22\" id=\"048f7bc4eed40706e650d5f47b0a3d22\"><span data-lake-id=\"udddcf235\" id=\"udddcf235\">将异步请求放在sagas.js中</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7BtakeEvery%2C%20put%7D%20from%20'redux-saga%2Feffects'%5Cnimport%20%7BinitTodoList%7D%20from%20'.%2FactionCreator'%5Cnimport%20%7BGET_INIT_ITEM%7D%20from%20'.%2FactionTypes'%5Cnimport%20axios%20from%20'axios'%5Cn%5Cnfunction*%20func()%7B%5Cn%20%20%20%20try%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E5%BC%82%E6%AD%A5%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20const%20res%20%3D%20yield%20axios.get('%2FgetData')%5Cn%20%20%20%20%20%20%20%20const%20action%20%3D%20initTodoList(res.data)%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%B0%86action%E5%8F%91%E9%80%81%E5%88%B0reducer%5Cn%20%20%20%20%20%20%20%20yield%20put(action)%5Cn%20%20%20%20%7Dcatch(e)%7B%5Cn%20%20%20%20%20%20%20%20console.log('%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%A4%B1%E8%B4%A5')%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cnfunction*%20mySaga()%7B%5Cn%20%20%20%20%2F%2F%20%E8%87%AA%E5%8A%A8%E6%8D%95%E8%8E%B7GET_INIT_ITEM%E7%B1%BB%E5%9E%8B%E7%9A%84action%EF%BC%8C%E5%B9%B6%E6%89%A7%E8%A1%8Cfunc%5Cn%20%20%20%20yield%20takeEvery(GET_INIT_ITEM%2C%20func)%5Cn%7D%5Cn%5Cnexport%20default%20mySaga%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dBtIc%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u228fd3f6\"><li fid=\"u36343209\" data-lake-id=\"a562904baade640d2cb6163bc7a23528\" id=\"a562904baade640d2cb6163bc7a23528\"><span data-lake-id=\"u42516c7f\" id=\"u42516c7f\">发送action</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22componentDidMount()%7B%5Cn%20%20const%20action%20%3D%20getInitTodoItemAction()%5Cn%20%20store.dispatch(action)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Ck7Lq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"7d5171dc8064e203886c90017dedbd85\" id=\"7d5171dc8064e203886c90017dedbd85\"><span data-lake-id=\"ua8b4db83\" id=\"ua8b4db83\">4. Redux 怎么实现属性传递，介绍下原理</span></h3><p data-lake-id=\"841e9de6c627b1d2eea83f15dfe977c5\" id=\"841e9de6c627b1d2eea83f15dfe977c5\"><span data-lake-id=\"u6fdbd2e1\" id=\"u6fdbd2e1\">react-redux 数据传输∶ view--&gt;action--&gt;reducer--&gt;store--&gt;view。看下点击事件的数据是如何通过redux传到view上：</span></p><ul list=\"u9a719634\"><li fid=\"u14c3cb55\" data-lake-id=\"afa486e364631be684060a8686a8b4b9\" id=\"afa486e364631be684060a8686a8b4b9\"><span data-lake-id=\"u302d8a4e\" id=\"u302d8a4e\">view 上的AddClick 事件通过mapDispatchToProps 把数据传到action ---&gt; click:()=&gt;dispatch(ADD)</span></li><li fid=\"u14c3cb55\" data-lake-id=\"4aaf515218357bb9e74e44ce82fd173b\" id=\"4aaf515218357bb9e74e44ce82fd173b\"><span data-lake-id=\"u93116aca\" id=\"u93116aca\">action 的ADD 传到reducer上</span></li><li fid=\"u14c3cb55\" data-lake-id=\"803346c4f86b30de8962aba6acf9387e\" id=\"803346c4f86b30de8962aba6acf9387e\"><span data-lake-id=\"u25775578\" id=\"u25775578\">reducer传到store上 const store = createStore(reducer);</span></li><li fid=\"u14c3cb55\" data-lake-id=\"4475ca40db85d9837a610bf653c1780c\" id=\"4475ca40db85d9837a610bf653c1780c\"><span data-lake-id=\"u9e652749\" id=\"u9e652749\">store再通过 mapStateToProps 映射穿到view上text:State.text</span></li></ul><p data-lake-id=\"f3d959a6c6b48b3f7bd21bd857bc06e3\" id=\"f3d959a6c6b48b3f7bd21bd857bc06e3\"><br></p><p data-lake-id=\"f160f7c76b0a696683e1a0c97a0fef5a\" id=\"f160f7c76b0a696683e1a0c97a0fef5a\"><span data-lake-id=\"u32a3efe3\" id=\"u32a3efe3\">代码示例∶</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cnimport%20%7B%20createStore%20%7D%20from%20'redux'%3B%5Cnimport%20%7B%20Provider%2C%20connect%20%7D%20from%20'react-redux'%3B%5Cnclass%20App%20extends%20React.Component%7B%5Cn%20%20%20%20render()%7B%5Cn%20%20%20%20%20%20%20%20let%20%7B%20text%2C%20click%2C%20clickR%20%7D%20%3D%20this.props%3B%5Cn%20%20%20%20%20%20%20%20return(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%3E%E6%95%B0%E6%8D%AE%3A%E5%B7%B2%E6%9C%89%E4%BA%BA%7Btext%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20onClick%3D%7Bclick%7D%3E%E5%8A%A0%E4%BA%BA%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20onClick%3D%7BclickR%7D%3E%E5%87%8F%E4%BA%BA%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%7D%5Cn%7D%5Cnconst%20initialState%20%3D%20%7B%5Cn%20%20%20%20text%3A5%5Cn%7D%5Cnconst%20reducer%20%3D%20function(state%2Caction)%7B%5Cn%20%20%20%20switch(action.type)%7B%5Cn%20%20%20%20%20%20%20%20case%20'ADD'%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%7Btext%3Astate.text%2B1%7D%5Cn%20%20%20%20%20%20%20%20case%20'REMOVE'%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%7Btext%3Astate.text-1%7D%5Cn%20%20%20%20%20%20%20%20default%3A%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20initialState%3B%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cnlet%20ADD%20%3D%20%7B%5Cn%20%20%20%20type%3A'ADD'%5Cn%7D%5Cnlet%20Remove%20%3D%20%7B%5Cn%20%20%20%20type%3A'REMOVE'%5Cn%7D%5Cn%5Cnconst%20store%20%3D%20createStore(reducer)%3B%5Cn%5Cnlet%20mapStateToProps%20%3D%20function%20(state)%7B%5Cn%20%20%20%20return%7B%5Cn%20%20%20%20%20%20%20%20text%3Astate.text%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cnlet%20mapDispatchToProps%20%3D%20function(dispatch)%7B%5Cn%20%20%20%20return%7B%5Cn%20%20%20%20%20%20%20%20click%3A()%3D%3Edispatch(ADD)%2C%5Cn%20%20%20%20%20%20%20%20clickR%3A()%3D%3Edispatch(Remove)%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%5Cnconst%20App1%20%3D%20connect(mapStateToProps%2CmapDispatchToProps)(App)%3B%5Cn%5CnReactDOM.render(%5Cn%20%20%20%20%3CProvider%20store%20%3D%20%7Bstore%7D%3E%5Cn%20%20%20%20%20%20%20%20%3CApp1%3E%3C%2FApp1%3E%5Cn%20%20%20%20%3C%2FProvider%3E%2Cdocument.getElementById('root')%5Cn)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22rxKYa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"7005619a3557a2ffd74309bff35bd1a4\" id=\"7005619a3557a2ffd74309bff35bd1a4\"><span data-lake-id=\"ud83046c5\" id=\"ud83046c5\">5. Redux 中间件是什么？接受几个参数？柯里化函数两端的参数具体是什么？</span></h3><p data-lake-id=\"41462f4ae9637d1d85b22f4d33624c4e\" id=\"41462f4ae9637d1d85b22f4d33624c4e\"><span data-lake-id=\"uc01e4157\" id=\"uc01e4157\">Redux 的中间件提供的是位于 action 被发起之后，到达 reducer 之前的扩展点，换而言之，原本 view -→&gt; action -&gt; reducer -&gt; store 的数据流加上中间件后变成了 view -&gt; action -&gt; middleware -&gt; reducer -&gt; store ，在这一环节可以做一些&quot;副作用&quot;的操作，如异步请求、打印日志等。</span></p><p data-lake-id=\"826e0c9090dbe19feb8e680e68b1af88\" id=\"826e0c9090dbe19feb8e680e68b1af88\"><br></p><p data-lake-id=\"c8af104c887506bab21834ad3dbdfa32\" id=\"c8af104c887506bab21834ad3dbdfa32\"><span data-lake-id=\"u81b05e5d\" id=\"u81b05e5d\">applyMiddleware源码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20function%20applyMiddleware(...middlewares)%20%7B%5Cn%20%20%20%20return%20createStore%20%3D%3E%20(...args)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%88%A9%E7%94%A8%E4%BC%A0%E5%85%A5%E7%9A%84createStore%E5%92%8Creducer%E5%92%8C%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAstore%5Cn%20%20%20%20%20%20%20%20const%20store%20%3D%20createStore(...args)%5Cn%20%20%20%20%20%20%20%20let%20dispatch%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20throw%20new%20Error()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20const%20middlewareAPI%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20getState%3A%20store.getState%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20dispatch%3A%20(...args)%20%3D%3E%20dispatch(...args)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E8%AE%A9%E6%AF%8F%E4%B8%AA%20middleware%20%E5%B8%A6%E7%9D%80%20middlewareAPI%20%E8%BF%99%E4%B8%AA%E5%8F%82%E6%95%B0%E5%88%86%E5%88%AB%E6%89%A7%E8%A1%8C%E4%B8%80%E9%81%8D%5Cn%20%20%20%20%20%20%20%20const%20chain%20%3D%20middlewares.map(middleware%20%3D%3E%20middleware(middlewareAPI))%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E6%8E%A5%E7%9D%80%20compose%20%E5%B0%86%20chain%20%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0%EF%BC%8C%E7%BB%84%E8%A3%85%E6%88%90%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E5%8D%B3%E6%96%B0%E7%9A%84%20dispatch%5Cn%20%20%20%20%20%20%20%20dispatch%20%3D%20compose(...chain)(store.dispatch)%5Cn%20%20%20%20%20%20%20%20return%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20...store%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20dispatch%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gtKc6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"bbcf91222b26f24307a56ae394f26895\" id=\"bbcf91222b26f24307a56ae394f26895\"><span data-lake-id=\"u6bf0d22d\" id=\"u6bf0d22d\">从applyMiddleware中可以看出∶</span></p><ul list=\"u8c1fea88\"><li fid=\"ud4513861\" data-lake-id=\"5ebd0dbbd56b529ccac90ca76ac74f83\" id=\"5ebd0dbbd56b529ccac90ca76ac74f83\"><span data-lake-id=\"u5325011a\" id=\"u5325011a\">redux中间件接受一个对象作为参数，对象的参数上有两个字段 dispatch 和 getState，分别代表着 Redux Store 上的两个同名函数。</span></li><li fid=\"ud4513861\" data-lake-id=\"19c3b306a40d775366fbca2ba4acaf64\" id=\"19c3b306a40d775366fbca2ba4acaf64\"><span data-lake-id=\"u23e28277\" id=\"u23e28277\">柯里化函数两端一个是 middewares，一个是store.dispatch</span></li></ul><h3 data-lake-id=\"d4bd3e03afa400ae88c3ebe7bd67d618\" id=\"d4bd3e03afa400ae88c3ebe7bd67d618\"><span data-lake-id=\"uaae35acd\" id=\"uaae35acd\">6. Redux 请求中间件如何处理并发</span></h3><p data-lake-id=\"82c3e0344409dbffb2b332548e619c94\" id=\"82c3e0344409dbffb2b332548e619c94\"><strong><span data-lake-id=\"u69f65fcc\" id=\"u69f65fcc\">使用redux-Saga</span></strong></p><p data-lake-id=\"7656d2a93d0c582a38a1a5b419b665d6\" id=\"7656d2a93d0c582a38a1a5b419b665d6\"><span data-lake-id=\"u5c8ca4da\" id=\"u5c8ca4da\">redux-saga是一个管理redux应用异步操作的中间件，用于代替 redux-thunk 的。它通过创建 Sagas 将所有异步操作逻辑存放在一个地方进行集中处理，以此将react中的同步操作与异步操作区分开来，以便于后期的管理与维护。 redux-saga如何处理并发：</span></p><ul list=\"u892380e7\"><li fid=\"uadf9107f\" data-lake-id=\"b1582d8da264a79269805ba21751b1c7\" id=\"b1582d8da264a79269805ba21751b1c7\"><strong><span data-lake-id=\"u23800e2e\" id=\"u23800e2e\">takeEvery</span></strong></li></ul><p data-lake-id=\"63abceaee320e74bedf356641f67de41\" id=\"63abceaee320e74bedf356641f67de41\"><span data-lake-id=\"ua2d4194d\" id=\"ua2d4194d\">可以让多个 saga 任务并行被 fork 执行。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%5Cn%20%20%20%20fork%2C%5Cn%20%20%20%20take%5Cn%7D%20from%20%5C%22redux-saga%2Feffects%5C%22%5Cn%5Cnconst%20takeEvery%20%3D%20(pattern%2C%20saga%2C%20...args)%20%3D%3E%20fork(function*()%20%7B%5Cn%20%20%20%20while%20(true)%20%7B%5Cn%20%20%20%20%20%20%20%20const%20action%20%3D%20yield%20take(pattern)%5Cn%20%20%20%20%20%20%20%20yield%20fork(saga%2C%20...args.concat(action))%5Cn%20%20%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tUcxW%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u76abe240\"><li fid=\"u4f2241da\" data-lake-id=\"1929c6de6ec94f37c44159fce5cf21d0\" id=\"1929c6de6ec94f37c44159fce5cf21d0\"><strong><span data-lake-id=\"ufd69a267\" id=\"ufd69a267\">takeLatest</span></strong></li></ul><p data-lake-id=\"100f762db43d96f8681f71603f796fde\" id=\"100f762db43d96f8681f71603f796fde\"><span data-lake-id=\"u7d36f04e\" id=\"u7d36f04e\">takeLatest 不允许多个 saga 任务并行地执行。一旦接收到新的发起的 action，它就会取消前面所有 fork 过的任务（如果这些任务还在执行的话）。</span></p><p data-lake-id=\"de7ea8b823be8d03c8d38e70db4a5c38\" id=\"de7ea8b823be8d03c8d38e70db4a5c38\"><span data-lake-id=\"uc2bf70fd\" id=\"uc2bf70fd\">在处理 AJAX 请求的时候，如果只希望获取最后那个请求的响应， takeLatest 就会非常有用。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7B%5Cn%20%20%20%20cancel%2C%5Cn%20%20%20%20fork%2C%5Cn%20%20%20%20take%5Cn%7D%20from%20%5C%22redux-saga%2Feffects%5C%22%5Cn%5Cnconst%20takeLatest%20%3D%20(pattern%2C%20saga%2C%20...args)%20%3D%3E%20fork(function*()%20%7B%5Cn%20%20%20%20let%20lastTask%5Cn%20%20%20%20while%20(true)%20%7B%5Cn%20%20%20%20%20%20%20%20const%20action%20%3D%20yield%20take(pattern)%5Cn%20%20%20%20%20%20%20%20if%20(lastTask)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20yield%20cancel(lastTask)%20%2F%2F%20%E5%A6%82%E6%9E%9C%E4%BB%BB%E5%8A%A1%E5%B7%B2%E7%BB%8F%E7%BB%93%E6%9D%9F%EF%BC%8C%E5%88%99%20cancel%20%E4%B8%BA%E7%A9%BA%E6%93%8D%E4%BD%9C%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20lastTask%20%3D%20yield%20fork(saga%2C%20...args.concat(action))%5Cn%20%20%20%20%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%224L0bS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"f0da1b920d690eb95bad8923a916fdce\" id=\"f0da1b920d690eb95bad8923a916fdce\"><span data-lake-id=\"u4ba68fa2\" id=\"u4ba68fa2\">7. </span><span data-lake-id=\"u191a1a24\" id=\"u191a1a24\">Redux 状态管理器和变量挂载到 window 中有什么区别</span></h3><p data-lake-id=\"92bbc4a2588c362bf733610c496c09a5\" id=\"92bbc4a2588c362bf733610c496c09a5\"><span data-lake-id=\"u060dc9de\" id=\"u060dc9de\">两者都是存储数据以供后期使用。但是Redux状态更改可回溯——Time travel，数据多了的时候可以很清晰的知道改动在哪里发生，完整的提供了一套状态管理模式。</span></p><p data-lake-id=\"8b4e031c24b3e52813881711cc7e9321\" id=\"8b4e031c24b3e52813881711cc7e9321\"><br></p><p data-lake-id=\"1a6314e3aa6055ae0f66e114855bc564\" id=\"1a6314e3aa6055ae0f66e114855bc564\"><span data-lake-id=\"u0006efb4\" id=\"u0006efb4\">随着 JavaScript 单页应用开发日趋复杂，JavaScript 需要管理比任何时候都要多的 state （状态）。 这些 state 可能包括服务器响应、缓存数据、本地生成尚未持久化到服务器的数据，也包括 UI状态，如激活的路由，被选中的标签，是否显示加载动效或者分页器等等。</span></p><p data-lake-id=\"754d6de6db978960edfabed529a259f0\" id=\"754d6de6db978960edfabed529a259f0\"><br></p><p data-lake-id=\"5204a655dfb4b37d4ca5a254c4032d12\" id=\"5204a655dfb4b37d4ca5a254c4032d12\"><span data-lake-id=\"u6c0ca868\" id=\"u6c0ca868\">管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。</span></p><p data-lake-id=\"c42d7f318b818eb041262eb0bbc6b46f\" id=\"c42d7f318b818eb041262eb0bbc6b46f\"><span data-lake-id=\"u3a8feadd\" id=\"u3a8feadd\">如果这还不够糟糕，考虑一些来自前端开发领域的新需求，如更新调优、服务端渲染、路由跳转前请求数据等等。前端开发者正在经受前所未有的复杂性，难道就这么放弃了吗?当然不是。</span></p><p data-lake-id=\"9d5830c57f5cbbcf84ff6432335db76a\" id=\"9d5830c57f5cbbcf84ff6432335db76a\"><br></p><p data-lake-id=\"8fa3070c358469ca21e5d6f6bb92d05e\" id=\"8fa3070c358469ca21e5d6f6bb92d05e\"><span data-lake-id=\"u5ce9cef9\" id=\"u5ce9cef9\">这里的复杂性很大程度上来自于：我们总是将两个难以理清的概念混淆在一起：变化和异步。 可以称它们为曼妥思和可乐。如果把二者分开，能做的很好，但混到一起，就变得一团糟。一些库如 React 视图在视图层禁止异步和直接操作 DOM来解决这个问题。美中不足的是，React 依旧把处理 state 中数据的问题留给了你。Redux就是为了帮你解决这个问题。</span></p><h3 data-lake-id=\"158a8033e5a0bdd4b97c3a789bbd7346\" id=\"158a8033e5a0bdd4b97c3a789bbd7346\"><span data-lake-id=\"u82fbbfcc\" id=\"u82fbbfcc\">8. mobox 和 redux 有什么区别？</span></h3><p data-lake-id=\"0937958e01b692d9e50982bcd51b8ca2\" id=\"0937958e01b692d9e50982bcd51b8ca2\"><strong><span data-lake-id=\"udb8ce638\" id=\"udb8ce638\">（1）共同点</span></strong></p><ul list=\"u7391d879\"><li fid=\"u75ef7d90\" data-lake-id=\"0e6f694cfa0804e8ec7b5dc623b0272d\" id=\"0e6f694cfa0804e8ec7b5dc623b0272d\"><span data-lake-id=\"u6da61ee8\" id=\"u6da61ee8\">为了解决状态管理混乱，无法有效同步的问题统一维护管理应用状态;</span></li><li fid=\"u75ef7d90\" data-lake-id=\"2514d3588aba874133f109c38cd59650\" id=\"2514d3588aba874133f109c38cd59650\"><span data-lake-id=\"u79051f49\" id=\"u79051f49\">某一状态只有一个可信数据来源（通常命名为store，指状态容器）;</span></li><li fid=\"u75ef7d90\" data-lake-id=\"79dcd20d46952329fe0efbc425c33fe3\" id=\"79dcd20d46952329fe0efbc425c33fe3\"><span data-lake-id=\"u0399d0ae\" id=\"u0399d0ae\">操作更新状态方式统一，并且可控（通常以action方式提供更新状态的途径）;</span></li><li fid=\"u75ef7d90\" data-lake-id=\"aa7a598faa8612c914bb6a3aa745b8aa\" id=\"aa7a598faa8612c914bb6a3aa745b8aa\"><span data-lake-id=\"u1defdb3f\" id=\"u1defdb3f\">支持将store与React组件连接，如react-redux，mobx- react;</span></li></ul><p data-lake-id=\"7462a343cc8c1932a434a27c68757863\" id=\"7462a343cc8c1932a434a27c68757863\"><strong><span data-lake-id=\"u88f3260a\" id=\"u88f3260a\">（2）区别</span></strong></p><p data-lake-id=\"618bd8da48557f199d97e36027bd75cb\" id=\"618bd8da48557f199d97e36027bd75cb\"><span data-lake-id=\"u9e12acef\" id=\"u9e12acef\">Redux更多的是遵循Flux模式的一种实现，是一个 JavaScript库，它关注点主要是以下几方面∶ </span></p><ul list=\"uc7d63f43\"><li fid=\"ud6ec523a\" data-lake-id=\"040c1a57b61eaa177e451bbd7679ab56\" id=\"040c1a57b61eaa177e451bbd7679ab56\"><span data-lake-id=\"u5f923f3f\" id=\"u5f923f3f\">Action∶ 一个JavaScript对象，描述动作相关信息，主要包含type属性和payload属性∶ </span></li></ul><p data-lake-id=\"8373de900b9f4f0bda3e9765b3267a44\" id=\"8373de900b9f4f0bda3e9765b3267a44\"><span data-lake-id=\"ue540f811\" id=\"ue540f811\">         o type∶ action 类型; </span></p><p data-lake-id=\"957e1699e965d962fd6b305e47230363\" id=\"957e1699e965d962fd6b305e47230363\"><span data-lake-id=\"u2c6c77ce\" id=\"u2c6c77ce\">         o payload∶ 负载数据;</span></p><ul list=\"u89219c27\"><li fid=\"ud926d23d\" data-lake-id=\"bf320ca5b58af46591db6a0df0032169\" id=\"bf320ca5b58af46591db6a0df0032169\"><span data-lake-id=\"ud8aad868\" id=\"ud8aad868\">Reducer∶ 定义应用状态如何响应不同动作（action），如何更新状态;</span></li><li fid=\"ud926d23d\" data-lake-id=\"c926f3e480ffc618328f69fbaf2723f6\" id=\"c926f3e480ffc618328f69fbaf2723f6\"><span data-lake-id=\"ucd91d317\" id=\"ucd91d317\">Store∶ 管理action和reducer及其关系的对象，主要提供以下功能∶ </span></li></ul><p data-lake-id=\"263390c7f74bb72688e96356e6170474\" id=\"263390c7f74bb72688e96356e6170474\"><span data-lake-id=\"u284132ea\" id=\"u284132ea\">         o 维护应用状态并支持访问状态(getState());</span></p><p data-lake-id=\"86fe83c13cce4effb8ed4f2abe233a5e\" id=\"86fe83c13cce4effb8ed4f2abe233a5e\"><span data-lake-id=\"u5cf34da3\" id=\"u5cf34da3\">         o </span><span data-lake-id=\"u48148019\" id=\"u48148019\">支持监听action的分发，更新状态(dispatch(action)); </span></p><p data-lake-id=\"6852380cee6d9af9cb42f16930d23b76\" id=\"6852380cee6d9af9cb42f16930d23b76\"><span data-lake-id=\"uc90654d6\" id=\"uc90654d6\">         o 支持订阅store的变更(subscribe(listener));</span></p><ul list=\"u4180557f\"><li fid=\"ue06d7a36\" data-lake-id=\"5397cf053684073afb1cdd3ee997abba\" id=\"5397cf053684073afb1cdd3ee997abba\"><span data-lake-id=\"u380eae1f\" id=\"u380eae1f\">异步流∶ 由于Redux所有对store状态的变更，都应该通过action触发，异步任务（通常都是业务或获取数据任务）也不例外，而为了不将业务或数据相关的任务混入React组件中，就需要使用其他框架配合管理异步任务流程，如redux-thunk，redux-saga等; </span></li></ul><p data-lake-id=\"6c5432c1b093904e81edca191ca7ca3b\" id=\"6c5432c1b093904e81edca191ca7ca3b\"><br></p><p data-lake-id=\"989d9fe75e14746c0ca2e34a1c391bcd\" id=\"989d9fe75e14746c0ca2e34a1c391bcd\"><span data-lake-id=\"u4d1f3c3d\" id=\"u4d1f3c3d\">Mobx是一个透明函数响应式编程的状态管理库，它使得状态管理简单可伸缩∶</span></p><ul list=\"ubad12179\"><li fid=\"u9436537d\" data-lake-id=\"06fa4180a0f4d61773858e2e7e839828\" id=\"06fa4180a0f4d61773858e2e7e839828\"><span data-lake-id=\"ua19f6d39\" id=\"ua19f6d39\"> Action∶定义改变状态的动作函数，包括如何变更状态;</span></li><li fid=\"u9436537d\" data-lake-id=\"b2ce892b9c2141b7ea2e30989cce8850\" id=\"b2ce892b9c2141b7ea2e30989cce8850\"><span data-lake-id=\"u82a30c26\" id=\"u82a30c26\">Store∶ 集中管理模块状态（State）和动作(action)</span></li><li fid=\"u9436537d\" data-lake-id=\"b7b648df1cab0f5475efeeb3604cf6d0\" id=\"b7b648df1cab0f5475efeeb3604cf6d0\"><span data-lake-id=\"u6c871062\" id=\"u6c871062\">Derivation（衍生）∶ 从应用状态中派生而出，且没有任何其他影响的数据</span></li></ul><p data-lake-id=\"4e8ba460253d79aa4b0131ed3a9424f8\" id=\"4e8ba460253d79aa4b0131ed3a9424f8\"><br></p><p data-lake-id=\"6eebb26483243505c1bc23dd60ca22eb\" id=\"6eebb26483243505c1bc23dd60ca22eb\"><strong><span data-lake-id=\"ucadd4bec\" id=\"ucadd4bec\">对比总结：</span></strong></p><ul list=\"u45d34808\"><li fid=\"uece9285e\" data-lake-id=\"955fc2e234da555be6cdcbe7c12676a1\" id=\"955fc2e234da555be6cdcbe7c12676a1\"><span data-lake-id=\"u3b47761f\" id=\"u3b47761f\">redux将数据保存在单一的store中，mobx将数据保存在分散的多个store中</span></li><li fid=\"uece9285e\" data-lake-id=\"70b0ec52af08808e963f3265450501f0\" id=\"70b0ec52af08808e963f3265450501f0\"><span data-lake-id=\"ub4326cbb\" id=\"ub4326cbb\">redux使用plain object保存数据，需要手动处理变化后的操作;mobx适用observable保存数据，数据变化后自动处理响应的操作</span></li><li fid=\"uece9285e\" data-lake-id=\"293b3fc053c7d7bec23523489210321a\" id=\"293b3fc053c7d7bec23523489210321a\"><span data-lake-id=\"u37aecbec\" id=\"u37aecbec\">redux使用不可变状态，这意味着状态是只读的，不能直接去修改它，而是应该返回一个新的状态，同时使用纯函数;mobx中的状态是可变的，可以直接对其进行修改</span></li><li fid=\"uece9285e\" data-lake-id=\"588dbff5061a38cd00fee7ba3055355a\" id=\"588dbff5061a38cd00fee7ba3055355a\"><span data-lake-id=\"u6e2b5c93\" id=\"u6e2b5c93\">mobx相对来说比较简单，在其中有很多的抽象，mobx更多的使用面向对象的编程思维;redux会比较复杂，因为其中的函数式编程思想掌握起来不是那么容易，同时需要借助一系列的中间件来处理异步和副作用</span></li><li fid=\"uece9285e\" data-lake-id=\"4ee73f7e1c15dfe816793d106a3bea89\" id=\"4ee73f7e1c15dfe816793d106a3bea89\"><span data-lake-id=\"u02a392ec\" id=\"u02a392ec\">mobx中有更多的抽象和封装，调试会比较困难，同时结果也难以预测;而redux提供能够进行时间回溯的开发工具，同时其纯函数以及更少的抽象，让调试变得更加的容易</span></li></ul><h3 data-lake-id=\"56c237057b012b41ca8873345ff91156\" id=\"56c237057b012b41ca8873345ff91156\"><span data-lake-id=\"u9b1261d4\" id=\"u9b1261d4\">9. Redux 和 Vuex 有什么区别，它们的共同思想</span></h3><p data-lake-id=\"50eff9311749e98c087178bfe2b82741\" id=\"50eff9311749e98c087178bfe2b82741\"><strong><span data-lake-id=\"ufd7f14bf\" id=\"ufd7f14bf\">（1）Redux 和 Vuex区别</span></strong></p><ul list=\"ua94720ac\"><li fid=\"ud1065703\" data-lake-id=\"a0f87a8c172a51956bd88257a80efe08\" id=\"a0f87a8c172a51956bd88257a80efe08\"><span data-lake-id=\"ucca5275a\" id=\"ucca5275a\">Vuex改进了Redux中的Action和Reducer函数，以mutations变化函数取代Reducer，无需switch，只需在对应的mutation函数里改变state值即可</span></li><li fid=\"ud1065703\" data-lake-id=\"5f6ad121743140633034addfb6468acc\" id=\"5f6ad121743140633034addfb6468acc\"><span data-lake-id=\"u7aca76c5\" id=\"u7aca76c5\">Vuex由于Vue自动重新渲染的特性，无需订阅重新渲染函数，只要生成新的State即可</span></li><li fid=\"ud1065703\" data-lake-id=\"654b75ee516177d84c4f9159dbef0b91\" id=\"654b75ee516177d84c4f9159dbef0b91\"><span data-lake-id=\"ued03a8d2\" id=\"ued03a8d2\">Vuex数据流的顺序是∶View调用store.commit提交对应的请求到Store中对应的mutation函数-&gt;store改变（vue检测到数据变化自动渲染）</span></li></ul><p data-lake-id=\"bffae8d39a28994df9a9516b29b6a03d\" id=\"bffae8d39a28994df9a9516b29b6a03d\"><br></p><p data-lake-id=\"390d01ee96732624718722875c0bc614\" id=\"390d01ee96732624718722875c0bc614\"><span data-lake-id=\"uaaef8c6c\" id=\"uaaef8c6c\">通俗点理解就是，vuex 弱化 dispatch，通过commit进行 store状态的一次更变；取消了action概念，不必传入特定的 action形式进行指定变更；弱化reducer，基于commit参数直接对数据进行转变，使得框架更加简易; </span></p><p data-lake-id=\"73be6c6533ec33ed519a98e3de8b4b00\" id=\"73be6c6533ec33ed519a98e3de8b4b00\"><br></p><p data-lake-id=\"82980823b0065860fa7e7bc2e633ef77\" id=\"82980823b0065860fa7e7bc2e633ef77\"><strong><span data-lake-id=\"ueb273299\" id=\"ueb273299\">（2）共同思想</span></strong></p><ul list=\"u577059fe\"><li fid=\"u1a082cab\" data-lake-id=\"52a56c8e00446cdf60d0536950192289\" id=\"52a56c8e00446cdf60d0536950192289\"><span data-lake-id=\"u3f761511\" id=\"u3f761511\">单—的数据源 </span></li><li fid=\"u1a082cab\" data-lake-id=\"b108c313fb8198817fb00279f3224d5e\" id=\"b108c313fb8198817fb00279f3224d5e\"><span data-lake-id=\"ua1903c5b\" id=\"ua1903c5b\">变化可以预测</span></li></ul><p data-lake-id=\"ff3fbb1e718b53b2742be5dcbb377ff6\" id=\"ff3fbb1e718b53b2742be5dcbb377ff6\"><br></p><p data-lake-id=\"cfd1283eee64b45f6929897ac8c8983b\" id=\"cfd1283eee64b45f6929897ac8c8983b\"><span data-lake-id=\"u137d57a5\" id=\"u137d57a5\">本质上∶ redux与vuex都是对mvvm思想的服务，将数据从视图中抽离的一种方案。</span></p><h3 data-lake-id=\"c217a9f6fce13eedaa3995d0aadb797c\" id=\"c217a9f6fce13eedaa3995d0aadb797c\"><span data-lake-id=\"u12ecff8c\" id=\"u12ecff8c\">10. Redux 中间件是怎么拿到store 和 action? 然后怎么处理?</span></h3><p data-lake-id=\"de3e40c712716abb1c1cd3fe41de1a54\" id=\"de3e40c712716abb1c1cd3fe41de1a54\"><span data-lake-id=\"ud7e9580f\" id=\"ud7e9580f\">redux中间件本质就是一个函数柯里化。redux applyMiddleware Api 源码中每个middleware 接受2个参数， Store 的getState 函数和dispatch 函数，分别获得store和action，最终返回一个函数。该函数会被传入 next 的下一个 middleware 的 dispatch 方法，并返回一个接收 action 的新函数，这个函数可以直接调用 next（action），或者在其他需要的时刻调用，甚至根本不去调用它。调用链中最后一个 middleware 会接受真实的 store的 dispatch 方法作为 next 参数，并借此结束调用链。所以，middleware 的函数签名是（{ getState，dispatch })=&gt; next =&gt; action。</span></p><h3 data-lake-id=\"1779331d31d870c75f1f0be166915d1d\" id=\"1779331d31d870c75f1f0be166915d1d\"><span data-lake-id=\"ua9dea221\" id=\"ua9dea221\">11. Redux中的connect有什么作用</span></h3><p data-lake-id=\"0002ddc01ed9bdda12c972083271577b\" id=\"0002ddc01ed9bdda12c972083271577b\"><span data-lake-id=\"u02d6aca9\" id=\"u02d6aca9\">connect负责连接React和Redux</span></p><p data-lake-id=\"10f3103191890cdaa780a770d845b921\" id=\"10f3103191890cdaa780a770d845b921\"><strong><span data-lake-id=\"u91e2f6d9\" id=\"u91e2f6d9\">（1）获取state</span></strong></p><p data-lake-id=\"fcc61d08faf7a5f196838fa2567ab1a0\" id=\"fcc61d08faf7a5f196838fa2567ab1a0\"><span data-lake-id=\"u51b0dc15\" id=\"u51b0dc15\">connect 通过 context获取 Provider 中的 store，通过</span><code data-lake-id=\"u74fd8fbb\" id=\"u74fd8fbb\"><span data-lake-id=\"u867f69ae\" id=\"u867f69ae\"> store.getState()</span></code><span data-lake-id=\"ub1dc24f8\" id=\"ub1dc24f8\"> 获取整个store tree 上所有state </span></p><p data-lake-id=\"0abf2909cd16681be866b84e9a50692d\" id=\"0abf2909cd16681be866b84e9a50692d\"><strong><span data-lake-id=\"u402e6f8f\" id=\"u402e6f8f\">（2）包装原组件</span></strong></p><p data-lake-id=\"a61b41dde97f1e575896a67671b07368\" id=\"a61b41dde97f1e575896a67671b07368\"><span data-lake-id=\"ua81a8002\" id=\"ua81a8002\">将state和action通过props的方式传入到原组件内部 wrapWithConnect 返回—个 ReactComponent 对 象 Connect，Connect 重 新 render 外部传入的原组件 WrappedComponent ，并把 connect 中传入的 mapStateToProps，mapDispatchToProps与组件上原有的 props合并后，通过属性的方式传给WrappedComponent </span></p><p data-lake-id=\"710105fe16d4f3e9c45337744a0321dc\" id=\"710105fe16d4f3e9c45337744a0321dc\"><strong><span data-lake-id=\"u0bf564ef\" id=\"u0bf564ef\">（3）监听store tree变化</span></strong></p><p data-lake-id=\"19d9a60ec7b8b666336692c9a7643f90\" id=\"19d9a60ec7b8b666336692c9a7643f90\"><span data-lake-id=\"u0dcb9550\" id=\"u0dcb9550\">connect缓存了store tree中state的状态，通过当前state状态 和变更前 state 状态进行比较，从而确定是否调用 </span><code data-lake-id=\"u3f0cf27c\" id=\"u3f0cf27c\"><span data-lake-id=\"u59a7a537\" id=\"u59a7a537\">this.setState()</span></code><span data-lake-id=\"u830dd495\" id=\"u830dd495\">方法触发Connect及其子组件的重新渲染</span></p><p data-lake-id=\"u9419e50a\" id=\"u9419e50a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673894958654-84fddb06-6711-47b7-8be3-8e40471aa249.png%22%2C%22taskId%22%3A%22u51cd0456-3c3e-43af-88e4-b8aa41174c1%22%2C%22clientId%22%3A%22u43a0eb18-2ac0-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u48a53fef%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"bc2a295ead16d8d32ca8fa7e92c2d884\" id=\"bc2a295ead16d8d32ca8fa7e92c2d884\"><span data-lake-id=\"u325c90a4\" id=\"u325c90a4\">七、Hooks</span></h2><h3 data-lake-id=\"bf7c58762878b0c5101b22e7fdce9b85\" id=\"bf7c58762878b0c5101b22e7fdce9b85\"><span data-lake-id=\"u4109f2c7\" id=\"u4109f2c7\">1. </span><span data-lake-id=\"u7b70f7f2\" id=\"u7b70f7f2\">对 React Hook 的理解，它的实现原理是什么</span></h3><p data-lake-id=\"4c22919dc5d28a2b750e0c0bd27d10e8\" id=\"4c22919dc5d28a2b750e0c0bd27d10e8\"><span data-lake-id=\"udd8aa501\" id=\"udd8aa501\">React-Hooks 是 React 团队在 React 组件开发实践中，逐渐认知到的一个改进点，这背后其实涉及对</span><strong><span data-lake-id=\"u40f5c4fe\" id=\"u40f5c4fe\">类组件</span></strong><span data-lake-id=\"ud8514700\" id=\"ud8514700\">和</span><strong><span data-lake-id=\"u9ba22d87\" id=\"u9ba22d87\">函数组</span></strong><strong><span data-lake-id=\"u5b2f6d99\" id=\"u5b2f6d99\">件</span></strong><span data-lake-id=\"u47d66aa4\" id=\"u47d66aa4\">两种组件形式的思考和侧重。</span></p><p data-lake-id=\"7b82e72593704d25b3c1faafa5db8a67\" id=\"7b82e72593704d25b3c1faafa5db8a67\"><br></p><p data-lake-id=\"13f7d0946ca81245cf0aa08c30501d84\" id=\"13f7d0946ca81245cf0aa08c30501d84\"><strong><span data-lake-id=\"uad7d3dd9\" id=\"uad7d3dd9\">（1）类组件：</span></strong><span data-lake-id=\"u2b37b79e\" id=\"u2b37b79e\">所谓类组件，就是基于 ES6 Class 这种写法，通过继承 React.Component 得来的 React 组件。以下是一个类组件：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20DemoClass%20extends%20React.Component%20%7B%5Cn%20%20state%20%3D%20%7B%5Cn%20%20%20%20text%3A%20%5C%22%5C%22%5Cn%20%20%7D%3B%5Cn%20%20componentDidMount()%20%7B%5Cn%20%20%20%20%2F%2F...%5Cn%20%20%7D%5Cn%20%20changeText%20%3D%20(newText)%20%3D%3E%20%7B%5Cn%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20text%3A%20newText%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%7D%3B%5Cn%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cdiv%20className%3D%5C%22demoClass%5C%22%3E%5Cn%20%20%20%20%20%20%20%20%3Cp%3E%7Bthis.state.text%7D%3C%2Fp%3E%5Cn%20%20%20%20%20%20%20%20%3Cbutton%20onClick%3D%7Bthis.changeText%7D%3E%E4%BF%AE%E6%94%B9%3C%2Fbutton%3E%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22DTmdt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4a9e4243867c824862576cdb57084349\" id=\"4a9e4243867c824862576cdb57084349\"><span data-lake-id=\"u14b829e6\" id=\"u14b829e6\">可以看出，React 类组件内部预置了相当多的“现成的东西”等着我们去调度/定制，state 和生命周期就是这些“现成东西”中的典型。要想得到这些东西，难度也不大，只需要继承一个 React.Component 即可。</span></p><p data-lake-id=\"2cbdf4ff2fb2e6457be736896e1a88e8\" id=\"2cbdf4ff2fb2e6457be736896e1a88e8\"><br></p><p data-lake-id=\"98caf383193b3c907163f82471d6a1cd\" id=\"98caf383193b3c907163f82471d6a1cd\"><span data-lake-id=\"u668089da\" id=\"u668089da\">当然，这也是类组件的一个不便，它太繁杂了，对于解决许多问题来说，编写一个类组件实在是一个过于复杂的姿势。复杂的姿势必然带来高昂的理解成本，这也是我们所不想看到的。除此之外，由于开发者编写的逻辑在封装后是和组件粘在一起的，这就使得</span><strong><span data-lake-id=\"uff056c44\" id=\"uff056c44\">类组件内部的逻辑难以实现拆分和复用。</span></strong></p><p data-lake-id=\"ec80321a81b3549548ca1812fc13e59b\" id=\"ec80321a81b3549548ca1812fc13e59b\"><br></p><p data-lake-id=\"884a4229b8beae073a31a23da1dc6c7e\" id=\"884a4229b8beae073a31a23da1dc6c7e\"><strong><span data-lake-id=\"u2ec29936\" id=\"u2ec29936\">（2）函数组件</span></strong><span data-lake-id=\"ua537cda1\" id=\"ua537cda1\">：函数组件就是以函数的形态存在的 React 组件。早期并没有 React-Hooks，函数组件内部无法定义和维护 state，因此它还有一个别名叫“无状态组件”。以下是一个函数组件：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20DemoFunction(props)%20%7B%5Cn%20%20const%20%7B%20text%20%7D%20%3D%20props%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%20className%3D%5C%22demoFunction%5C%22%3E%5Cn%20%20%20%20%20%20%3Cp%3E%7B%60%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E6%8E%A5%E6%94%B6%E7%9A%84%E5%86%85%E5%AE%B9%EF%BC%9A%5B%24%7Btext%7D%5D%60%7D%3C%2Fp%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22tgKwd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3c154a7fb1f9a7b1bfcb5452076009b0\" id=\"3c154a7fb1f9a7b1bfcb5452076009b0\"><span data-lake-id=\"ua5d971b8\" id=\"ua5d971b8\">相比于类组件，函数组件肉眼可见的特质自然包括轻量、灵活、易于组织和维护、较低的学习成本等。</span></p><p data-lake-id=\"28fc5ecaa6d99986d816ca1b65949d24\" id=\"28fc5ecaa6d99986d816ca1b65949d24\"><br></p><p data-lake-id=\"8934920856eba4667af71205ccf8105c\" id=\"8934920856eba4667af71205ccf8105c\"><span data-lake-id=\"ue6add40e\" id=\"ue6add40e\">通过对比，从形态上可以对两种组件做区分，它们之间的区别如下：</span></p><ul list=\"ubb2dc127\"><li fid=\"ub3fb8a0c\" data-lake-id=\"671726d1355938c137b773c93ad963cb\" id=\"671726d1355938c137b773c93ad963cb\"><span data-lake-id=\"u75a9c5c4\" id=\"u75a9c5c4\">类组件需要继承 class，函数组件不需要；</span></li><li fid=\"ub3fb8a0c\" data-lake-id=\"959710d0a9fcb25d24e2ac6b867ad381\" id=\"959710d0a9fcb25d24e2ac6b867ad381\"><span data-lake-id=\"u38c867c7\" id=\"u38c867c7\">类组件可以访问生命周期方法，函数组件不能；</span></li><li fid=\"ub3fb8a0c\" data-lake-id=\"7ce0ebc8dd50e15f87c10f4ef35cc76f\" id=\"7ce0ebc8dd50e15f87c10f4ef35cc76f\"><span data-lake-id=\"u2005b106\" id=\"u2005b106\">类组件中可以获取到实例化后的 this，并基于这个 this 做各种各样的事情，而函数组件不可以；</span></li><li fid=\"ub3fb8a0c\" data-lake-id=\"ce26effab1bbb3fc612c8d5dbbbbf601\" id=\"ce26effab1bbb3fc612c8d5dbbbbf601\"><span data-lake-id=\"u0fda35df\" id=\"u0fda35df\">类组件中可以定义并维护 state（状态），而函数组件不可以；</span></li></ul><p data-lake-id=\"56e3304f69dd67a54d46ee733e4c47c3\" id=\"56e3304f69dd67a54d46ee733e4c47c3\"><br></p><p data-lake-id=\"e83fe0147bf923af3b112ded5463e78b\" id=\"e83fe0147bf923af3b112ded5463e78b\"><span data-lake-id=\"u2e02f285\" id=\"u2e02f285\">除此之外，还有一些其他的不同。通过上面的区别，我们不能说谁好谁坏，它们各有自己的优势。在 React-Hooks 出现之前，</span><strong><span data-lake-id=\"u34dc6101\" id=\"u34dc6101\">类组件的能力边界明显强于函数组件。</span></strong></p><p data-lake-id=\"fd62320c5925895d69fc209d5a395b4d\" id=\"fd62320c5925895d69fc209d5a395b4d\"><br></p><p data-lake-id=\"0514f09a8382b1a174d34534cb52ce01\" id=\"0514f09a8382b1a174d34534cb52ce01\"><span data-lake-id=\"u28cc4762\" id=\"u28cc4762\">实际上，类组件和函数组件之间，是面向对象和函数式编程这两套不同的设计思想之间的差异。而函数组件更加契合 React 框架的设计理念：</span></p><p data-lake-id=\"4a97944c4097d2b8bc2e321d97160657\" id=\"4a97944c4097d2b8bc2e321d97160657\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1610696273368-c5361298-048d-4eb1-9d35-7700b6601553.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A595%2C%22height%22%3A424%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A47431%2C%22originWidth%22%3A595%2C%22originHeight%22%3A424%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22UI-renderdata)%20%E6%88%96%20UI-fdata)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A90.92633%2C%22y%22%3A64.01003%2C%22width%22%3A409.53737%2C%22height%22%3A56.550169999999994%2C%22text%22%3A%22UI-renderdata)%22%7D%2C%7B%22x%22%3A267.3966%2C%22y%22%3A184.71118%2C%22width%22%3A61.228800000000035%2C%22height%22%3A48.435959999999994%2C%22text%22%3A%22%E6%88%96%22%7D%2C%7B%22x%22%3A159.9066%2C%22y%22%3A297.62045%2C%22width%22%3A266.8845%2C%22height%22%3A59.08280000000002%2C%22text%22%3A%22UI-fdata)%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23545454%22%2C%22id%22%3A%22ZDVXA%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"b0cdc010a25e001dafae6f0ff027f2f7\" id=\"b0cdc010a25e001dafae6f0ff027f2f7\"><span data-lake-id=\"uf8e18d08\" id=\"uf8e18d08\">React 组件本身的定位就是函数，一个输入数据、输出 UI 的函数。作为开发者，我们编写的是声明式的代码，而 React 框架的主要工作，就是及时地把声明式的代码转换为命令式的 DOM 操作，把数据层面的描述映射到用户可见的 UI 变化中去。这就意味着从原则上来讲，React 的数据应该总是紧紧地和渲染绑定在一起的，而类组件做不到这一点。</span><strong><span data-lake-id=\"u903dc699\" id=\"u903dc699\">函数组件就真正地将数据和渲染绑定到了一起。</span></strong><strong><span data-lake-id=\"uba1ca1a6\" id=\"uba1ca1a6\">函数组件是一个更加匹配其设计理念、也更有利于逻辑拆分与重用的组件表达形式。</span></strong></p><p data-lake-id=\"8ed46906a47b2bcdc48a366e2c103410\" id=\"8ed46906a47b2bcdc48a366e2c103410\"><br></p><p data-lake-id=\"6922f06df59ad71afd787ac50b9100b7\" id=\"6922f06df59ad71afd787ac50b9100b7\"><span data-lake-id=\"udf0409db\" id=\"udf0409db\">为了能让开发者更好的的去编写函数式组件。于是，React-Hooks 便应运而生。</span></p><p data-lake-id=\"20a30a76af3b3816bf5a8ab65c5047fb\" id=\"20a30a76af3b3816bf5a8ab65c5047fb\"><br></p><p data-lake-id=\"3abed92b0e9cbb7dbcabf2862681dd0a\" id=\"3abed92b0e9cbb7dbcabf2862681dd0a\"><span data-lake-id=\"u66207493\" id=\"u66207493\">React-Hooks 是一套能够使函数组件更强大、更灵活的“钩子”。</span></p><p data-lake-id=\"2434a47ed3e96818dfda738d25ecba74\" id=\"2434a47ed3e96818dfda738d25ecba74\"><br></p><p data-lake-id=\"9494cb732365447152f3b18e29007fe8\" id=\"9494cb732365447152f3b18e29007fe8\"><span data-lake-id=\"u443ab5c4\" id=\"u443ab5c4\">函数组件比起类组件少了很多东西，比如生命周期、对 state 的管理等。这就给函数组件的使用带来了非常多的局限性，导致我们并不能使用函数这种形式，写出一个真正的全功能的组件。而React-Hooks 的出现，就是为了帮助函数组件补齐这些（相对于类组件来说）缺失的能力。</span></p><p data-lake-id=\"4fce4413ae503000f09ded5001b4d4be\" id=\"4fce4413ae503000f09ded5001b4d4be\"><br></p><p data-lake-id=\"2f95f78524d18f1fbba76ee011c67d5c\" id=\"2f95f78524d18f1fbba76ee011c67d5c\"><span data-lake-id=\"ud275af29\" id=\"ud275af29\">如果说函数组件是一台轻巧的快艇，那么 React-Hooks 就是一个内容丰富的零部件箱。“重装战舰”所预置的那些设备，这个箱子里基本全都有，同时它还不强制你全都要，而是允许你自由地选择和使用你需要的那些能力，然后将这些能力以 Hook（钩子）的形式“钩”进你的组件里，从而定制出一个最适合你的“专属战舰”。</span></p><h3 data-lake-id=\"e00e3338c1400aa784944b53f3213b8c\" id=\"e00e3338c1400aa784944b53f3213b8c\"><span data-lake-id=\"u9dc2edc2\" id=\"u9dc2edc2\">2. </span><span data-lake-id=\"u56bc1bf1\" id=\"u56bc1bf1\">为什么 useState 要使用数组而不是对象</span></h3><p data-lake-id=\"e330c2d2ec4c0545495a15c8e836d6c3\" id=\"e330c2d2ec4c0545495a15c8e836d6c3\"><span data-lake-id=\"uafec5185\" id=\"uafec5185\">useState 的用法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%5Bcount%2C%20setCount%5D%20%3D%20useState(0)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22U8Y0v%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"623bf0b8147fd30884ca2f3a31e1655d\" id=\"623bf0b8147fd30884ca2f3a31e1655d\"><span data-lake-id=\"u4e03ac38\" id=\"u4e03ac38\">可以看到 useState 返回的是一个数组，那么为什么是返回数组而不是返回对象呢？</span></p><p data-lake-id=\"b3232f8d2b2d372903789ebc076b648f\" id=\"b3232f8d2b2d372903789ebc076b648f\"><br></p><p data-lake-id=\"d52fed1e824c06cb8ed16ccbf6d12f70\" id=\"d52fed1e824c06cb8ed16ccbf6d12f70\"><span data-lake-id=\"ue589b1ef\" id=\"ue589b1ef\">这里用到了解构赋值，所以先来看一下ES6 的解构赋值：</span></p><h5 data-lake-id=\"127cc38f647b921f9fbec33657c76133\" id=\"127cc38f647b921f9fbec33657c76133\"><span data-lake-id=\"u64931e3c\" id=\"u64931e3c\">数组的解构赋值</span></h5><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20foo%20%3D%20%5B1%2C%202%2C%203%5D%3B%5Cnconst%20%5Bone%2C%20two%2C%20three%5D%20%3D%20foo%3B%5Cnconsole.log(one)%3B%5Ct%2F%2F%201%5Cnconsole.log(two)%3B%5Ct%2F%2F%202%5Cnconsole.log(three)%3B%5Ct%2F%2F%203%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22iLjOQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"d2d02dc295251ca38660e500ed087f90\" id=\"d2d02dc295251ca38660e500ed087f90\"><span data-lake-id=\"ua5808039\" id=\"ua5808039\">对象的解构赋值</span></h5><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20user%20%3D%20%7B%5Cn%20%20id%3A%20888%2C%5Cn%20%20name%3A%20%5C%22xiaoxin%5C%22%5Cn%7D%3B%5Cnconst%20%7B%20id%2C%20name%20%7D%20%3D%20user%3B%5Cnconsole.log(id)%3B%5Ct%2F%2F%20888%5Cnconsole.log(name)%3B%5Ct%2F%2F%20%5C%22xiaoxin%5C%22%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22fJP4U%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"cf1e5d810d6770c30c666256095ac3a3\" id=\"cf1e5d810d6770c30c666256095ac3a3\"><span data-lake-id=\"ufe40ee19\" id=\"ufe40ee19\">看完这两个例子，答案应该就出来了：</span></p><ul list=\"u9105892d\"><li fid=\"u2f734937\" data-lake-id=\"6e09156ab5f74bde2906b39da9152fc0\" id=\"6e09156ab5f74bde2906b39da9152fc0\"><span data-lake-id=\"u4ca5e92e\" id=\"u4ca5e92e\">如果 useState 返回的是数组，那么使用者可以对数组中的元素命名，代码看起来也比较干净</span></li><li fid=\"u2f734937\" data-lake-id=\"f2a1a825573f85ea9ce742ce344ff7c0\" id=\"f2a1a825573f85ea9ce742ce344ff7c0\"><span data-lake-id=\"u651558a3\" id=\"u651558a3\">如果 useState 返回的是对象，在解构对象的时候必须要和 useState 内部实现返回的对象同名，想要使用多次的话，必须得设置别名才能使用返回值</span></li></ul><p data-lake-id=\"10923f17a2e5ddf3e3f3072c4714f5aa\" id=\"10923f17a2e5ddf3e3f3072c4714f5aa\"><br></p><p data-lake-id=\"bb42e6e9d7023f76a532f466789646df\" id=\"bb42e6e9d7023f76a532f466789646df\"><span data-lake-id=\"u7d5b3abb\" id=\"u7d5b3abb\">下面来看看如果 useState 返回对象的情况：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8%5Cnconst%20%7B%20state%2C%20setState%20%7D%20%3D%20useState(false)%3B%5Cn%2F%2F%20%E7%AC%AC%E4%BA%8C%E6%AC%A1%E4%BD%BF%E7%94%A8%5Cnconst%20%7B%20state%3A%20counter%2C%20setState%3A%20setCounter%20%7D%20%3D%20useState(0)%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PvHWK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"05cdc65fa7acf196036c28f451f5db6d\" id=\"05cdc65fa7acf196036c28f451f5db6d\"><span data-lake-id=\"ub2a8030b\" id=\"ub2a8030b\">这里可以看到，返回对象的使用方式还是挺麻烦的，更何况实际项目中会使用的更频繁。</span></p><p data-lake-id=\"e952b0e588edc029faea7c215c6f1dfb\" id=\"e952b0e588edc029faea7c215c6f1dfb\"><strong><span data-lake-id=\"ud17a895a\" id=\"ud17a895a\">总结：</span></strong><span data-lake-id=\"u816af7c3\" id=\"u816af7c3\">useState 返回的是 array 而不是 object 的原因就是为了</span><strong><span data-lake-id=\"u0c331da8\" id=\"u0c331da8\">降低使用的复杂度</span></strong><span data-lake-id=\"ucf6d7718\" id=\"ucf6d7718\">，返回数组的话可以直接根据顺序解构，而返回对象的话要想使用多次就需要定义别名了。</span></p><h3 data-lake-id=\"7f60ffd7cf5e013bd5afda5d2f8916cf\" id=\"7f60ffd7cf5e013bd5afda5d2f8916cf\"><span data-lake-id=\"u35e9824c\" id=\"u35e9824c\">3. </span><span data-lake-id=\"u815c8247\" id=\"u815c8247\" style=\"background-color: transparent\">React </span><span data-lake-id=\"u62d75478\" id=\"u62d75478\" style=\"background-color: transparent\">Hooks </span><span data-lake-id=\"ud983acfc\" id=\"ud983acfc\" style=\"background-color: transparent\">解决了哪些问题？</span></h3><p data-lake-id=\"2a0c6206e328bd01872946331ece5cd7\" id=\"2a0c6206e328bd01872946331ece5cd7\"><span data-lake-id=\"u17e0cde7\" id=\"u17e0cde7\">React </span><span data-lake-id=\"u2515e3d2\" id=\"u2515e3d2\">Hooks 主要解决了以下问题：</span></p><p data-lake-id=\"7bd65814d3c7e014e5334ee85c508bfe\" id=\"7bd65814d3c7e014e5334ee85c508bfe\"><strong><span data-lake-id=\"ud15e64b9\" id=\"ud15e64b9\">（1）在组件之间复用状态逻辑很难</span></strong></p><p data-lake-id=\"d2e5c36148e24239a1022c59b5961d8c\" id=\"d2e5c36148e24239a1022c59b5961d8c\"><span data-lake-id=\"u4ab919ed\" id=\"u4ab919ed\">React 没有提供将可复用性行为“附加”到组件的途径（例如，把组件连接到 store）解决此类问题可以使用 render props 和 高阶组件。但是这类方案需要重新组织组件结构，这可能会很麻烦，并且会使代码难以理解。由 providers，consumers，高阶组件，render props 等其他抽象层组成的组件会形成“嵌套地狱”。尽管可以在 DevTools 过滤掉它们，但这说明了一个更深层次的问题：React 需要为共享状态逻辑提供更好的原生途径。</span></p><p data-lake-id=\"0674ad4b658cb6bd1e806536acfc6fc3\" id=\"0674ad4b658cb6bd1e806536acfc6fc3\"><br></p><p data-lake-id=\"159cf10f29e7e8c8738b57f8103dd3a5\" id=\"159cf10f29e7e8c8738b57f8103dd3a5\"><span data-lake-id=\"uf4291cef\" id=\"uf4291cef\">可以使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。Hook 使我们在无需修改组件结构的情况下复用状态逻辑。 这使得在组件间或社区内共享 Hook 变得更便捷。</span></p><p data-lake-id=\"a10317f5455aace8db7a8b3ae8a4e463\" id=\"a10317f5455aace8db7a8b3ae8a4e463\"><strong><span data-lake-id=\"u14153349\" id=\"u14153349\">（2）复杂组件变得难以理解</span></strong></p><p data-lake-id=\"6f3dbc5d4e9e76dfc67a1f6f8cf021c8\" id=\"6f3dbc5d4e9e76dfc67a1f6f8cf021c8\"><span data-lake-id=\"u89ac3219\" id=\"u89ac3219\">在组件中，每个生命周期常常包含一些不相关的逻辑。例如，组件常常在 componentDidMount 和 componentDidUpdate 中获取数据。但是，同一个 componentDidMount 中可能也包含很多其它的逻辑，如设置事件监听，而之后需在 componentWillUnmount 中清除。相互关联且需要对照修改的代码被进行了拆分，而完全不相关的代码却在同一个方法中组合在一起。如此很容易产生 bug，并且导致逻辑不一致。</span></p><p data-lake-id=\"u15d02329\" id=\"u15d02329\"><br></p><p data-lake-id=\"ee90461d3ca13d724e3c8f124bc1ffc2\" id=\"ee90461d3ca13d724e3c8f124bc1ffc2\"><span data-lake-id=\"uf707ed6e\" id=\"uf707ed6e\">在多数情况下，不可能将组件拆分为更小的粒度，因为状态逻辑无处不在。这也给测试带来了一定挑战。同时，这也是很多人将 React 与状态管理库结合使用的原因之一。但是，这往往会引入了很多抽象概念，需要你在不同的文件之间来回切换，使得复用变得更加困难。</span></p><p data-lake-id=\"b57e0b780ed8cdfefb65e61f45c0cf42\" id=\"b57e0b780ed8cdfefb65e61f45c0cf42\"><br></p><p data-lake-id=\"d3a25c29686f677d17d938423b5a5523\" id=\"d3a25c29686f677d17d938423b5a5523\"><span data-lake-id=\"uca8ebbb8\" id=\"uca8ebbb8\">为了解决这个问题，Hook 将组件中相互关联的部分拆分成更小的函数（比如设置订阅或请求数据），而并非强制按照生命周期划分。你还可以使用 reducer 来管理组件的内部状态，使其更加可预测。</span></p><p data-lake-id=\"e3d2c1291d850a2b53cc4223d1eaebf6\" id=\"e3d2c1291d850a2b53cc4223d1eaebf6\"><strong><span data-lake-id=\"u4efb131e\" id=\"u4efb131e\">（3）难以理解的 class</span></strong></p><p data-lake-id=\"f0cc7ad215d1f67d9a0fa087f3dff7f2\" id=\"f0cc7ad215d1f67d9a0fa087f3dff7f2\"><span data-lake-id=\"ube73b453\" id=\"ube73b453\">除了代码复用和代码管理会遇到困难外，class 是学习 React 的一大屏障。我们必须去理解 JavaScript 中 this 的工作方式，这与其他语言存在巨大差异。还不能忘记绑定事件处理器。没有稳定的语法提案，这些代码非常冗余。大家可以很好地理解 props，state 和自顶向下的数据流，但对 class 却一筹莫展。即便在有经验的 React 开发者之间，对于函数组件与 class 组件的差异也存在分歧，甚至还要区分两种组件的使用场景。</span></p><p data-lake-id=\"01150b980e69c10906ae1add11f500b0\" id=\"01150b980e69c10906ae1add11f500b0\"><br></p><p data-lake-id=\"43309ee587fe98765b6303c40b338cc0\" id=\"43309ee587fe98765b6303c40b338cc0\"><span data-lake-id=\"u64e59cd2\" id=\"u64e59cd2\">为了解决这些问题，Hook 使你在非 class 的情况下可以使用更多的 React 特性。 从概念上讲，React 组件一直更像是函数。而 Hook 则拥抱了函数，同时也没有牺牲 React 的精神原则。Hook 提供了问题的解决方案，无需学习复杂的函数式或响应式编程技术</span></p><h3 data-lake-id=\"ee06a2af63fc9e3dfb2febb512cf491d\" id=\"ee06a2af63fc9e3dfb2febb512cf491d\"><span data-lake-id=\"u79452c07\" id=\"u79452c07\">4. React Hook 的使用限制有哪些？</span></h3><p data-lake-id=\"9a08c5986260eaeb14055feefe85b510\" id=\"9a08c5986260eaeb14055feefe85b510\"><span data-lake-id=\"u34a67a06\" id=\"u34a67a06\">React Hooks 的限制主要有两条：</span></p><ul list=\"uf11aaf0b\"><li fid=\"u9b3d4f3b\" data-lake-id=\"e7842fe88e9764b1cc5431baba04e493\" id=\"e7842fe88e9764b1cc5431baba04e493\"><span data-lake-id=\"u4c97fc08\" id=\"u4c97fc08\">不要在循环、条件或嵌套函数中调用 Hook；</span></li><li fid=\"u9b3d4f3b\" data-lake-id=\"a9f800d2f2e55fff926da6617c008aab\" id=\"a9f800d2f2e55fff926da6617c008aab\"><span data-lake-id=\"u37d52983\" id=\"u37d52983\">在 React 的函数组件中调用 Hook。</span></li></ul><p data-lake-id=\"88af2504a2fa4176e60071303439aafb\" id=\"88af2504a2fa4176e60071303439aafb\"><br></p><p data-lake-id=\"4731705e0d9f4b6a41ee07aa7deb895e\" id=\"4731705e0d9f4b6a41ee07aa7deb895e\"><span data-lake-id=\"u007f1294\" id=\"u007f1294\">那为什么会有这样的限制呢？Hooks 的设计初衷是为了改进 React 组件的开发模式。在旧有的开发模式下遇到了三个问题。</span></p><ul list=\"u257cace7\"><li fid=\"udadb38d6\" data-lake-id=\"e071cbe355591fc50b5f252cf8d05d5a\" id=\"e071cbe355591fc50b5f252cf8d05d5a\"><span data-lake-id=\"u38627aa5\" id=\"u38627aa5\">组件之间难以复用状态逻辑。过去常见的解决方案是高阶组件、render props 及状态管理框架。</span></li><li fid=\"udadb38d6\" data-lake-id=\"286a32eff5c72bdd8b8f9c0323ab3d53\" id=\"286a32eff5c72bdd8b8f9c0323ab3d53\"><span data-lake-id=\"ube3f18a9\" id=\"ube3f18a9\">复杂的组件变得难以理解。生命周期函数与业务逻辑耦合太深，导致关联部分难以拆分。</span></li><li fid=\"udadb38d6\" data-lake-id=\"ac09616b4dec3211078f884df021fcec\" id=\"ac09616b4dec3211078f884df021fcec\"><span data-lake-id=\"u4aab2840\" id=\"u4aab2840\">人和机器都很容易混淆类。常见的有 this 的问题，但在 React 团队中还有类难以优化的问题，希望在编译优化层面做出一些改进。</span></li></ul><p data-lake-id=\"183c0d8730533c68b323537dfb55afd2\" id=\"183c0d8730533c68b323537dfb55afd2\"><br></p><p data-lake-id=\"e41d52918706ebf82976a379412ca351\" id=\"e41d52918706ebf82976a379412ca351\"><span data-lake-id=\"u581531ee\" id=\"u581531ee\">这三个问题在一定程度上阻碍了 React 的后续发展，所以为了解决这三个问题，Hooks </span><strong><span data-lake-id=\"ub96bc022\" id=\"ub96bc022\">基于函数组件</span></strong><span data-lake-id=\"u5a6b5aab\" id=\"u5a6b5aab\">开始设计。然而第三个问题决定了 Hooks 只支持函数组件。</span></p><p data-lake-id=\"636a6cf07993833dc4d4e240485d2604\" id=\"636a6cf07993833dc4d4e240485d2604\"><br></p><p data-lake-id=\"685dc587f76753a141507c424ea1a3fc\" id=\"685dc587f76753a141507c424ea1a3fc\"><span data-lake-id=\"u0e156446\" id=\"u0e156446\">那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？因为 Hooks 的设计是基于数组实现。在调用时按顺序加入数组中，如果使用循环、条件或嵌套函数很有可能导致数组取值错位，执行错误的 Hook。当然，实质上 React 的源码里不是数组，是链表。</span></p><p data-lake-id=\"4c901c2eeb64e0be6be7cd695fc688cb\" id=\"4c901c2eeb64e0be6be7cd695fc688cb\"><br></p><p data-lake-id=\"d0da7631c4a07581b7f924f6a1dd8c94\" id=\"d0da7631c4a07581b7f924f6a1dd8c94\"><span data-lake-id=\"uc0bba562\" id=\"uc0bba562\">这些限制会在编码上造成一定程度的心智负担，新手可能会写错，为了避免这样的情况，可以引入 ESLint 的 Hooks 检查插件进行预防。</span></p><h3 data-lake-id=\"da9f9646f3f23a53d94f4d56e0539395\" id=\"da9f9646f3f23a53d94f4d56e0539395\"><span data-lake-id=\"u246b3920\" id=\"u246b3920\">5. useEffect 与 useLayoutEffect 的区别</span></h3><p data-lake-id=\"2fc0fde4a0214622176187f224873a90\" id=\"2fc0fde4a0214622176187f224873a90\"><strong><span data-lake-id=\"uc298e684\" id=\"uc298e684\">（1）共同点</span></strong></p><ul list=\"u681478e7\"><li fid=\"ufe12866e\" data-lake-id=\"669460defd9e5dc53c1c68fd159fb5a5\" id=\"669460defd9e5dc53c1c68fd159fb5a5\"><strong><span data-lake-id=\"uc1de2741\" id=\"uc1de2741\">运用效果：</span></strong><span data-lake-id=\"u9b84dcd1\" id=\"u9b84dcd1\">useEffect 与 useLayoutEffect 两者都是用于处理副作用，这些副作用包括改变 DOM、设置订阅、操作定时器等。在函数组件内部操作副作用是不被允许的，所以需要使用这两个函数去处理。</span></li><li fid=\"ufe12866e\" data-lake-id=\"21a1d24bf786d1240651a7f246c4ac66\" id=\"21a1d24bf786d1240651a7f246c4ac66\"><strong><span data-lake-id=\"u1cd3d26c\" id=\"u1cd3d26c\">使用方式：</span></strong><span data-lake-id=\"u39a1aa50\" id=\"u39a1aa50\">useEffect 与 useLayoutEffect 两者</span><span data-lake-id=\"uc52b7435\" id=\"uc52b7435\">底层的函数签名是完全一致的，都是调用的 mountEffectImpl方法，在使用上也没什么差异，基本可以直接替换。</span></li></ul><p data-lake-id=\"9bfec06a054999b167cc11cef80b307f\" id=\"9bfec06a054999b167cc11cef80b307f\"><br></p><p data-lake-id=\"833487ba577cc4200fb0a0da05bc9505\" id=\"833487ba577cc4200fb0a0da05bc9505\"><strong><span data-lake-id=\"u1286f577\" id=\"u1286f577\">（2）不同点</span></strong></p><ul list=\"u095830d8\"><li fid=\"u26cfd534\" data-lake-id=\"8cd6cf91c1f6544d63b867f391e9b2f0\" id=\"8cd6cf91c1f6544d63b867f391e9b2f0\"><strong><span data-lake-id=\"ua1a2c56f\" id=\"ua1a2c56f\">使用场景：</span></strong><span data-lake-id=\"u1ad6fc76\" id=\"u1ad6fc76\">useEffect 在 React 的渲染过程中是被异步调用的，用于绝大多数场景；而 useLayoutEffect 会在所有的 DOM 变更之后同步调用，主要用于处理 DOM 操作、调整样式、避免页面闪烁等问题。也正因为是同步处理，所以需要避免在 useLayoutEffect 做计算量较大的耗时任务从而造成阻塞。</span></li><li fid=\"u26cfd534\" data-lake-id=\"1dd8b1c5d763e91ca3de3e97594efb1d\" id=\"1dd8b1c5d763e91ca3de3e97594efb1d\"><strong><span data-lake-id=\"u1a0c3cf7\" id=\"u1a0c3cf7\">使用效果：</span></strong><span data-lake-id=\"u52711bcc\" id=\"u52711bcc\">useEffect是按照顺序执行代码的，改变屏幕像素之后执行（先渲染，后改变DOM），当改变屏幕内容时可能会产生闪烁；useLayoutEffect是改变屏幕像素之前就执行了（会推迟页面显示的事件，先改变DOM后渲染），不会产生闪烁。</span><strong><span data-lake-id=\"u36a04db1\" id=\"u36a04db1\">useLayoutEffect总是比useEffect先执行。</span></strong></li></ul><p data-lake-id=\"d9b5c9fa54f6a4751a42d4ebe6d906f8\" id=\"d9b5c9fa54f6a4751a42d4ebe6d906f8\"><br></p><p data-lake-id=\"1431134b18933fe734ec1acc3732d8ce\" id=\"1431134b18933fe734ec1acc3732d8ce\"><span data-lake-id=\"u4d2bde72\" id=\"u4d2bde72\">在未来的趋势上，两个 API 是会长期共存的，暂时没有删减合并的计划，需要开发者根据场景去自行选择。React 团队的建议非常实用，如果实在分不清，先用 useEffect，一般问题不大；如果页面有异常，再直接替换为 useLayoutEffect 即可。</span></p><h3 data-lake-id=\"3abfbbb8d6ac97d06c187df0c505f851\" id=\"3abfbbb8d6ac97d06c187df0c505f851\"><span data-lake-id=\"uf3cfe337\" id=\"uf3cfe337\">6. React Hooks在平时开发中需要注意的问题和原因</span></h3><p data-lake-id=\"552037823ef7fc559dca1afdadbb1937\" id=\"552037823ef7fc559dca1afdadbb1937\"><span data-lake-id=\"u03ca08c5\" id=\"u03ca08c5\" style=\"background-color: transparent\">（1）</span><strong><span data-lake-id=\"u7165c0ed\" id=\"u7165c0ed\" style=\"background-color: transparent\">不要在循环，条件或嵌套函数中调用Hook，必须始终在 React函数的顶层使用Hook</span></strong></p><p data-lake-id=\"2ed1728e35b8bf3e08629c37c000ee34\" id=\"2ed1728e35b8bf3e08629c37c000ee34\"><span data-lake-id=\"ud287265b\" id=\"ud287265b\">这是因为React需要利用调用顺序来正确更新相应的状态，以及调用相应的钩子函数。一旦在循环或条件分支语句中调用Hook，就容易导致调用顺序的不一致性，从而产生难以预料到的后果。</span></p><p data-lake-id=\"96378cd3974d2f302b1be8bf52968a15\" id=\"96378cd3974d2f302b1be8bf52968a15\"><strong><span data-lake-id=\"u42e84193\" id=\"u42e84193\">（2）使用useState时候，使用push，pop，splice等直接更改数组对象的坑</span></strong></p><p data-lake-id=\"61400d47f93ec50d236b91c0f2c50d02\" id=\"61400d47f93ec50d236b91c0f2c50d02\"><span data-lake-id=\"ub86c196f\" id=\"ub86c196f\">使用push直接更改数组无法获取到新值，应该采用析构方式，但是在class里面不会有这个问题。代码示例：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20Indicatorfilter()%20%7B%5Cn%20%20let%20%5Bnum%2CsetNums%5D%20%3D%20useState(%5B0%2C1%2C2%2C3%5D)%5Cn%20%20const%20test%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20%E8%BF%99%E9%87%8C%E5%9D%91%E6%98%AF%E7%9B%B4%E6%8E%A5%E9%87%87%E7%94%A8push%E5%8E%BB%E6%9B%B4%E6%96%B0num%5Cn%20%20%20%20%2F%2F%20setNums(num)%E6%98%AF%E6%97%A0%E6%B3%95%E6%9B%B4%E6%96%B0num%E7%9A%84%5Cn%20%20%20%20%2F%2F%20%E5%BF%85%E9%A1%BB%E4%BD%BF%E7%94%A8num%20%3D%20%5B...num%20%2C1%5D%5Cn%20%20%20%20num.push(1)%5Cn%20%20%20%20%2F%2F%20num%20%3D%20%5B...num%20%2C1%5D%5Cn%20%20%20%20setNums(num)%5Cn%20%20%7D%5Cnreturn%20(%5Cn%20%20%20%20%3Cdiv%20className%3D'filter'%3E%5Cn%20%20%20%20%20%20%3Cdiv%20onClick%3D%7Btest%7D%3E%E6%B5%8B%E8%AF%95%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%7Bnum.map((item%2Cindex)%20%3D%3E%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20key%3D%7Bindex%7D%3E%7Bitem%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20))%7D%5Cn%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%5Cn%7D%5Cn%5Cnclass%20Indicatorfilter%20extends%20React.Component%3Cany%2Cany%3E%7B%5Cn%20%20constructor(props%3Aany)%7B%5Cn%20%20%20%20%20%20super(props)%5Cn%20%20%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20nums%3A%5B1%2C2%2C3%5D%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20this.test%20%3D%20this.test.bind(this)%5Cn%20%20%7D%5Cn%5Cn%20%20test()%7B%5Cn%20%20%20%20%20%20%2F%2F%20class%E9%87%87%E7%94%A8%E5%90%8C%E6%A0%B7%E7%9A%84%E6%96%B9%E5%BC%8F%E6%98%AF%E6%B2%A1%E6%9C%89%E9%97%AE%E9%A2%98%E7%9A%84%5Cn%20%20%20%20%20%20this.state.nums.push(1)%5Cn%20%20%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20%20%20%20%20nums%3A%20this.state.nums%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%7D%5Cn%5Cn%20%20render()%7B%5Cn%20%20%20%20%20%20let%20%7Bnums%7D%20%3D%20this.state%5Cn%20%20%20%20%20%20return(%5Cn%20%20%20%20%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20onClick%3D%7Bthis.test%7D%3E%E6%B5%8B%E8%AF%95%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7Bnums.map((item%3Aany%2Cindex%3Anumber)%20%3D%3E%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20key%3D%7Bindex%7D%3E%7Bitem%7D%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20))%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%5Cn%20%20%20%20%20%20)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22kybDY%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"fada4a74f5b63378b5c442c786f74390\" id=\"fada4a74f5b63378b5c442c786f74390\"><span data-lake-id=\"ub3aa96a2\" id=\"ub3aa96a2\">（3）</span><strong><span data-lake-id=\"u37ec787a\" id=\"u37ec787a\">useState设置状态的时候，只有第一次生效，后期需要更新状态，必须通过useEffect</span></strong></p><p data-lake-id=\"abd047016c82af4373bb9e7e4428485a\" id=\"abd047016c82af4373bb9e7e4428485a\"><span data-lake-id=\"u823c2560\" id=\"u823c2560\">TableDeail是一个公共组件，在调用它的父组件里面，我们通过set改变columns的值，以为传递给TableDeail 的 columns是最新的值，所以tabColumn每次也是最新的值，但是实际tabColumn是最开始的值，不会随着columns的更新而更新：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20TableDeail%20%3D%20(%7B%5Cn%20%20%20%20columns%2C%5Cn%7D%3ATableData)%20%3D%3E%20%7B%5Cn%20%20%20%20const%20%5BtabColumn%2C%20setTabColumn%5D%20%3D%20useState(columns)%20%5Cn%7D%5Cn%5Cn%2F%2F%20%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%81%9A%E6%B3%95%E6%98%AF%E9%80%9A%E8%BF%87useEffect%E6%94%B9%E5%8F%98%E8%BF%99%E4%B8%AA%E5%80%BC%5Cnconst%20TableDeail%20%3D%20(%7B%5Cn%20%20%20%20columns%2C%5Cn%7D%3ATableData)%20%3D%3E%20%7B%5Cn%20%20%20%20const%20%5BtabColumn%2C%20setTabColumn%5D%20%3D%20useState(columns)%20%5Cn%20%20%20%20useEffect(()%20%3D%3E%7BsetTabColumn(columns)%7D%2C%5Bcolumns%5D)%5Cn%7D%5Cn%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22g5W0Y%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"fe873d2cdcacdb690a17d35955e586ea\" id=\"fe873d2cdcacdb690a17d35955e586ea\"><strong><span data-lake-id=\"u39e8522d\" id=\"u39e8522d\">（4）善用useCallback</span></strong></p><p data-lake-id=\"692e00e7fbb4732cefad0f5d8e1e9405\" id=\"692e00e7fbb4732cefad0f5d8e1e9405\"><span data-lake-id=\"u66b9fd37\" id=\"u66b9fd37\">父组件传递给子组件事件句柄时，如果我们没有任何参数变动可能会选用useMemo。但是每一次父组件渲染子组件即使没变化也会跟着渲染一次。 </span></p><p data-lake-id=\"1e0b3e8e00001703948b732aa2533c94\" id=\"1e0b3e8e00001703948b732aa2533c94\"><strong><span data-lake-id=\"u9c128125\" id=\"u9c128125\">（5）不要滥用useContext</span></strong></p><p data-lake-id=\"a45e4fc636bf38db63eb003e6fe9cb26\" id=\"a45e4fc636bf38db63eb003e6fe9cb26\"><span data-lake-id=\"ub8c2035d\" id=\"ub8c2035d\">可以使用基于 useContext 封装的状态管理工具。</span></p><h3 data-lake-id=\"92c5bb4c6113225c319bc1729f14e2d1\" id=\"92c5bb4c6113225c319bc1729f14e2d1\"><span data-lake-id=\"u03c0c2aa\" id=\"u03c0c2aa\">7. React Hooks </span><span data-lake-id=\"uf7d93c82\" id=\"uf7d93c82\">和生命周期的关系？</span></h3><p data-lake-id=\"78ae8a31ce5c7ed73827f4823627d765\" id=\"78ae8a31ce5c7ed73827f4823627d765\" style=\"text-align: left\"><strong><span data-lake-id=\"ua7673d7a\" id=\"ua7673d7a\">函数组件</span></strong><span data-lake-id=\"u74e68949\" id=\"u74e68949\"> 的本质是函数，没有 state 的概念的，因此</span><strong><span data-lake-id=\"u6385de6f\" id=\"u6385de6f\">不存在生命周期</span></strong><span data-lake-id=\"ud5428ef1\" id=\"ud5428ef1\">一说，仅仅是一个 </span><strong><span data-lake-id=\"u16165ce1\" id=\"u16165ce1\">render 函数</span></strong><span data-lake-id=\"ud7a4a87b\" id=\"ud7a4a87b\">而已。</span></p><p data-lake-id=\"57bc2aab31cb044408b3ab6c219ac227\" id=\"57bc2aab31cb044408b3ab6c219ac227\" style=\"text-align: left\"><span data-lake-id=\"u92391614\" id=\"u92391614\">但是引入 </span><strong><span data-lake-id=\"u894726c2\" id=\"u894726c2\">Hooks</span></strong><span data-lake-id=\"uf75a2557\" id=\"uf75a2557\"> 之后就变得不同了，它能让组件在不使用 class 的情况下拥有 state，所以就有了生命周期的概念，所谓的生命周期其实就是 </span><code data-lake-id=\"u3e34eb4f\" id=\"u3e34eb4f\"><span data-lake-id=\"udc890f11\" id=\"udc890f11\">useState</span></code><span data-lake-id=\"u9df2bf9d\" id=\"u9df2bf9d\">、 </span><code data-lake-id=\"u577b7e3f\" id=\"u577b7e3f\"><span data-lake-id=\"u1b01e782\" id=\"u1b01e782\">useEffect()</span></code><span data-lake-id=\"u42e41794\" id=\"u42e41794\"> 和 </span><code data-lake-id=\"u76a8ccfd\" id=\"u76a8ccfd\"><span data-lake-id=\"ub22f34ef\" id=\"ub22f34ef\">useLayoutEffect()</span></code><span data-lake-id=\"u7d64408f\" id=\"u7d64408f\"> 。</span></p><p data-lake-id=\"4e1f2a5d13a51b77523a159e69c0fb93\" id=\"4e1f2a5d13a51b77523a159e69c0fb93\" style=\"text-align: left\"><br></p><p data-lake-id=\"467499f8a80b9b3507f5a5040e358204\" id=\"467499f8a80b9b3507f5a5040e358204\" style=\"text-align: left\"><span data-lake-id=\"u8b264738\" id=\"u8b264738\">即：</span><strong><span data-lake-id=\"u85d5acf8\" id=\"u85d5acf8\">Hooks 组件（使用了Hooks的函数组件）有生命周期，而函数组件（未使用Hooks的函数组件）是没有生命周期的</span></strong><span data-lake-id=\"u94425db8\" id=\"u94425db8\">。</span></p><p data-lake-id=\"704262928cd3b907eb435623fce84e56\" id=\"704262928cd3b907eb435623fce84e56\" style=\"text-align: left\"><br></p><p data-lake-id=\"09549767a4a74c2bc702833383ee82d3\" id=\"09549767a4a74c2bc702833383ee82d3\" style=\"text-align: left\"><span data-lake-id=\"u6cdf437b\" id=\"u6cdf437b\">下面是具体的 class 与 Hooks 的</span><strong><span data-lake-id=\"uf73522c9\" id=\"uf73522c9\">生命周期对应关系</span></strong><span data-lake-id=\"uf0bbf4a9\" id=\"uf0bbf4a9\">：</span></p><ul list=\"u83aeb586\"><li fid=\"u3bf72262\" data-lake-id=\"30bb7d316eddeab868d07ceaae55c2e2\" id=\"30bb7d316eddeab868d07ceaae55c2e2\" style=\"text-align: left\"><code data-lake-id=\"uefb9b2d4\" id=\"uefb9b2d4\"><span data-lake-id=\"u3cf9bad8\" id=\"u3cf9bad8\">constructor</span></code><span data-lake-id=\"uc1b99f6d\" id=\"uc1b99f6d\">：函数组件不需要构造函数，可以通过调用 </span><code data-lake-id=\"u4cf19864\" id=\"u4cf19864\"><strong><span data-lake-id=\"u2147932d\" id=\"u2147932d\">useState</span></strong><strong><span data-lake-id=\"u85af907c\" id=\"u85af907c\"> 来初始化 state</span></strong></code><span data-lake-id=\"ue37d5a18\" id=\"ue37d5a18\">。如果计算的代价比较昂贵，也可以传一个函数给 </span><code data-lake-id=\"ue570b402\" id=\"ue570b402\"><span data-lake-id=\"ueb571080\" id=\"ueb571080\">useState</span></code><span data-lake-id=\"ubf1f897e\" id=\"ubf1f897e\">。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20%5Bnum%2C%20UpdateNum%5D%20%3D%20useState(0)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Bpsuw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ub33b4709\"><li fid=\"u85462fa5\" data-lake-id=\"6c5ff7e0fcbcdeccbcfa1f73a9167aee\" id=\"6c5ff7e0fcbcdeccbcfa1f73a9167aee\" style=\"text-align: left\"><code data-lake-id=\"uce060b2a\" id=\"uce060b2a\"><span data-lake-id=\"u618d8a93\" id=\"u618d8a93\">getDerivedStateFromProps</span></code><span data-lake-id=\"u20395d22\" id=\"u20395d22\">：一般情况下，我们不需要使用它，可以在</span><strong><span data-lake-id=\"u8c0bbf56\" id=\"u8c0bbf56\">渲染过程中更新 state</span></strong><span data-lake-id=\"ud861e0fe\" id=\"ud861e0fe\">，以达到实现 </span><code data-lake-id=\"u7010f848\" id=\"u7010f848\"><span data-lake-id=\"u9ad3f0ba\" id=\"u9ad3f0ba\">getDerivedStateFromProps</span></code><span data-lake-id=\"ub0edbb44\" id=\"ub0edbb44\"> 的目的。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20ScrollView(%7Brow%7D)%20%7B%5Cn%20%20let%20%5BisScrollingDown%2C%20setIsScrollingDown%5D%20%3D%20useState(false)%3B%5Cn%20%20let%20%5BprevRow%2C%20setPrevRow%5D%20%3D%20useState(null)%3B%5Cn%20%20if%20(row%20!%3D%3D%20prevRow)%20%7B%5Cn%20%20%20%20%2F%2F%20Row%20%E8%87%AA%E4%B8%8A%E6%AC%A1%E6%B8%B2%E6%9F%93%E4%BB%A5%E6%9D%A5%E5%8F%91%E7%94%9F%E8%BF%87%E6%94%B9%E5%8F%98%E3%80%82%E6%9B%B4%E6%96%B0%20isScrollingDown%E3%80%82%5Cn%20%20%20%20setIsScrollingDown(prevRow%20!%3D%3D%20null%20%26%26%20row%20%3E%20prevRow)%3B%5Cn%20%20%20%20setPrevRow(row)%3B%5Cn%20%20%7D%5Cn%20%20return%20%60Scrolling%20down%3A%20%24%7BisScrollingDown%7D%60%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22blL17%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"216bc6c9f550ab5de6bef35b77479a2a\" id=\"216bc6c9f550ab5de6bef35b77479a2a\"><span data-lake-id=\"u1adcefa0\" id=\"u1adcefa0\">React 会立即退出第一次渲染并用更新后的 state 重新运行组件以避免耗费太多性能。</span></p><ul list=\"uda644109\"><li fid=\"u417051a5\" data-lake-id=\"87e50446629f0b801e0a4c2dde5113f1\" id=\"87e50446629f0b801e0a4c2dde5113f1\" style=\"text-align: left\"><code data-lake-id=\"ub35f3ab8\" id=\"ub35f3ab8\"><span data-lake-id=\"uf4ba5221\" id=\"uf4ba5221\">shouldComponentUpdate</span></code><span data-lake-id=\"u81c1afa4\" id=\"u81c1afa4\">：可以用 </span><code data-lake-id=\"uabbfd792\" id=\"uabbfd792\"><strong><span data-lake-id=\"u5ccf3eda\" id=\"u5ccf3eda\">React.memo</span></strong></code><span data-lake-id=\"ud8504c90\" id=\"ud8504c90\"> 包裹一个组件来对它的 </span><code data-lake-id=\"uc93cc876\" id=\"uc93cc876\"><span data-lake-id=\"u51e3b89e\" id=\"u51e3b89e\">props</span></code><span data-lake-id=\"u6b3dcdf7\" id=\"u6b3dcdf7\"> 进行浅比较</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20Button%20%3D%20React.memo((props)%20%3D%3E%20%7B%5Cn%20%20%2F%2F%20%E5%85%B7%E4%BD%93%E7%9A%84%E7%BB%84%E4%BB%B6%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22snV11%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3b67e82c4ecdcafc77c7e8cc6355bf6d\" id=\"3b67e82c4ecdcafc77c7e8cc6355bf6d\"><span data-lake-id=\"u63a7d52d\" id=\"u63a7d52d\">注意：</span><code data-lake-id=\"uf3dcd8dd\" id=\"uf3dcd8dd\"><strong><span data-lake-id=\"u3cf4cc39\" id=\"u3cf4cc39\">React.memo</span></strong><strong><span data-lake-id=\"u1e65fe20\" id=\"u1e65fe20\"> 等效于 </span></strong></code><code data-lake-id=\"u8dc87fb3\" id=\"u8dc87fb3\"><strong><span data-lake-id=\"u6c947ab8\" id=\"u6c947ab8\">PureComponent</span></strong></code><span data-lake-id=\"u198cc9c7\" id=\"u198cc9c7\">，它只浅比较 props。这里也可以使用 </span><code data-lake-id=\"uad3fc71a\" id=\"uad3fc71a\"><span data-lake-id=\"u334f2fa4\" id=\"u334f2fa4\">useMemo</span></code><span data-lake-id=\"uf0613e64\" id=\"uf0613e64\"> 优化每一个节点。</span></p><ul list=\"u24cfeb43\"><li fid=\"ue6aaebfa\" data-lake-id=\"2383e2d9c9331213b89d60a9efcaf9e2\" id=\"2383e2d9c9331213b89d60a9efcaf9e2\" style=\"text-align: left\"><code data-lake-id=\"u8a663a53\" id=\"u8a663a53\"><span data-lake-id=\"u02bd68db\" id=\"u02bd68db\">render</span></code><span data-lake-id=\"u122be266\" id=\"u122be266\">：这是函数组件体本身。</span></li><li fid=\"ue6aaebfa\" data-lake-id=\"9b7246e07ba9ebedb99655e6ecdc60f1\" id=\"9b7246e07ba9ebedb99655e6ecdc60f1\" style=\"text-align: left\"><code data-lake-id=\"ucee9af74\" id=\"ucee9af74\"><span data-lake-id=\"uebd8f9ab\" id=\"uebd8f9ab\">componentDidMount</span></code><span data-lake-id=\"u28a62e41\" id=\"u28a62e41\">, </span><code data-lake-id=\"uc965fa48\" id=\"uc965fa48\"><span data-lake-id=\"uc882dfe9\" id=\"uc882dfe9\">componentDidUpdate</span></code><span data-lake-id=\"u80c72f92\" id=\"u80c72f92\">： </span><code data-lake-id=\"u03735fe4\" id=\"u03735fe4\"><span data-lake-id=\"u18112ac6\" id=\"u18112ac6\">useLayoutEffect</span></code><span data-lake-id=\"uf3c45287\" id=\"uf3c45287\"> 与它们两的调用阶段是一样的。但是，我们推荐你</span><strong><span data-lake-id=\"uaf3bb929\" id=\"uaf3bb929\">一开始先用 useEffect</span></strong><span data-lake-id=\"u3b4bffff\" id=\"u3b4bffff\">，只有当它出问题的时候再尝试使用 </span><code data-lake-id=\"uec56d117\" id=\"uec56d117\"><span data-lake-id=\"ud6064d0b\" id=\"ud6064d0b\">useLayoutEffect</span></code><span data-lake-id=\"u3adb7312\" id=\"u3adb7312\">。</span><code data-lake-id=\"uc9367d2e\" id=\"uc9367d2e\"><span data-lake-id=\"ucc6c8343\" id=\"ucc6c8343\">useEffect</span></code><span data-lake-id=\"u21857286\" id=\"u21857286\"> 可以表达所有这些的组合。</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20componentDidMount%5CnuseEffect(()%3D%3E%7B%5Cn%20%20%2F%2F%20%E9%9C%80%E8%A6%81%E5%9C%A8%20componentDidMount%20%E6%89%A7%E8%A1%8C%E7%9A%84%E5%86%85%E5%AE%B9%5Cn%7D%2C%20%5B%5D)%5CnuseEffect(()%20%3D%3E%20%7B%20%5Cn%20%20%2F%2F%20%E5%9C%A8%20componentDidMount%EF%BC%8C%E4%BB%A5%E5%8F%8A%20count%20%E6%9B%B4%E6%94%B9%E6%97%B6%20componentDidUpdate%20%E6%89%A7%E8%A1%8C%E7%9A%84%E5%86%85%E5%AE%B9%5Cn%20%20document.title%20%3D%20%60You%20clicked%20%24%7Bcount%7D%20times%60%3B%20%5Cn%20%20return%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%2F%2F%20%E9%9C%80%E8%A6%81%E5%9C%A8%20count%20%E6%9B%B4%E6%94%B9%E6%97%B6%20componentDidUpdate%EF%BC%88%E5%85%88%E4%BA%8E%20document.title%20%3D%20...%20%E6%89%A7%E8%A1%8C%EF%BC%8C%E9%81%B5%E5%AE%88%E5%85%88%E6%B8%85%E7%90%86%E5%90%8E%E6%9B%B4%E6%96%B0%EF%BC%89%5Cn%20%20%20%20%2F%2F%20%E4%BB%A5%E5%8F%8A%20componentWillUnmount%20%E6%89%A7%E8%A1%8C%E7%9A%84%E5%86%85%E5%AE%B9%20%20%20%20%20%20%20%5Cn%20%20%7D%20%2F%2F%20%E5%BD%93%E5%87%BD%E6%95%B0%E4%B8%AD%20Cleanup%20%E5%87%BD%E6%95%B0%E4%BC%9A%E6%8C%89%E7%85%A7%E5%9C%A8%E4%BB%A3%E7%A0%81%E4%B8%AD%E5%AE%9A%E4%B9%89%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%85%88%E5%90%8E%E6%89%A7%E8%A1%8C%EF%BC%8C%E4%B8%8E%E5%87%BD%E6%95%B0%E6%9C%AC%E8%BA%AB%E7%9A%84%E7%89%B9%E6%80%A7%E6%97%A0%E5%85%B3%5Cn%7D%2C%20%5Bcount%5D)%3B%20%2F%2F%20%E4%BB%85%E5%9C%A8%20count%20%E6%9B%B4%E6%94%B9%E6%97%B6%E6%9B%B4%E6%96%B0%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%220atGm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4fd3c5ef8dbe31d2590912b2e5e31fbb\" id=\"4fd3c5ef8dbe31d2590912b2e5e31fbb\"><strong><span data-lake-id=\"u38532469\" id=\"u38532469\">请记得 React 会等待浏览器完成画面渲染之后才会延迟调用 ，因此会使得额外操作很方便</span></strong></p><ul list=\"u21926978\"><li fid=\"u5f81f7b1\" data-lake-id=\"e3738e3b82ac814528321325ebcb3cd8\" id=\"e3738e3b82ac814528321325ebcb3cd8\" style=\"text-align: left\"><code data-lake-id=\"uf0905b3c\" id=\"uf0905b3c\"><span data-lake-id=\"u9fddddb8\" id=\"u9fddddb8\">componentWillUnmount</span></code><span data-lake-id=\"u6cd6662a\" id=\"u6cd6662a\">：相当于 </span><code data-lake-id=\"uc07d6dd0\" id=\"uc07d6dd0\"><span data-lake-id=\"ua0050bc4\" id=\"ua0050bc4\">useEffect </span></code><span data-lake-id=\"ua04efc5b\" id=\"ua04efc5b\">里面返回的 </span><code data-lake-id=\"u7f10b0d3\" id=\"u7f10b0d3\"><span data-lake-id=\"u46b6af4f\" id=\"u46b6af4f\">cleanup</span></code><span data-lake-id=\"uac4b7d8d\" id=\"uac4b7d8d\"> 函数</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20componentDidMount%2FcomponentWillUnmount%5CnuseEffect(()%3D%3E%7B%5Cn%20%20%2F%2F%20%E9%9C%80%E8%A6%81%E5%9C%A8%20componentDidMount%20%E6%89%A7%E8%A1%8C%E7%9A%84%E5%86%85%E5%AE%B9%5Cn%20%20return%20function%20cleanup()%20%7B%5Cn%20%20%20%20%2F%2F%20%E9%9C%80%E8%A6%81%E5%9C%A8%20componentWillUnmount%20%E6%89%A7%E8%A1%8C%E7%9A%84%E5%86%85%E5%AE%B9%20%20%20%20%20%20%5Cn%20%20%7D%5Cn%7D%2C%20%5B%5D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22m5uNU%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ud870444b\"><li fid=\"u2f2ec3d0\" data-lake-id=\"c99ac3f46a017fd8e2ca6e41274d6233\" id=\"c99ac3f46a017fd8e2ca6e41274d6233\" style=\"text-align: left\"><code data-lake-id=\"u89c59687\" id=\"u89c59687\"><span data-lake-id=\"ue577b828\" id=\"ue577b828\">componentDidCatch</span></code><span data-lake-id=\"ud9ee3950\" id=\"ud9ee3950\"> and </span><code data-lake-id=\"uf586d5ec\" id=\"uf586d5ec\"><span data-lake-id=\"u3e7997dd\" id=\"u3e7997dd\">getDerivedStateFromError</span></code><span data-lake-id=\"ub2784957\" id=\"ub2784957\">：目前</span><strong><span data-lake-id=\"u5624efab\" id=\"u5624efab\">还没有</span></strong><span data-lake-id=\"ued446746\" id=\"ued446746\">这些方法的 Hook 等价写法，但很快会加上。</span></li></ul><table data-lake-id=\"5NVAR\" id=\"5NVAR\" margin=\"true\" class=\"lake-table\" style=\"width: 609px\"><colgroup><col width=\"267\"><col width=\"342\"></colgroup><tbody><tr data-lake-id=\"uc7cbf35d\" id=\"uc7cbf35d\" style=\"height: 33px\"><td data-lake-id=\"u45f6a3b7\" id=\"u45f6a3b7\" style=\"background-color: #E9ECEF\"><p data-lake-id=\"ua4c5b3ad\" id=\"ua4c5b3ad\"><strong><span data-lake-id=\"uafe409cb\" id=\"uafe409cb\">class 组件</span></strong></p></td><td data-lake-id=\"ua0663c37\" id=\"ua0663c37\" style=\"background-color: #E9ECEF\"><p data-lake-id=\"ufbf07d14\" id=\"ufbf07d14\"><strong><span data-lake-id=\"ua7b5bfe1\" id=\"ua7b5bfe1\">Hooks 组件</span></strong></p></td></tr><tr data-lake-id=\"u9bcf519a\" id=\"u9bcf519a\" style=\"height: 33px\"><td data-lake-id=\"u7da7bb5e\" id=\"u7da7bb5e\"><p data-lake-id=\"ucb03f6bb\" id=\"ucb03f6bb\"><span data-lake-id=\"ud0ea422f\" id=\"ud0ea422f\">constructor</span></p></td><td data-lake-id=\"ub347840a\" id=\"ub347840a\"><p data-lake-id=\"udd2b2d3e\" id=\"udd2b2d3e\"><span data-lake-id=\"udcb80626\" id=\"udcb80626\">useState</span></p></td></tr><tr data-lake-id=\"uf4f34bb4\" id=\"uf4f34bb4\" style=\"height: 33px\"><td data-lake-id=\"u3c31e8d3\" id=\"u3c31e8d3\"><p data-lake-id=\"u94132751\" id=\"u94132751\"><span data-lake-id=\"u97187279\" id=\"u97187279\">getDerivedStateFromProps</span></p></td><td data-lake-id=\"u020762bf\" id=\"u020762bf\"><p data-lake-id=\"uc57759f1\" id=\"uc57759f1\"><span data-lake-id=\"uf22a8cb6\" id=\"uf22a8cb6\">useState 里面 update 函数</span></p></td></tr><tr data-lake-id=\"u6ef3b3a6\" id=\"u6ef3b3a6\" style=\"height: 33px\"><td data-lake-id=\"u9212f97e\" id=\"u9212f97e\"><p data-lake-id=\"u50b1221f\" id=\"u50b1221f\"><span data-lake-id=\"ucaf29e9e\" id=\"ucaf29e9e\">shouldComponentUpdate</span></p></td><td data-lake-id=\"u6b2f1edc\" id=\"u6b2f1edc\"><p data-lake-id=\"u10047a9f\" id=\"u10047a9f\"><span data-lake-id=\"ua031cb32\" id=\"ua031cb32\">useMemo</span></p></td></tr><tr data-lake-id=\"u93e0fdea\" id=\"u93e0fdea\" style=\"height: 33px\"><td data-lake-id=\"u3d879418\" id=\"u3d879418\"><p data-lake-id=\"u617b56d2\" id=\"u617b56d2\"><span data-lake-id=\"udf8fdc38\" id=\"udf8fdc38\">render</span></p></td><td data-lake-id=\"u1f723963\" id=\"u1f723963\"><p data-lake-id=\"u1c940f91\" id=\"u1c940f91\"><span data-lake-id=\"u752975d5\" id=\"u752975d5\">函数本身</span></p></td></tr><tr data-lake-id=\"ue36af621\" id=\"ue36af621\" style=\"height: 33px\"><td data-lake-id=\"u6e7dcdc3\" id=\"u6e7dcdc3\"><p data-lake-id=\"u291364af\" id=\"u291364af\"><span data-lake-id=\"uf79e1226\" id=\"uf79e1226\">componentDidMount</span></p></td><td data-lake-id=\"u8a2c7073\" id=\"u8a2c7073\"><p data-lake-id=\"u8651a859\" id=\"u8651a859\"><span data-lake-id=\"uc39815dd\" id=\"uc39815dd\">useEffect</span></p></td></tr><tr data-lake-id=\"ub7e93c09\" id=\"ub7e93c09\" style=\"height: 33px\"><td data-lake-id=\"u7fd56124\" id=\"u7fd56124\"><p data-lake-id=\"u4de05ed5\" id=\"u4de05ed5\"><span data-lake-id=\"u3a731baa\" id=\"u3a731baa\">componentDidUpdate</span></p></td><td data-lake-id=\"ubcc8ed56\" id=\"ubcc8ed56\"><p data-lake-id=\"u7499ae97\" id=\"u7499ae97\"><span data-lake-id=\"u7aa32200\" id=\"u7aa32200\">useEffect</span></p></td></tr><tr data-lake-id=\"u3ae25bd6\" id=\"u3ae25bd6\" style=\"height: 33px\"><td data-lake-id=\"u0a405965\" id=\"u0a405965\"><p data-lake-id=\"u7950529b\" id=\"u7950529b\"><span data-lake-id=\"ua2498059\" id=\"ua2498059\">componentWillUnmount</span></p></td><td data-lake-id=\"uebdb8e3d\" id=\"uebdb8e3d\"><p data-lake-id=\"u0c1574e9\" id=\"u0c1574e9\"><span data-lake-id=\"uf260064e\" id=\"uf260064e\">useEffect 里面返回的函数</span></p></td></tr><tr data-lake-id=\"u6d5cd034\" id=\"u6d5cd034\" style=\"height: 33px\"><td data-lake-id=\"ub674bfc4\" id=\"ub674bfc4\"><p data-lake-id=\"u2f91b996\" id=\"u2f91b996\"><span data-lake-id=\"u6c32e36d\" id=\"u6c32e36d\">componentDidCatch</span></p></td><td data-lake-id=\"udab318e9\" id=\"udab318e9\"><p data-lake-id=\"u0b4ed6c1\" id=\"u0b4ed6c1\"><span data-lake-id=\"u755a09ab\" id=\"u755a09ab\">无</span></p></td></tr><tr data-lake-id=\"u87714a69\" id=\"u87714a69\" style=\"height: 33px\"><td data-lake-id=\"u0b97361a\" id=\"u0b97361a\"><p data-lake-id=\"u683845e4\" id=\"u683845e4\"><span data-lake-id=\"u24e0dc20\" id=\"u24e0dc20\">getDerivedStateFromError</span></p></td><td data-lake-id=\"ud1e54b91\" id=\"ud1e54b91\"><p data-lake-id=\"u88c2a789\" id=\"u88c2a789\"><span data-lake-id=\"uf5c5cb71\" id=\"uf5c5cb71\">无</span></p></td></tr></tbody></table><h2 data-lake-id=\"48e6ed0fb40fd1a89ccabc401d3ddff1\" id=\"48e6ed0fb40fd1a89ccabc401d3ddff1\"><span data-lake-id=\"u85a7859c\" id=\"u85a7859c\">八、虚拟DOM</span></h2><h3 data-lake-id=\"27e524e8ad158b9680245f9dc3361834\" id=\"27e524e8ad158b9680245f9dc3361834\"><span data-lake-id=\"u1243b9e2\" id=\"u1243b9e2\">1. </span><span data-lake-id=\"uedacb094\" id=\"uedacb094\">对虚拟 DOM 的理解？虚拟 DOM 主要做了什么？虚拟 DOM 本身是什么？</span></h3><p data-lake-id=\"327d2b39378ecc069383d72e653fa675\" id=\"327d2b39378ecc069383d72e653fa675\"><span data-lake-id=\"u333b1023\" id=\"u333b1023\">从本质上来说，Virtual Dom是一个JavaScript对象，通过对象的方式来表示DOM结构。将页面的状态抽象为JS对象的形式，配合不同的渲染工具，使跨平台渲染成为可能。通过事务处理机制，将多次DOM修改的结果一次性的更新到页面上，从而有效的减少页面渲染的次数，减少修改DOM的重绘重排次数，提高渲染性能。</span></p><p data-lake-id=\"1cb1f0e2fe9ef3a7346822c901e1894e\" id=\"1cb1f0e2fe9ef3a7346822c901e1894e\"><br></p><p data-lake-id=\"468087ee0e4acb7fa977f5987291cb7a\" id=\"468087ee0e4acb7fa977f5987291cb7a\"><span data-lake-id=\"u46c1a79c\" id=\"u46c1a79c\">虚拟DOM是对DOM的抽象，这个对象是更加轻量级的对DOM的描述。它设计的最初目的，就是更好的跨平台，比如node.js就没有DOM，如果想实现SSR，那么一个方式就是借助虚拟dom，因为虚拟dom本身是js对象。 在代码渲染到页面之前，vue或者react会把代码转换成一个对象（虚拟DOM）。以对象的形式来描述真实dom结构，最终渲染到页面。在每次数据发生变化前，虚拟dom都会缓存一份，变化之时，现在的虚拟dom会与缓存的虚拟dom进行比较。在vue或者react内部封装了diff算法，通过这个算法来进行比较，渲染时修改改变的变化，原先没有发生改变的通过原先的数据进行渲染。</span></p><p data-lake-id=\"1cec2cabc73da43c8bfd3a79bf991e20\" id=\"1cec2cabc73da43c8bfd3a79bf991e20\"><br></p><p data-lake-id=\"8b32aa39a7ea1e4607b9371df72cff8e\" id=\"8b32aa39a7ea1e4607b9371df72cff8e\"><span data-lake-id=\"ud5fbcd96\" id=\"ud5fbcd96\">另外现代前端框架的一个基本要求就是无须手动操作DOM，一方面是因为手动操作DOM无法保证程序性能，多人协作的项目中如果review不严格，可能会有开发者写出性能较低的代码，另一方面更重要的是省略手动DOM操作可以大大提高开发效率。</span></p><p data-lake-id=\"b50d518926ab90521dd26f5f16fbcdf9\" id=\"b50d518926ab90521dd26f5f16fbcdf9\"><br></p><p data-lake-id=\"7325a809d8779dbfa18a73447e71a7d2\" id=\"7325a809d8779dbfa18a73447e71a7d2\"><strong><span data-lake-id=\"ub7f58c9c\" id=\"ub7f58c9c\">为什么要用 Virtual DOM：</span></strong></p><p data-lake-id=\"c1b49e8421e3cf2127e29aeec27e9279\" id=\"c1b49e8421e3cf2127e29aeec27e9279\"><strong><span data-lake-id=\"ud4ad80fe\" id=\"ud4ad80fe\">（1）保证性能下限，在不进行手动优化的情况下，提供过得去的性能</span></strong></p><p data-lake-id=\"7ee1e9b605d9e4f8c3f6fed97971fb87\" id=\"7ee1e9b605d9e4f8c3f6fed97971fb87\"><span data-lake-id=\"uc492c9b9\" id=\"uc492c9b9\">下面对比一下修改DOM时真实DOM操作和Virtual DOM的过程，来看一下它们重排重绘的性能消耗∶</span></p><ul list=\"u89c9a8ea\"><li fid=\"uaaf2ac14\" data-lake-id=\"89374db2e19abc2754529a4e5462a12f\" id=\"89374db2e19abc2754529a4e5462a12f\"><span data-lake-id=\"u4a62be84\" id=\"u4a62be84\">真实DOM∶ 生成HTML字符串＋ 重建所有的DOM元素</span></li><li fid=\"uaaf2ac14\" data-lake-id=\"3ea406f4b9e56b9a6cb04178c5778873\" id=\"3ea406f4b9e56b9a6cb04178c5778873\"><span data-lake-id=\"u0ccc79ff\" id=\"u0ccc79ff\">Virtual DOM∶ 生成vNode＋ DOMDiff＋必要的DOM更新</span></li></ul><p data-lake-id=\"cd6ac46174e62d7e676a371b008d4cc6\" id=\"cd6ac46174e62d7e676a371b008d4cc6\"><br></p><p data-lake-id=\"4efa3aa331553530f912ea3715830122\" id=\"4efa3aa331553530f912ea3715830122\"><span data-lake-id=\"u2dd3a438\" id=\"u2dd3a438\">Virtual DOM的更新DOM的准备工作耗费更多的时间，也就是JS层面，相比于更多的DOM操作它的消费是极其便宜的。尤雨溪在社区论坛中说道∶ 框架给你的保证是，你不需要手动优化的情况下，我依然可以给你提供过得去的性能。</span></p><p data-lake-id=\"82a7174554b76b65c0a15bf5282bcb2b\" id=\"82a7174554b76b65c0a15bf5282bcb2b\"><strong><span data-lake-id=\"u63173659\" id=\"u63173659\">（2）跨平台</span></strong></p><p data-lake-id=\"77ca76a20beb767df6a690f8c25011d9\" id=\"77ca76a20beb767df6a690f8c25011d9\"><span data-lake-id=\"u7a74b04b\" id=\"u7a74b04b\">Virtual DOM本质上是JavaScript的对象，它可以很方便的跨平台操作，比如服务端渲染、uniapp等。</span></p><h3 data-lake-id=\"5ae797bad8de984fcbd54bd94fc4b91b\" id=\"5ae797bad8de984fcbd54bd94fc4b91b\"><span data-lake-id=\"ub03ca239\" id=\"ub03ca239\">2. React diff 算法</span><span data-lake-id=\"u7cf18d00\" id=\"u7cf18d00\">的原理是什么？</span></h3><p data-lake-id=\"d4e9b9e290361df20a55389bca025f77\" id=\"d4e9b9e290361df20a55389bca025f77\"><span data-lake-id=\"ufea1f54e\" id=\"ufea1f54e\">实际上，diff 算法探讨的就是虚拟 DOM 树发生变化后，生成 DOM 树更新补丁的方式。它通过对比新旧两株虚拟 DOM 树的变更差异，将更新补丁作用于真实 DOM，以最小成本完成视图更新。</span></p><p data-lake-id=\"0a1ccf914aeaabf29b23723062e35f3d\" id=\"0a1ccf914aeaabf29b23723062e35f3d\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fjpeg%2F1500604%2F1609406214678-c2afb29a-fcbc-4d54-8970-97cb7f20fe20.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1000%2C%22height%22%3A250%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22CgqCHl_qyouAAkb9AAB_cmWuZhc920_mh1609406106571.jpg%22%2C%22size%22%3A75837%2C%22originWidth%22%3A1305%2C%22originHeight%22%3A326%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E6%96%B0DOM%20%E8%A7%86%E5%9B%BE%E6%9B%B4%E6%96%B0%20%E7%9C%9F%E5%AE%9EDOM%20%E5%B7%AE%E5%BC%82DOM%20%E6%9B%B4%E6%96%B0%20%E5%AF%B9%E6%AF%94%E5%B7%AE%E5%BC%82%20%E6%97%A7DOM%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A32.115875%2C%22y%22%3A37.829277%2C%22width%22%3A129.310835%2C%22height%22%3A37.559288%2C%22text%22%3A%22%E6%96%B0DOM%22%7D%2C%7B%22x%22%3A1117.2184%2C%22y%22%3A135.77246%2C%22width%22%3A153.3501000000001%2C%22height%22%3A41.70433%2C%22text%22%3A%22%E8%A7%86%E5%9B%BE%E6%9B%B4%E6%96%B0%22%7D%2C%7B%22x%22%3A769.2111%2C%22y%22%3A134.63373%2C%22width%22%3A166.14970000000005%2C%22height%22%3A41.09873999999999%2C%22text%22%3A%22%E7%9C%9F%E5%AE%9EDOM%22%7D%2C%7B%22x%22%3A366.22327%2C%22y%22%3A136.53287%2C%22width%22%3A164.99142999999998%2C%22height%22%3A38.94884999999999%2C%22text%22%3A%22%E5%B7%AE%E5%BC%82DOM%22%7D%2C%7B%22x%22%3A613.12994%2C%22y%22%3A137.89618%2C%22width%22%3A73.60775999999998%2C%22height%22%3A38.55701000000002%2C%22text%22%3A%22%E6%9B%B4%E6%96%B0%22%7D%2C%7B%22x%22%3A114.18328%2C%22y%22%3A138.33209%2C%22width%22%3A151.40006000000002%2C%22height%22%3A40.00313%2C%22text%22%3A%22%E5%AF%B9%E6%AF%94%E5%B7%AE%E5%BC%82%22%7D%2C%7B%22x%22%3A35.633865%2C%22y%22%3A238.33734%2C%22width%22%3A124.090275%2C%22height%22%3A36.29452999999998%2C%22text%22%3A%22%E6%97%A7DOM%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9e4d2%22%2C%22id%22%3A%22SRtMZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"ed079040f3dfbe5131d3cd419aa0c1a8\" id=\"ed079040f3dfbe5131d3cd419aa0c1a8\"><span data-lake-id=\"u1f0ef59f\" id=\"u1f0ef59f\">具体的流程如下：</span></p><ul list=\"u86cec04f\"><li fid=\"ue5b37053\" data-lake-id=\"f6d639ea19fe69cbbc2f243508945482\" id=\"f6d639ea19fe69cbbc2f243508945482\"><span data-lake-id=\"u2d0463a9\" id=\"u2d0463a9\">真实的 DOM 首先会映射为虚拟 DOM；</span></li><li fid=\"ue5b37053\" data-lake-id=\"b05203ba724fdfb4c38356961d1d819b\" id=\"b05203ba724fdfb4c38356961d1d819b\"><span data-lake-id=\"u2c24a373\" id=\"u2c24a373\">当虚拟 DOM 发生变化后，就会根据差距计算生成 patch，这个 patch 是一个结构化的数据，内容包含了增加、更新、移除等；</span></li><li fid=\"ue5b37053\" data-lake-id=\"d15a211239707b4e3369c271bbb276b8\" id=\"d15a211239707b4e3369c271bbb276b8\"><span data-lake-id=\"u80fdb9a0\" id=\"u80fdb9a0\">根据 patch 去更新真实的 DOM，反馈到用户的界面上。</span></li></ul><p data-lake-id=\"dbf083a6c706bd04603315f87e2452eb\" id=\"dbf083a6c706bd04603315f87e2452eb\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fjpeg%2F1500604%2F1609406240365-40166729-9e07-43a2-a9f2-71838e830ad8.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1000%2C%22height%22%3A560%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22CgqCHl_qypGAZPuGAADYrK9nkJY878_mh1609406162857.jpg%22%2C%22size%22%3A160115%2C%22originWidth%22%3A1166%2C%22originHeight%22%3A653%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%224.%E6%A0%B9%E6%8D%AEpatch%E6%93%8D%E4%BD%9C%E7%9C%9F%E5%AE%9EDOM%20%E7%9C%9F%E5%AE%9EDOM%205.%E6%9B%B4%E6%96%B0DOM%20type%3A%5C%22remove%5C%22%201.%E6%98%A0%E5%B0%84%E4%B8%BA%E8%99%9A%E6%8B%9FDOM%203.%E6%A0%B9%E6%8D%AE%E5%B7%AE%E5%BC%82%2C%E8%AE%A1%E7%AE%97patch%20%E8%99%9A%E6%8B%9FDOM%20%E5%8F%98%E5%8C%96%E5%90%8E%E7%9A%84%E8%99%9A%E6%8B%9FDOM%202.%E8%99%9A%E6%8B%9FDOM%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96%20createElement(%5C%22div%2C%20createElement''div%20createElement(a%5C%22)%20createElement(%5C%22a%5C%22%2C%20createElement(%5C%22a%5C%22)%20createElement(a%5C%22)%2C%20createElement(a%5C%22%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A400.81198%2C%22y%22%3A1.370757%2C%22width%22%3A232.10611999999998%2C%22height%22%3A18.494552%2C%22text%22%3A%224.%E6%A0%B9%E6%8D%AEpatch%E6%93%8D%E4%BD%9C%E7%9C%9F%E5%AE%9EDOM%22%7D%2C%7B%22x%22%3A48.07055%2C%22y%22%3A131.22098%2C%22width%22%3A79.05961500000001%2C%22height%22%3A17.738339999999994%2C%22text%22%3A%22%E7%9C%9F%E5%AE%9EDOM%22%7D%2C%7B%22x%22%3A288.44547%2C%22y%22%3A160.70284%2C%22width%22%3A96.53383000000002%2C%22height%22%3A19.917519999999996%2C%22text%22%3A%225.%E6%9B%B4%E6%96%B0DOM%22%7D%2C%7B%22x%22%3A762.15125%2C%22y%22%3A237.61934%2C%22width%22%3A117.85211000000004%2C%22height%22%3A19.40013000000002%2C%22text%22%3A%22type%3A%5C%22remove%5C%22%22%7D%2C%7B%22x%22%3A224.28453%2C%22y%22%3A369.81433%2C%22width%22%3A147.39195000000004%2C%22height%22%3A19.013430000000028%2C%22text%22%3A%221.%E6%98%A0%E5%B0%84%E4%B8%BA%E8%99%9A%E6%8B%9FDOM%22%7D%2C%7B%22x%22%3A626.2888%2C%22y%22%3A380.5244%2C%22width%22%3A190.63703999999996%2C%22height%22%3A18.933400000000006%2C%22text%22%3A%223.%E6%A0%B9%E6%8D%AE%E5%B7%AE%E5%BC%82%2C%E8%AE%A1%E7%AE%97patch%22%7D%2C%7B%22x%22%3A18.739758%2C%22y%22%3A461.75616%2C%22width%22%3A76.792922%2C%22height%22%3A17.630409999999983%2C%22text%22%3A%22%E8%99%9A%E6%8B%9FDOM%22%7D%2C%7B%22x%22%3A722.31323%2C%22y%22%3A470.98584%2C%22width%22%3A153.25787000000003%2C%22height%22%3A17.534460000000024%2C%22text%22%3A%22%E5%8F%98%E5%8C%96%E5%90%8E%E7%9A%84%E8%99%9A%E6%8B%9FDOM%22%7D%2C%7B%22x%22%3A508.05634%2C%22y%22%3A491.29556%2C%22width%22%3A168.36986000000002%2C%22height%22%3A18.884739999999965%2C%22text%22%3A%222.%E8%99%9A%E6%8B%9FDOM%E5%8F%91%E7%94%9F%E5%8F%98%E5%8C%96%22%7D%2C%7B%22x%22%3A71.37824%2C%22y%22%3A510.46658%2C%22width%22%3A178.07121999999998%2C%22height%22%3A18.45751999999993%2C%22text%22%3A%22createElement(%5C%22div%2C%22%7D%2C%7B%22x%22%3A763.66644%2C%22y%22%3A530.6111%2C%22width%22%3A176.26846%2C%22height%22%3A19.398200000000088%2C%22text%22%3A%22createElement''div%22%7D%2C%7B%22x%22%3A92.49691%2C%22y%22%3A532.6337%2C%22width%22%3A156.86774000000003%2C%22height%22%3A18.441400000000044%2C%22text%22%3A%22createElement(a%5C%22)%22%7D%2C%7B%22x%22%3A93.202545%2C%22y%22%3A550.9763%2C%22width%22%3A157.05291499999998%2C%22height%22%3A19.898199999999974%2C%22text%22%3A%22createElement(%5C%22a%5C%22%2C%22%7D%2C%7B%22x%22%3A782.6287%2C%22y%22%3A552.21454%2C%22width%22%3A157.09390000000008%2C%22height%22%3A18.52550999999994%2C%22text%22%3A%22createElement(%5C%22a%5C%22)%22%7D%2C%7B%22x%22%3A93.52273%2C%22y%22%3A572.6484%2C%22width%22%3A155.57255%2C%22height%22%3A18.99899999999991%2C%22text%22%3A%22createElement(a%5C%22)%2C%22%7D%2C%7B%22x%22%3A782.34015%2C%22y%22%3A572.8492%2C%22width%22%3A157.67444999999998%2C%22height%22%3A19.185159999999996%2C%22text%22%3A%22createElement(a%5C%22%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f8f7%22%2C%22id%22%3A%22jho6Z%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"340ece0add9364f47a42d57641a89280\" id=\"340ece0add9364f47a42d57641a89280\"><span data-lake-id=\"ud8c43c69\" id=\"ud8c43c69\">一个简单的例子：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20React%20from%20'react'%5Cnexport%20default%20class%20ExampleComponent%20extends%20React.Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20if(this.props.isVisible)%20%7B%5Cn%20%20%20%20%20%20%20return%20%3Cdiv%20className%3D%5C%22visible%5C%22%3Evisbile%3C%2Fdiv%3E%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20%20return%20%3Cdiv%20className%3D%5C%22hidden%5C%22%3Ehidden%3C%2Fdiv%3E%3B%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%227RQ0N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4457ac7e76d402ad1e2dd13ba14dad9d\" id=\"4457ac7e76d402ad1e2dd13ba14dad9d\"><span data-lake-id=\"u873eba41\" id=\"u873eba41\">这里，首先假定 ExampleComponent 可见，然后再改变它的状态，让它不可见 。映射为真实的 DOM 操作是这样的，React 会创建一个 div 节点。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cdiv%20class%3D%5C%22visible%5C%22%3Evisbile%3C%2Fdiv%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22yRatk%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"acea8e0c0509a9438c8f56704be418a1\" id=\"acea8e0c0509a9438c8f56704be418a1\"><span data-lake-id=\"u5c980b1d\" id=\"u5c980b1d\">当把 visbile 的值变为 false 时，就会替换 class 属性为 hidden，并重写内部的 innerText 为 hidden。</span><strong><span data-lake-id=\"u3dadf697\" id=\"u3dadf697\">这样一个生成补丁、更新差异的过程统称为 diff 算法。</span></strong></p><p data-lake-id=\"8278f2fef2c1d1279a6a3042782b8652\" id=\"8278f2fef2c1d1279a6a3042782b8652\"><br></p><p data-lake-id=\"cf072e71592cf48ab86d4776b755b7e5\" id=\"cf072e71592cf48ab86d4776b755b7e5\"><span data-lake-id=\"u79329268\" id=\"u79329268\">diff算法可以总结为三个策略，分别从树、组件及元素三个层面进行复杂度的优化：</span></p><p data-lake-id=\"2de385482d0aff0128be44ac96b09200\" id=\"2de385482d0aff0128be44ac96b09200\"><strong><span data-lake-id=\"uc6995193\" id=\"uc6995193\">策略一：忽略节点跨层级操作场景，提升比对效率。（基于树进行对比）</span></strong></p><p data-lake-id=\"02700f31062bca109099440499bdbc12\" id=\"02700f31062bca109099440499bdbc12\"><span data-lake-id=\"uf1f27891\" id=\"uf1f27891\">这一策略需要进行树比对，即对树进行分层比较。树比对的处理手法是非常“暴力”的，即两棵树只对同一层次的节点进行比较，如果发现节点已经不存在了，则该节点及其子节点会被完全删除掉，不会用于进一步的比较，这就提升了比对效率。</span></p><p data-lake-id=\"2670137317a0043e2c13e9bd69fa689d\" id=\"2670137317a0043e2c13e9bd69fa689d\"><br></p><p data-lake-id=\"a6016b98ca879ae6be90d7c28455473b\" id=\"a6016b98ca879ae6be90d7c28455473b\"><strong><span data-lake-id=\"u14182ac9\" id=\"u14182ac9\">策略二：如果组件的 class 一致，则默认为相似的树结构，否则默认为不同的树结构。</span></strong><strong><span data-lake-id=\"u80c1e0db\" id=\"u80c1e0db\">（基于组件进行对比）</span></strong></p><p data-lake-id=\"e518368014a2c02581e7dbe54478bcdb\" id=\"e518368014a2c02581e7dbe54478bcdb\"><span data-lake-id=\"ua26a5ccb\" id=\"ua26a5ccb\">在组件比对的过程中：</span></p><ul list=\"ud4ad39c5\"><li fid=\"u8a490899\" data-lake-id=\"a7f1fade992b61bd309c37e89ff59209\" id=\"a7f1fade992b61bd309c37e89ff59209\"><span data-lake-id=\"u9e7555d6\" id=\"u9e7555d6\">如果组件是同一类型则进行树比对；</span></li><li fid=\"u8a490899\" data-lake-id=\"6a0856a314f231aa68bdf58c54519920\" id=\"6a0856a314f231aa68bdf58c54519920\"><span data-lake-id=\"u4752fafb\" id=\"u4752fafb\">如果不是则直接放入补丁中。</span></li></ul><p data-lake-id=\"b32cd476030b0ad3d34781b44acc3f3e\" id=\"b32cd476030b0ad3d34781b44acc3f3e\"><span data-lake-id=\"u25174787\" id=\"u25174787\">只要父组件类型不同，就会被重新渲染。这也就是为什么 shouldComponentUpdate、PureComponent 及 React.memo 可以提高性能的原因。</span></p><p data-lake-id=\"f5be976cd8fed043c7425724502fdb26\" id=\"f5be976cd8fed043c7425724502fdb26\"><br></p><p data-lake-id=\"1fbfa6d63a97548988e519beed86be45\" id=\"1fbfa6d63a97548988e519beed86be45\"><strong><span data-lake-id=\"ucc90c01a\" id=\"ucc90c01a\">策略三：同一层级的子节点，可以通过标记 key 的方式进行列表对比。</span></strong><strong><span data-lake-id=\"ue27c8138\" id=\"ue27c8138\">（基于节点进行对比）</span></strong></p><p data-lake-id=\"a09661550af8af3bfb342020e68ee469\" id=\"a09661550af8af3bfb342020e68ee469\"><span data-lake-id=\"u2afe6427\" id=\"u2afe6427\">元素比对主要发生在同层级中，通过标记节点操作生成补丁。节点操作包含了插入、移动、删除等。其中节点重新排序同时涉及插入、移动、删除三个操作，所以效率消耗最大，此时策略三起到了至关重要的作用。通过标记 key 的方式，React 可以直接移动 DOM 节点，降低内耗。</span></p><h3 data-lake-id=\"5cd40a71545bc07ad0bd67c9da431c61\" id=\"5cd40a71545bc07ad0bd67c9da431c61\"><span data-lake-id=\"u4d9f9092\" id=\"u4d9f9092\">3. React key 是干嘛用的 为什么要加？key 主要是解决哪一类问题的</span></h3><p data-lake-id=\"b7c96a6cf888a1a03259ef63e41dea30\" id=\"b7c96a6cf888a1a03259ef63e41dea30\"><span data-lake-id=\"u55597260\" id=\"u55597260\">Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。</span></p><p data-lake-id=\"353e1dfe9a6a004739013da07a0ca3dd\" id=\"353e1dfe9a6a004739013da07a0ca3dd\"><br></p><p data-lake-id=\"dca094087e0112ed135fcb5ce05418b6\" id=\"dca094087e0112ed135fcb5ce05418b6\"><span data-lake-id=\"u81214760\" id=\"u81214760\">在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系。</span></p><p data-lake-id=\"cdc31a57a9daae4c20fc0bb9331f89b0\" id=\"cdc31a57a9daae4c20fc0bb9331f89b0\"><br></p><p data-lake-id=\"76c88d9483556c706a8e2e5da7474727\" id=\"76c88d9483556c706a8e2e5da7474727\"><span data-lake-id=\"u853540a2\" id=\"u853540a2\">注意事项：</span></p><ul list=\"u1a709a50\"><li fid=\"uf139021f\" data-lake-id=\"1a001296c2bea3a9639c3fbc800e7182\" id=\"1a001296c2bea3a9639c3fbc800e7182\"><span data-lake-id=\"u83d1027d\" id=\"u83d1027d\">key值一定要和具体的元素—一对应；</span></li><li fid=\"uf139021f\" data-lake-id=\"f40237729d1932afa0c743afdadf6df7\" id=\"f40237729d1932afa0c743afdadf6df7\"><span data-lake-id=\"u54c26403\" id=\"u54c26403\">尽量不要用数组的index去作为key；</span></li><li fid=\"uf139021f\" data-lake-id=\"311bc58b9caa9ddaec91475a4aba7f51\" id=\"311bc58b9caa9ddaec91475a4aba7f51\"><span data-lake-id=\"u002c92b0\" id=\"u002c92b0\">不要在render的时候用随机数或者其他操作给元素加上不稳定的key，这样造成的性能开销比不加key的情况下更糟糕。</span></li></ul><h3 data-lake-id=\"58297c8a00e3f84c357fe8dfa5fff8fc\" id=\"58297c8a00e3f84c357fe8dfa5fff8fc\"><span data-lake-id=\"ub1cc44cf\" id=\"ub1cc44cf\">4. </span><span data-lake-id=\"u244218b0\" id=\"u244218b0\">虚拟 DOM</span><span data-lake-id=\"u2ae56e52\" id=\"u2ae56e52\"> 的引入与直接操作原生 DOM 相比，哪一个效率更高，为什么</span></h3><p data-lake-id=\"c91a197856add3b591e91481198dba77\" id=\"c91a197856add3b591e91481198dba77\"><span data-lake-id=\"u3addb839\" id=\"u3addb839\">虚拟DOM相对原生的DOM不一定是效率更高，如果只修改一个按钮的文案，那么虚拟 DOM 的操作无论如何都不可能比真实的 DOM 操作更快。在首次渲染大量DOM时，由于多了一层虚拟DOM的计算，虚拟DOM也会比innerHTML插入慢。它能保证性能下限，在真实DOM操作的时候进行针对性的优化时，还是更快的。所以要根据具体的场景进行探讨。</span></p><p data-lake-id=\"a3219470a2b7fd02e2e8e1a407f373ad\" id=\"a3219470a2b7fd02e2e8e1a407f373ad\"><br></p><p data-lake-id=\"15d2af28d34b51e57aa4146e4c5e268a\" id=\"15d2af28d34b51e57aa4146e4c5e268a\"><span data-lake-id=\"u0e3e777a\" id=\"u0e3e777a\">在整个 DOM 操作的演化过程中，其实主要矛盾并不在于性能，而在于开发者写得爽不爽，在于研发体验/研发效率。虚拟 DOM 不是别的，正是前端开发们为了追求更好的研发体验和研发效率而创造出来的高阶产物。虚拟 DOM 并不一定会带来更好的性能，React 官方也从来没有把虚拟 DOM 作为性能层面的卖点对外输出过。</span><strong><span data-lake-id=\"udd1b3e29\" id=\"udd1b3e29\">虚拟 DOM 的优越之处在于，它能够在提供更爽、更高效的研发模式（也就是函数式的 UI 编程方式）的同时，仍然保持一个还不错的性能。</span></strong></p><h3 data-lake-id=\"cfb3eb0c8a7171168591d2b3dfd17035\" id=\"cfb3eb0c8a7171168591d2b3dfd17035\"><span data-lake-id=\"ub680d973\" id=\"ub680d973\">5. React 与 Vue 的 diff 算法有何不同？</span></h3><p data-lake-id=\"8dc68919aeb1fbfae73a3e514a1af22b\" id=\"8dc68919aeb1fbfae73a3e514a1af22b\"><span data-lake-id=\"u58ddaf2c\" id=\"u58ddaf2c\">diff 算法是指生成更新补丁的方式，主要应用于虚拟 DOM 树变化后，更新真实 DOM。所以 diff 算法一定存在这样一个过程：触发更新 → 生成补丁 → 应用补丁。</span></p><p data-lake-id=\"dd12048b8762557bd2d516bc824f3fc2\" id=\"dd12048b8762557bd2d516bc824f3fc2\"><br></p><p data-lake-id=\"00cb504a7f127248cb51bff6b7ce4a86\" id=\"00cb504a7f127248cb51bff6b7ce4a86\"><span data-lake-id=\"u25165569\" id=\"u25165569\">React 的 diff 算法，触发更新的时机主要在 state 变化与 hooks 调用之后。此时触发虚拟 DOM 树变更遍历，采用了深度优先遍历算法。但传统的遍历方式，效率较低。为了优化效率，使用了分治的方式。将单一节点比对转化为了 3 种类型节点的比对，分别是树、组件及元素，以此提升效率。</span></p><ul list=\"u257c5d45\"><li fid=\"ud266e2bc\" data-lake-id=\"78092211c724ed8d3917301db161d909\" id=\"78092211c724ed8d3917301db161d909\"><span data-lake-id=\"u61ada7de\" id=\"u61ada7de\">树比对：由于网页视图中较少有跨层级节点移动，两株虚拟 DOM 树只对同一层次的节点进行比较。</span></li><li fid=\"ud266e2bc\" data-lake-id=\"ecb452cb17ba8907375578bb75380550\" id=\"ecb452cb17ba8907375578bb75380550\"><span data-lake-id=\"u937c5cfd\" id=\"u937c5cfd\">组件比对：如果组件是同一类型，则进行树比对，如果不是，则直接放入到补丁中。</span></li><li fid=\"ud266e2bc\" data-lake-id=\"2c7e9bdb9d3935eb0a0a42afc2ded0c8\" id=\"2c7e9bdb9d3935eb0a0a42afc2ded0c8\"><span data-lake-id=\"ub668155d\" id=\"ub668155d\">元素比对：主要发生在同层级中，通过标记节点操作生成补丁，节点操作对应真实的 DOM 剪裁操作。</span></li></ul><p data-lake-id=\"aa255f64f49c763d089f2aed1a7600d9\" id=\"aa255f64f49c763d089f2aed1a7600d9\"><br></p><p data-lake-id=\"f3b0163ca695d5a99a7c7db22df3ca7e\" id=\"f3b0163ca695d5a99a7c7db22df3ca7e\"><span data-lake-id=\"uaa881e30\" id=\"uaa881e30\">以上是经典的 React diff 算法内容。自 React 16 起，引入了 Fiber 架构。为了使整个更新过程可随时暂停恢复，节点与树分别采用了 FiberNode 与 FiberTree 进行重构。fiberNode 使用了双链表的结构，可以直接找到兄弟节点与子节点。整个更新过程由 current 与 workInProgress 两株树双缓冲完成。workInProgress 更新完成后，再通过修改 current 相关指针指向新节点。</span></p><p data-lake-id=\"620e77ff02a8cd6ec6e59586e6d512fb\" id=\"620e77ff02a8cd6ec6e59586e6d512fb\"><br></p><p data-lake-id=\"302163be5bb5a8fb16e7a33e0fe4bd33\" id=\"302163be5bb5a8fb16e7a33e0fe4bd33\"><span data-lake-id=\"uefcd0497\" id=\"uefcd0497\">Vue 的整体 diff 策略与 React 对齐，虽然缺乏时间切片能力，但这并不意味着 Vue 的性能更差，因为在 Vue 3 初期引入过，后期因为收益不高移除掉了。除了高帧率动画，在 Vue 中其他的场景几乎都可以使用防抖和节流去提高响应性能。</span></p><h2 data-lake-id=\"c7e1632a1282e9f715f629812a8c5c44\" id=\"c7e1632a1282e9f715f629812a8c5c44\"><span data-lake-id=\"ud05193ca\" id=\"ud05193ca\">九、其他</span></h2><h3 data-lake-id=\"4a47af206a45788d9f791c9a7c3f2a41\" id=\"4a47af206a45788d9f791c9a7c3f2a41\"><span data-lake-id=\"u90b8cb93\" id=\"u90b8cb93\">1. </span><span data-lake-id=\"u6dcabaae\" id=\"u6dcabaae\">React组件命名推荐的方式是哪个？</span></h3><p data-lake-id=\"548e7f44141c40297e0c8a52f9e8c059\" id=\"548e7f44141c40297e0c8a52f9e8c059\" style=\"text-align: left\"><span data-lake-id=\"u3c192228\" id=\"u3c192228\">通过引用而不是使用来命名组件displayName。</span></p><p data-lake-id=\"3432cac5bcabe429be93d6328d3c09bf\" id=\"3432cac5bcabe429be93d6328d3c09bf\" style=\"text-align: left\"><br></p><p data-lake-id=\"f2b1d195d22f81ea8856ed74092d42a4\" id=\"f2b1d195d22f81ea8856ed74092d42a4\" style=\"text-align: left\"><span data-lake-id=\"u089ae93e\" id=\"u089ae93e\">使用displayName命名组件：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20React.createClass(%7B%5Cn%20%20displayName%3A%20'TodoApp'%2C%5Cn%20%20%2F%2F%20...%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hjK1f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"bcdeff5264709fe8769107770efa9c8f\" id=\"bcdeff5264709fe8769107770efa9c8f\" style=\"text-align: left\"><span data-lake-id=\"u7b77e686\" id=\"u7b77e686\">React推荐的方法：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22export%20default%20class%20TodoApp%20extends%20React.Component%20%7B%5Cn%20%20%2F%2F%20...%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Nc82N%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"7275fe8b0bcda93985dcc510b1bc7b32\" id=\"7275fe8b0bcda93985dcc510b1bc7b32\"><span data-lake-id=\"ud105852b\" id=\"ud105852b\">2. react 最新版本解决了什么问题，增加了哪些东西</span></h3><p data-lake-id=\"f7012b28a06bc17ffba3ebc47d175086\" id=\"f7012b28a06bc17ffba3ebc47d175086\"><span data-lake-id=\"u5bbd974f\" id=\"u5bbd974f\">React 16.x的三大新特性 Time Slicing、Suspense、 hooks</span></p><ul list=\"u76875ab7\"><li fid=\"ue60b3553\" data-lake-id=\"bfdca0971bcebecf984089a03d29fa6d\" id=\"bfdca0971bcebecf984089a03d29fa6d\"><strong><span data-lake-id=\"u6daa4cf0\" id=\"u6daa4cf0\">Time Slicing（解决CPU速度问题</span></strong><span data-lake-id=\"ua236bc38\" id=\"ua236bc38\">）使得在执行任务的期间可以随时暂停，跑去干别的事情，这个特性使得react能在性能极其差的机器跑时，仍然保持有良好的性能</span></li><li fid=\"ue60b3553\" data-lake-id=\"8801608944f665fdfc9a2e893a51ff6e\" id=\"8801608944f665fdfc9a2e893a51ff6e\"><strong><span data-lake-id=\"u56427b91\" id=\"u56427b91\">Suspense （解决网络IO问题）</span></strong><span data-lake-id=\"ub7c10c89\" id=\"ub7c10c89\">和lazy配合，实现异步加载组件。 能暂停当前组件的渲染， 当完成某件事以后再继续渲染，解决从react出生到现在都存在的「异步副作用」的问题，而且解决得非的优雅，使用的是 T异步但是同步的写法，这是最好的解决异步问题的方式</span></li><li fid=\"ue60b3553\" data-lake-id=\"1af30b51a768faae3f8ff87c8ecec508\" id=\"1af30b51a768faae3f8ff87c8ecec508\"><span data-lake-id=\"u33d4d501\" id=\"u33d4d501\">提供了一个</span><strong><span data-lake-id=\"u561d536c\" id=\"u561d536c\">内置函数componentDidCatch</span></strong><span data-lake-id=\"u82cb7356\" id=\"u82cb7356\">，当有错误发生时，可以友好地展示 fallback 组件; 可以捕捉到它的子元素（包括嵌套子元素）抛出的异常; 可以复用错误组件。</span></li></ul><p data-lake-id=\"52f5d7a6eefc77c06e9fd2f77754d4fd\" id=\"52f5d7a6eefc77c06e9fd2f77754d4fd\"><br></p><p data-lake-id=\"3f4d7ff8b58db450e6e0b054046db3fc\" id=\"3f4d7ff8b58db450e6e0b054046db3fc\"><strong><span data-lake-id=\"uf677041b\" id=\"uf677041b\">（1）React16.8</span></strong></p><p data-lake-id=\"310acfb36de057e7484c109aa5e59b4a\" id=\"310acfb36de057e7484c109aa5e59b4a\"><span data-lake-id=\"u35328117\" id=\"u35328117\">加入hooks，让React函数式组件更加灵活，hooks之前，React存在很多问题：</span></p><ul list=\"ud0674136\"><li fid=\"u2cee6d09\" data-lake-id=\"a9d533510f4922a4d9a8fce04873322a\" id=\"a9d533510f4922a4d9a8fce04873322a\"><span data-lake-id=\"ud8b8cf29\" id=\"ud8b8cf29\">在组件间复用状态逻辑很难</span></li><li fid=\"u2cee6d09\" data-lake-id=\"c4139eee35c49644b0c226f020dbb642\" id=\"c4139eee35c49644b0c226f020dbb642\"><span data-lake-id=\"uf31bc4a4\" id=\"uf31bc4a4\">复杂组件变得难以理解，高阶组件和函数组件的嵌套过深。</span></li><li fid=\"u2cee6d09\" data-lake-id=\"e3f19c5b2541bac63e04478fce46fcea\" id=\"e3f19c5b2541bac63e04478fce46fcea\"><span data-lake-id=\"uba43ab5c\" id=\"uba43ab5c\">class组件的this指向问题 </span></li><li fid=\"u2cee6d09\" data-lake-id=\"c9965decb2b86075751beba948c165ed\" id=\"c9965decb2b86075751beba948c165ed\"><span data-lake-id=\"u933ced07\" id=\"u933ced07\">难以记忆的生命周期</span></li></ul><p data-lake-id=\"b6f72bd810ad85f934d620ab00fa90ee\" id=\"b6f72bd810ad85f934d620ab00fa90ee\"><br></p><p data-lake-id=\"d7b450e288db5d66eaca8e08b6fb8d6b\" id=\"d7b450e288db5d66eaca8e08b6fb8d6b\"><span data-lake-id=\"u87a8e4f7\" id=\"u87a8e4f7\">hooks很好的解决了上述问题，hooks提供了很多方法</span></p><ul list=\"ub76970bc\"><li fid=\"u7c7e3c18\" data-lake-id=\"901d1c96c70f7b9d0191e76309a7a7ca\" id=\"901d1c96c70f7b9d0191e76309a7a7ca\"><span data-lake-id=\"u8404935e\" id=\"u8404935e\">useState 返回有状态值，以及更新这个状态值的函数</span></li><li fid=\"u7c7e3c18\" data-lake-id=\"8635b17d807c4230f415b375bee89400\" id=\"8635b17d807c4230f415b375bee89400\"><span data-lake-id=\"u726a2a96\" id=\"u726a2a96\">useEffect 接受包含命令式，可能有副作用代码的函数。</span></li><li fid=\"u7c7e3c18\" data-lake-id=\"4aeca2cb669b4542e03a7529dc4fe1ca\" id=\"4aeca2cb669b4542e03a7529dc4fe1ca\"><span data-lake-id=\"u5e343735\" id=\"u5e343735\">useContext 接受上下文对象（从 React.createContext返回的值）并返回当前上下文值，</span></li><li fid=\"u7c7e3c18\" data-lake-id=\"b68c0dada6d4f900a1da8f20b9b59595\" id=\"b68c0dada6d4f900a1da8f20b9b59595\"><span data-lake-id=\"u94d0f704\" id=\"u94d0f704\">useReducer useState 的替代方案。接受类型为 （state，action）=&gt; newState的reducer，并返回与dispatch方法配对的当前状态。</span></li><li fid=\"u7c7e3c18\" data-lake-id=\"59f29b75df5809634f23736ab2fe30ad\" id=\"59f29b75df5809634f23736ab2fe30ad\"><span data-lake-id=\"ub4e92775\" id=\"ub4e92775\">useCalLback 返回一个回忆的memoized版本，该版本仅在其中一个输入发生更改时才会更改。纯函数的输入输出确定性 o useMemo 纯的一个记忆函数 o useRef 返回一个可变的ref对象，其Current 属性被初始化为传递的参数，返回的 ref 对象在组件的整个生命周期内保持不变。</span></li><li fid=\"u7c7e3c18\" data-lake-id=\"09cf9d89b569b1f9181838de1ed69d28\" id=\"09cf9d89b569b1f9181838de1ed69d28\"><span data-lake-id=\"ub509d5ee\" id=\"ub509d5ee\">useImperativeMethods 自定义使用ref时公开给父组件的实例值</span></li><li fid=\"u7c7e3c18\" data-lake-id=\"dff6a5ad8aec4a20909995583037b76a\" id=\"dff6a5ad8aec4a20909995583037b76a\"><span data-lake-id=\"u4a2ceb9d\" id=\"u4a2ceb9d\">useMutationEffect 更新兄弟组件之前，它在React执行其DOM改变的同一阶段同步触发</span></li><li fid=\"u7c7e3c18\" data-lake-id=\"cc5146079f97243ebf6d41396590647b\" id=\"cc5146079f97243ebf6d41396590647b\"><span data-lake-id=\"u7867c095\" id=\"u7867c095\" style=\"background-color: transparent\">useLayoutEffect DOM改变后同步触</span><span data-lake-id=\"u088d0553\" id=\"u088d0553\">发。使用它来从DOM读取布局并同步重新渲染</span></li></ul><p data-lake-id=\"a416ed017355e1937aa847dde5abfc53\" id=\"a416ed017355e1937aa847dde5abfc53\"><br></p><p data-lake-id=\"4ac8eaefb2053c04aa3cfb42b01562b6\" id=\"4ac8eaefb2053c04aa3cfb42b01562b6\"><strong><span data-lake-id=\"uf57c2912\" id=\"uf57c2912\">（2）React16.9</span></strong></p><ul list=\"ub22798a4\"><li fid=\"u3e7aa893\" data-lake-id=\"e73123f75d2d82e7841b94ee60f59f4b\" id=\"e73123f75d2d82e7841b94ee60f59f4b\"><span data-lake-id=\"ua5af968a\" id=\"ua5af968a\">重命名 Unsafe 的生命周期方法。新的 UNSAFE_前缀将有助于在代码 review 和 debug 期间，使这些有问题的字样更突出</span></li><li fid=\"u3e7aa893\" data-lake-id=\"c924966c7cfd716616f7edca81704d25\" id=\"c924966c7cfd716616f7edca81704d25\"><span data-lake-id=\"u16122f9c\" id=\"u16122f9c\">废弃 javascrip:形式的 URL。以javascript:开头的URL 非常容易遭受攻击，造成安全漏洞。</span></li><li fid=\"u3e7aa893\" data-lake-id=\"3919d657e4c608f4dd894868326783c9\" id=\"3919d657e4c608f4dd894868326783c9\"><span data-lake-id=\"u3e769b05\" id=\"u3e769b05\">废弃&quot;Factory&quot;组件。 工厂组件会导致 React 变大且变慢。</span></li><li fid=\"u3e7aa893\" data-lake-id=\"1fd4585f09c13a8a312dfd5c076f1b6c\" id=\"1fd4585f09c13a8a312dfd5c076f1b6c\"><span data-lake-id=\"ue6e84e54\" id=\"ue6e84e54\">act（）也支持异步函数，并且你可以在调用它时使用 await。</span></li><li fid=\"u3e7aa893\" data-lake-id=\"5d1066610af28fe8b3e97f6d3f10d45b\" id=\"5d1066610af28fe8b3e97f6d3f10d45b\"><span data-lake-id=\"ubf732182\" id=\"ubf732182\">使用 &lt;React.ProfiLer&gt; 进行性能评估。在较大的应用中追踪性能回归可能会很方便 </span></li></ul><p data-lake-id=\"5674260091c50defa7ef88b571db943f\" id=\"5674260091c50defa7ef88b571db943f\"><br></p><p data-lake-id=\"124b345d05a21876bf9898aa248cc802\" id=\"124b345d05a21876bf9898aa248cc802\"><strong><span data-lake-id=\"u86e97d41\" id=\"u86e97d41\">（3）React16.13.0</span></strong></p><ul list=\"u690f21d9\"><li fid=\"u5a820eeb\" data-lake-id=\"1bcf973bf0756571dd6d5f0d7948c971\" id=\"1bcf973bf0756571dd6d5f0d7948c971\"><span data-lake-id=\"udbb5946d\" id=\"udbb5946d\">支持在渲染期间调用setState，但仅适用于同一组件</span></li><li fid=\"u5a820eeb\" data-lake-id=\"b072f7823389f51d0287801ced022c0e\" id=\"b072f7823389f51d0287801ced022c0e\"><span data-lake-id=\"u1f66e638\" id=\"u1f66e638\">可检测冲突的样式规则并记录警告</span></li><li fid=\"u5a820eeb\" data-lake-id=\"443976085874ab2c802557b0a34edf9c\" id=\"443976085874ab2c802557b0a34edf9c\"><span data-lake-id=\"u087b6d81\" id=\"u087b6d81\">废弃 unstable_createPortal，使用CreatePortal</span></li><li fid=\"u5a820eeb\" data-lake-id=\"8ace1e751af1a2b220cb4e7d1d637061\" id=\"8ace1e751af1a2b220cb4e7d1d637061\"><span data-lake-id=\"ud7725824\" id=\"ud7725824\">将组件堆栈添加到其开发警告中，使开发人员能够隔离bug并调试其程序，这可以清楚地说明问题所在，并更快地定位和修复错误。</span></li></ul><h3 data-lake-id=\"32d498ab9045ccd168b25c28c7ac0dff\" id=\"32d498ab9045ccd168b25c28c7ac0dff\"><span data-lake-id=\"u5184ad18\" id=\"u5184ad18\">3. </span><span data-lake-id=\"ua6511600\" id=\"ua6511600\">react 实现一个全局的 dialog</span></h3><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%C2%A0React%2C%20%7B%20Component%20%7D%20from%C2%A0'react'%3B%5Cnimport%C2%A0%7B%20is%2C%20fromJS%20%7D%20from%C2%A0'immutable'%3B%5Cnimport%C2%A0ReactDOM%20from%C2%A0'react-dom'%3B%5Cnimport%C2%A0ReactCSSTransitionGroup%20from%C2%A0'react-addons-css-transition-group'%3B%5Cnimport%C2%A0'.%2Fdialog.css'%3B%5Cnlet%C2%A0defaultState%20%3D%20%7B%5Cn%C2%A0%C2%A0alertStatus%3Afalse%2C%5Cn%C2%A0%C2%A0alertTip%3A%5C%22%E6%8F%90%E7%A4%BA%5C%22%2C%5Cn%C2%A0%C2%A0closeDialog%3Afunction()%7B%7D%2C%5Cn%C2%A0%C2%A0childs%3A''%5Cn%7D%5Cnclass%C2%A0Dialog%C2%A0extends%C2%A0Component%7B%5Cn%C2%A0%C2%A0state%20%3D%20%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0...defaultState%5Cn%C2%A0%C2%A0%7D%3B%5Cn%C2%A0%C2%A0%2F%2F%20css%E5%8A%A8%E7%94%BB%E7%BB%84%E4%BB%B6%E8%AE%BE%E7%BD%AE%E4%B8%BA%E7%9B%AE%E6%A0%87%E7%BB%84%E4%BB%B6%5Cn%C2%A0%C2%A0FirstChild%20%3D%20props%20%3D%3E%20%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0const%20childrenArray%20%3D%20React.Children.toArray(props.children)%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0return%C2%A0childrenArray%5B0%5D%20%7C%7C%C2%A0null%3B%5Cn%C2%A0%C2%A0%7D%5Cn%C2%A0%C2%A0%2F%2F%E6%89%93%E5%BC%80%E5%BC%B9%E7%AA%97%5Cn%C2%A0%C2%A0open%20%3D(options)%3D%3E%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0options%20%3D%20options%20%7C%7C%20%7B%7D%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0options.alertStatus%20%3D%C2%A0true%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0var%C2%A0props%20%3D%20options.props%20%7C%7C%20%7B%7D%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0var%C2%A0childs%20%3D%C2%A0this.renderChildren(props%2Coptions.childrens)%20%7C%7C%C2%A0''%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0console.log(childs)%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0this.setState(%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0...defaultState%2C%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0...options%2C%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0childs%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%7D)%5Cn%C2%A0%C2%A0%7D%5Cn%C2%A0%C2%A0%2F%2F%E5%85%B3%E9%97%AD%E5%BC%B9%E7%AA%97%5Cn%C2%A0%C2%A0close()%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0this.state.closeDialog()%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0this.setState(%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0...defaultState%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%7D)%5Cn%C2%A0%C2%A0%7D%5Cn%C2%A0%C2%A0renderChildren(props%2Cchildrens)%20%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%2F%2F%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E5%AD%90%E7%BB%84%E4%BB%B6%5Cn%C2%A0%C2%A0%C2%A0%C2%A0var%C2%A0childs%20%3D%20%5B%5D%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0childrens%20%3D%20childrens%20%7C%7C%20%5B%5D%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0var%C2%A0ps%20%3D%20%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0...props%2C%C2%A0%C2%A0%2F%2F%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6%E7%BB%91%E5%AE%9Aprops%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0_close%3Athis.close%C2%A0%C2%A0%2F%2F%E7%BB%99%E5%AD%90%E7%BB%84%E4%BB%B6%E4%B9%9F%E7%BB%91%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%85%B3%E9%97%AD%E5%BC%B9%E7%AA%97%E7%9A%84%E4%BA%8B%E4%BB%B6%C2%A0%C2%A0%C2%A0%C2%A0%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%7D%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0childrens.forEach((currentItem%2Cindex)%20%3D%3E%20%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0childs.push(React.createElement(%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0currentItem%2C%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0...ps%2C%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0key%3Aindex%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%7D%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0))%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%7D)%5Cn%C2%A0%C2%A0%C2%A0%C2%A0return%C2%A0childs%3B%5Cn%C2%A0%C2%A0%7D%5Cn%C2%A0%C2%A0shouldComponentUpdate(nextProps%2C%20nextState)%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0return%C2%A0!is(fromJS(this.props)%2C%20fromJS(nextProps))%20%7C%7C%20!is(fromJS(this.state)%2C%20fromJS(nextState))%5Cn%C2%A0%C2%A0%7D%5Cn%C2%A0%C2%A0%C2%A0%5Cn%C2%A0%C2%A0render()%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0return%C2%A0(%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%3CReactCSSTransitionGroup%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0component%3D%7Bthis.FirstChild%7D%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0transitionName%3D'hide'%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0transitionEnterTimeout%3D%7B300%7D%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0transitionLeaveTimeout%3D%7B300%7D%3E%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%3Cdiv%20className%3D%5C%22dialog-con%5C%22%C2%A0style%3D%7Bthis.state.alertStatus%3F%20%7Bdisplay%3A'block'%7D%3A%7Bdisplay%3A'none'%7D%7D%3E%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%7Bthis.state.childs%7D%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%3C%2Fdiv%3E%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%3C%2FReactCSSTransitionGroup%3E%5Cn%C2%A0%C2%A0%C2%A0%C2%A0)%3B%5Cn%C2%A0%C2%A0%7D%5Cn%7D%5Cnlet%C2%A0div%20%3D%20document.createElement('div')%3B%5Cnlet%C2%A0props%20%3D%20%7B%5Cn%C2%A0%C2%A0%C2%A0%5Cn%7D%3B%5Cndocument.body.appendChild(div)%3B%5Cnlet%C2%A0Box%20%3D%20ReactD%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22IYshs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4ff16668acd79709390127b3c259a1e9\" id=\"4ff16668acd79709390127b3c259a1e9\"><span data-lake-id=\"u4e1169ba\" id=\"u4e1169ba\">子类：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E5%AD%90%E7%B1%BBjsx%5Cnimport%C2%A0React%2C%20%7B%20Component%20%7D%20from%C2%A0'react'%3B%5Cnclass%C2%A0Child%C2%A0extends%C2%A0Component%20%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0constructor(props)%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0super(props)%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0this.state%20%3D%20%7Bdate%3A%C2%A0new%C2%A0Date()%7D%3B%5Cn%C2%A0%C2%A0%7D%5Cn%C2%A0%C2%A0showValue%3D()%3D%3E%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0this.props.showValue%20%26%26%C2%A0this.props.showValue()%5Cn%C2%A0%C2%A0%7D%5Cn%C2%A0%C2%A0render()%20%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0return%C2%A0(%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%3Cdiv%20className%3D%5C%22Child%5C%22%3E%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%3Cdiv%20className%3D%5C%22content%5C%22%3E%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0Child%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%3Cbutton%20onClick%3D%7Bthis.showValue%7D%3E%E8%B0%83%E7%94%A8%E7%88%B6%E7%9A%84%E6%96%B9%E6%B3%95%3C%2Fbutton%3E%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%3C%2Fdiv%3E%5Cn%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%C2%A0%3C%2Fdiv%3E%5Cn%C2%A0%C2%A0%C2%A0%C2%A0)%3B%5Cn%C2%A0%C2%A0%7D%5Cn%7D%5Cnexport%C2%A0default%C2%A0Child%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22id6YZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"fa921a42d1fd26dee7da71ab5adfc08c\" id=\"fa921a42d1fd26dee7da71ab5adfc08c\"><span data-lake-id=\"u1733844a\" id=\"u1733844a\">css：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22css%22%2C%22code%22%3A%22.dialog-con%7B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0position%3A%20fixed%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0top%3A%200%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0left%3A%200%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0width%3A%20100%25%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0height%3A%20100%25%3B%5Cn%C2%A0%C2%A0%C2%A0%C2%A0background%3A%20rgba(0%2C%200%2C%200%2C%200.3)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UvjvT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"9c0779e3b57c1d10fe0c52d122610e8b\" id=\"9c0779e3b57c1d10fe0c52d122610e8b\"><span data-lake-id=\"u36be0a2d\" id=\"u36be0a2d\">4. </span><span data-lake-id=\"u9f143833\" id=\"u9f143833\">React 数据持久化有什么实践吗？</span></h3><p data-lake-id=\"b9bd66ec6eb4dccdf2e847fab0f7f64e\" id=\"b9bd66ec6eb4dccdf2e847fab0f7f64e\"><span data-lake-id=\"u4909c6b5\" id=\"u4909c6b5\">封装数据持久化组件：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%E3%80%91let%20storage%3D%7B%5Cn%20%20%20%20%2F%2F%20%E5%A2%9E%E5%8A%A0%5Cn%20%20%20%20set(key%2C%20value)%7B%5Cn%20%20%20%20%20%20%20%20localStorage.setItem(key%2C%20JSON.stringify(value))%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%5Cn%20%20%20%20get(key)%7B%5Cn%20%20%20%20%20%20%20%20return%20JSON.parse(localStorage.getItem(key))%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%2F%2F%20%E5%88%A0%E9%99%A4%5Cn%20%20%20%20remove(key)%7B%5Cn%20%20%20%20%20%20%20%20localStorage.removeItem(key)%3B%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cnexport%20default%20Storage%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qZ5d6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4989678a4e3d415afa3eec806e3766df\" id=\"4989678a4e3d415afa3eec806e3766df\" style=\"text-align: left\"><span data-lake-id=\"u47f41f41\" id=\"u47f41f41\">在React项目中，通过redux存储全局数据时，会有一个问题，如果用户刷新了网页，那么通过redux存储的全局数据就会被全部清空，比如登录信息等。这时就会有全局数据持久化存储的需求。首先想到的就是localStorage，localStorage是没有时间限制的数据存储，可以通过它来实现数据的持久化存储。</span></p><p data-lake-id=\"45ca64b8d2413c2b15c7a598c1eb86c9\" id=\"45ca64b8d2413c2b15c7a598c1eb86c9\" style=\"text-align: left\"><br></p><p data-lake-id=\"93b123efc3da8a765964b0dc32294794\" id=\"93b123efc3da8a765964b0dc32294794\" style=\"text-align: left\"><span data-lake-id=\"u8d330aab\" id=\"u8d330aab\">但是在已经使用redux来管理和存储全局数据的基础上，再去使用localStorage来读写数据，这样不仅是工作量巨大，还容易出错。那么有没有结合redux来达到持久数据存储功能的框架呢？当然，它就是</span><strong><span data-lake-id=\"ub8d235b6\" id=\"ub8d235b6\">redux-persist</span></strong><span data-lake-id=\"u88217631\" id=\"u88217631\">。redux-persist会将redux的store中的数据缓存到浏览器的localStorage中。其使用步骤如下：</span></p><p data-lake-id=\"7d0aa169ed45d312703fd36b1cb98ecf\" id=\"7d0aa169ed45d312703fd36b1cb98ecf\" style=\"text-align: left\"><br></p><p data-lake-id=\"e48a5eec658e8921d54c0b050fbcf621\" id=\"e48a5eec658e8921d54c0b050fbcf621\"><strong><span data-lake-id=\"u02a5ff7d\" id=\"u02a5ff7d\">（1）首先要安装redux-persist：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22npm%20i%20redux-persist%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jyGSK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"7681fed4f47a36ec1f6360a11328125b\" id=\"7681fed4f47a36ec1f6360a11328125b\"><strong><span data-lake-id=\"u1dd6fb63\" id=\"u1dd6fb63\">（2）对于reducer和action的处理不变，只需修改store的生成代码，修改如下：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20%7BcreateStore%7D%20from%20'redux'%5Cnimport%20reducers%20from%20'..%2Freducers%2Findex'%5Cnimport%20%7BpersistStore%2C%20persistReducer%7D%20from%20'redux-persist'%3B%5Cnimport%20storage%20from%20'redux-persist%2Flib%2Fstorage'%3B%5Cnimport%20autoMergeLevel2%20from%20'redux-persist%2Flib%2FstateReconciler%2FautoMergeLevel2'%3B%5Cnconst%20persistConfig%20%3D%20%7B%5Cn%20%20%20%20key%3A%20'root'%2C%5Cn%20%20%20%20storage%3A%20storage%2C%5Cn%20%20%20%20stateReconciler%3A%20autoMergeLevel2%20%2F%2F%20%E6%9F%A5%E7%9C%8B%20'Merge%20Process'%20%E9%83%A8%E5%88%86%E7%9A%84%E5%85%B7%E4%BD%93%E6%83%85%E5%86%B5%5Cn%7D%3B%5Cnconst%20myPersistReducer%20%3D%20persistReducer(persistConfig%2C%20reducers)%5Cnconst%20store%20%3D%20createStore(myPersistReducer)%5Cnexport%20const%20persistor%20%3D%20persistStore(store)%5Cnexport%20default%20store%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22w7lEb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"2bc1a89c39e31140b1de26b939f967eb\" id=\"2bc1a89c39e31140b1de26b939f967eb\"><strong><span data-lake-id=\"ucc219afe\" id=\"ucc219afe\">（3）在index.js中，将PersistGate标签作为网页内容的父标签：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20React%20from%20'react'%3B%5Cnimport%20ReactDOM%20from%20'react-dom'%3B%5Cnimport%20%7BProvider%7D%20from%20'react-redux'%5Cnimport%20store%20from%20'.%2Fredux%2Fstore%2Fstore'%5Cnimport%20%7Bpersistor%7D%20from%20'.%2Fredux%2Fstore%2Fstore'%5Cnimport%20%7BPersistGate%7D%20from%20'redux-persist%2Flib%2Fintegration%2Freact'%3B%5CnReactDOM.render(%3CProvider%20store%3D%7Bstore%7D%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3CPersistGate%20loading%3D%7Bnull%7D%20persistor%3D%7Bpersistor%7D%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%2F*%E7%BD%91%E9%A1%B5%E5%86%85%E5%AE%B9*%2F%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2FPersistGate%3E%5Cn%20%20%20%20%20%20%20%20%3C%2FProvider%3E%2C%20document.getElementById('root'))%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22piEdh%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"42484644df37c07ab0a93391932d99c9\" id=\"42484644df37c07ab0a93391932d99c9\" style=\"text-align: left\"><span data-lake-id=\"ue1a96ca9\" id=\"ue1a96ca9\">这就完成了通过redux-persist实现React持久化本地数据存储的简单应用。</span></p><h3 data-lake-id=\"042341bfb3142c2a12ab6667437092a5\" id=\"042341bfb3142c2a12ab6667437092a5\"><span data-lake-id=\"u45f4b158\" id=\"u45f4b158\">5. </span><span data-lake-id=\"u622fcfd3\" id=\"u622fcfd3\">对 React 和 Vue 的理解，它们的异同</span></h3><p data-lake-id=\"0822222246529a5d79e905da80bb9196\" id=\"0822222246529a5d79e905da80bb9196\"><strong><span data-lake-id=\"uab5a545a\" id=\"uab5a545a\">相似之处：</span></strong></p><ul list=\"u8c54655c\"><li fid=\"ua8712ed0\" data-lake-id=\"0facc6f2377dad714c3c1d2d4dcfcb6b\" id=\"0facc6f2377dad714c3c1d2d4dcfcb6b\"><span data-lake-id=\"uad0ddd7f\" id=\"uad0ddd7f\">都将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库</span></li><li fid=\"ua8712ed0\" data-lake-id=\"3e93ca7d2846eb6f0a940593cc5b68b1\" id=\"3e93ca7d2846eb6f0a940593cc5b68b1\"><span data-lake-id=\"ud278b8eb\" id=\"ud278b8eb\">都有自己的构建工具，能让你得到一个根据最佳实践设置的项目模板。</span></li><li fid=\"ua8712ed0\" data-lake-id=\"865a13d3b660a3548fd42bd2fd69209b\" id=\"865a13d3b660a3548fd42bd2fd69209b\"><span data-lake-id=\"u29228be4\" id=\"u29228be4\">都使用了Virtual DOM（虚拟DOM）提高重绘性能</span></li><li fid=\"ua8712ed0\" data-lake-id=\"a7f94a72d621066be6033c95efe886f4\" id=\"a7f94a72d621066be6033c95efe886f4\"><span data-lake-id=\"u0d4f5acc\" id=\"u0d4f5acc\">都有props的概念，允许组件间的数据传递</span></li><li fid=\"ua8712ed0\" data-lake-id=\"ff17dfb25c38d3d1390ca564fb45f521\" id=\"ff17dfb25c38d3d1390ca564fb45f521\"><span data-lake-id=\"u501d72d6\" id=\"u501d72d6\">都鼓励组件化应用，将应用分拆成一个个功能明确的模块，提高复用性</span></li></ul><p data-lake-id=\"uee570767\" id=\"uee570767\"><br></p><p data-lake-id=\"7f38f7d5f4faba3209205a1cb06de626\" id=\"7f38f7d5f4faba3209205a1cb06de626\"><strong><span data-lake-id=\"ucc9d34f1\" id=\"ucc9d34f1\">不同之处： </span></strong></p><p data-lake-id=\"a32ac1d88755f8e58c5191aac30fa97a\" id=\"a32ac1d88755f8e58c5191aac30fa97a\"><strong><span data-lake-id=\"uf3811917\" id=\"uf3811917\">1）数据流</span></strong></p><p data-lake-id=\"b064fb4dd2d088d6fc5a133e4bd4c830\" id=\"b064fb4dd2d088d6fc5a133e4bd4c830\"><span data-lake-id=\"u9d6ed91a\" id=\"u9d6ed91a\">Vue默认支持数据双向绑定，而React一直提倡单向数据流 </span></p><p data-lake-id=\"4f59113dd0afafb84a27958ff10ee6ca\" id=\"4f59113dd0afafb84a27958ff10ee6ca\"><strong><span data-lake-id=\"uedc756b7\" id=\"uedc756b7\">2）虚拟DOM</span></strong></p><p data-lake-id=\"de86af0524f4d35487fd1e4699778a36\" id=\"de86af0524f4d35487fd1e4699778a36\"><span data-lake-id=\"u6bedcf8a\" id=\"u6bedcf8a\">Vue2.x开始引入&quot;Virtual DOM&quot;，消除了和React在这方面的差异，但是在具体的细节还是有各自的特点。 </span></p><ul list=\"u6eee1441\"><li fid=\"u4ea7275c\" data-lake-id=\"501c6b65c7d936f73f92847b700baa2a\" id=\"501c6b65c7d936f73f92847b700baa2a\"><span data-lake-id=\"u7dc61b61\" id=\"u7dc61b61\">Vue宣称可以更快地计算出Virtual DOM的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。</span></li><li fid=\"u4ea7275c\" data-lake-id=\"96b46127cf4bee6455482767f197c328\" id=\"96b46127cf4bee6455482767f197c328\"><span data-lake-id=\"u975bb3fe\" id=\"u975bb3fe\">对于React而言，每当应用的状态被改变时，全部子组件都会重新渲染。当然，这可以通过 PureComponent/shouldComponentUpdate这个生命周期方法来进行控制，但Vue将此视为默认的优化。</span></li></ul><p data-lake-id=\"d9a92a37f4bc313f171ab9a2406ef909\" id=\"d9a92a37f4bc313f171ab9a2406ef909\"><strong><span data-lake-id=\"u86d185e7\" id=\"u86d185e7\">3）组件化</span></strong></p><p data-lake-id=\"4503b1bed7cbfd13c688311f1f30b5b0\" id=\"4503b1bed7cbfd13c688311f1f30b5b0\"><span data-lake-id=\"ua0b1a9c7\" id=\"ua0b1a9c7\">React与Vue最大的不同是模板的编写。</span></p><ul list=\"u32901cd6\"><li fid=\"ub103a4a9\" data-lake-id=\"6c549ffc1d1236137f12c2dee63329cf\" id=\"6c549ffc1d1236137f12c2dee63329cf\"><span data-lake-id=\"u93d252b1\" id=\"u93d252b1\">Vue鼓励写近似常规HTML的模板。写起来很接近标准 HTML元素，只是多了一些属性。</span></li><li fid=\"ub103a4a9\" data-lake-id=\"000287f43ed30e8239078edccbde9418\" id=\"000287f43ed30e8239078edccbde9418\"><span data-lake-id=\"u5708dc92\" id=\"u5708dc92\">React推荐你所有的模板通用JavaScript的语法扩展——JSX书写。</span></li></ul><p data-lake-id=\"be21a0ecd318be321f6c08cb298c6d69\" id=\"be21a0ecd318be321f6c08cb298c6d69\"><br></p><p data-lake-id=\"fbd47371ab9682d87a89a4238f144593\" id=\"fbd47371ab9682d87a89a4238f144593\"><span data-lake-id=\"u6565b8ce\" id=\"u6565b8ce\">具体来讲：React中render函数是支持闭包特性的，所以我们import的组件在render中可以直接调用。但是在Vue中，由于模板中使用的数据都必须挂在 this 上进行一次中转，所以 import 完组件之后，还需要在 components 中再声明下。</span></p><p data-lake-id=\"822b60472f049a0256b87ebde7a309ac\" id=\"822b60472f049a0256b87ebde7a309ac\"><strong><span data-lake-id=\"u4e36cc7d\" id=\"u4e36cc7d\">4）监听数据变化的实现原理不同</span></strong></p><ul list=\"u9409705b\"><li fid=\"udf22d7be\" data-lake-id=\"17af6accd64b5dfe32c83fd6fa2f72a8\" id=\"17af6accd64b5dfe32c83fd6fa2f72a8\"><span data-lake-id=\"u79326788\" id=\"u79326788\">Vue 通过 getter/setter 以及一些函数的劫持，能精确知道数据变化，不需要特别的优化就能达到很好的性能</span></li><li fid=\"udf22d7be\" data-lake-id=\"75f3bfa96da6f83e29f9446c4145222b\" id=\"75f3bfa96da6f83e29f9446c4145222b\"><span data-lake-id=\"ucf3b8388\" id=\"ucf3b8388\">React 默认是通过比较引用的方式进行的，如果不优化（PureComponent/shouldComponentUpdate）可能导致大量不必要的vDOM的重新渲染。这是因为 Vue 使用的是可变数据，而React更强调数据的不可变。</span></li></ul><p data-lake-id=\"76893f410f12eb7430aa1521898f7570\" id=\"76893f410f12eb7430aa1521898f7570\"><strong><span data-lake-id=\"uf511b00f\" id=\"uf511b00f\">5）高阶组件</span></strong></p><p data-lake-id=\"61f7f90a408fbd782f628981c0be88ab\" id=\"61f7f90a408fbd782f628981c0be88ab\"><span data-lake-id=\"u52a4b1e2\" id=\"u52a4b1e2\">react可以通过高阶组件（Higher Order Components-- HOC）来扩展，而vue需要通过mixins来扩展。</span></p><p data-lake-id=\"254cb7d21b20b063568fc888186b8cf0\" id=\"254cb7d21b20b063568fc888186b8cf0\"><br></p><p data-lake-id=\"dffe7ea233bd10cd4ac88529419f281c\" id=\"dffe7ea233bd10cd4ac88529419f281c\"><span data-lake-id=\"ue5e32ec0\" id=\"ue5e32ec0\">原因高阶组件就是高阶函数，而React的组件本身就是纯粹的函数，所以高阶函数对React来说易如反掌。相反Vue.js使用HTML模板创建视图组件，这时模板无法有效的编译，因此Vue不采用HOC来实现。</span></p><p data-lake-id=\"ed970033f0d1dc988e64177d87e4d290\" id=\"ed970033f0d1dc988e64177d87e4d290\"><strong><span data-lake-id=\"ub5f07714\" id=\"ub5f07714\">6）构建工具</span></strong></p><p data-lake-id=\"d920d1c6b2aa9cbb947327150927f68e\" id=\"d920d1c6b2aa9cbb947327150927f68e\"><span data-lake-id=\"u107618e2\" id=\"u107618e2\">两者都有自己的构建工具</span></p><ul list=\"uc3ef21ad\"><li fid=\"u1055e222\" data-lake-id=\"d7800a1bff8b110d132309f1bde46c26\" id=\"d7800a1bff8b110d132309f1bde46c26\"><span data-lake-id=\"u6dc0825b\" id=\"u6dc0825b\">React ==&gt; Create React APP</span></li><li fid=\"u1055e222\" data-lake-id=\"2350e4fd6deed46406e39a0c51b249ac\" id=\"2350e4fd6deed46406e39a0c51b249ac\"><span data-lake-id=\"u92fee0e4\" id=\"u92fee0e4\">Vue ==&gt; vue-cli</span></li></ul><p data-lake-id=\"a524c7e9eb9a0af27d187ecf3e7b8f27\" id=\"a524c7e9eb9a0af27d187ecf3e7b8f27\"><strong><span data-lake-id=\"u99fd4cd2\" id=\"u99fd4cd2\">7）跨平台</span></strong></p><ul list=\"u48417941\"><li fid=\"u5b732081\" data-lake-id=\"dc996670e8bde8f3f9767f20a94bf69f\" id=\"dc996670e8bde8f3f9767f20a94bf69f\"><span data-lake-id=\"u81c34277\" id=\"u81c34277\">React ==&gt; React Native</span></li><li fid=\"u5b732081\" data-lake-id=\"7031ab05312f687c5692ac6d6e72ba4d\" id=\"7031ab05312f687c5692ac6d6e72ba4d\"><span data-lake-id=\"u857fdfa9\" id=\"u857fdfa9\">Vue ==&gt; Weex</span></li></ul><h3 data-lake-id=\"11b4b685c7baca6d2e605082b5fbcda5\" id=\"11b4b685c7baca6d2e605082b5fbcda5\"><span data-lake-id=\"ud9f8825a\" id=\"ud9f8825a\">6. </span><span data-lake-id=\"uede54fef\" id=\"uede54fef\">可以使用TypeScript写React应用吗？怎么操作？</span></h3><p data-lake-id=\"ff833fc5a8b92a5f73b6fc5c353912ed\" id=\"ff833fc5a8b92a5f73b6fc5c353912ed\"><strong><span data-lake-id=\"u440d6e8e\" id=\"u440d6e8e\">（1）如果还未创建 Create React App 项目</span></strong></p><ul list=\"u85a62922\"><li fid=\"ucb613d1b\" data-lake-id=\"222a6ba49459b2e261c7a1e6ac5fa451\" id=\"222a6ba49459b2e261c7a1e6ac5fa451\"><span data-lake-id=\"u0bed8e66\" id=\"u0bed8e66\">直接创建一个具有 typescript 的 Create React App 项目：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%20npx%20create-react-app%20demo%20--typescript%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22RyVsK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"6531e3c84a48795cf3b56b3e760cdca5\" id=\"6531e3c84a48795cf3b56b3e760cdca5\"><strong><span data-lake-id=\"u19cecbb2\" id=\"u19cecbb2\">（2）如果已经创建了 Create React App 项目，需要将 typescript 引入到已有项目中</span></strong></p><ul list=\"u138189cd\"><li fid=\"u45c2f61b\" data-lake-id=\"a93e03635281da6548f6345f9137f450\" id=\"a93e03635281da6548f6345f9137f450\"><span data-lake-id=\"u9020ff2b\" id=\"u9020ff2b\" style=\"background-color: transparent\">通过命令将 typescript 引入项目：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22npm%20install%20--save%20typescript%20%40types%2Fnode%20%40types%2Freact%20%40types%2Freact-dom%20%40types%2Fjest%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22UWJUP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"ua58f1725\"><li fid=\"ub65b1659\" data-lake-id=\"43fcc2f84750ac96aaec9d7cfb7d7557\" id=\"43fcc2f84750ac96aaec9d7cfb7d7557\"><span data-lake-id=\"u69c4b723\" id=\"u69c4b723\">将项目中任何 后缀名为 ‘.js’ 的 JavaScript 文件重命名为 TypeScript 文件即后缀名为 ‘.tsx’（例如 src/index.js 重命名为 src/index.tsx ）</span></li></ul><h3 data-lake-id=\"9a759bdea612278e15dcb6eb6772aa63\" id=\"9a759bdea612278e15dcb6eb6772aa63\"><span data-lake-id=\"u984a62f4\" id=\"u984a62f4\">7. </span><span data-lake-id=\"ue66b65b0\" id=\"ue66b65b0\">React 设计思路，它的理念是什么？</span></h3><p data-lake-id=\"fb6476f4653a36cb3af6eeabff754ef0\" id=\"fb6476f4653a36cb3af6eeabff754ef0\"><strong><span data-lake-id=\"uafe5c015\" id=\"uafe5c015\">（1）编写简单直观的代码</span></strong></p><p data-lake-id=\"3f51783371f9b941e07b83ac5395d0b5\" id=\"3f51783371f9b941e07b83ac5395d0b5\"><span data-lake-id=\"u7026c6f7\" id=\"u7026c6f7\">React最大的价值不是高性能的虚拟DOM、封装的事件机制、服务器端渲染，而是声明式的直观的编码方式。react文档第一条就是声明式，React 使创建交互式 UI 变得轻而易举。为应用的每一个状态设计简洁的视图，当数据改变时 React 能有效地更新并正确地渲染组件。 以声明式编写 UI，可以让代码更加可靠，且方便调试。</span></p><p data-lake-id=\"80d0395db4cb83447df5fc36ed9d884a\" id=\"80d0395db4cb83447df5fc36ed9d884a\"><br></p><p data-lake-id=\"8f1a0e8034467697ccc97b5c6171bfe2\" id=\"8f1a0e8034467697ccc97b5c6171bfe2\"><strong><span data-lake-id=\"u85726c23\" id=\"u85726c23\">（2）简化可复用的组件</span></strong></p><p data-lake-id=\"8c800fd88294c4251326a7a4179cb748\" id=\"8c800fd88294c4251326a7a4179cb748\"><span data-lake-id=\"u0c13b53a\" id=\"u0c13b53a\">React框架里面使用了简化的组件模型，但更彻底地使用了组件化的概念。React将整个UI上的每一个功能模块定义成组件，然后将小的组件通过组合或者嵌套的方式构成更大的组件。React的组件具有如下的特性∶</span></p><ul list=\"u52857d5c\"><li fid=\"u0d98540e\" data-lake-id=\"db605f21da5649af273d12ef34f04924\" id=\"db605f21da5649af273d12ef34f04924\"><span data-lake-id=\"u4c559897\" id=\"u4c559897\">可组合：简单组件可以组合为复杂的组件</span></li><li fid=\"u0d98540e\" data-lake-id=\"03ff80177c9a0472ed1ad3dd017de484\" id=\"03ff80177c9a0472ed1ad3dd017de484\"><span data-lake-id=\"u02321056\" id=\"u02321056\">可重用：每个组件都是独立的，可以被多个组件使用 </span></li><li fid=\"u0d98540e\" data-lake-id=\"u6d55b86d\" id=\"u6d55b86d\"><span data-lake-id=\"u27461278\" id=\"u27461278\">可维护：和组件相关的逻辑和UI都封装在了组件的内部，方便维护</span></li></ul><ul list=\"u435e966b\"><li fid=\"ub0b52b17\" data-lake-id=\"60b0422e833580cc73979e0ea0f6a466\" id=\"60b0422e833580cc73979e0ea0f6a466\"><span data-lake-id=\"u0e7ae262\" id=\"u0e7ae262\">可测试：因为组件的独立性，测试组件就变得方便很多。</span></li></ul><p data-lake-id=\"92923db8979675b9df01c0ea01bced21\" id=\"92923db8979675b9df01c0ea01bced21\"><br></p><p data-lake-id=\"01bc7c39339c0ac6931edec0ffdf1409\" id=\"01bc7c39339c0ac6931edec0ffdf1409\"><strong><span data-lake-id=\"u12688d79\" id=\"u12688d79\">（3) Virtual DOM</span></strong></p><p data-lake-id=\"83e76fd504d31f457b29f432a3cc49a6\" id=\"83e76fd504d31f457b29f432a3cc49a6\"><span data-lake-id=\"u7085b7bd\" id=\"u7085b7bd\">真实页面对应一个 DOM 树。在传统页面的开发模式中，每次需要更新页面时，都要手动操作 DOM 来进行更新。 DOM 操作非常昂贵。在前端开发中，性能消耗最大的就是 DOM 操作，而且这部分代码会让整体项目的代码变得难 以维护。React 把真实 DOM 树转换成 JavaScript 对象树，也就是 Virtual DOM，每次数据更新后，重新计算 Virtual DOM，并和上一次生成的 Virtual DOM 做对比，对发生变化的部分做批量更新。React 也提供了直观的 shouldComponentUpdate 生命周期回调，来减少数据变化后不必要的 Virtual DOM 对比过程，以保证性能。</span></p><p data-lake-id=\"ec75379618acf78fc52101f5fcdde802\" id=\"ec75379618acf78fc52101f5fcdde802\"><br></p><p data-lake-id=\"658240f72ccd9c912c75b7800369f3c0\" id=\"658240f72ccd9c912c75b7800369f3c0\"><strong><span data-lake-id=\"u5fc761b2\" id=\"u5fc761b2\">（4）函数式编程</span></strong></p><p data-lake-id=\"418b587d1da791773042483cc427986f\" id=\"418b587d1da791773042483cc427986f\"><span data-lake-id=\"ud776b212\" id=\"ud776b212\">React 把过去不断重复构建 UI 的过程抽象成了组件，且在给定参数的情况下约定渲染对应的 UI 界面。React 能充分利用很多函数式方法去减少冗余代码。此外，由于它本身就是简单函数，所以易于测试。</span></p><p data-lake-id=\"b22ad0e781f72b825fe64d33751b07e6\" id=\"b22ad0e781f72b825fe64d33751b07e6\"><br></p><p data-lake-id=\"027d5759b05abf606041dba187a9d00a\" id=\"027d5759b05abf606041dba187a9d00a\"><strong><span data-lake-id=\"u9e9e4452\" id=\"u9e9e4452\">（5）一次学习，随处编写</span></strong></p><p data-lake-id=\"7a017364830c57358839d4a7472ebe2f\" id=\"7a017364830c57358839d4a7472ebe2f\"><span data-lake-id=\"u870159c1\" id=\"u870159c1\">无论现在正在使用什么技术栈，都可以随时引入 React来开发新特性，而不需要重写现有代码。</span></p><p data-lake-id=\"59bdd0ad7fdcea3bd463c3fd79b1b4ef\" id=\"59bdd0ad7fdcea3bd463c3fd79b1b4ef\"><span data-lake-id=\"u24aad17c\" id=\"u24aad17c\">React 还可以使用 Node 进行服务器渲染，或使用 React Native 开发原生移动应用。因为 React 组件可以映射为对应的原生控件。在输出的时候，是输出 Web DOM，还是 Android 控件，还是 iOS 控件，就由平台本身决定了。所以，react很方便和其他平台集成</span></p><h3 data-lake-id=\"16a4042ac80d32e3093b4b72491f9751\" id=\"16a4042ac80d32e3093b4b72491f9751\"><span data-lake-id=\"ufef0a085\" id=\"ufef0a085\">8. </span><span data-lake-id=\"u18c01cbd\" id=\"u18c01cbd\">React中props.children和React.Children的区别</span></h3><p data-lake-id=\"e32588f0dab5faa8c09d6ead1904e0a8\" id=\"e32588f0dab5faa8c09d6ead1904e0a8\"><span data-lake-id=\"ub00e8937\" id=\"ub00e8937\">在React中，当涉及组件嵌套，在父组件中使用</span><code data-lake-id=\"u6fa808d0\" id=\"u6fa808d0\"><span data-lake-id=\"uc90f935d\" id=\"uc90f935d\">props.children</span></code><span data-lake-id=\"u7aa81866\" id=\"u7aa81866\">把所有子组件显示出来。如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20ParentComponent(props)%7B%5Cn%5Ctreturn%20(%5Cn%5Ct%5Ct%3Cdiv%3E%5Cn%5Ct%5Ct%5Ct%7Bprops.children%7D%5Cn%5Ct%5Ct%3C%2Fdiv%3E%5Cn%5Ct)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ZZ9h1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"7979d9f83edac0000abed6c1b2355f93\" id=\"7979d9f83edac0000abed6c1b2355f93\"><span data-lake-id=\"u879bc6ed\" id=\"u879bc6ed\">如果想把父组件中的属性传给所有的子组件，需要使用</span><code data-lake-id=\"u1056acd8\" id=\"u1056acd8\"><span data-lake-id=\"ub86944f0\" id=\"ub86944f0\">React.Children</span></code><span data-lake-id=\"u3a7a6e7a\" id=\"u3a7a6e7a\">方法。</span></p><p data-lake-id=\"f136ee984325592c5e0d4f29909f40ac\" id=\"f136ee984325592c5e0d4f29909f40ac\"><br></p><p data-lake-id=\"0326d70e9ed22e1f19bf3073f6d542c6\" id=\"0326d70e9ed22e1f19bf3073f6d542c6\"><span data-lake-id=\"u88df07a7\" id=\"u88df07a7\">比如，把几个Radio组合起来，合成一个RadioGroup，这就要求所有的Radio具有同样的name属性值。可以这样：把Radio看做子组件，RadioGroup看做父组件，name的属性值在RadioGroup这个父组件中设置。</span></p><p data-lake-id=\"dee70b0ee4bc7bfc341b4db30a9963c2\" id=\"dee70b0ee4bc7bfc341b4db30a9963c2\"><br></p><p data-lake-id=\"2d08de40b558b82be21829060a9c0b16\" id=\"2d08de40b558b82be21829060a9c0b16\"><span data-lake-id=\"u0dcd1737\" id=\"u0dcd1737\">首先是子组件：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E5%AD%90%E7%BB%84%E4%BB%B6%5Cnfunction%20RadioOption(props)%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Clabel%3E%5Cn%20%20%20%20%20%20%3Cinput%20type%3D%5C%22radio%5C%22%20value%3D%7Bprops.value%7D%20name%3D%7Bprops.name%7D%20%2F%3E%5Cn%20%20%20%20%20%20%7Bprops.label%7D%5Cn%20%20%20%20%3C%2Flabel%3E%5Cn%20%20)%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wK9ue%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"e150373639fdc4be768b68c78c10f6b2\" id=\"e150373639fdc4be768b68c78c10f6b2\"><span data-lake-id=\"ucb52e185\" id=\"ucb52e185\">然后是父组件，不仅需要把它所有的子组件显示出来，还需要为每个子组件赋上name属性和值：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%E7%88%B6%E7%BB%84%E4%BB%B6%E7%94%A8%2Cprops%E6%98%AF%E6%8C%87%E7%88%B6%E7%BB%84%E4%BB%B6%E7%9A%84props%5Cnfunction%20renderChildren(props)%20%7B%5Cn%20%20%20%20%5Cn%20%20%2F%2F%E9%81%8D%E5%8E%86%E6%89%80%E6%9C%89%E5%AD%90%E7%BB%84%E4%BB%B6%5Cn%20%20return%20React.Children.map(props.children%2C%20child%20%3D%3E%20%7B%5Cn%20%20%20%20if%20(child.type%20%3D%3D%3D%20RadioOption)%5Cn%20%20%20%20%20%20return%20React.cloneElement(child%2C%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%E6%8A%8A%E7%88%B6%E7%BB%84%E4%BB%B6%E7%9A%84props.name%E8%B5%8B%E5%80%BC%E7%BB%99%E6%AF%8F%E4%B8%AA%E5%AD%90%E7%BB%84%E4%BB%B6%5Cn%20%20%20%20%20%20%20%20name%3A%20props.name%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20else%5Cn%20%20%20%20%20%20return%20child%5Cn%20%20%7D)%5Cn%7D%5Cn%2F%2F%E7%88%B6%E7%BB%84%E4%BB%B6%5Cnfunction%20RadioGroup(props)%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%7BrenderChildren(props)%7D%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%5Cn%7D%5Cnfunction%20App()%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3CRadioGroup%20name%3D%5C%22hello%5C%22%3E%5Cn%20%20%20%20%20%20%3CRadioOption%20label%3D%5C%22%E9%80%89%E9%A1%B9%E4%B8%80%5C%22%20value%3D%5C%221%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3CRadioOption%20label%3D%5C%22%E9%80%89%E9%A1%B9%E4%BA%8C%5C%22%20value%3D%5C%222%5C%22%20%2F%3E%5Cn%20%20%20%20%20%20%3CRadioOption%20label%3D%5C%22%E9%80%89%E9%A1%B9%E4%B8%89%5C%22%20value%3D%5C%223%5C%22%20%2F%3E%5Cn%20%20%20%20%3C%2FRadioGroup%3E%5Cn%20%20)%5Cn%7D%5Cnexport%20default%20App%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%229nQTP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"34c4ef2498b154d6e246af3d4e417561\" id=\"34c4ef2498b154d6e246af3d4e417561\"><span data-lake-id=\"ue6e81815\" id=\"ue6e81815\">以上，</span><code data-lake-id=\"u7711c2b5\" id=\"u7711c2b5\"><span data-lake-id=\"u812c4b25\" id=\"u812c4b25\">React.Children.map</span></code><span data-lake-id=\"u0b53f364\" id=\"u0b53f364\">让我们对父组件的所有子组件又更灵活的控制。</span></p><h3 data-lake-id=\"ae0662015d1b9cd34bd2ac47f6990ffd\" id=\"ae0662015d1b9cd34bd2ac47f6990ffd\"><span data-lake-id=\"u6d837283\" id=\"u6d837283\">9. R</span><span data-lake-id=\"ubfa51a4b\" id=\"ubfa51a4b\">eact的状态提升是什么？使用场景有哪些？</span></h3><p data-lake-id=\"49f3751139b4a76a34eabd4d855c2ee6\" id=\"49f3751139b4a76a34eabd4d855c2ee6\"><span data-lake-id=\"ud988666b\" id=\"ud988666b\" class=\"lake-fontsize-12\">React的状态提升就是用户对子组件操作，子组件不改变自己的状态，通过自己的props把这个操作改变的数据传递给父组件，改变父组件的状态，从而改变受父组件控制的所有子组件的状态，这也是React单项数据流的特性决定的。官方的原话是：共享 state(状态) 是通过将其移动到需要它的组件的最接近的共同祖先组件来实现的。 这被称为“状态提升(Lifting State Up)”。</span></p><p data-lake-id=\"0dce5aa6ec6bb2cb14d21544638c47a4\" id=\"0dce5aa6ec6bb2cb14d21544638c47a4\"><br></p><p data-lake-id=\"6ce2a831148eea5aec8b157082a263e1\" id=\"6ce2a831148eea5aec8b157082a263e1\"><span data-lake-id=\"uac182be9\" id=\"uac182be9\" class=\"lake-fontsize-12\">概括来说就是</span><strong><span data-lake-id=\"ufcaff1f1\" id=\"ufcaff1f1\" class=\"lake-fontsize-12\">将多个组件需要共享的状态提升到它们最近的父组件上</span></strong><span data-lake-id=\"ubeeb8db4\" id=\"ubeeb8db4\" class=\"lake-fontsize-12\">，</span><strong><span data-lake-id=\"u8a51009e\" id=\"u8a51009e\" class=\"lake-fontsize-12\">在父组件上改变这个状态然后通过props分发给子组件。</span></strong></p><p data-lake-id=\"4579c56b709e6a0c61b2f3301ba17c17\" id=\"4579c56b709e6a0c61b2f3301ba17c17\"><br></p><p data-lake-id=\"f33683585df16ca25e5abbffc7f3a1aa\" id=\"f33683585df16ca25e5abbffc7f3a1aa\"><span data-lake-id=\"u443a7601\" id=\"u443a7601\">一个简单的例子，父组件中有两个input子组件，如果想在第一个输入框输入数据，来改变第二个输入框的值，这就需要用到状态提升。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Father%20extends%20React.Component%20%7B%5Cn%20%20%20%20constructor(props)%20%7B%5Cn%20%20%20%20%20%20%20%20super(props)%5Cn%20%20%20%20%20%20%20%20this.state%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Value1%3A%20''%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Value2%3A%20''%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%5Cn%20%20%20%20value1Change(aa)%20%7B%5Cn%20%20%20%20%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Value1%3A%20aa%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20value2Change(bb)%20%7B%5Cn%20%20%20%20%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20Value2%3A%20bb%5Cn%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cdiv%20style%3D%7B%7B%20padding%3A%20%5C%22100px%5C%22%20%7D%7D%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CChild1%20value1%3D%7Bthis.state.Value1%7D%20onvalue1Change%3D%7Bthis.value1Change.bind(this)%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3Cbr%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3CChild2%20value2%3D%7Bthis.state.Value1%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%7D%5Cn%7D%5Cnclass%20Child1%20extends%20React.Component%20%7B%5Cn%20%20%20%20constructor(props)%20%7B%5Cn%20%20%20%20%20%20%20%20super(props)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20changeValue(e)%20%7B%5Cn%20%20%20%20%20%20%20%20this.props.onvalue1Change(e.target.value)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20value%3D%7Bthis.props.Value1%7D%20onChange%3D%7Bthis.changeValue.bind(this)%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%7D%5Cn%7D%5Cnclass%20Child2%20extends%20React.Component%20%7B%5Cn%20%20%20%20constructor(props)%20%7B%5Cn%20%20%20%20%20%20%20%20super(props)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%3Cinput%20value%3D%7Bthis.props.value2%7D%20%2F%3E%5Cn%20%20%20%20%20%20%20%20)%5Cn%20%20%20%20%7D%5Cn%7D%5Cn%20%5CnReactDOM.render(%5Cn%20%20%20%20%3CFather%20%2F%3E%2C%5Cn%20%20%20%20document.getElementById('root')%5Cn)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ZYAc6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"0e97bdc6767c3d92f182d3bb6537da4f\" id=\"0e97bdc6767c3d92f182d3bb6537da4f\"><span data-lake-id=\"u4d992281\" id=\"u4d992281\">10. React中constructor和getInitialState的区别?</span></h3><p data-lake-id=\"271aebac9d79837aa5520e9f817456ce\" id=\"271aebac9d79837aa5520e9f817456ce\"><span data-lake-id=\"ud70a23b6\" id=\"ud70a23b6\">两者都是用来初始化state的。前者是ES6中的语法，后者是ES5中的语法，新版本的React中已经废弃了该方法。</span></p><p data-lake-id=\"178d51041282a110745cfd03dbba6e06\" id=\"178d51041282a110745cfd03dbba6e06\"><br></p><p data-lake-id=\"3f61bf6a12b87ef06f920603b907e24e\" id=\"3f61bf6a12b87ef06f920603b907e24e\"><span data-lake-id=\"u60269558\" id=\"u60269558\">getInitialState是ES5中的方法，</span><span data-lake-id=\"u060745bb\" id=\"u060745bb\">如果使用createClass方法创建一个Component组件，可以自动调用它的getInitialState方法来获取初始化的State对象，</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20APP%20%3D%20React.creatClass%20(%7B%5Cn%20%20getInitialState()%20%7B%5Cn%20%20%20%20return%20%7B%20%5Cn%20%20%20%20%20%20%20%20userName%3A%20'hi'%2C%5Cn%20%20%20%20%20%20%20%20userId%3A%200%5Cn%20%20%20%20%20%7D%3B%5Cn%E3%80%80%7D%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22PDgzp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"8c576f6e554c188dc2159d0520998c44\" id=\"8c576f6e554c188dc2159d0520998c44\"><span data-lake-id=\"ufb7702a9\" id=\"ufb7702a9\">React在ES6的实现中去掉了getInitialState这个hook函数，规定state在constructor中实现，如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Class%20App%20extends%20React.Component%7B%5Cn%20%20%20%20constructor(props)%7B%5Cn%20%20%20%20%20%20super(props)%3B%5Cn%20%20%20%20%20%20this.state%3D%7B%7D%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%222sJhZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"d79eef13dcb90808d4ed512fe273e46f\" id=\"d79eef13dcb90808d4ed512fe273e46f\"><span data-lake-id=\"uce8c8bf9\" id=\"uce8c8bf9\">11. </span><span data-lake-id=\"ud92b8321\" id=\"ud92b8321\">React的严格模式如何使用，有什么用处？</span></h3><p data-lake-id=\"e99a34e54615747b3137bb073e80c9ad\" id=\"e99a34e54615747b3137bb073e80c9ad\"><code data-lake-id=\"u27000ee9\" id=\"u27000ee9\"><span data-lake-id=\"uad765f71\" id=\"uad765f71\">StrictMode</span></code><span data-lake-id=\"ucf45e6f3\" id=\"ucf45e6f3\"> 是一个用来突出显示应用程序中潜在问题的工具。与 </span><code data-lake-id=\"ub803cc98\" id=\"ub803cc98\"><span data-lake-id=\"u620fddd2\" id=\"u620fddd2\">Fragment</span></code><span data-lake-id=\"u7ac99b82\" id=\"u7ac99b82\"> 一样，</span><code data-lake-id=\"u0ff61223\" id=\"u0ff61223\"><span data-lake-id=\"ufea58bf9\" id=\"ufea58bf9\">StrictMode</span></code><span data-lake-id=\"u6d9c1fdf\" id=\"u6d9c1fdf\"> 不会渲染任何可见的 UI。它为其后代元素触发额外的检查和警告。</span></p><p data-lake-id=\"f8f6a3f1ee45697f331742df70ceab53\" id=\"f8f6a3f1ee45697f331742df70ceab53\"><span data-lake-id=\"u275abb79\" id=\"u275abb79\">可以为应用程序的任何部分启用严格模式。例如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20React%20from%20'react'%3B%5Cnfunction%20ExampleApplication()%20%7B%5Cn%20%20return%20(%5Cn%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%3CHeader%20%2F%3E%5Cn%20%20%20%20%20%20%3CReact.StrictMode%3E%20%20%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%20%20%3Cdiv%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3CComponentOne%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%20%20%3CComponentTwo%20%2F%3E%5Cn%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20%20%20%20%20%3C%2FReact.StrictMode%3E%20%20%20%20%20%20%5Cn%20%20%20%20%20%20%3CFooter%20%2F%3E%5Cn%20%20%20%20%3C%2Fdiv%3E%5Cn%20%20)%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vlCTM%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"473c5ed4beb7d1a04f9bd56e719eea3c\" id=\"473c5ed4beb7d1a04f9bd56e719eea3c\"><span data-lake-id=\"u6464d2d6\" id=\"u6464d2d6\">在上述的示例中，</span><em><span data-lake-id=\"uf10c63c5\" id=\"uf10c63c5\">不</span></em><span data-lake-id=\"ud4a615d3\" id=\"ud4a615d3\">会对 </span><code data-lake-id=\"u430ebf7f\" id=\"u430ebf7f\"><span data-lake-id=\"u4928ea77\" id=\"u4928ea77\">Header</span></code><span data-lake-id=\"ufba3e885\" id=\"ufba3e885\"> 和 </span><code data-lake-id=\"ua0553f82\" id=\"ua0553f82\"><span data-lake-id=\"u5c508385\" id=\"u5c508385\">Footer</span></code><span data-lake-id=\"uccc27f84\" id=\"uccc27f84\"> 组件运行严格模式检查。但是，</span><code data-lake-id=\"u049c8ac8\" id=\"u049c8ac8\"><span data-lake-id=\"ue91e78e8\" id=\"ue91e78e8\">ComponentOne</span></code><span data-lake-id=\"u632601f9\" id=\"u632601f9\"> 和 </span><code data-lake-id=\"u52bb7161\" id=\"u52bb7161\"><span data-lake-id=\"u3ad53f35\" id=\"u3ad53f35\">ComponentTwo</span></code><span data-lake-id=\"u980ae967\" id=\"u980ae967\"> 以及它们的所有后代元素都将进行检查。</span></p><p data-lake-id=\"2e37cf0bfa86ab809aabe77056bfd706\" id=\"2e37cf0bfa86ab809aabe77056bfd706\"><br></p><p data-lake-id=\"d112cd54ac276380080f29422a02553d\" id=\"d112cd54ac276380080f29422a02553d\"><code data-lake-id=\"uad7fdba7\" id=\"uad7fdba7\"><span data-lake-id=\"u083ae895\" id=\"u083ae895\">StrictMode</span></code><span data-lake-id=\"ua2920f7b\" id=\"ua2920f7b\"> 目前有助于：</span></p><ul list=\"u511ce8a9\"><li fid=\"ufb9c0a1f\" data-lake-id=\"f2f8fac8a81b534c28fbbffecb15c4f3\" id=\"f2f8fac8a81b534c28fbbffecb15c4f3\"><span data-lake-id=\"ud55e52bc\" id=\"ud55e52bc\">识别不安全的生命周期</span></li><li fid=\"ufb9c0a1f\" data-lake-id=\"d82fd956d34a5090fe6a23aa80ae369d\" id=\"d82fd956d34a5090fe6a23aa80ae369d\"><span data-lake-id=\"u44de13a6\" id=\"u44de13a6\">关于使用过时字符串 ref API 的警告</span></li><li fid=\"ufb9c0a1f\" data-lake-id=\"f159d4856db1f5c351f757abe008a6a7\" id=\"f159d4856db1f5c351f757abe008a6a7\"><span data-lake-id=\"u4250baed\" id=\"u4250baed\">关于使用废弃的 findDOMNode 方法的警告</span></li><li fid=\"ufb9c0a1f\" data-lake-id=\"d5841311964230a9cf5cffaee4d9fdb8\" id=\"d5841311964230a9cf5cffaee4d9fdb8\"><span data-lake-id=\"u7a15a837\" id=\"u7a15a837\">检测意外的副作用</span></li><li fid=\"ufb9c0a1f\" data-lake-id=\"0df1140d76b92ecf6d4831401f61bce8\" id=\"0df1140d76b92ecf6d4831401f61bce8\"><span data-lake-id=\"u8e19455b\" id=\"u8e19455b\">检测过时的 context API</span></li></ul><h3 data-lake-id=\"31d27f06c1cf472809817ccbb148cf84\" id=\"31d27f06c1cf472809817ccbb148cf84\"><span data-lake-id=\"ua9bc1184\" id=\"ua9bc1184\">12. </span><span data-lake-id=\"u0f4ebbc9\" id=\"u0f4ebbc9\">在React中遍历的方法有哪些？</span></h3><p data-lake-id=\"6b9d5312f9c442c7e3b2cd2700969f46\" id=\"6b9d5312f9c442c7e3b2cd2700969f46\"><strong><span data-lake-id=\"u392d2807\" id=\"u392d2807\">（1）遍历数组：map &amp;&amp; forEach</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22import%20React%20from%20'react'%3B%5Cn%5Cnclass%20App%20extends%20React.Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20let%20arr%20%3D%20%5B'a'%2C%20'b'%2C%20'c'%2C%20'd'%5D%3B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cul%3E%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20arr.map((item%2C%20index)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%3Cli%20key%3D%7Bindex%7D%3E%7Bitem%7D%3C%2Fli%3E%5Cn%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%3C%2Ful%3E%5Cn%20%20%20%20)%5Cn%20%20%7D%5Cn%7D%5Cn%5Cnclass%20App%20extends%20React.Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20let%20arr%20%3D%20%5B'a'%2C%20'b'%2C%20'c'%2C%20'd'%5D%3B%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cul%3E%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20arr.forEach((item%2C%20index)%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%3Cli%20key%3D%7Bindex%7D%3E%7Bitem%7D%3C%2Fli%3E%5Cn%20%20%20%20%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%3C%2Ful%3E%5Cn%20%20%20%20)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dDUdT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f8c12f3d76a53e4f6b517020d8e2e541\" id=\"f8c12f3d76a53e4f6b517020d8e2e541\"><strong><span data-lake-id=\"udf04b77c\" id=\"udf04b77c\">（2）遍历对象：map &amp;&amp; for in</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20App%20extends%20React.Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20let%20obj%20%3D%20%7B%5Cn%20%20%20%20%20%20a%3A%201%2C%5Cn%20%20%20%20%20%20b%3A%202%2C%5Cn%20%20%20%20%20%20c%3A%203%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cul%3E%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20let%20domArr%20%3D%20%5B%5D%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20for(const%20key%20in%20obj)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20if(obj.hasOwnProperty(key))%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20const%20value%20%3D%20obj%5Bkey%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20domArr.push(%3Cli%20key%3D%7Bkey%7D%3E%7Bvalue%7D%3C%2Fli%3E)%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20domArr%3B%5Cn%20%20%20%20%20%20%20%20%20%20%7D)()%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%3C%2Ful%3E%5Cn%20%20%20%20)%5Cn%20%20%7D%5Cn%7D%5Cn%5Cn%2F%2F%20Object.entries()%20%E6%8A%8A%E5%AF%B9%E8%B1%A1%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B0%E7%BB%84%5Cnclass%20App%20extends%20React.Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20let%20obj%20%3D%20%7B%5Cn%20%20%20%20%20%20a%3A%201%2C%5Cn%20%20%20%20%20%20b%3A%202%2C%5Cn%20%20%20%20%20%20c%3A%203%5Cn%20%20%20%20%7D%5Cn%20%20%20%20return%20(%5Cn%20%20%20%20%20%20%3Cul%3E%5Cn%20%20%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20Object.entries(obj).map((%5Bkey%2C%20value%5D%2C%20index)%20%3D%3E%20%7B%20%20%20%2F%2F%20item%E6%98%AF%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%EF%BC%8C%E6%8A%8Aitem%E8%A7%A3%E6%9E%84%EF%BC%8C%E5%86%99%E6%B3%95%E6%98%AF%5Bkey%2C%20value%5D%5Cn%20%20%20%20%20%20%20%20%20%20%20%20return%20%3Cli%20key%3D%7Bkey%7D%3E%7Bvalue%7D%3C%2Fli%3E%5Cn%20%20%20%20%20%20%20%20%20%20%7D)%20%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20%3C%2Ful%3E%5Cn%20%20%20%20)%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22b9fmO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"c112e6e7b7ec7b75459d61803e3b9119\" id=\"c112e6e7b7ec7b75459d61803e3b9119\"><span data-lake-id=\"ud69b65f1\" id=\"ud69b65f1\">13. </span><span data-lake-id=\"u320a1974\" id=\"u320a1974\">在React中页面重新加载时怎样保留数据？</span></h3><p data-lake-id=\"be3451b296823f7605a4797fc749a33e\" id=\"be3451b296823f7605a4797fc749a33e\"><span data-lake-id=\"ucbd2dfdc\" id=\"ucbd2dfdc\">这个问题就设计到了</span><strong><span data-lake-id=\"u833371b7\" id=\"u833371b7\">数据持久化，</span></strong><span data-lake-id=\"uc5984a2e\" id=\"uc5984a2e\">主要的实现方式有以下几种：</span></p><ul list=\"u45c23adc\"><li fid=\"ua4390591\" data-lake-id=\"638d7d1917493cc1a6e390cd22bf6cb7\" id=\"638d7d1917493cc1a6e390cd22bf6cb7\"><strong><span data-lake-id=\"u1d92b09e\" id=\"u1d92b09e\">Redux：</span></strong><span data-lake-id=\"u58c97b8d\" id=\"u58c97b8d\">将页面的数据存储在redux中，在重新加载页面时，获取Redux中的数据；</span></li><li fid=\"ua4390591\" data-lake-id=\"b384c56ade46e521b91ebb164dd0f0b8\" id=\"b384c56ade46e521b91ebb164dd0f0b8\"><strong><span data-lake-id=\"u2fca8732\" id=\"u2fca8732\">data.js：</span></strong><span data-lake-id=\"u457a1ee8\" id=\"u457a1ee8\">使用webpack构建的项目，可以建一个文件，data.js，将数据保存data.js中，跳转页面后获取；</span></li><li fid=\"ua4390591\" data-lake-id=\"d2ccd683ec61cf7b6d0bc81cea7980ce\" id=\"d2ccd683ec61cf7b6d0bc81cea7980ce\"><strong><span data-lake-id=\"u03655fe0\" id=\"u03655fe0\">sessionStorge：</span></strong><span data-lake-id=\"uf51c9512\" id=\"uf51c9512\">在进入选择地址页面之前，componentWillUnMount的时候，将数据存储到sessionStorage中，每次进入页面判断sessionStorage中有没有存储的那个值，有，则读取渲染数据；没有，则说明数据是初始化的状态。返回或进入除了选择地址以外的页面，清掉存储的sessionStorage，保证下次进入是初始化的数据</span></li><li fid=\"ua4390591\" data-lake-id=\"66dc91a5e22bd5736045f5218c5466c8\" id=\"66dc91a5e22bd5736045f5218c5466c8\"><strong><span data-lake-id=\"u1a394a4e\" id=\"u1a394a4e\">history API：</span></strong><span data-lake-id=\"u85d99a95\" id=\"u85d99a95\">History API 的 </span><code data-lake-id=\"u9e60a0a3\" id=\"u9e60a0a3\"><span data-lake-id=\"u323ae169\" id=\"u323ae169\">pushState</span></code><span data-lake-id=\"u61dc9021\" id=\"u61dc9021\"> 函数可以给历史记录关联一个任意的可序列化 </span><code data-lake-id=\"u9f9eddf8\" id=\"u9f9eddf8\"><span data-lake-id=\"u92656bf8\" id=\"u92656bf8\">state</span></code><span data-lake-id=\"u4da8de7f\" id=\"u4da8de7f\">，所以可以在路由 </span><code data-lake-id=\"ud48759a6\" id=\"ud48759a6\"><span data-lake-id=\"u32a470eb\" id=\"u32a470eb\">push</span></code><span data-lake-id=\"u1a66ea49\" id=\"u1a66ea49\"> 的时候将当前页面的一些信息存到 </span><code data-lake-id=\"ube5977a5\" id=\"ube5977a5\"><span data-lake-id=\"u78af3ee5\" id=\"u78af3ee5\">state</span></code><span data-lake-id=\"uc13dbcf2\" id=\"uc13dbcf2\"> 中，下次返回到这个页面的时候就能从 </span><code data-lake-id=\"u0192d3c4\" id=\"u0192d3c4\"><span data-lake-id=\"u9d67f37b\" id=\"u9d67f37b\">state</span></code><span data-lake-id=\"u29f3c080\" id=\"u29f3c080\"> 里面取出离开前的数据重新渲染。react-router 直接可以支持。这个方法适合一些需要临时存储的场景。</span></li></ul><h3 data-lake-id=\"5146a1e8898b25104921637abc3676e3\" id=\"5146a1e8898b25104921637abc3676e3\"><span data-lake-id=\"u03ce28c5\" id=\"u03ce28c5\">14. </span><span data-lake-id=\"u0de48a06\" id=\"u0de48a06\">同时引用这三个库react.js、react-dom.js和babel.js它们都有什么作用？</span></h3><ul list=\"u93dec6c1\"><li fid=\"u57801aa4\" data-lake-id=\"d8ba149d1b51be47c28fa00bd75016ed\" id=\"d8ba149d1b51be47c28fa00bd75016ed\"><span data-lake-id=\"u50e4e481\" id=\"u50e4e481\">react：包含react所必须的核心代码</span></li><li fid=\"u57801aa4\" data-lake-id=\"8ca4af1d1bc3e31563349eb702485ae7\" id=\"8ca4af1d1bc3e31563349eb702485ae7\"><span data-lake-id=\"udc9cdfae\" id=\"udc9cdfae\">react-dom：react渲染在不同平台所需要的核心代码</span></li><li fid=\"u57801aa4\" data-lake-id=\"548c5986fd0ac85d743d08e5772bb926\" id=\"548c5986fd0ac85d743d08e5772bb926\"><span data-lake-id=\"u7afffde2\" id=\"u7afffde2\">babel：将jsx转换成React代码的工具 </span></li></ul><h3 data-lake-id=\"2c44094ce572f40a204fcc89bc908ad3\" id=\"2c44094ce572f40a204fcc89bc908ad3\"><span data-lake-id=\"u02d11f69\" id=\"u02d11f69\">15. </span><span data-lake-id=\"ue3b24e3d\" id=\"ue3b24e3d\">React必须使用JSX吗？</span></h3><p data-lake-id=\"ca824187a7d176579bef27bad185efb1\" id=\"ca824187a7d176579bef27bad185efb1\"><span data-lake-id=\"uc9a29ea0\" id=\"uc9a29ea0\">React 并不强制要求使用 JSX。当不想在构建环境中配置有关 JSX 编译时，不在 React 中使用 JSX 会更加方便。</span></p><p data-lake-id=\"8c5574a8edd0e4a3560ec4ca0be0d8d0\" id=\"8c5574a8edd0e4a3560ec4ca0be0d8d0\"><br></p><p data-lake-id=\"fd4caa4f114b5571efaa91c7c80e16a9\" id=\"fd4caa4f114b5571efaa91c7c80e16a9\"><span data-lake-id=\"u10465cec\" id=\"u10465cec\">每个 JSX 元素只是调用 </span><code data-lake-id=\"u302356d2\" id=\"u302356d2\"><span data-lake-id=\"u82210422\" id=\"u82210422\">React.createElement(component, props, ...children)</span></code><span data-lake-id=\"u2880921d\" id=\"u2880921d\"> 的语法糖。因此，使用 JSX 可以完成的任何事情都可以通过纯 JavaScript 完成。</span></p><p data-lake-id=\"46957a37158e0e4ff1ba460cd414c559\" id=\"46957a37158e0e4ff1ba460cd414c559\"><br></p><p data-lake-id=\"141770865c210d130329873658bfa484\" id=\"141770865c210d130329873658bfa484\"><span data-lake-id=\"u791eca96\" id=\"u791eca96\">例如，用 JSX 编写的代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Hello%20extends%20React.Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20%3Cdiv%3EHello%20%7Bthis.props.toWhat%7D%3C%2Fdiv%3E%3B%5Cn%20%20%7D%5Cn%7D%5CnReactDOM.render(%5Cn%20%20%3CHello%20toWhat%3D%5C%22World%5C%22%20%2F%3E%2C%5Cn%20%20document.getElementById('root')%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Rb71Q%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"75a5e654a50d60af410302b6fe85980f\" id=\"75a5e654a50d60af410302b6fe85980f\"><span data-lake-id=\"ud83ce147\" id=\"ud83ce147\">可以编写为不使用 JSX 的代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Hello%20extends%20React.Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20React.createElement('div'%2C%20null%2C%20%60Hello%20%24%7Bthis.props.toWhat%7D%60)%3B%5Cn%20%20%7D%5Cn%7D%5CnReactDOM.render(%5Cn%20%20React.createElement(Hello%2C%20%7BtoWhat%3A%20'World'%7D%2C%20null)%2C%5Cn%20%20document.getElementById('root')%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wUNUF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"fa1f5133209a0b4f1602958dd08235b4\" id=\"fa1f5133209a0b4f1602958dd08235b4\"><span data-lake-id=\"u052f34d1\" id=\"u052f34d1\">16. </span><span data-lake-id=\"u86b088e5\" id=\"u86b088e5\">为什么使用jsx的组件中没有看到使用react却需要引入react？</span></h3><p data-lake-id=\"fb0d2f1170d329a13dbc2302f84d7320\" id=\"fb0d2f1170d329a13dbc2302f84d7320\" style=\"text-align: left\"><span data-lake-id=\"uf3dda0b1\" id=\"uf3dda0b1\">本质上来说JSX是</span><code data-lake-id=\"ue60c9ed4\" id=\"ue60c9ed4\"><span data-lake-id=\"uda83f58a\" id=\"uda83f58a\">React.createElement(component, props, ...children)</span></code><span data-lake-id=\"u06c0fc10\" id=\"u06c0fc10\">方法的语法糖。</span><span data-lake-id=\"ud0bce9ea\" id=\"ud0bce9ea\">在React 17之前，</span><span data-lake-id=\"u06769aa9\" id=\"u06769aa9\">如果使用了JSX，其实就是在使用React，</span><span data-lake-id=\"ue7057583\" id=\"ue7057583\" class=\"lake-fontsize-12\"> </span><code data-lake-id=\"u2cd73cae\" id=\"u2cd73cae\"><span data-lake-id=\"u7097fa83\" id=\"u7097fa83\">babel</span></code><span data-lake-id=\"u7e34fd14\" id=\"u7e34fd14\" class=\"lake-fontsize-12\"> 会把组件转换为 </span><code data-lake-id=\"u19053fb1\" id=\"u19053fb1\"><span data-lake-id=\"uf74b6343\" id=\"uf74b6343\">CreateElement</span></code><span data-lake-id=\"ua027beda\" id=\"ua027beda\" class=\"lake-fontsize-12\"> 形式。在React 17之后，就</span><span data-lake-id=\"ub3684e8c\" id=\"ub3684e8c\" class=\"lake-fontsize-12\">不再需要引入，因为 </span><code data-lake-id=\"uab8f61a6\" id=\"uab8f61a6\"><span data-lake-id=\"u40df5223\" id=\"u40df5223\">babel</span></code><span data-lake-id=\"u0476734a\" id=\"u0476734a\" class=\"lake-fontsize-12\"> 已经可以帮我们自动引入react。</span></p><h3 data-lake-id=\"70efdb5a7ca231ff13c1d717b3b1a67b\" id=\"70efdb5a7ca231ff13c1d717b3b1a67b\"><span data-lake-id=\"u5b89c952\" id=\"u5b89c952\">17. </span><span data-lake-id=\"u4b43fb75\" id=\"u4b43fb75\">在React中怎么使用async/await？</span></h3><p data-lake-id=\"6bbb00c158b90855cb5c72e901c1f41d\" id=\"6bbb00c158b90855cb5c72e901c1f41d\"><span data-lake-id=\"u2e374695\" id=\"u2e374695\">async/await是ES7标准中的新特性。</span><span data-lake-id=\"u7ed6fbba\" id=\"u7ed6fbba\">如果是使用React官方的脚手架创建的项目，就可以直接使用。如果是</span><span data-lake-id=\"u2a39a493\" id=\"u2a39a493\" class=\"lake-fontsize-12\">在自己搭建的webpack配置的项目中使用，可能会遇到 </span><strong><span data-lake-id=\"uf77d3d76\" id=\"uf77d3d76\">regeneratorRuntime is not defined</span></strong><span data-lake-id=\"ua97b6c36\" id=\"ua97b6c36\" class=\"lake-fontsize-12\"> 的异常错误。那么我们就需要引入babel，并在babel中配置使用</span><span data-lake-id=\"u755bb673\" id=\"u755bb673\">async/await。</span><span data-lake-id=\"u29d43eb2\" id=\"u29d43eb2\" class=\"lake-fontsize-12\">可以利用babel的 transform-async-to-module-method 插件来转换其成为浏览器支持的语法，虽然没有性能的提升，但对于代码编写体验要更好。</span></p><h3 data-lake-id=\"32c4f53d5fc7010ef5744dc4134d7bc0\" id=\"32c4f53d5fc7010ef5744dc4134d7bc0\"><span data-lake-id=\"u458fc5ba\" id=\"u458fc5ba\">18. </span><span data-lake-id=\"u45da6689\" id=\"u45da6689\">React.Children</span><span data-lake-id=\"u1e94f5f1\" id=\"u1e94f5f1\">.map和js的map有什么区别？</span></h3><p data-lake-id=\"68c9dfa8eeb7a839af82d56f307b0338\" id=\"68c9dfa8eeb7a839af82d56f307b0338\"><span data-lake-id=\"u22716253\" id=\"u22716253\">JavaScript中的map不会对为null或者undefined的数据进行处理，而</span><span data-lake-id=\"u9eb81218\" id=\"u9eb81218\">React.Children</span><span data-lake-id=\"uec158bef\" id=\"uec158bef\">.map中的map可以处理React.Children为null或者undefined的情况。</span></p><h3 data-lake-id=\"faf3dc28c124f125fa75e4b4d9eb549b\" id=\"faf3dc28c124f125fa75e4b4d9eb549b\"><span data-lake-id=\"ua7eb1ece\" id=\"ua7eb1ece\">19. 对React SSR的理解</span></h3><p data-lake-id=\"e280677e111a342eaf08996711fe0960\" id=\"e280677e111a342eaf08996711fe0960\"><span data-lake-id=\"u105e8c64\" id=\"u105e8c64\">服务端渲染是数据与模版组成的html，即 HTML = 数据 ＋ 模版。将组件或页面通过服务器生成html字符串，再发送到浏览器，最后将静态标记&quot;混合&quot;为客户端上完全交互的应用程序。页面没使用服务渲染，当请求页面时，返回的body里为空，之后执行js将html结构注入到body里，结合css显示出来;</span></p><p data-lake-id=\"f3f8bb8cfcb986f53262f653e4b5cb24\" id=\"f3f8bb8cfcb986f53262f653e4b5cb24\"><br></p><p data-lake-id=\"58441c8283bae2efc05ada8908381a6c\" id=\"58441c8283bae2efc05ada8908381a6c\"><strong><span data-lake-id=\"ue880232c\" id=\"ue880232c\">SSR的优势：</span></strong></p><ul list=\"uc6f23537\"><li fid=\"uad806917\" data-lake-id=\"bd2f077c16e5f326e08ba09eb47a492b\" id=\"bd2f077c16e5f326e08ba09eb47a492b\"><span data-lake-id=\"u808acc56\" id=\"u808acc56\">对SEO友好</span></li><li fid=\"uad806917\" data-lake-id=\"c507bb86a3b99693762db01943ce6a2a\" id=\"c507bb86a3b99693762db01943ce6a2a\"><span data-lake-id=\"u41bbf107\" id=\"u41bbf107\">所有的模版、图片等资源都存在服务器端 </span></li><li fid=\"uad806917\" data-lake-id=\"85c409c713a70b7d3118e5a34dd259ab\" id=\"85c409c713a70b7d3118e5a34dd259ab\"><span data-lake-id=\"u5790a0e5\" id=\"u5790a0e5\">一个html返回所有数据 </span></li><li fid=\"uad806917\" data-lake-id=\"e8c077f0e4b565fec4e5962059d09a8f\" id=\"e8c077f0e4b565fec4e5962059d09a8f\"><span data-lake-id=\"u07ca21ca\" id=\"u07ca21ca\">减少HTTP请求</span></li><li fid=\"uad806917\" data-lake-id=\"98b829265320f2bbffa53be77153a52c\" id=\"98b829265320f2bbffa53be77153a52c\"><span data-lake-id=\"u692d624d\" id=\"u692d624d\">响应快、用户体验好、首屏渲染快 </span></li></ul><p data-lake-id=\"d8f445746f37a4a2c0608424ff5ed5b8\" id=\"d8f445746f37a4a2c0608424ff5ed5b8\"><br></p><p data-lake-id=\"25f6c2db7b19cac665aebd3b595e3694\" id=\"25f6c2db7b19cac665aebd3b595e3694\"><strong><span data-lake-id=\"u54df16a3\" id=\"u54df16a3\">1）更利于SEO</span></strong></p><p data-lake-id=\"0ae142a7251436feccd41bb814fbe44e\" id=\"0ae142a7251436feccd41bb814fbe44e\"><span data-lake-id=\"ua672149d\" id=\"ua672149d\">不同爬虫工作原理类似，只会爬取源码，不会执行网站的任何脚本使用了React或者其它MVVM框架之后，页面大多数DOM元素都是在客户端根据js动态生成，可供爬虫抓取分析的内容大大减少。另外，浏览器爬虫不会等待我们的数据完成之后再去抓取页面数据。服务端渲染返回给客户端的是已经获取了异步数据并执行JavaScript脚本的最终HTML，网络爬中就可以抓取到完整页面的信息。</span></p><p data-lake-id=\"808852996000815bcecc65ec1323655c\" id=\"808852996000815bcecc65ec1323655c\"><strong><span data-lake-id=\"u2d066361\" id=\"u2d066361\">2）更利于首屏渲染</span></strong></p><p data-lake-id=\"16031e1f7017d4c68ad00805a23598b2\" id=\"16031e1f7017d4c68ad00805a23598b2\"><span data-lake-id=\"u2cfa7d6a\" id=\"u2cfa7d6a\">首屏的渲染是node发送过来的html字符串，并不依赖于js文件了，这就会使用户更快的看到页面的内容。尤其是针对大型单页应用，打包后文件体积比较大，普通客户端渲染加载所有所需文件时间较长，首页就会有一个很长的白屏等待时间。</span></p><p data-lake-id=\"6b3e1030e6fa2637a9cc9f00b0c1635e\" id=\"6b3e1030e6fa2637a9cc9f00b0c1635e\"><br></p><p data-lake-id=\"f2419a4a11e6730fa9ba5964ac3c55ec\" id=\"f2419a4a11e6730fa9ba5964ac3c55ec\"><strong><span data-lake-id=\"u65aeb68d\" id=\"u65aeb68d\">SSR的局限：</span></strong></p><p data-lake-id=\"a87ee06d2d7b10843cf1b4a23773984c\" id=\"a87ee06d2d7b10843cf1b4a23773984c\"><strong><span data-lake-id=\"uc2d9a37f\" id=\"uc2d9a37f\">1）服务端压力较大</span></strong></p><p data-lake-id=\"f46d8ab625ea76a1b05a0d084abed228\" id=\"f46d8ab625ea76a1b05a0d084abed228\"><span data-lake-id=\"uf43f524f\" id=\"uf43f524f\">本来是通过客户端完成渲染，现在统一到服务端node服务去做。尤其是高并发访问的情况，会大量占用服务端CPU资源;</span></p><p data-lake-id=\"ca9d92696ea29c0804cf3af8eb55f681\" id=\"ca9d92696ea29c0804cf3af8eb55f681\"><strong><span data-lake-id=\"ua2c7275d\" id=\"ua2c7275d\">2）开发条件受限</span></strong></p><p data-lake-id=\"13ac393d6a73478f03929602313609f6\" id=\"13ac393d6a73478f03929602313609f6\"><span data-lake-id=\"u6ac1f8bd\" id=\"u6ac1f8bd\">在服务端渲染中，只会执行到componentDidMount之前的生命周期钩子，因此项目引用的第三方的库也不可用其它生命周期钩子，这对引用库的选择产生了很大的限制; </span></p><p data-lake-id=\"256be38d77186b7820e3704d807985b1\" id=\"256be38d77186b7820e3704d807985b1\"><strong><span data-lake-id=\"u3e530a3f\" id=\"u3e530a3f\">3）学习成本相对较高</span></strong></p><p data-lake-id=\"a6f2d33ee9d109e3b43e2489c925d156\" id=\"a6f2d33ee9d109e3b43e2489c925d156\"><span data-lake-id=\"u764ce329\" id=\"u764ce329\">除了对webpack、MVVM框架要熟悉，还需要掌握node、 Koa2等相关技术。相对于客户端渲染，项目构建、部署过程更加复杂。</span></p><p data-lake-id=\"243563bdb4fbb0b23dc947e0e9390503\" id=\"243563bdb4fbb0b23dc947e0e9390503\"><br></p><p data-lake-id=\"b4e53b173043897701ff0790f4aabb2c\" id=\"b4e53b173043897701ff0790f4aabb2c\"><strong><span data-lake-id=\"uf42159c5\" id=\"uf42159c5\">时间耗时比较：</span></strong></p><p data-lake-id=\"48c9d4dde8583bbf0959007d591400a7\" id=\"48c9d4dde8583bbf0959007d591400a7\"><strong><span data-lake-id=\"u233f1020\" id=\"u233f1020\">1）数据请求</span></strong></p><p data-lake-id=\"4afb317b138d7ea084899c962066bbd1\" id=\"4afb317b138d7ea084899c962066bbd1\"><span data-lake-id=\"u6ca63372\" id=\"u6ca63372\">由服务端请求首屏数据，而不是客户端请求首屏数据，这是&quot;快&quot;的一个主要原因。服务端在内网进行请求，数据响应速度快。客户端在不同网络环境进行数据请求，且外网http请求开销大，导致时间差 </span></p><ul list=\"ue4a104ae\"><li fid=\"u4f043387\" data-lake-id=\"e5c60f74ac5cdfb2d3d74a75a824c424\" id=\"e5c60f74ac5cdfb2d3d74a75a824c424\"><span data-lake-id=\"udcba5ada\" id=\"udcba5ada\">客户端数据请求</span></li></ul><p data-lake-id=\"6a6dbb4e8a6b697a1dfdff2bf4cc552e\" id=\"6a6dbb4e8a6b697a1dfdff2bf4cc552e\"><br></p><p data-lake-id=\"99846ea591c8bf7df8649701aa526e3b\" id=\"99846ea591c8bf7df8649701aa526e3b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1612599697115-b749fd70-9747-4f83-a836-72f46f5e91de.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1179%2C%22height%22%3A874%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%2251612599334_.pic.jpg%22%2C%22size%22%3A67048%2C%22originWidth%22%3A1179%2C%22originHeight%22%3A874%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%221.%E8%AF%B7%E6%B1%82%E4%B8%80%E4%B8%AAURL%202.%E8%BF%94%E5%9B%9E%E7%A9%BA%E7%9A%84%E9%A6%96%E5%B1%8Fhtml%203.%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%204.%E8%8E%B7%E5%8F%96%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%205.%E8%BF%94%E5%9B%9E%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%206.%E8%BF%94%E5%9B%9E%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%20%E5%90%8E%E7%AB%AF%20node%20%E6%B5%8F%E8%A7%88%E5%99%A8%20%E6%9C%8D%E5%86%AC%E5%93%AD%20%E6%9C%8D%E5%8A%A1%E5%99%A8%206522842-b8673510ce2c4jp(100x906)%207.%E5%85%B6%E4%BB%96ajax%E8%AF%B7%E6%B1%82%206.%E8%8E%B7%E5%8F%96ajax%E6%95%B0%E6%8D%AE%207.%E8%BF%94%E5%9B%9Eajax%E6%95%B0%E6%8D%AE%208.%E8%BF%94%E5%9B%9Eajax%E6%95%B0%E6%8D%AE%20%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%B2%E6%9F%93%E8%B7%AF%E7%BA%BF%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A255.81122%2C%22y%22%3A50.719585%2C%22width%22%3A164.6279%2C%22height%22%3A24.888055%2C%22text%22%3A%221.%E8%AF%B7%E6%B1%82%E4%B8%80%E4%B8%AAURL%22%7D%2C%7B%22x%22%3A231.22485%2C%22y%22%3A129.40471%2C%22width%22%3A212.97695%2C%22height%22%3A21.50493%2C%22text%22%3A%222.%E8%BF%94%E5%9B%9E%E7%A9%BA%E7%9A%84%E9%A6%96%E5%B1%8Fhtml%22%7D%2C%7B%22x%22%3A255.82648%2C%22y%22%3A234.29291%2C%22width%22%3A167.47032000000002%2C%22height%22%3A23.174249999999972%2C%22text%22%3A%223.%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A746.3974%2C%22y%22%3A243.76518%2C%22width%22%3A161.12683000000004%2C%22height%22%3A23.17076000000003%2C%22text%22%3A%224.%E8%8E%B7%E5%8F%96%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A739.7042%2C%22y%22%3A356.548%2C%22width%22%3A166.79150000000004%2C%22height%22%3A23.371860000000027%2C%22text%22%3A%225.%E8%BF%94%E5%9B%9E%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A250.6248%2C%22y%22%3A359.01227%2C%22width%22%3A168.58839999999998%2C%22height%22%3A25.50142999999997%2C%22text%22%3A%226.%E8%BF%94%E5%9B%9E%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A1053.209%2C%22y%22%3A371.77872%2C%22width%22%3A53.243999999999915%2C%22height%22%3A27.60337999999996%2C%22text%22%3A%22%E5%90%8E%E7%AB%AF%22%7D%2C%7B%22x%22%3A543.32654%2C%22y%22%3A375.85602%2C%22width%22%3A57.55462%2C%22height%22%3A18.370209999999986%2C%22text%22%3A%22node%22%7D%2C%7B%22x%22%3A57.68249%2C%22y%22%3A390.35062%2C%22width%22%3A77.26227%2C%22height%22%3A26.47171000000003%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%22%7D%2C%7B%22x%22%3A534.59827%2C%22y%22%3A404.85358%2C%22width%22%3A80.27287999999999%2C%22height%22%3A18.306269999999984%2C%22text%22%3A%22%E6%9C%8D%E5%86%AC%E5%93%AD%22%7D%2C%7B%22x%22%3A1041.5076%2C%22y%22%3A407.6456%2C%22width%22%3A75.72680000000014%2C%22height%22%3A27.78253000000001%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A545.36597%2C%22y%22%3A423.2699%2C%22width%22%3A250.20963000000006%2C%22height%22%3A13.135299999999972%2C%22text%22%3A%226522842-b8673510ce2c4jp(100x906)%22%7D%2C%7B%22x%22%3A255.5159%2C%22y%22%3A491.49155%2C%22width%22%3A162.50440000000003%2C%22height%22%3A27.131950000000018%2C%22text%22%3A%227.%E5%85%B6%E4%BB%96ajax%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A747.92584%2C%22y%22%3A501.03665%2C%22width%22%3A158.05096000000003%2C%22height%22%3A25.48470999999995%2C%22text%22%3A%226.%E8%8E%B7%E5%8F%96ajax%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A744.0557%2C%22y%22%3A613.97485%2C%22width%22%3A157.42623000000003%2C%22height%22%3A25.18909000000008%2C%22text%22%3A%227.%E8%BF%94%E5%9B%9Eajax%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A250.11867%2C%22y%22%3A618.5666%2C%22width%22%3A164.14436%2C%22height%22%3A25.60069999999996%2C%22text%22%3A%228.%E8%BF%94%E5%9B%9Eajax%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A482.75842%2C%22y%22%3A840.2721%2C%22width%22%3A166.19341999999995%2C%22height%22%3A24.751949999999965%2C%22text%22%3A%22%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%B2%E6%9F%93%E8%B7%AF%E7%BA%BF%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f3f3%22%2C%22id%22%3A%22MiOqL%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ul list=\"ucb3ed795\"><li fid=\"uea091307\" data-lake-id=\"3d3b591265a5fc2baecfa19d62bd7935\" id=\"3d3b591265a5fc2baecfa19d62bd7935\"><span data-lake-id=\"u6f6ea06e\" id=\"u6f6ea06e\">服务端数据请求</span></li></ul><p data-lake-id=\"a627bcb2ef8cc7eb87ce4fead5539920\" id=\"a627bcb2ef8cc7eb87ce4fead5539920\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1612599745397-099cca87-5c01-4c45-94ad-318b054b7a01.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1132%2C%22height%22%3A845%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%2261612599340_.pic.jpg%22%2C%22size%22%3A61687%2C%22originWidth%22%3A1132%2C%22originHeight%22%3A845%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%222.%E8%8E%B7%E5%8F%96%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%201.%E8%AF%B7%E6%B1%82%E4%B8%80%E4%B8%AAURL%204.%E8%BF%94%E5%9B%9E%E6%B8%B2%E6%9F%93%E5%A5%BD%E7%9A%84%E9%A6%96%E5%B1%8Fhtml%203.%E8%BF%94%E5%9B%9E%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%205.%E5%85%B6%E4%BB%96ajax%E8%AF%B7%E6%B1%82%206.%E8%8E%B7%E5%8F%96ajax%E6%95%B0%E6%8D%AE%20%E5%90%8E%E7%AB%AF%20node%20%E6%B5%8F%E8%A7%88%E5%99%A8%20%E6%9C%8D%E5%8A%A1%E5%99%A8%20%E6%9C%8D%E5%8A%A1%E5%99%A8%208.%E8%BF%94%E5%9B%9Eajax%E6%95%B0%E6%8D%AE%207.%E8%BF%94%E5%9B%9Eajax%E6%95%B0%E6%8D%AE%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E8%B7%AF%E7%BA%BF%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A702.03955%2C%22y%22%3A34.6979%2C%22width%22%3A164.18235000000004%2C%22height%22%3A23.815470000000005%2C%22text%22%3A%222.%E8%8E%B7%E5%8F%96%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A244.5117%2C%22y%22%3A39.22098%2C%22width%22%3A162.69570000000002%2C%22height%22%3A22.911585000000002%2C%22text%22%3A%221.%E8%AF%B7%E6%B1%82%E4%B8%80%E4%B8%AAURL%22%7D%2C%7B%22x%22%3A199.29236%2C%22y%22%3A184.20995%2C%22width%22%3A252.12564%2C%22height%22%3A26.37826000000001%2C%22text%22%3A%224.%E8%BF%94%E5%9B%9E%E6%B8%B2%E6%9F%93%E5%A5%BD%E7%9A%84%E9%A6%96%E5%B1%8Fhtml%22%7D%2C%7B%22x%22%3A721.7387%2C%22y%22%3A188.9323%2C%22width%22%3A165.43354%2C%22height%22%3A25.65724%2C%22text%22%3A%223.%E8%BF%94%E5%9B%9E%E9%A6%96%E5%B1%8F%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A245.14471%2C%22y%22%3A341.88412%2C%22width%22%3A162.78534%2C%22height%22%3A25.756500000000017%2C%22text%22%3A%225.%E5%85%B6%E4%BB%96ajax%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A728.92566%2C%22y%22%3A345.91443%2C%22width%22%3A154.99028999999996%2C%22height%22%3A24.236199999999997%2C%22text%22%3A%226.%E8%8E%B7%E5%8F%96ajax%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A1028.3181%2C%22y%22%3A354.42126%2C%22width%22%3A53.005800000000136%2C%22height%22%3A27.74624%2C%22text%22%3A%22%E5%90%8E%E7%AB%AF%22%7D%2C%7B%22x%22%3A528.5837%2C%22y%22%3A357.68008%2C%22width%22%3A58.366199999999935%2C%22height%22%3A19.802190000000053%2C%22text%22%3A%22node%22%7D%2C%7B%22x%22%3A51.544228%2C%22y%22%3A372.8796%2C%22width%22%3A76.66866199999998%2C%22height%22%3A26.031530000000032%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%22%7D%2C%7B%22x%22%3A520.3404%2C%22y%22%3A387.72702%2C%22width%22%3A75.02089999999998%2C%22height%22%3A24.83668%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A1017.77625%2C%22y%22%3A390.7024%2C%22width%22%3A75.56204999999989%2C%22height%22%3A25.980459999999994%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%22%7D%2C%7B%22x%22%3A242.804%2C%22y%22%3A513.5989%2C%22width%22%3A160.52852%2C%22height%22%3A26.214500000000044%2C%22text%22%3A%228.%E8%BF%94%E5%9B%9Eajax%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A725.09656%2C%22y%22%3A516.0314%2C%22width%22%3A154.27929000000006%2C%22height%22%3A25.61405000000002%2C%22text%22%3A%227.%E8%BF%94%E5%9B%9Eajax%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A469.70416%2C%22y%22%3A815.0467%2C%22width%22%3A161.61563999999998%2C%22height%22%3A25.393300000000067%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%E8%B7%AF%E7%BA%BF%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22LZTYg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"0b0e8d0306755706802e49b59f899363\" id=\"0b0e8d0306755706802e49b59f899363\"><strong><span data-lake-id=\"u5fae45d9\" id=\"u5fae45d9\">2）html渲染</span></strong></p><p data-lake-id=\"c8c439767f8618eb51d8232799168297\" id=\"c8c439767f8618eb51d8232799168297\"><span data-lake-id=\"u0d37b811\" id=\"u0d37b811\">服务端渲染是先向后端服务器请求数据，然后生成完整首屏 html返回给浏览器；而客户端渲染是等js代码下载、加载、解析完成后再请求数据渲染，等待的过程页面是什么都没有的，就是用户看到的白屏。就是服务端渲染不需要等待js代码下载完成并请求数据，就可以返回一个已有完整数据的首屏页面。</span></p><ul list=\"uf57283d1\"><li fid=\"u287acbc5\" data-lake-id=\"5dda7261108ad0384f25dca6d7d408c6\" id=\"5dda7261108ad0384f25dca6d7d408c6\"><span data-lake-id=\"u0928be22\" id=\"u0928be22\">非ssr html渲染</span></li></ul><p data-lake-id=\"58495eb67763d865cdde4b63abb38bd3\" id=\"58495eb67763d865cdde4b63abb38bd3\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1612599842432-0b804ffa-177b-43c8-a973-d633917b784b.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1200%2C%22height%22%3A407%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%2231612599269_.pic.jpg%22%2C%22size%22%3A30148%2C%22originWidth%22%3A1200%2C%22originHeight%22%3A407%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22DOM%20%E4%B8%AD%E5%88%AB%E6%97%B6%E6%8B%8D%20%E6%A2%A6%E5%BE%85%E5%9C%B3%E6%95%99js%20%E7%94%9F%E6%88%90%E5%AE%8C%E9%BB%8E%E7%9A%84%20%E5%88%ABax%E6%B8%85%E6%B1%82%20Layout%20s%E8%A7%A3%E6%9E%90%E6%89%A7%E8%A1%8C%20HTMLParser%20DOMTree%20Wtm%20%E9%A6%96%E5%B1%8FHTML%20%E5%88%9D%E5%A7%8B%E6%95%B0%E6%8D%AE%20css%20Display%20RenderTr6e%20Painting%20Antachment%20SIYERulES%20asSParser%20STME9OBA%20%E9%9D%9ESSR%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%81%E6%9F%93(chrome%E6%B5%8B%E8%A7%88%E5%99%A8%E4%B8%BA%E4%BE%8B)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A759.20905%2C%22y%22%3A44.110817%2C%22width%22%3A31.544149999999945%2C%22height%22%3A12.434163000000005%2C%22text%22%3A%22DOM%22%7D%2C%7B%22x%22%3A33.064747%2C%22y%22%3A102.6286%2C%22width%22%3A57.415053%2C%22height%22%3A12.150030000000001%2C%22text%22%3A%22%E4%B8%AD%E5%88%AB%E6%97%B6%E6%8B%8D%22%7D%2C%7B%22x%22%3A142.66574%2C%22y%22%3A105.2537%2C%22width%22%3A69.63785000000001%2C%22height%22%3A14.25742000000001%2C%22text%22%3A%22%E6%A2%A6%E5%BE%85%E5%9C%B3%E6%95%99js%22%7D%2C%7B%22x%22%3A503.92688%2C%22y%22%3A106.349655%2C%22width%22%3A65.88682000000006%2C%22height%22%3A15.696685000000002%2C%22text%22%3A%22%E7%94%9F%E6%88%90%E5%AE%8C%E9%BB%8E%E7%9A%84%22%7D%2C%7B%22x%22%3A391.32993%2C%22y%22%3A106.125175%2C%22width%22%3A55.892420000000016%2C%22height%22%3A15.196610000000007%2C%22text%22%3A%22%E5%88%ABax%E6%B8%85%E6%B1%82%22%7D%2C%7B%22x%22%3A891.9916%2C%22y%22%3A113.88587%2C%22width%22%3A40.90556000000004%2C%22height%22%3A11.422790000000006%2C%22text%22%3A%22Layout%22%7D%2C%7B%22x%22%3A263.7688%2C%22y%22%3A115.24409%2C%22width%22%3A68.20940000000002%2C%22height%22%3A14.954790000000003%2C%22text%22%3A%22s%E8%A7%A3%E6%9E%90%E6%89%A7%E8%A1%8C%22%7D%2C%7B%22x%22%3A615.5272%2C%22y%22%3A118.657906%2C%22width%22%3A76.89980000000003%2C%22height%22%3A13.51609400000001%2C%22text%22%3A%22HTMLParser%22%7D%2C%7B%22x%22%3A744.3344%2C%22y%22%3A119.726395%2C%22width%22%3A60.01420000000007%2C%22height%22%3A11.74356499999999%2C%22text%22%3A%22DOMTree%22%7D%2C%7B%22x%22%3A42.44023%2C%22y%22%3A122.81251%2C%22width%22%3A26.997370000000004%2C%22height%22%3A10.368750000000006%2C%22text%22%3A%22Wtm%22%7D%2C%7B%22x%22%3A504.6317%2C%22y%22%3A124.79331%2C%22width%22%3A62.237139999999954%2C%22height%22%3A15.250019999999992%2C%22text%22%3A%22%E9%A6%96%E5%B1%8FHTML%22%7D%2C%7B%22x%22%3A392.98227%2C%22y%22%3A125.72006%2C%22width%22%3A52.71709999999996%2C%22height%22%3A15.195819999999983%2C%22text%22%3A%22%E5%88%9D%E5%A7%8B%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A170.38228%2C%22y%22%3A127.79072%2C%22width%22%3A18.983029999999985%2C%22height%22%3A11.847890000000007%2C%22text%22%3A%22css%22%7D%2C%7B%22x%22%3A1117.3901%2C%22y%22%3A178.99736%2C%22width%22%3A42.132899999999836%2C%22height%22%3A12.63551000000001%2C%22text%22%3A%22Display%22%7D%2C%7B%22x%22%3A869.32336%2C%22y%22%3A181.72406%2C%22width%22%3A73.02873999999997%2C%22height%22%3A13.959149999999994%2C%22text%22%3A%22RenderTr6e%22%7D%2C%7B%22x%22%3A992.12396%2C%22y%22%3A182.47438%2C%22width%22%3A49.75544000000002%2C%22height%22%3A14.72426999999999%2C%22text%22%3A%22Painting%22%7D%2C%7B%22x%22%3A737.99976%2C%22y%22%3A189.00142%2C%22width%22%3A67.84271000000001%2C%22height%22%3A11.70714000000001%2C%22text%22%3A%22Antachment%22%7D%2C%7B%22x%22%3A729.7571%2C%22y%22%3A279.30887%2C%22width%22%3A68.13223999999991%2C%22height%22%3A14.761050000000012%2C%22text%22%3A%22SIYERulES%22%7D%2C%7B%22x%22%3A471.43872%2C%22y%22%3A281.08545%2C%22width%22%3A67.63293999999996%2C%22height%22%3A12.91115000000002%2C%22text%22%3A%22asSParser%22%7D%2C%7B%22x%22%3A239.43108%2C%22y%22%3A291.75638%2C%22width%22%3A68.65704999999997%2C%22height%22%3A12.650620000000004%2C%22text%22%3A%22STME9OBA%22%7D%2C%7B%22x%22%3A431.22208%2C%22y%22%3A368.80377%2C%22width%22%3A236.99612000000002%2C%22height%22%3A16.20496000000003%2C%22text%22%3A%22%E9%9D%9ESSR%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B5%81%E6%9F%93(chrome%E6%B5%8B%E8%A7%88%E5%99%A8%E4%B8%BA%E4%BE%8B)%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fbf4ec%22%2C%22id%22%3A%22TlN8a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ul list=\"u32ec9aed\"><li fid=\"u34b8e4b4\" data-lake-id=\"8ad8c29bb6a98175c7e2e0ca357250c0\" id=\"8ad8c29bb6a98175c7e2e0ca357250c0\"><span data-lake-id=\"u06a3c552\" id=\"u06a3c552\">ssr html渲染</span></li></ul><p data-lake-id=\"6fdab8f349ea00f7e423deeddb8a70a6\" id=\"6fdab8f349ea00f7e423deeddb8a70a6\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fjpeg%2F1500604%2F1612599902197-a00e3b91-390f-47b7-856f-b1f2d5c782f7.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1205%2C%22height%22%3A388%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%2241612599275_.pic.jpg%22%2C%22size%22%3A25293%2C%22originWidth%22%3A1205%2C%22originHeight%22%3A388%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22DOM%200o0%E5%8C%858%E5%88%87%20Layout%20DOMTree%20HTMLParser%20%E8%9A%81%E9%A5%AD%E5%95%86%20Display%20Painting%20RenderTreo%20Artachment%20SIyeRutes%20cSSParser%20%E7%AD%89%E7%89%B9%E5%8A%A0%E8%BD%BDcss%208V63195%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A759.13806%2C%22y%22%3A87.201035%2C%22width%22%3A33.618439999999964%2C%22height%22%3A14.124290000000002%2C%22text%22%3A%22DOM%22%7D%2C%7B%22x%22%3A26.798388%2C%22y%22%3A145.50642%2C%22width%22%3A95.617532%2C%22height%22%3A12.880330000000015%2C%22text%22%3A%220o0%E5%8C%858%E5%88%87%22%7D%2C%7B%22x%22%3A890.9583%2C%22y%22%3A156.39124%2C%22width%22%3A41.20359999999994%2C%22height%22%3A12.955819999999989%2C%22text%22%3A%22Layout%22%7D%2C%7B%22x%22%3A746.1299%2C%22y%22%3A158.12701%2C%22width%22%3A59.331500000000005%2C%22height%22%3A13.838470000000001%2C%22text%22%3A%22DOMTree%22%7D%2C%7B%22x%22%3A375.24615%2C%22y%22%3A159.33395%2C%22width%22%3A77.47507000000002%2C%22height%22%3A13.444510000000008%2C%22text%22%3A%22HTMLParser%22%7D%2C%7B%22x%22%3A35.621918%2C%22y%22%3A165.18779%2C%22width%22%3A78.784852%2C%22height%22%3A12.064210000000003%2C%22text%22%3A%22%E8%9A%81%E9%A5%AD%E5%95%86%22%7D%2C%7B%22x%22%3A1114.255%2C%22y%22%3A221.5335%2C%22width%22%3A44.31619999999998%2C%22height%22%3A13.83268000000001%2C%22text%22%3A%22Display%22%7D%2C%7B%22x%22%3A993.264%2C%22y%22%3A225.11043%2C%22width%22%3A49.80810000000008%2C%22height%22%3A15.315110000000004%2C%22text%22%3A%22Painting%22%7D%2C%7B%22x%22%3A868.79083%2C%22y%22%3A225.0208%2C%22width%22%3A73.35537%2C%22height%22%3A14.094529999999992%2C%22text%22%3A%22RenderTreo%22%7D%2C%7B%22x%22%3A739.5418%2C%22y%22%3A228.88622%2C%22width%22%3A67.23340000000007%2C%22height%22%3A13.01885999999999%2C%22text%22%3A%22Artachment%22%7D%2C%7B%22x%22%3A730.5527%2C%22y%22%3A322.25848%2C%22width%22%3A67.73044000000004%2C%22height%22%3A15.076619999999991%2C%22text%22%3A%22SIyeRutes%22%7D%2C%7B%22x%22%3A473.08295%2C%22y%22%3A323.82175%2C%22width%22%3A68.94865000000004%2C%22height%22%3A12.920450000000017%2C%22text%22%3A%22cSSParser%22%7D%2C%7B%22x%22%3A36.176014%2C%22y%22%3A327.6551%2C%22width%22%3A73.775746%2C%22height%22%3A15.096000000000004%2C%22text%22%3A%22%E7%AD%89%E7%89%B9%E5%8A%A0%E8%BD%BDcss%22%7D%2C%7B%22x%22%3A241.17831%2C%22y%22%3A332.3176%2C%22width%22%3A72.14398999999997%2C%22height%22%3A15.706539999999961%2C%22text%22%3A%228V63195%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcf9f2%22%2C%22id%22%3A%22SU0In%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"96e62da79e8c5509b6ac3bb289f6f5aa\" id=\"96e62da79e8c5509b6ac3bb289f6f5aa\"><span data-lake-id=\"u9273c2b9\" id=\"u9273c2b9\">20. </span><span data-lake-id=\"u8273da7e\" id=\"u8273da7e\">为什么 React 要用 JSX？</span></h3><p data-lake-id=\"cd4ef5d05e4b00713cc1132d1459f429\" id=\"cd4ef5d05e4b00713cc1132d1459f429\"><span data-lake-id=\"uec42193f\" id=\"uec42193f\">JSX 是一个 JavaScript 的语法扩展，或者说是一个类似于 XML 的 ECMAScript 语法扩展。它本身没有太多的语法定义，也不期望引入更多的标准。</span></p><p data-lake-id=\"2a3d5a62fa241da6a7b3cee71d7899a2\" id=\"2a3d5a62fa241da6a7b3cee71d7899a2\"><br></p><p data-lake-id=\"8d979025e98f20f5e0155c3b4613d3e5\" id=\"8d979025e98f20f5e0155c3b4613d3e5\"><span data-lake-id=\"u5ca83f0a\" id=\"u5ca83f0a\">其实 React 本身并不强制使用 JSX。在没有 JSX 的时候，React 实现一个组件依赖于使用 React.createElement 函数。代码如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Hello%20extends%20React.Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20React.createElement(%5Cn%20%20%20%20%20%20%20%20'div'%2C%5Cn%20%20%20%20%20%20%20%20null%2C%20%5Cn%20%20%20%20%20%20%20%20%60Hello%20%24%7Bthis.props.toWhat%7D%60%5Cn%20%20%20%20%20%20)%3B%5Cn%20%20%7D%5Cn%7D%5CnReactDOM.render(%5Cn%20%20React.createElement(Hello%2C%20%7BtoWhat%3A%20'World'%7D%2C%20null)%2C%5Cn%20%20document.getElementById('root')%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gwNQ2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"078c8b75937c3018ce1a8c28d462d2d6\" id=\"078c8b75937c3018ce1a8c28d462d2d6\"><span data-lake-id=\"ud29fc205\" id=\"ud29fc205\">而 JSX 更像是一种语法糖，通过类似 XML 的描述方式，描写函数对象。在采用 JSX 之后，这段代码会这样写：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22class%20Hello%20extends%20React.Component%20%7B%5Cn%20%20render()%20%7B%5Cn%20%20%20%20return%20%3Cdiv%3EHello%20%7Bthis.props.toWhat%7D%3C%2Fdiv%3E%3B%5Cn%20%20%7D%5Cn%7D%5CnReactDOM.render(%5Cn%20%20%3CHello%20toWhat%3D%5C%22World%5C%22%20%2F%3E%2C%5Cn%20%20document.getElementById('root')%5Cn)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22v34vV%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"246050eb6d853da55b269093e9867e8e\" id=\"246050eb6d853da55b269093e9867e8e\"><span data-lake-id=\"u214f7fb9\" id=\"u214f7fb9\">通过对比，可以清晰地发现，代码变得更为简洁，而且代码结构层次更为清晰。</span></p><p data-lake-id=\"e091ce66988da31db6ec9e6ba4e9ece4\" id=\"e091ce66988da31db6ec9e6ba4e9ece4\"><br></p><p data-lake-id=\"1d32868b672c616f08b3c923a5126edc\" id=\"1d32868b672c616f08b3c923a5126edc\"><span data-lake-id=\"u41257d16\" id=\"u41257d16\">因为 React 需要将组件转化为虚拟 DOM 树，所以在编写代码时，实际上是在手写一棵结构树。而</span><strong><span data-lake-id=\"u73cd2245\" id=\"u73cd2245\">XML 在树结构的描述上天生具有可读性强的优势。</span></strong></p><p data-lake-id=\"cd8ec8e06fe7f1aa961543640a26cc9c\" id=\"cd8ec8e06fe7f1aa961543640a26cc9c\"><br></p><p data-lake-id=\"b9132d9f89e3380314754415d1d405b3\" id=\"b9132d9f89e3380314754415d1d405b3\"><span data-lake-id=\"ua29aae1a\" id=\"ua29aae1a\">但这样可读性强的代码仅仅是给写程序的同学看的，实际上在运行的时候，会使用 Babel 插件将 JSX 语法的代码还原为 React.createElement 的代码。</span></p><p data-lake-id=\"29050eb207fbf69d44583923871f0137\" id=\"29050eb207fbf69d44583923871f0137\"><br></p><p data-lake-id=\"49624c4a10f496d7f2589a97538d20c0\" id=\"49624c4a10f496d7f2589a97538d20c0\"><br></p><p data-lake-id=\"ee76782349f9a02d4d62c83eb6dea4c4\" id=\"ee76782349f9a02d4d62c83eb6dea4c4\"><strong><span data-lake-id=\"u2d2a99e6\" id=\"u2d2a99e6\">总结：</span></strong></p><p data-lake-id=\"9fa72e97a77ffdba30f94d6b95c2114e\" id=\"9fa72e97a77ffdba30f94d6b95c2114e\"><span data-lake-id=\"u36f55d1b\" id=\"u36f55d1b\">JSX 是一个 JavaScript 的语法扩展，结构类似 XML。JSX 主要用于声明 React 元素，但 React 中并不强制使用 JSX。即使使用了 JSX，也会在构建过程中，通过 Babel 插件编译为 React.createElement。所以 JSX 更像是 React.createElement 的一种语法糖。</span></p><p data-lake-id=\"f9421d01d1ab8ab932b24377e6aedf61\" id=\"f9421d01d1ab8ab932b24377e6aedf61\"><br></p><p data-lake-id=\"8dcfb4f80884ac4d6737816f723b1933\" id=\"8dcfb4f80884ac4d6737816f723b1933\"><span data-lake-id=\"ufbb0f722\" id=\"ufbb0f722\">React 团队并不想引入 JavaScript 本身以外的开发体系。而是希望通过合理的关注点分离保持组件开发的纯粹性。</span></p><h3 data-lake-id=\"7eada827b01df2832ed1ff0f4512a1ce\" id=\"7eada827b01df2832ed1ff0f4512a1ce\"><span data-lake-id=\"ufa803787\" id=\"ufa803787\">21. React 中的高阶组件运用了什么设计模式？</span></h3><p data-lake-id=\"19abe29c29f9481ed89eb35d8b0c4623\" id=\"19abe29c29f9481ed89eb35d8b0c4623\" style=\"text-align: justify\"><span data-lake-id=\"u0c9755a8\" id=\"u0c9755a8\">使用了装饰模式，高阶组件的运用：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20withWindowWidth(BaseComponent)%20%7B%5Cn%20%20class%20DerivedClass%20extends%20React.Component%20%7B%5Cn%20%20%20%20state%20%3D%20%7B%5Cn%20%20%20%20%20%20windowWidth%3A%20window.innerWidth%2C%5Cn%20%20%20%20%7D%5Cn%20%20%20%20onResize%20%3D%20()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20this.setState(%7B%5Cn%20%20%20%20%20%20%20%20windowWidth%3A%20window.innerWidth%2C%5Cn%20%20%20%20%20%20%7D)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20componentDidMount()%20%7B%5Cn%20%20%20%20%20%20window.addEventListener('resize'%2C%20this.onResize)%5Cn%20%20%20%20%7D%5Cn%20%20%20%20componentWillUnmount()%20%7B%5Cn%20%20%20%20%20%20window.removeEventListener('resize'%2C%20this.onResize)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20render()%20%7B%5Cn%20%20%20%20%20%20return%20%3CBaseComponent%20%7B...this.props%7D%20%7B...this.state%7D%2F%3E%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20return%20DerivedClass%3B%5Cn%7D%5Cnconst%20MyComponent%20%3D%20(props)%20%3D%3E%20%7B%5Cn%20%20return%20%3Cdiv%3EWindow%20width%20is%3A%20%7Bprops.windowWidth%7D%3C%2Fdiv%3E%5Cn%7D%3B%5Cnexport%20default%20withWindowWidth(MyComponent)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22FhdEO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"8eea941f7c8ff4e3f889a871041869a2\" id=\"8eea941f7c8ff4e3f889a871041869a2\" style=\"text-align: justify\"><span data-lake-id=\"ude5d5551\" id=\"ude5d5551\">装饰模式的特点是不需要改变 被装饰对象 本身，而只是在外面套一个外壳接口。JavaScript 目前已经有了原生装饰器的提案，其用法如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%40testable%5Cn%20%20%20class%20MyTestableClass%20%7B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22fknTw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"u989d0431\" id=\"u989d0431\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673895039875-37e6b5f7-155c-42c4-b5a6-1c82c96cfab3.png%22%2C%22taskId%22%3A%22uaf8e501c-9e0f-423d-83b7-5f2982de969%22%2C%22clientId%22%3A%22u43a0eb18-2ac0-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u88000487%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
        "selected_at": null,
        "editor_meta": "{\"image\":20,\"codeblock\":120}",
        "editor_meta_draft": "{\"image\":20,\"codeblock\":120}",
        "meta": {
            "privacy_migrated": true,
            "premium_migrated": true
        },
        "marked": true,
        "mark": {
            "action_name": "mark_doc",
            "id": 110188295560,
            "created_at": "2023-07-01T00:04:43.000Z",
            "updated_at": "2023-07-01T00:04:43.000Z",
            "space_id": 0,
            "action_type": "mark",
            "action_option": "doc",
            "action_setting_type": "default",
            "user_id": 38384436,
            "organization_id": 0,
            "target_type": "Doc",
            "target_id": 29927090,
            "target_book_id": 6862641,
            "target_group_id": 1500604,
            "title": "前端面试题之React篇"
        },
        "region": "北京",
        "indexed_level": 1,
        "privacy_migrated": true,
        "user": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T06:27:51.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "last_editor": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T06:27:51.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "_serializer": "web.doc_detail"
    }
}