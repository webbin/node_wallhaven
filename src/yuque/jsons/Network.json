{
    "meta": {
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "latestReviewStatus": -1
    },
    "data": {
        "id": 23473015,
        "space_id": 0,
        "type": "Doc",
        "sub_type": null,
        "title": "前端面试题之计算机网络篇",
        "tag": null,
        "slug": "cdpgm0",
        "user_id": 1500604,
        "book_id": 6862641,
        "cover": "https://cdn.nlark.com/yuque/0/2020/png/1500604/1604070508591-32d79893-7e98-40c8-b779-ffb6da42cd1b.png",
        "description": "一、HTTP协议1. GET和POST的请求的区别 Post 和 Get 是 HTTP 请求的两种方法，其区别如下：应用场景：GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产...",
        "custom_description": null,
        "body_asl": "",
        "format": "lake",
        "origin_format": "lake",
        "status": 1,
        "read_status": 1,
        "view_status": 0,
        "public": 1,
        "draft_version": 111,
        "comments_count": 56,
        "likes_count": 73,
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "content_updated_at": "2023-01-16T18:55:05.000Z",
        "created_at": "2020-12-12T14:21:24.000Z",
        "updated_at": "2023-07-13T01:40:44.000Z",
        "published_at": "2023-01-16T18:55:05.000Z",
        "first_published_at": "2020-12-12T14:22:36.000Z",
        "pinned_at": null,
        "word_count": 28102,
        "content": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"traditional\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"ua8d7aa71\" id=\"ua8d7aa71\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1621606395878-ec50f847-ec2c-451b-885a-0baac77777e0.png%22%2C%22taskId%22%3A%22u86aff845-3692-487f-86c0-07f1ea272eb%22%2C%22clientId%22%3A%22u69d3af81-0d88-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1500%2C%22height%22%3A1043%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98.png%22%2C%22size%22%3A825025%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A3398%2C%22originHeight%22%3A2362%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%9B%BE%E4%BE%8B%20GET%E5%92%8CPOST%E7%9A%84%E8%AF%95%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB%20%E8%80%83%E5%AF%9F%E5%BE%88%E5%A4%9A%20POST%E5%92%8CPUTI%E5%AE%B6%E7%9A%84%E5%8C%BA%E5%88%AB%20%E8%80%83%E7%B4%A2%E7%96%B9%E5%A4%9A%20%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E8%AE%B8%E6%B1%82%E5%A4%B4%E5%92%8C%E5%BA%A6%E5%A4%B4%20%E8%80%83%E5%AF%9F%E7%8E%BB%E5%B0%91%20HTTP%E7%8A%B6%E6%80%81%E7%A0%81304%E6%98%AF%E5%A4%9A%E5%A5%BD%E8%BF%98%E6%98%AF%E5%B0%91%E5%A5%BD%20%E8%80%83%E5%AF%A8%E5%BE%88%E5%B0%91%20%E5%B8%B8%E8%A7%81%E7%9A%84HITP%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%20%E5%B8%B8%E8%A7%81%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81%20OPTIONS%E5%8D%97%E6%B1%82%E6%96%B9%E6%B3%95%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%20HTTP%E7%8A%B6%E6%80%81%E7%A0%81%20%E5%90%8C%E6%A0%B7%E6%98%AF%E5%9E%82%E5%AE%9A%E5%90%91%2C307%2C303%2C302%E7%9A%84%E5%8C%BA%E5%88%AB%3F%20HTTP1.D%E5%92%8CHTTP1.1%E4%B9%8B%E9%97%B4%E6%9C%89%E5%8D%B3%E4%BA%9B%E5%8C%BA%E5%88%AB%3F%20HTTP1.1%E5%92%8CHTTP2.0%E7%9A%84%E5%8C%BA%E5%88%AB%20DNS%E5%8D%8F%E8%AE%AE%E8%B6%B3%E4%BB%80%E4%B9%88%20HTTPRIHTTPS%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%8C%BA%E5%88%AB%20DNS%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8TCP%E5%92%8CUDP%E5%8D%8F%E8%AE%AE%3F%20GET%E6%96%B9%E6%B3%95URL%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E7%9A%84%E5%8E%9F%E5%9B%AD%20DNS%E5%AE%8C%E5%BA%A7%E7%9A%84%E6%9F%A5%E8%AF%A2%E8%BF%87%E7%A8%8B%20DNS%20%E5%BD%93%E5%9C%A8%E6%B5%8F%E9%97%A8%E8%A7%88%E4%B8%AD%E5%85%A5Google.com%E5%B9%B6%E4%B8%94%E6%8C%89%E4%B8%8B%E9%97%B4%E8%BD%A6%E4%B9%8B%20HTTP%E5%8D%8F%E8%AE%AE%20%E9%80%81%E4%BB%A3%E6%9F%A5%E8%AF%A2%E4%B8%8E%E8%BF%9C%E5%BD%92%E5%AE%89%E8%AF%A2%20%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%3F%20DNS%E8%AE%B0%E5%BD%95%E5%92%8C%E6%9E%81%E6%96%87%20%E5%AF%B9keep-alwe%E7%9A%84%E7%90%86%E8%A7%A3%20%E9%A1%B5%E9%9D%A2%E6%9C%89%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%2CHTTP%E6%98%AF%E6%B0%94%E6%A0%B7%E7%9A%84%E5%8A%9E%E8%BD%BD%E8%A1%A8%E7%8E%B0%3F%20OS%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%20HTTP2%E7%9A%84%E5%A4%B4%E9%83%BD%E5%8E%8B%E7%BC%A9%E5%B9%B6%E6%B3%95%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%3F%20%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%20TCP%2FAIP%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE%20HTTP%E8%AF%97%E6%B1%82%E6%8A%95%E6%96%87%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%3F%20HTTP%E5%89%8D%E5%BA%94%E6%8A%A5%E6%96%87%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%3F%20TCP%E5%92%8CUDP%E7%9A%84%E5%B8%9C%E5%BF%B5%E5%8F%8A%E7%89%B9%E7%82%B9%20HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BC%98%E7%82%B9%E5%92%8C%E6%A0%87%E7%82%B9%20%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%20TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB%20%E8%AF%B4%E4%B8%80%E4%B8%8BHTTP3.D%20TCP%3FUDP%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%20HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%80%A7%E8%83%BD%E6%80%8E%E4%B9%88%E6%A0%B7%20UDP%E5%8D%8F%E8%BF%99%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8F%AF%E5%85%B0%3F%20URL%E6%9C%89%E5%91%BC%E4%BA%9B%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%20TCP%E7%9A%84%E8%BD%A6%E4%BC%A0%E6%9C%BA%E5%88%B6%20TCP%E7%9A%84%E6%A1%86%E5%AE%A4%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6%20%E4%BB%80%E4%B9%88%E6%98%AFHTTPS%E5%8D%8F%E8%AE%AE%3F%20TCP%E5%92%8CUDP%20TCP%E7%9A%84%E6%B5%81%E7%BD%AE%E6%8E%A7%E5%88%B6%E5%BF%83%E5%8D%95%20TLS%2FSSL%E7%BA%A6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%20TCP%E7%9A%84%E5%8F%AF%E5%86%9B%E4%BC%A0%E7%AE%B1%E6%9C%BA%E5%88%B6%20%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E6%98%AF%E4%BB%80%E4%B9%88%3F%20HTTPS%E5%8D%8F%E8%AE%AE%20TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%90%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%20HTTPS%E4%BF%A1(%E5%BE%88%E6%89%8B)%E8%BF%87%E7%A8%8B%20TCP%E7%B2%98%E5%8C%85%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%B8%B0%2C%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%3F%20HTTPS%E7%9A%84%E7%89%B9%E7%82%B9%20%E4%B8%BA%E4%BB%80%E4%B9%88udp%E4%B8%8D%E4%BC%9A%E8%B4%B4%E5%8C%85%3F%20HTTPS%E6%98%AF%E5%A6%82%E6%9C%89%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%E7%9A%84%3F%20%E5%AF%B9Wehsocket%E7%9A%84%E7%90%86%E8%A7%A3%20Wedsocket%20%E7%9F%AD%E8%BD%AE%E8%AF%A2%2C%E9%95%BF%E8%BD%AE%E8%AF%A2%2CSSE%E5%92%8Cwebsocket%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A221.09604%2C%22y%22%3A109.55356%2C%22width%22%3A70.78166000000002%2C%22height%22%3A36.45425%2C%22text%22%3A%22%E5%9B%BE%E4%BE%8B%22%7D%2C%7B%22x%22%3A767.6508%2C%22y%22%3A123.10586%2C%22width%22%3A322.2580999999999%2C%22height%22%3A34.608540000000005%2C%22text%22%3A%22GET%E5%92%8CPOST%E7%9A%84%E8%AF%95%E6%B1%82%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A197.308%2C%22y%22%3A186.64429%2C%22width%22%3A114.28026%2C%22height%22%3A31.47140999999999%2C%22text%22%3A%22%E8%80%83%E5%AF%9F%E5%BE%88%E5%A4%9A%22%7D%2C%7B%22x%22%3A788.25574%2C%22y%22%3A196.3298%2C%22width%22%3A303.3492600000001%2C%22height%22%3A34.63505999999998%2C%22text%22%3A%22POST%E5%92%8CPUTI%E5%AE%B6%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A199.22209%2C%22y%22%3A253.53282%2C%22width%22%3A109.17402999999999%2C%22height%22%3A30.216140000000024%2C%22text%22%3A%22%E8%80%83%E7%B4%A2%E7%96%B9%E5%A4%9A%22%7D%2C%7B%22x%22%3A734.69617%2C%22y%22%3A271.0591%2C%22width%22%3A357.6338299999999%2C%22height%22%3A32.67827%2C%22text%22%3A%22%E5%B8%B8%E8%A7%81%E7%9A%84HTTP%E8%AE%B8%E6%B1%82%E5%A4%B4%E5%92%8C%E5%BA%A6%E5%A4%B4%22%7D%2C%7B%22x%22%3A200.40553%2C%22y%22%3A323.5772%2C%22width%22%3A109.62927000000002%2C%22height%22%3A30.26959999999997%2C%22text%22%3A%22%E8%80%83%E5%AF%9F%E7%8E%BB%E5%B0%91%22%7D%2C%7B%22x%22%3A679.74347%2C%22y%22%3A342.0943%2C%22width%22%3A410.01203%2C%22height%22%3A31.06012000000004%2C%22text%22%3A%22HTTP%E7%8A%B6%E6%80%81%E7%A0%81304%E6%98%AF%E5%A4%9A%E5%A5%BD%E8%BF%98%E6%98%AF%E5%B0%91%E5%A5%BD%22%7D%2C%7B%22x%22%3A197.02538%2C%22y%22%3A390.0331%2C%22width%22%3A113.00361999999998%2C%22height%22%3A32.07145000000003%2C%22text%22%3A%22%E8%80%83%E5%AF%A8%E5%BE%88%E5%B0%91%22%7D%2C%7B%22x%22%3A826.6417%2C%22y%22%3A415.29224%2C%22width%22%3A265.1792999999999%2C%22height%22%3A30.200860000000034%2C%22text%22%3A%22%E5%B8%B8%E8%A7%81%E7%9A%84HITP%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A2680.899%2C%22y%22%3A456.61002%2C%22width%22%3A169.79170000000022%2C%22height%22%3A37.75547999999998%2C%22text%22%3A%22%E5%B8%B8%E8%A7%81%E7%9A%84%E7%8A%B6%E6%80%81%E7%A0%81%22%7D%2C%7B%22x%22%3A712.3537%2C%22y%22%3A488.26657%2C%22width%22%3A375.5222%2C%22height%22%3A27.940129999999954%2C%22text%22%3A%22OPTIONS%E5%8D%97%E6%B1%82%E6%96%B9%E6%B3%95%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%22%7D%2C%7B%22x%22%3A2272.6206%2C%22y%22%3A521.4969%2C%22width%22%3A204.0341999999996%2C%22height%22%3A40.493150000000014%2C%22text%22%3A%22HTTP%E7%8A%B6%E6%80%81%E7%A0%81%22%7D%2C%7B%22x%22%3A2678.142%2C%22y%22%3A528.9173%2C%22width%22%3A507.8304000000003%2C%22height%22%3A39.204000000000065%2C%22text%22%3A%22%E5%90%8C%E6%A0%B7%E6%98%AF%E5%9E%82%E5%AE%9A%E5%90%91%2C307%2C303%2C302%E7%9A%84%E5%8C%BA%E5%88%AB%3F%22%7D%2C%7B%22x%22%3A573.6461%2C%22y%22%3A555.97327%2C%22width%22%3A505.0706999999999%2C%22height%22%3A34.42169000000001%2C%22text%22%3A%22HTTP1.D%E5%92%8CHTTP1.1%E4%B9%8B%E9%97%B4%E6%9C%89%E5%8D%B3%E4%BA%9B%E5%8C%BA%E5%88%AB%3F%22%7D%2C%7B%22x%22%3A717.6479%2C%22y%22%3A628.4205%2C%22width%22%3A374.95770000000005%2C%22height%22%3A34.79870000000005%2C%22text%22%3A%22HTTP1.1%E5%92%8CHTTP2.0%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2571.4775%2C%22y%22%3A666.5372%2C%22width%22%3A202.32470000000012%2C%22height%22%3A33.52110000000005%2C%22text%22%3A%22DNS%E5%8D%8F%E8%AE%AE%E8%B6%B3%E4%BB%80%E4%B9%88%22%7D%2C%7B%22x%22%3A761.3935%2C%22y%22%3A698.5939%2C%22width%22%3A331.1097000000001%2C%22height%22%3A35.25040000000001%2C%22text%22%3A%22HTTPRIHTTPS%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2566.0815%2C%22y%22%3A737.468%2C%22width%22%3A383.67880000000014%2C%22height%22%3A34.53150000000005%2C%22text%22%3A%22DNS%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8TCP%E5%92%8CUDP%E5%8D%8F%E8%AE%AE%3F%22%7D%2C%7B%22x%22%3A729.74506%2C%22y%22%3A772.37585%2C%22width%22%3A363.5708400000001%2C%22height%22%3A35.68795%2C%22text%22%3A%22GET%E6%96%B9%E6%B3%95URL%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E7%9A%84%E5%8E%9F%E5%9B%AD%22%7D%2C%7B%22x%22%3A2566.2712%2C%22y%22%3A808.57764%2C%22width%22%3A260.9137999999998%2C%22height%22%3A35.34396000000004%2C%22text%22%3A%22DNS%E5%AE%8C%E5%BA%A7%E7%9A%84%E6%9F%A5%E8%AF%A2%E8%BF%87%E7%A8%8B%22%7D%2C%7B%22x%22%3A2273.6519%2C%22y%22%3A837.7741%2C%22width%22%3A78.6241%2C%22height%22%3A34.50965000000008%2C%22text%22%3A%22DNS%22%7D%2C%7B%22x%22%3A496.8169%2C%22y%22%3A842.541%2C%22width%22%3A593.0342%2C%22height%22%3A35.43189999999993%2C%22text%22%3A%22%E5%BD%93%E5%9C%A8%E6%B5%8F%E9%97%A8%E8%A7%88%E4%B8%AD%E5%85%A5Google.com%E5%B9%B6%E4%B8%94%E6%8C%89%E4%B8%8B%E9%97%B4%E8%BD%A6%E4%B9%8B%22%7D%2C%7B%22x%22%3A1251.4832%2C%22y%22%3A853.4594%2C%22width%22%3A164.7034000000001%2C%22height%22%3A36.5%2C%22text%22%3A%22HTTP%E5%8D%8F%E8%AE%AE%22%7D%2C%7B%22x%22%3A2572.0496%2C%22y%22%3A882.46094%2C%22width%22%3A252.76340000000027%2C%22height%22%3A33.11541%2C%22text%22%3A%22%E9%80%81%E4%BB%A3%E6%9F%A5%E8%AF%A2%E4%B8%8E%E8%BF%9C%E5%BD%92%E5%AE%89%E8%AF%A2%22%7D%2C%7B%22x%22%3A500.4501%2C%22y%22%3A885.5102%2C%22width%22%3A189.39206000000001%2C%22height%22%3A30.46359999999993%2C%22text%22%3A%22%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%3F%22%7D%2C%7B%22x%22%3A2572.1538%2C%22y%22%3A954.1683%2C%22width%22%3A203.35890000000018%2C%22height%22%3A31.948299999999904%2C%22text%22%3A%22DNS%E8%AE%B0%E5%BD%95%E5%92%8C%E6%9E%81%E6%96%87%22%7D%2C%7B%22x%22%3A839.37714%2C%22y%22%3A953.1897%2C%22width%22%3A253.55765999999994%2C%22height%22%3A33.980339999999956%2C%22text%22%3A%22%E5%AF%B9keep-alwe%E7%9A%84%E7%90%86%E8%A7%A3%22%7D%2C%7B%22x%22%3A543.266%2C%22y%22%3A1027.3724%2C%22width%22%3A535.5275%2C%22height%22%3A32.974500000000035%2C%22text%22%3A%22%E9%A1%B5%E9%9D%A2%E6%9C%89%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%2CHTTP%E6%98%AF%E6%B0%94%E6%A0%B7%E7%9A%84%E5%8A%9E%E8%BD%BD%E8%A1%A8%E7%8E%B0%3F%22%7D%2C%7B%22x%22%3A2627.0144%2C%22y%22%3A1079.511%2C%22width%22%3A163.3656000000001%2C%22height%22%3A30.004100000000108%2C%22text%22%3A%22OS%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B%22%7D%2C%7B%22x%22%3A660.8162%2C%22y%22%3A1097.3223%2C%22width%22%3A418.9095%2C%22height%22%3A32.87889999999993%2C%22text%22%3A%22HTTP2%E7%9A%84%E5%A4%B4%E9%83%BD%E5%8E%8B%E7%BC%A9%E5%B9%B6%E6%B3%95%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%3F%22%7D%2C%7B%22x%22%3A2271.0376%2C%22y%22%3A1137.8818%2C%22width%22%3A150.2419%2C%22height%22%3A37.763999999999896%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%22%7D%2C%7B%22x%22%3A2621.6626%2C%22y%22%3A1150.3152%2C%22width%22%3A212.6531%2C%22height%22%3A33.89450000000011%2C%22text%22%3A%22TCP%2FAIP%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE%22%7D%2C%7B%22x%22%3A710.002%2C%22y%22%3A1167.9253%2C%22width%22%3A369.44589999999994%2C%22height%22%3A34.482499999999845%2C%22text%22%3A%22HTTP%E8%AF%97%E6%B1%82%E6%8A%95%E6%96%87%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%3F%22%7D%2C%7B%22x%22%3A707.4142%2C%22y%22%3A1240.9459%2C%22width%22%3A370.17489999999987%2C%22height%22%3A36.01030000000014%2C%22text%22%3A%22HTTP%E5%89%8D%E5%BA%94%E6%8A%A5%E6%96%87%E7%9A%84%E6%98%AF%E4%BB%80%E4%B9%88%E6%A0%B7%E7%9A%84%3F%22%7D%2C%7B%22x%22%3A2662.2502%2C%22y%22%3A1283.0188%2C%22width%22%3A336.8337999999999%2C%22height%22%3A37.90279999999984%2C%22text%22%3A%22TCP%E5%92%8CUDP%E7%9A%84%E5%B8%9C%E5%BF%B5%E5%8F%8A%E7%89%B9%E7%82%B9%22%7D%2C%7B%22x%22%3A791.20184%2C%22y%22%3A1314.7114%2C%22width%22%3A301.67616%2C%22height%22%3A32.36329999999998%2C%22text%22%3A%22HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BC%98%E7%82%B9%E5%92%8C%E6%A0%87%E7%82%B9%22%7D%2C%7B%22x%22%3A1621.6719%2C%22y%22%3A1345.57%2C%22width%22%3A449.51509999999985%2C%22height%22%3A60.278999999999996%2C%22text%22%3A%22%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E8%AF%95%E9%A2%98%22%7D%2C%7B%22x%22%3A2662.9836%2C%22y%22%3A1358.4183%2C%22width%22%3A222.20389999999998%2C%22height%22%3A31.329999999999927%2C%22text%22%3A%22TCP%E5%92%8CUDP%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A875.0529%2C%22y%22%3A1386.5077%2C%22width%22%3A223.6436%2C%22height%22%3A36.39869999999996%2C%22text%22%3A%22%E8%AF%B4%E4%B8%80%E4%B8%8BHTTP3.D%22%7D%2C%7B%22x%22%3A2663.5059%2C%22y%22%3A1428.2008%2C%22width%22%3A277.0587999999998%2C%22height%22%3A34.93599999999992%2C%22text%22%3A%22TCP%3FUDP%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%22%7D%2C%7B%22x%22%3A795.7084%2C%22y%22%3A1457.0905%2C%22width%22%3A299.65020000000004%2C%22height%22%3A33.76330000000007%2C%22text%22%3A%22HTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%80%A7%E8%83%BD%E6%80%8E%E4%B9%88%E6%A0%B7%22%7D%2C%7B%22x%22%3A2658.5696%2C%22y%22%3A1502.342%2C%22width%22%3A307.76240000000007%2C%22height%22%3A30.8282999999999%2C%22text%22%3A%22UDP%E5%8D%8F%E8%BF%99%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%8F%AF%E5%85%B0%3F%22%7D%2C%7B%22x%22%3A834.44556%2C%22y%22%3A1531.739%2C%22width%22%3A252.12574000000006%2C%22height%22%3A29.543699999999944%2C%22text%22%3A%22URL%E6%9C%89%E5%91%BC%E4%BA%9B%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%22%7D%2C%7B%22x%22%3A2664.6367%2C%22y%22%3A1572.2257%2C%22width%22%3A194.29199999999992%2C%22height%22%3A33.97270000000003%2C%22text%22%3A%22TCP%E7%9A%84%E8%BD%A6%E4%BC%A0%E6%9C%BA%E5%88%B6%22%7D%2C%7B%22x%22%3A2664.8525%2C%22y%22%3A1645.7672%2C%22width%22%3A250.90549999999985%2C%22height%22%3A31.929499999999962%2C%22text%22%3A%22TCP%E7%9A%84%E6%A1%86%E5%AE%A4%E6%8E%A7%E5%88%B6%E6%9C%BA%E5%88%B6%22%7D%2C%7B%22x%22%3A814.5872%2C%22y%22%3A1653.7496%2C%22width%22%3A245.28110000000004%2C%22height%22%3A29.720399999999927%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%98%AFHTTPS%E5%8D%8F%E8%AE%AE%3F%22%7D%2C%7B%22x%22%3A2274.2979%2C%22y%22%3A1670.5237%2C%22width%22%3A179.86319999999978%2C%22height%22%3A36.66489999999999%2C%22text%22%3A%22TCP%E5%92%8CUDP%22%7D%2C%7B%22x%22%3A2664.1633%2C%22y%22%3A1720.5724%2C%22width%22%3A252.07399999999961%2C%22height%22%3A30.490999999999985%2C%22text%22%3A%22TCP%E7%9A%84%E6%B5%81%E7%BD%AE%E6%8E%A7%E5%88%B6%E5%BF%83%E5%8D%95%22%7D%2C%7B%22x%22%3A825.45654%2C%22y%22%3A1728.2366%2C%22width%22%3A241.9695599999999%2C%22height%22%3A29.251400000000103%2C%22text%22%3A%22TLS%2FSSL%E7%BA%A6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%22%7D%2C%7B%22x%22%3A2657.6433%2C%22y%22%3A1790.9573%2C%22width%22%3A258.2909999999997%2C%22height%22%3A30.41730000000007%2C%22text%22%3A%22TCP%E7%9A%84%E5%8F%AF%E5%86%9B%E4%BC%A0%E7%AE%B1%E6%9C%BA%E5%88%B6%22%7D%2C%7B%22x%22%3A841.5049%2C%22y%22%3A1799.0403%2C%22width%22%3A215.39790000000005%2C%22height%22%3A32.88540000000012%2C%22text%22%3A%22%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6%E6%98%AF%E4%BB%80%E4%B9%88%3F%22%7D%2C%7B%22x%22%3A1228.8169%2C%22y%22%3A1861.8329%2C%22width%22%3A189.21589999999992%2C%22height%22%3A36.44069999999988%2C%22text%22%3A%22HTTPS%E5%8D%8F%E8%AE%AE%22%7D%2C%7B%22x%22%3A2663.436%2C%22y%22%3A1864.5126%2C%22width%22%3A334.9494999999997%2C%22height%22%3A28.54469999999992%2C%22text%22%3A%22TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%90%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%22%7D%2C%7B%22x%22%3A753.0626%2C%22y%22%3A1868.009%2C%22width%22%3A315.53819999999996%2C%22height%22%3A30.874700000000075%2C%22text%22%3A%22HTTPS%E4%BF%A1(%E5%BE%88%E6%89%8B)%E8%BF%87%E7%A8%8B%22%7D%2C%7B%22x%22%3A2658.4243%2C%22y%22%3A1931.6665%2C%22width%22%3A412.7008999999998%2C%22height%22%3A34.10329999999999%2C%22text%22%3A%22TCP%E7%B2%98%E5%8C%85%E6%98%AF%E6%80%8E%E4%B9%88%E5%9B%9E%E4%B8%B0%2C%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%3F%22%7D%2C%7B%22x%22%3A894.3632%2C%22y%22%3A1942.6376%2C%22width%22%3A174.77929999999992%2C%22height%22%3A32.443700000000035%2C%22text%22%3A%22HTTPS%E7%9A%84%E7%89%B9%E7%82%B9%22%7D%2C%7B%22x%22%3A2651.313%2C%22y%22%3A2006.0024%2C%22width%22%3A280.00999999999976%2C%22height%22%3A32.41729999999984%2C%22text%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%88udp%E4%B8%8D%E4%BC%9A%E8%B4%B4%E5%8C%85%3F%22%7D%2C%7B%22x%22%3A730.5121%2C%22y%22%3A2014.1921%2C%22width%22%3A327.89099999999996%2C%22height%22%3A31.44730000000004%2C%22text%22%3A%22HTTPS%E6%98%AF%E5%A6%82%E6%9C%89%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%E7%9A%84%3F%22%7D%2C%7B%22x%22%3A2674.0403%2C%22y%22%3A2131.2334%2C%22width%22%3A282.3793999999998%2C%22height%22%3A29.335599999999886%2C%22text%22%3A%22%E5%AF%B9Wehsocket%E7%9A%84%E7%90%86%E8%A7%A3%22%7D%2C%7B%22x%22%3A2269.5027%2C%22y%22%3A2193.309%2C%22width%22%3A199.5643%2C%22height%22%3A33.560399999999845%2C%22text%22%3A%22Wedsocket%22%7D%2C%7B%22x%22%3A2667.9019%2C%22y%22%3A2199.5857%2C%22width%22%3A597.0281%2C%22height%22%3A33.46259999999984%2C%22text%22%3A%22%E7%9F%AD%E8%BD%AE%E8%AF%A2%2C%E9%95%BF%E8%BD%AE%E8%AF%A2%2CSSE%E5%92%8Cwebsocket%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fbf8f7%22%2C%22id%22%3A%22udc6403aa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"XYwd4\" id=\"XYwd4\"><span data-lake-id=\"u4257b4f4\" id=\"u4257b4f4\">一、HTTP协议</span></h2><h3 data-lake-id=\"HKn6E\" id=\"HKn6E\"><span data-lake-id=\"uf46a2d7c\" id=\"uf46a2d7c\">1. GET和POST的请求的</span><span data-lake-id=\"u6c20c556\" id=\"u6c20c556\">区别 </span></h3><p data-lake-id=\"ad3a685a7717faa3dc22e8e0d273787b\" id=\"ad3a685a7717faa3dc22e8e0d273787b\"><span data-lake-id=\"ubf3ac886\" id=\"ubf3ac886\">Post 和 Get 是 HTTP 请求的两种方法，其区别如下：</span></p><ul list=\"uc42b9782\"><li fid=\"u8d075995\" data-lake-id=\"19de2afb1fe65541ee704bd61588cd4b\" id=\"19de2afb1fe65541ee704bd61588cd4b\"><strong><span data-lake-id=\"ub59c6e66\" id=\"ub59c6e66\">应用场景：</span></strong><span data-lake-id=\"u019905c6\" id=\"u019905c6\">GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。</span></li><li fid=\"u8d075995\" data-lake-id=\"06a5d1f7086e20f54759d17525e11da4\" id=\"06a5d1f7086e20f54759d17525e11da4\"><strong><span data-lake-id=\"u33611e1e\" id=\"u33611e1e\">是否缓存：</span></strong><span data-lake-id=\"ufb993e5f\" id=\"ufb993e5f\">因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。</span></li><li fid=\"u8d075995\" data-lake-id=\"1303b0742d6102574b7604571835466c\" id=\"1303b0742d6102574b7604571835466c\"><strong><span data-lake-id=\"u6d8beae5\" id=\"u6d8beae5\">发送的报文格式：</span></strong><span data-lake-id=\"udadfff68\" id=\"udadfff68\">Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。</span></li><li fid=\"u8d075995\" data-lake-id=\"f3044ef9b6db610481f1cb11386ef9ae\" id=\"f3044ef9b6db610481f1cb11386ef9ae\"><strong><span data-lake-id=\"u3aa15234\" id=\"u3aa15234\">安全性：</span></strong><span data-lake-id=\"u6b1099fc\" id=\"u6b1099fc\">Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。</span></li><li fid=\"u8d075995\" data-lake-id=\"3a49a6ca03cc08900dc027aea8958e8c\" id=\"3a49a6ca03cc08900dc027aea8958e8c\"><strong><span data-lake-id=\"u6318a933\" id=\"u6318a933\">请求长度：</span></strong><span data-lake-id=\"u47a3de8e\" id=\"u47a3de8e\">浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。</span></li><li fid=\"u8d075995\" data-lake-id=\"47d658a3afd0e2d2446a3ee9b78fb8d8\" id=\"47d658a3afd0e2d2446a3ee9b78fb8d8\"><strong><span data-lake-id=\"u2b533bac\" id=\"u2b533bac\">参数类型：</span></strong><span data-lake-id=\"u600b2ec6\" id=\"u600b2ec6\">post 的参数传递支持更多的数据类型。</span></li></ul><h3 data-lake-id=\"xBIGG\" id=\"xBIGG\"><span data-lake-id=\"u81a02f37\" id=\"u81a02f37\">2. POST和PUT请求的区别</span></h3><ul list=\"ud60ceefa\"><li fid=\"u37b4defc\" data-lake-id=\"f79d3ed1dbcf2099eafceba0bd275185\" id=\"f79d3ed1dbcf2099eafceba0bd275185\"><span data-lake-id=\"ufafa71e0\" id=\"ufafa71e0\">PUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。（可以理解为时</span><strong><span data-lake-id=\"u35d354d6\" id=\"u35d354d6\">更新数据</span></strong><span data-lake-id=\"u353d84cd\" id=\"u353d84cd\">）</span></li><li fid=\"u37b4defc\" data-lake-id=\"760f7eb90264b89713e0218feccc2cf1\" id=\"760f7eb90264b89713e0218feccc2cf1\"><span data-lake-id=\"u4c73ea05\" id=\"u4c73ea05\">POST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是</span><strong><span data-lake-id=\"u37e77b70\" id=\"u37e77b70\">创建数据</span></strong><span data-lake-id=\"u85da0717\" id=\"u85da0717\">）</span></li></ul><h3 data-lake-id=\"nyi9M\" id=\"nyi9M\"><span data-lake-id=\"u22932c11\" id=\"u22932c11\">3. 常见的HTTP请求头和响应头</span></h3><p data-lake-id=\"501298473d4546bdcfca09c8eec1ed30\" id=\"501298473d4546bdcfca09c8eec1ed30\"><strong><span data-lake-id=\"u5411460e\" id=\"u5411460e\">HTTP Request Header 常见的请求头：</span></strong></p><ul list=\"u5f3fb2a8\"><li fid=\"u82f38d04\" data-lake-id=\"ea6582b51d0031d60b7fe6922e6ba67c\" id=\"ea6582b51d0031d60b7fe6922e6ba67c\"><span data-lake-id=\"u1791a627\" id=\"u1791a627\">Accept:浏览器能够处理的内容类型</span></li><li fid=\"u82f38d04\" data-lake-id=\"4711b276ee226128d80a4a9c83941078\" id=\"4711b276ee226128d80a4a9c83941078\"><span data-lake-id=\"u643f4927\" id=\"u643f4927\">Accept-Charset:浏览器能够显示的字符集</span></li><li fid=\"u82f38d04\" data-lake-id=\"48df6b77082dda98a9bf0ef633e7405b\" id=\"48df6b77082dda98a9bf0ef633e7405b\"><span data-lake-id=\"u5bc1bd03\" id=\"u5bc1bd03\">Accept-Encoding：浏览器能够处理的压缩编码</span></li><li fid=\"u82f38d04\" data-lake-id=\"df57867267f812c78e29e9d278540db0\" id=\"df57867267f812c78e29e9d278540db0\"><span data-lake-id=\"udc914672\" id=\"udc914672\">Accept-Language：浏览器当前设置的语言</span></li><li fid=\"u82f38d04\" data-lake-id=\"ba159cb2f760f373f5200fecec3c1d78\" id=\"ba159cb2f760f373f5200fecec3c1d78\"><span data-lake-id=\"ua690a273\" id=\"ua690a273\">Connection：浏览器与服务器之间连接的类型</span></li><li fid=\"u82f38d04\" data-lake-id=\"affae27c8ff8b1868a06fbf27641d581\" id=\"affae27c8ff8b1868a06fbf27641d581\"><span data-lake-id=\"ufe70b48d\" id=\"ufe70b48d\">Cookie：当前页面设置的任何Cookie</span></li><li fid=\"u82f38d04\" data-lake-id=\"2e18f4e4be7323e470e4e32ad8a80565\" id=\"2e18f4e4be7323e470e4e32ad8a80565\"><span data-lake-id=\"u755cb706\" id=\"u755cb706\">Host：发出请求的页面所在的域</span></li><li fid=\"u82f38d04\" data-lake-id=\"efc607d6db0a8b4f0245e93aa604b8df\" id=\"efc607d6db0a8b4f0245e93aa604b8df\"><span data-lake-id=\"u39120d29\" id=\"u39120d29\">Referer：发出请求的页面的URL</span></li><li fid=\"u82f38d04\" data-lake-id=\"1cdcb3f55edce2610c3ba124c80af841\" id=\"1cdcb3f55edce2610c3ba124c80af841\"><span data-lake-id=\"u0aaf78ef\" id=\"u0aaf78ef\">User-Agent：浏览器的用户代理字符串</span></li></ul><p data-lake-id=\"37a258d3d9c7ae1bb9d7e1ca1ddac06e\" id=\"37a258d3d9c7ae1bb9d7e1ca1ddac06e\"><br></p><p data-lake-id=\"7db678a1277929833ba260ae3b0c8628\" id=\"7db678a1277929833ba260ae3b0c8628\"><strong><span data-lake-id=\"u496774c5\" id=\"u496774c5\">HTTP Responses Header 常见的响应头：</span></strong></p><ul list=\"ua9e9d853\"><li fid=\"u9286357c\" data-lake-id=\"4aeaf6652bc7a7ab4ecbb89a8e3262b6\" id=\"4aeaf6652bc7a7ab4ecbb89a8e3262b6\"><span data-lake-id=\"ue22f9d45\" id=\"ue22f9d45\">Date：表示消息发送的时间，时间的描述格式由rfc822定义</span></li><li fid=\"u9286357c\" data-lake-id=\"2ea1c1558d26172f62595756d9e1bebf\" id=\"2ea1c1558d26172f62595756d9e1bebf\"><span data-lake-id=\"u8cf3a81b\" id=\"u8cf3a81b\">server:服务器名称</span></li><li fid=\"u9286357c\" data-lake-id=\"7bb8d372ebb6dcaf348b52077cac3b72\" id=\"7bb8d372ebb6dcaf348b52077cac3b72\"><span data-lake-id=\"uc7b50d0f\" id=\"uc7b50d0f\">Connection：浏览器与服务器之间连接的类型</span></li><li fid=\"u9286357c\" data-lake-id=\"434e4af0f049903232e4cb46735005f4\" id=\"434e4af0f049903232e4cb46735005f4\"><span data-lake-id=\"ua634ddb6\" id=\"ua634ddb6\">Cache-Control：控制HTTP缓存</span></li><li fid=\"u9286357c\" data-lake-id=\"f1c5fbd52846103e724eb277ab04d3d0\" id=\"f1c5fbd52846103e724eb277ab04d3d0\"><span data-lake-id=\"ubf7ca8fd\" id=\"ubf7ca8fd\">content-type:表示后面的文档属于什么MIME类型</span></li></ul><p data-lake-id=\"2c69ca57083cc8cfc872404dddb3bd89\" id=\"2c69ca57083cc8cfc872404dddb3bd89\"><br></p><p data-lake-id=\"2eb2f2a1bb8c6cb44099e89262550dc3\" id=\"2eb2f2a1bb8c6cb44099e89262550dc3\"><span data-lake-id=\"u6a5f5177\" id=\"u6a5f5177\">常见的 Content-Type 属性值有以下四种：</span></p><p data-lake-id=\"a3a3f1b1a2571d6e3cc99b4a33b2c69f\" id=\"a3a3f1b1a2571d6e3cc99b4a33b2c69f\"><span data-lake-id=\"u56581573\" id=\"u56581573\">（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL转码。</span></p><p data-lake-id=\"553b2d2041174171e3843830dfb1d312\" id=\"553b2d2041174171e3843830dfb1d312\"><span data-lake-id=\"u9a251dc1\" id=\"u9a251dc1\">（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。</span></p><p data-lake-id=\"4e0add141e4fa9d81c32a534be4f39d2\" id=\"4e0add141e4fa9d81c32a534be4f39d2\"><span data-lake-id=\"ub748846a\" id=\"ub748846a\">（3）application/json：服务器消息主体是序列化后的 JSON 字符串。</span></p><p data-lake-id=\"e5d5e22e132ad31e259d7d8f9b08e04e\" id=\"e5d5e22e132ad31e259d7d8f9b08e04e\"><span data-lake-id=\"u05e52972\" id=\"u05e52972\">（4）text/xml：该种方式主要用来提交 XML 格式的数据。</span></p><h3 data-lake-id=\"d0m5A\" id=\"d0m5A\"><span data-lake-id=\"ufcb713ee\" id=\"ufcb713ee\">4. HTTP状态码304是多好还是少好</span></h3><p data-lake-id=\"61f665d918eb49704bc12acfbeefbb14\" id=\"61f665d918eb49704bc12acfbeefbb14\"><span data-lake-id=\"ue61677c1\" id=\"ue61677c1\">服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端在此对这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回304，此时客户端调用缓存内容，不必进行二次下载。</span></p><p data-lake-id=\"3f5791bd9d5311055ac73d9e8a453b39\" id=\"3f5791bd9d5311055ac73d9e8a453b39\"><br></p><p data-lake-id=\"f649380b7ab6786399555f53e4890ebc\" id=\"f649380b7ab6786399555f53e4890ebc\"><span data-lake-id=\"u08689178\" id=\"u08689178\">状态码304不应该认为是一种错误，而是对客户端</span><strong><span data-lake-id=\"ue73d7a85\" id=\"ue73d7a85\">有缓存情况下</span></strong><span data-lake-id=\"ue3d16efb\" id=\"ue3d16efb\">服务端的一种响应。</span></p><p data-lake-id=\"78bbf2d85a03082d68e08daf3c1e1c52\" id=\"78bbf2d85a03082d68e08daf3c1e1c52\"><br></p><p data-lake-id=\"a2a1b6c5b3f6e57c34c46a3f80fc30f3\" id=\"a2a1b6c5b3f6e57c34c46a3f80fc30f3\"><span data-lake-id=\"u42d2681a\" id=\"u42d2681a\">搜索引擎蜘蛛会更加青睐内容源更新频繁的网站。通过特定时间内对网站抓取返回的状态码来调节对该网站的抓取频次。若网站在一定时间内一直处于304的状态，那么蜘蛛可能会降低对网站的抓取次数。相反，若网站变化的频率非常之快，每次抓取都能获取新内容，那么日积月累，的回访率也会提高。</span></p><p data-lake-id=\"3d78883f21d202a2acd54f55c975a3aa\" id=\"3d78883f21d202a2acd54f55c975a3aa\"><br></p><p data-lake-id=\"8a410047923bb513dcf5352f660fca1e\" id=\"8a410047923bb513dcf5352f660fca1e\"><strong><span data-lake-id=\"udf60915b\" id=\"udf60915b\">产生较多304状态码的原因：</span></strong></p><ul list=\"u7c631db1\"><li fid=\"u5e4d4e40\" data-lake-id=\"2aec89d2f1a4d321eb9d2d9d1074db65\" id=\"2aec89d2f1a4d321eb9d2d9d1074db65\"><span data-lake-id=\"u4d4e7b55\" id=\"u4d4e7b55\">页面更新周期长或不更新</span></li><li fid=\"u5e4d4e40\" data-lake-id=\"5b344f65728f6951f5dc7cb6d298bc00\" id=\"5b344f65728f6951f5dc7cb6d298bc00\"><span data-lake-id=\"ua4f23b9b\" id=\"ua4f23b9b\">纯静态页面或强制生成静态html</span></li></ul><p data-lake-id=\"4d2f6cfaa7a22701dc838498aae10bb6\" id=\"4d2f6cfaa7a22701dc838498aae10bb6\"><br></p><p data-lake-id=\"011e07d0a86dfc054967425b3a949e2b\" id=\"011e07d0a86dfc054967425b3a949e2b\"><strong><span data-lake-id=\"u31e0fbde\" id=\"u31e0fbde\">304状态码出现过多会造成以下问题：</span></strong></p><ul list=\"u0c1ff15b\"><li fid=\"u43ae13bf\" data-lake-id=\"1d43601bfe8ed732931245f21186d8fb\" id=\"1d43601bfe8ed732931245f21186d8fb\"><span data-lake-id=\"u942c2fba\" id=\"u942c2fba\">网站快照停止；</span></li><li fid=\"u43ae13bf\" data-lake-id=\"64303fd95ca67ede90090090dc5e94e8\" id=\"64303fd95ca67ede90090090dc5e94e8\"><span data-lake-id=\"ud5ca2913\" id=\"ud5ca2913\">收录减少；</span></li><li fid=\"u43ae13bf\" data-lake-id=\"63c71aac0f9a38570bcde5d0676359c2\" id=\"63c71aac0f9a38570bcde5d0676359c2\"><span data-lake-id=\"ua9e1456f\" id=\"ua9e1456f\">权重下降。</span></li></ul><h3 data-lake-id=\"IXubc\" id=\"IXubc\"><span data-lake-id=\"ubf207603\" id=\"ubf207603\">5. 常见的HTTP请求方法</span></h3><ul list=\"u0ef2f8c1\"><li fid=\"ua3fd4750\" data-lake-id=\"b7d93465a01b38856271dd2fdc3e4570\" id=\"b7d93465a01b38856271dd2fdc3e4570\"><span data-lake-id=\"u50afd20b\" id=\"u50afd20b\">GET: 向服务器获取数据；</span></li><li fid=\"ua3fd4750\" data-lake-id=\"b980ce578438a3749333df764d0d53c7\" id=\"b980ce578438a3749333df764d0d53c7\"><span data-lake-id=\"u2296c428\" id=\"u2296c428\">POST：将实体提交到指定的资源，通常会造成服务器资源的修改；</span></li><li fid=\"ua3fd4750\" data-lake-id=\"9f2803975dc28a5c5570a3f840ebea08\" id=\"9f2803975dc28a5c5570a3f840ebea08\"><span data-lake-id=\"u98ca4bed\" id=\"u98ca4bed\">PUT：上传文件，更新数据；</span></li><li fid=\"ua3fd4750\" data-lake-id=\"366c1f1e99e369c1078cb08ef25a7d59\" id=\"366c1f1e99e369c1078cb08ef25a7d59\"><span data-lake-id=\"u89d4c718\" id=\"u89d4c718\">DELETE：删除服务器上的对象；</span></li><li fid=\"ua3fd4750\" data-lake-id=\"ffb696e0efe4228c4a1f6916be4e416f\" id=\"ffb696e0efe4228c4a1f6916be4e416f\"><span data-lake-id=\"ueabfe8e4\" id=\"ueabfe8e4\">HEAD：获取报文首部，与GET相比，不返回报文主体部分；</span></li><li fid=\"ua3fd4750\" data-lake-id=\"89cf8e9d85631b3e23d29c6a0c868ae0\" id=\"89cf8e9d85631b3e23d29c6a0c868ae0\"><span data-lake-id=\"u1b7abbe1\" id=\"u1b7abbe1\">OPTIONS：询问支持的请求方法，用来跨域请求；</span></li><li fid=\"ua3fd4750\" data-lake-id=\"9c231f0b81a72b9f2e694804d0a8b903\" id=\"9c231f0b81a72b9f2e694804d0a8b903\"><span data-lake-id=\"u9aef43f6\" id=\"u9aef43f6\">CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；</span></li><li fid=\"ua3fd4750\" data-lake-id=\"ec54a489aa6a50226b9ec9645304ac4c\" id=\"ec54a489aa6a50226b9ec9645304ac4c\"><span data-lake-id=\"u353c1319\" id=\"u353c1319\">TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。</span></li></ul><h3 data-lake-id=\"ee6af112\" id=\"ee6af112\"><span data-lake-id=\"u746931ba\" id=\"u746931ba\">6. </span><span data-lake-id=\"u468ff2b1\" id=\"u468ff2b1\">OPTIONS</span><span data-lake-id=\"ucdd53ae0\" id=\"ucdd53ae0\">请求方法及使用场景</span></h3><p data-lake-id=\"4974d8ecfa7ddc7556dec7044d11cf12\" id=\"4974d8ecfa7ddc7556dec7044d11cf12\"><span data-lake-id=\"uf33a0a25\" id=\"uf33a0a25\">OPTIONS是除了GET和POST之外的其中一种 HTTP请求方法。</span></p><p data-lake-id=\"f4b1997c6c952a974472e96613b7a045\" id=\"f4b1997c6c952a974472e96613b7a045\"><br></p><p data-lake-id=\"a90257f7dfbcd588febccb0bac87b226\" id=\"a90257f7dfbcd588febccb0bac87b226\"><span data-lake-id=\"ua3621544\" id=\"ua3621544\">OPTIONS方法是用于请求获得由</span><code data-lake-id=\"u541db80b\" id=\"u541db80b\"><span data-lake-id=\"u150e920f\" id=\"u150e920f\">Request-URI</span></code><span data-lake-id=\"uda19fd2e\" id=\"uda19fd2e\">标识的资源在请求/响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以</span><strong><span data-lake-id=\"ufd950271\" id=\"ufd950271\">在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能</span></strong><span data-lake-id=\"u4aa9744c\" id=\"u4aa9744c\">。该请求方法的响应不能缓存。</span></p><p data-lake-id=\"80f2043f7711dd580132e7aa38dedc8e\" id=\"80f2043f7711dd580132e7aa38dedc8e\"><br></p><p data-lake-id=\"a3c3cca18b21d40669707dcf05288429\" id=\"a3c3cca18b21d40669707dcf05288429\"><span data-lake-id=\"u24677b46\" id=\"u24677b46\">OPTIONS请求方法的</span><strong><span data-lake-id=\"uf0a167c1\" id=\"uf0a167c1\">主要用途</span></strong><span data-lake-id=\"u635619cc\" id=\"u635619cc\">有两个：</span></p><ul list=\"udd953ae0\"><li fid=\"u8bd4899f\" data-lake-id=\"28667c68b0fdbde333de867101e87d19\" id=\"28667c68b0fdbde333de867101e87d19\"><span data-lake-id=\"uae947969\" id=\"uae947969\">获取服务器支持的所有HTTP请求方法；</span></li><li fid=\"u8bd4899f\" data-lake-id=\"244178d18e0d33785598c240c12d5b4f\" id=\"244178d18e0d33785598c240c12d5b4f\"><span data-lake-id=\"u4df9bdd8\" id=\"u4df9bdd8\">用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。</span></li></ul><h3 data-lake-id=\"7sO8z\" id=\"7sO8z\"><span data-lake-id=\"u946c7866\" id=\"u946c7866\">7. HTTP 1.0 和 HTTP 1.1 之间有哪些区别？</span></h3><p data-lake-id=\"0d1a2c5023b66d63164ba35d587859e6\" id=\"0d1a2c5023b66d63164ba35d587859e6\"><strong><span data-lake-id=\"u9b240928\" id=\"u9b240928\">HTTP 1.0和 HTTP 1.1 </span></strong><strong><span data-lake-id=\"u5f7d9250\" id=\"u5f7d9250\">有以下区别</span></strong><span data-lake-id=\"uba49a843\" id=\"uba49a843\">：</span></p><ul list=\"ua2186055\"><li fid=\"uf0c99936\" data-lake-id=\"7326826fa0bfb78710fe01988da9e307\" id=\"7326826fa0bfb78710fe01988da9e307\"><strong><span data-lake-id=\"u625adffe\" id=\"u625adffe\">连接方面</span></strong><span data-lake-id=\"uadfd974a\" id=\"uadfd974a\">，http1.0 默认使用非持久连接，</span><span data-lake-id=\"ua60e3381\" id=\"ua60e3381\">而 </span><span data-lake-id=\"u82ab6a95\" id=\"u82ab6a95\">http1.1 默认使用持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。</span></li><li fid=\"uf0c99936\" data-lake-id=\"ac16389f8f59cad7f676564f9a0e3c19\" id=\"ac16389f8f59cad7f676564f9a0e3c19\"><strong><span data-lake-id=\"ua727d897\" id=\"ua727d897\">资源请求方面</span></strong><span data-lake-id=\"u379fd314\" id=\"u379fd314\">，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</span></li><li fid=\"uf0c99936\" data-lake-id=\"453475f99e7e4021d4bdde0558221f2b\" id=\"453475f99e7e4021d4bdde0558221f2b\"><strong><span data-lake-id=\"uf885b071\" id=\"uf885b071\">缓存方面</span></strong><span data-lake-id=\"u6d174ef6\" id=\"u6d174ef6\">，在 http1.0 中主要使用 header 里的 If-Modified-Since、Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略，例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。</span></li><li fid=\"uf0c99936\" data-lake-id=\"1f98ce1b023b2c6ad79a5d89670175e7\" id=\"1f98ce1b023b2c6ad79a5d89670175e7\"><span data-lake-id=\"ub386bf44\" id=\"ub386bf44\">http1.1 中</span><strong><span data-lake-id=\"u1c789d35\" id=\"u1c789d35\">新增了 host 字段</span></strong><span data-lake-id=\"u71ed8bd7\" id=\"u71ed8bd7\">，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。因此有了 host 字段，这样就可以将请求发往到同一台服务器上的不同网站。</span></li><li fid=\"uf0c99936\" data-lake-id=\"7c83e4d635a13bf73f19e676ac524605\" id=\"7c83e4d635a13bf73f19e676ac524605\"><span data-lake-id=\"u4538d7e0\" id=\"u4538d7e0\">http1.1 相对于 http1.0 还新增了很多</span><strong><span data-lake-id=\"u51a035e1\" id=\"u51a035e1\">请求方法</span></strong><span data-lake-id=\"ue76aaed7\" id=\"ue76aaed7\">，如 PUT、HEAD、OPTIONS 等。</span></li></ul><h3 data-lake-id=\"jcbmp\" id=\"jcbmp\"><span data-lake-id=\"u590a4850\" id=\"u590a4850\">8. HTTP 1.1 和 HTTP 2.0 的区别</span></h3><ul list=\"ua0dad80f\"><li fid=\"u0567cc46\" data-lake-id=\"59d83669c91378535f834228221a638f\" id=\"59d83669c91378535f834228221a638f\"><strong><span data-lake-id=\"u68d889d2\" id=\"u68d889d2\">二进制协议</span></strong><span data-lake-id=\"ue8347140\" id=\"ue8347140\">：HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为&quot;帧&quot;，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。</span></li><li fid=\"u0567cc46\" data-lake-id=\"f790dfb4d461c3ff4ff63a5a2271536a\" id=\"f790dfb4d461c3ff4ff63a5a2271536a\"><strong><span data-lake-id=\"u7abf386b\" id=\"u7abf386b\">多路复用：</span></strong><span data-lake-id=\"u8ecdc1fc\" id=\"u8ecdc1fc\">HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了&quot;队头堵塞&quot;</span><sup><span data-lake-id=\"u4a0f8301\" id=\"u4a0f8301\">【1】</span></sup><span data-lake-id=\"u403a2cad\" id=\"u403a2cad\">的问题。</span></li><li fid=\"u0567cc46\" data-lake-id=\"5dda340bf58dc71fc6384cffeae2442e\" id=\"5dda340bf58dc71fc6384cffeae2442e\"><strong><span data-lake-id=\"ubed122c8\" id=\"ubed122c8\">数据流：</span></strong><span data-lake-id=\"u698ceacc\" id=\"u698ceacc\">HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。</span></li><li fid=\"u0567cc46\" data-lake-id=\"bf32231c58fa7e9efb86ca8f2606781b\" id=\"bf32231c58fa7e9efb86ca8f2606781b\"><strong><span data-lake-id=\"ue3a11b73\" id=\"ue3a11b73\">头信息压缩：</span></strong><span data-lake-id=\"u24730a0f\" id=\"u24730a0f\">HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。</span></li><li fid=\"u0567cc46\" data-lake-id=\"7a4c1e3d9a5d6945adc920ed44512f02\" id=\"7a4c1e3d9a5d6945adc920ed44512f02\"><strong><span data-lake-id=\"u92613e05\" id=\"u92613e05\">服务器推送：</span></strong><span data-lake-id=\"ub0f68a52\" id=\"ub0f68a52\">HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主动推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。</span></li></ul><p data-lake-id=\"u20d3dbe8\" id=\"u20d3dbe8\"><br></p><p data-lake-id=\"u58215fdb\" id=\"u58215fdb\"><strong><span data-lake-id=\"ub86fbcf5\" id=\"ub86fbcf5\">【1】队头堵塞：</span></strong></p><blockquote data-lake-id=\"u9a9c690b\" id=\"u9a9c690b\"><p data-lake-id=\"ua66f3e4b\" id=\"ua66f3e4b\"><span data-lake-id=\"u56675ce4\" id=\"u56675ce4\">队头阻塞是由 HTTP 基本的“请求 - 应答”模型所导致的。HTTP 规定报文必须是“一发一收”，这就形成了一个先进先出的“串行”队列。队列里的请求是没有优先级的，只有入队的先后顺序，排在最前面的请求会被最优先处理。如果队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他的请求承担了不应有的时间成本，造成了队头堵塞的现象。</span></p></blockquote><h3 data-lake-id=\"xII1u\" id=\"xII1u\"><span data-lake-id=\"u9644b0c0\" id=\"u9644b0c0\">9. HTTP和HTTPS协议的区别</span></h3><p data-lake-id=\"98b26990fd8e016fb84dfda475ec8f50\" id=\"98b26990fd8e016fb84dfda475ec8f50\"><span data-lake-id=\"u811d049a\" id=\"u811d049a\">HTTP和HTTPS协议的主要区别如下：</span></p><ul list=\"uc1de2d13\"><li fid=\"u9d5a7012\" data-lake-id=\"3d9dc2875237a69abbd4deef44e2d0ce\" id=\"3d9dc2875237a69abbd4deef44e2d0ce\"><span data-lake-id=\"udd6cae17\" id=\"udd6cae17\">HTTPS协议需要CA证书，费用较高；而HTTP协议不需要；</span></li><li fid=\"u9d5a7012\" data-lake-id=\"af0dba25eed232a60ba278a264b2f53f\" id=\"af0dba25eed232a60ba278a264b2f53f\"><span data-lake-id=\"uc78ea3a5\" id=\"uc78ea3a5\">HTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议；</span></li><li fid=\"u9d5a7012\" data-lake-id=\"20ec600c7bf37d7499d43199f285b297\" id=\"20ec600c7bf37d7499d43199f285b297\"><span data-lake-id=\"uc60829e1\" id=\"uc60829e1\">使用不同的连接方式，端口也不同，HTTP协议端口是80，HTTPS协议端口是443；</span></li><li fid=\"u9d5a7012\" data-lake-id=\"faa81f1c1df3c08b4a3dc318499c27a0\" id=\"faa81f1c1df3c08b4a3dc318499c27a0\"><span data-lake-id=\"u4b940790\" id=\"u4b940790\">HTTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。</span></li></ul><h3 data-lake-id=\"B4zy9\" id=\"B4zy9\"><span data-lake-id=\"u246d83b7\" id=\"u246d83b7\">10. GET方法URL长度限制的原因</span></h3><p data-lake-id=\"ce6dff2e3726ca8dc0ef8d4afcae4e7d\" id=\"ce6dff2e3726ca8dc0ef8d4afcae4e7d\"><span data-lake-id=\"u669c7a72\" id=\"u669c7a72\">实际上HTTP协议规范并没有对get方法请求的url长度进行限制，这个限制是特定的浏览器及服务器对它的限制。</span></p><p data-lake-id=\"a4403d2f26f1e17e19eac1493695bcb0\" id=\"a4403d2f26f1e17e19eac1493695bcb0\"><span data-lake-id=\"u0ec9e6a2\" id=\"u0ec9e6a2\">IE对URL长度的限制是2083字节(2K+35)。由于IE浏览器对URL长度的允许值是最小的，所以开发过程中，只要URL不超过2083字节，那么在所有浏览器中工作都不会有问题。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22GET%E7%9A%84%E9%95%BF%E5%BA%A6%E5%80%BC%20%3D%20URL%EF%BC%882083%EF%BC%89-%20%EF%BC%88%E4%BD%A0%E7%9A%84Domain%2BPath%EF%BC%89-2%EF%BC%882%E6%98%AFget%E8%AF%B7%E6%B1%82%E4%B8%AD%3F%3D%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E7%9A%84%E9%95%BF%E5%BA%A6%EF%BC%89%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22lmFtm%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4a3bfe84eb62dc594fb446584def6b3c\" id=\"4a3bfe84eb62dc594fb446584def6b3c\"><span data-lake-id=\"ud2cab344\" id=\"ud2cab344\">下面看一下主流浏览器对get方法中url的长度限制范围：</span></p><ul list=\"u3032d545\"><li fid=\"u052d060d\" data-lake-id=\"45c6752e69cc9124b3b475d724517d6b\" id=\"45c6752e69cc9124b3b475d724517d6b\"><span data-lake-id=\"uf3ff899a\" id=\"uf3ff899a\">Microsoft Internet Explorer (Browser)：IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。</span></li><li fid=\"u052d060d\" data-lake-id=\"d3c22e881ebf2e828cc8091e39a5c83e\" id=\"d3c22e881ebf2e828cc8091e39a5c83e\"><span data-lake-id=\"uf0c55d8b\" id=\"uf0c55d8b\">Firefox (Browser)：对于Firefox浏览器URL的长度限制为 65,536 个字符。</span></li><li fid=\"u052d060d\" data-lake-id=\"4b511e188defdf9aa312706885dcfc62\" id=\"4b511e188defdf9aa312706885dcfc62\"><span data-lake-id=\"ued2835ee\" id=\"ued2835ee\">Safari (Browser)：URL最大长度限制为 80,000 个字符。</span></li><li fid=\"u052d060d\" data-lake-id=\"1b562b7f4024df40bc9d11418ee8b381\" id=\"1b562b7f4024df40bc9d11418ee8b381\"><span data-lake-id=\"u6dd5bb17\" id=\"u6dd5bb17\">Opera (Browser)：URL最大长度限制为 190,000 个字符。</span></li><li fid=\"u052d060d\" data-lake-id=\"7bf9571cf865a5b48f4de6fabfaf4f73\" id=\"7bf9571cf865a5b48f4de6fabfaf4f73\"><span data-lake-id=\"ufa4dc23f\" id=\"ufa4dc23f\">Google (chrome)：URL最大长度限制为 8182 个字符。</span></li></ul><p data-lake-id=\"3a0cc82cba459b158805d52c869bf583\" id=\"3a0cc82cba459b158805d52c869bf583\"><br></p><p data-lake-id=\"c01327e02b3ec7444a166865596067f9\" id=\"c01327e02b3ec7444a166865596067f9\"><span data-lake-id=\"u5a1ed147\" id=\"u5a1ed147\">主流的服务器对get方法中url的长度限制范围：</span></p><ul list=\"u959745a3\"><li fid=\"u29794d94\" data-lake-id=\"2e045e9a092fcf36034dbc1b40304eee\" id=\"2e045e9a092fcf36034dbc1b40304eee\"><span data-lake-id=\"uc1691add\" id=\"uc1691add\">Apache (Server)：能接受最大url长度为8192个字符。</span></li><li fid=\"u29794d94\" data-lake-id=\"7245c6b39f704faa82ee7d642a004448\" id=\"7245c6b39f704faa82ee7d642a004448\"><span data-lake-id=\"u54dd2041\" id=\"u54dd2041\">Microsoft Internet Information Server(IIS)：能接受最大url的长度为16384个字符。</span></li></ul><p data-lake-id=\"1a161a74e5ee2797107bb760d944f531\" id=\"1a161a74e5ee2797107bb760d944f531\"><br></p><p data-lake-id=\"78f888d4d87cb9cdc47f6d244cace726\" id=\"78f888d4d87cb9cdc47f6d244cace726\"><span data-lake-id=\"u26d8ca36\" id=\"u26d8ca36\">根据上面的数据，可以知道，get方法中的URL长度最长不超过2083个字符，这样所有的浏览器和服务器都可能正常工作。</span></p><h3 data-lake-id=\"6da1820b\" id=\"6da1820b\"><span data-lake-id=\"uba6c214a\" id=\"uba6c214a\">11. 当在浏览器中输入 Google.com 并且按下回车之后发生了什么？</span></h3><p data-lake-id=\"f98deecc0a3764ad9756361612de551c\" id=\"f98deecc0a3764ad9756361612de551c\"><span data-lake-id=\"udd7c8078\" id=\"udd7c8078\">（1）</span><strong><span data-lake-id=\"u53503033\" id=\"u53503033\">解析URL：</span></strong><span data-lake-id=\"ua4de186c\" id=\"ua4de186c\">首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</span></p><p data-lake-id=\"278e9eebc12d8cde2cfb2a9a21a7b804\" id=\"278e9eebc12d8cde2cfb2a9a21a7b804\"><span data-lake-id=\"udb8b872c\" id=\"udb8b872c\">（2）</span><strong><span data-lake-id=\"ub846a94b\" id=\"ub846a94b\">缓存判断：</span></strong><span data-lake-id=\"ud13b076d\" id=\"ud13b076d\">浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</span></p><p data-lake-id=\"50eec8de4c21af5d4df1460c5ed58b01\" id=\"50eec8de4c21af5d4df1460c5ed58b01\"><span data-lake-id=\"u0e87ae9a\" id=\"u0e87ae9a\">（3）</span><strong><span data-lake-id=\"uf3d97304\" id=\"uf3d97304\">DNS解析：</span></strong><span data-lake-id=\"u42e35922\" id=\"u42e35922\">下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</span></p><p data-lake-id=\"ba3b6c8e98a8704fd9d9e23a7da15fb9\" id=\"ba3b6c8e98a8704fd9d9e23a7da15fb9\"><span data-lake-id=\"ubfe0ffd1\" id=\"ubfe0ffd1\">（4）</span><strong><span data-lake-id=\"u19196458\" id=\"u19196458\">获取MAC地址：</span></strong><span data-lake-id=\"u2db74905\" id=\"u2db74905\">当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</span></p><p data-lake-id=\"3fa2e1f8752f9638903192c3ef4b98c1\" id=\"3fa2e1f8752f9638903192c3ef4b98c1\"><span data-lake-id=\"u3c8a8aad\" id=\"u3c8a8aad\">（5）</span><strong><span data-lake-id=\"u0802f189\" id=\"u0802f189\">TCP三次握手：</span></strong><span data-lake-id=\"u150e2be7\" id=\"u150e2be7\">下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</span></p><p data-lake-id=\"513269493a580cf95a10f4d866d8870f\" id=\"513269493a580cf95a10f4d866d8870f\"><span data-lake-id=\"u6899f6e3\" id=\"u6899f6e3\">（6）</span><strong><span data-lake-id=\"u30076c86\" id=\"u30076c86\">HTTPS握手：</span></strong><span data-lake-id=\"u0f2c582d\" id=\"u0f2c582d\">如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</span></p><p data-lake-id=\"987b0e3ed4635d6f6fc0ad2487a48417\" id=\"987b0e3ed4635d6f6fc0ad2487a48417\"><span data-lake-id=\"u6fe550c5\" id=\"u6fe550c5\">（7）</span><strong><span data-lake-id=\"u69606b2b\" id=\"u69606b2b\">返回数据：</span></strong><span data-lake-id=\"ubf2901b8\" id=\"ubf2901b8\">当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</span></p><p data-lake-id=\"176f9902a665cf67f88926760583052e\" id=\"176f9902a665cf67f88926760583052e\"><span data-lake-id=\"u4ce26cc9\" id=\"u4ce26cc9\">（8）</span><strong><span data-lake-id=\"ua3346fac\" id=\"ua3346fac\">页面渲染：</span></strong><span data-lake-id=\"ua3cac36a\" id=\"ua3cac36a\">浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</span></p><p data-lake-id=\"71ee5c4174a1bf6a53c079edbc4d0a6d\" id=\"71ee5c4174a1bf6a53c079edbc4d0a6d\"><span data-lake-id=\"uc14311fc\" id=\"uc14311fc\">（9）</span><strong><span data-lake-id=\"u32cf33dc\" id=\"u32cf33dc\">TCP四次挥手：</span></strong><span data-lake-id=\"ud7e8b80d\" id=\"ud7e8b80d\">最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</span></p><h3 data-lake-id=\"SKW8u\" id=\"SKW8u\"><span data-lake-id=\"ua2cf39cc\" id=\"ua2cf39cc\">12. 对keep-alive的理解</span></h3><p data-lake-id=\"6af0fca833a9774330c09a03e0ead5b5\" id=\"6af0fca833a9774330c09a03e0ead5b5\"><span data-lake-id=\"uab6ca148\" id=\"uab6ca148\">HTTP1.0 中默认是在每次请求/应答，客户端和服务器都要新建一个连接，完成之后立即断开连接，这就是</span><strong><span data-lake-id=\"uf5d22ccc\" id=\"uf5d22ccc\">短连接</span></strong><span data-lake-id=\"u2d283ea7\" id=\"u2d283ea7\">。当使用Keep-Alive模式时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接，这就是</span><strong><span data-lake-id=\"u9abb08e9\" id=\"u9abb08e9\">长连接</span></strong><span data-lake-id=\"ua20d32ee\" id=\"ua20d32ee\">。其使用方法如下：</span></p><ul list=\"u222ac455\"><li fid=\"ua7077c1f\" data-lake-id=\"63107aeb6e146f631e1708a03dc2962b\" id=\"63107aeb6e146f631e1708a03dc2962b\"><span data-lake-id=\"u872f9ad6\" id=\"u872f9ad6\">HTTP1.0版本是默认没有Keep-alive的（也就是默认会发送keep-alive），所以要想连接得到保持，必须手动配置发送</span><code data-lake-id=\"uac46cb4d\" id=\"uac46cb4d\"><span data-lake-id=\"u0221de94\" id=\"u0221de94\">Connection: keep-alive</span></code><span data-lake-id=\"u79090d35\" id=\"u79090d35\">字段。若想断开keep-alive连接，需发送</span><code data-lake-id=\"u2195b02f\" id=\"u2195b02f\"><span data-lake-id=\"u5dcc2fb9\" id=\"u5dcc2fb9\">Connection:close</span></code><span data-lake-id=\"u24958afc\" id=\"u24958afc\">字段；</span></li><li fid=\"ua7077c1f\" data-lake-id=\"e7b279e301300cdec418477bc9e1f079\" id=\"e7b279e301300cdec418477bc9e1f079\"><span data-lake-id=\"ue7623f75\" id=\"ue7623f75\">HTTP1.1规定了默认保持长连接，数据传输完成了保持TCP连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送</span><code data-lake-id=\"u9ad68f1e\" id=\"u9ad68f1e\"><span data-lake-id=\"u37b48b98\" id=\"u37b48b98\">Connection：close</span></code><span data-lake-id=\"u8d0603a4\" id=\"u8d0603a4\">首部字段。</span></li></ul><p data-lake-id=\"c99fb3e64ed85f927f93dc82bc9c7c14\" id=\"c99fb3e64ed85f927f93dc82bc9c7c14\"><br></p><p data-lake-id=\"78ac0826f5413b3e45b8a1d2cc850a27\" id=\"78ac0826f5413b3e45b8a1d2cc850a27\"><span data-lake-id=\"ude18166b\" id=\"ude18166b\">Keep-Alive的</span><strong><span data-lake-id=\"u63151753\" id=\"u63151753\">建立过程</span></strong><span data-lake-id=\"u172de053\" id=\"u172de053\">：</span></p><ul list=\"u1df1f026\"><li fid=\"u926e4da3\" data-lake-id=\"55b45d6992ff934472d708d5e8169c0e\" id=\"55b45d6992ff934472d708d5e8169c0e\"><span data-lake-id=\"u466b4b52\" id=\"u466b4b52\">客户端向服务器在发送请求报文同时在首部添加发送Connection字段</span></li><li fid=\"u926e4da3\" data-lake-id=\"80d31ceac50151b83b281c49d341c966\" id=\"80d31ceac50151b83b281c49d341c966\"><span data-lake-id=\"ue1a048d3\" id=\"ue1a048d3\">服务器收到请求并处理 Connection字段</span></li><li fid=\"u926e4da3\" data-lake-id=\"83f49f7d8edcb60c8742edf63706b73c\" id=\"83f49f7d8edcb60c8742edf63706b73c\"><span data-lake-id=\"uc78d3d0a\" id=\"uc78d3d0a\">服务器回送Connection:Keep-Alive字段给客户端</span></li><li fid=\"u926e4da3\" data-lake-id=\"580a67654068c0abf4c4e7f4cae46c99\" id=\"580a67654068c0abf4c4e7f4cae46c99\"><span data-lake-id=\"u7a11d3cd\" id=\"u7a11d3cd\">客户端接收到Connection字段</span></li><li fid=\"u926e4da3\" data-lake-id=\"84655f5b5bedfdfd150422adfab65d12\" id=\"84655f5b5bedfdfd150422adfab65d12\"><span data-lake-id=\"uc31c9aa7\" id=\"uc31c9aa7\">Keep-Alive连接建立成功</span></li></ul><p data-lake-id=\"27c461df1ca7640070d8cb223e3e58b9\" id=\"27c461df1ca7640070d8cb223e3e58b9\"><br></p><p data-lake-id=\"683c0e266c7d30b03003e7afa4207c8e\" id=\"683c0e266c7d30b03003e7afa4207c8e\"><strong><span data-lake-id=\"u4e083631\" id=\"u4e083631\">服务端自动断开过程（也就是没有keep-alive）</span></strong><span data-lake-id=\"ucfe38eec\" id=\"ucfe38eec\">：</span></p><ul list=\"u1f590dfb\"><li fid=\"ud26451ad\" data-lake-id=\"1531aaa3dc5a6fef8d918ba73924c449\" id=\"1531aaa3dc5a6fef8d918ba73924c449\"><span data-lake-id=\"u4342edea\" id=\"u4342edea\">客户端向服务器只是发送内容报文（不包含Connection字段）</span></li><li fid=\"ud26451ad\" data-lake-id=\"b9e40dd1a4481226e79ca40b1a90563a\" id=\"b9e40dd1a4481226e79ca40b1a90563a\"><span data-lake-id=\"u74f13006\" id=\"u74f13006\">服务器收到请求并处理</span></li><li fid=\"ud26451ad\" data-lake-id=\"18dc7f5f303c66f46bc8e18ba4b1d02d\" id=\"18dc7f5f303c66f46bc8e18ba4b1d02d\"><span data-lake-id=\"u40888e01\" id=\"u40888e01\">服务器返回客户端请求的资源并关闭连接</span></li><li fid=\"ud26451ad\" data-lake-id=\"473e279b67371c84347424dfe7585276\" id=\"473e279b67371c84347424dfe7585276\"><span data-lake-id=\"u275b461d\" id=\"u275b461d\">客户端接收资源，发现没有Connection字段，断开连接</span></li></ul><p data-lake-id=\"6feedc2e5f352bd3852a4ff064530717\" id=\"6feedc2e5f352bd3852a4ff064530717\"><br></p><p data-lake-id=\"8adfc99eeb59fbcd583b404d4043a9e8\" id=\"8adfc99eeb59fbcd583b404d4043a9e8\"><strong><span data-lake-id=\"u4a2c7be1\" id=\"u4a2c7be1\">客户端请求断开连接过程</span></strong><span data-lake-id=\"u8dfae4dc\" id=\"u8dfae4dc\">：</span></p><ul list=\"ufecb293f\"><li fid=\"u9e1dc796\" data-lake-id=\"5d11938e97c8ba904e57815335329f1b\" id=\"5d11938e97c8ba904e57815335329f1b\"><span data-lake-id=\"ufb2baac7\" id=\"ufb2baac7\">客户端向服务器发送Connection:close字段</span></li><li fid=\"u9e1dc796\" data-lake-id=\"3a1b3de5744067e70292239ee2b9099f\" id=\"3a1b3de5744067e70292239ee2b9099f\"><span data-lake-id=\"u49b458f9\" id=\"u49b458f9\">服务器收到请求并处理connection字段</span></li><li fid=\"u9e1dc796\" data-lake-id=\"ef8dd4354575271d6b6e4371d6d209f0\" id=\"ef8dd4354575271d6b6e4371d6d209f0\"><span data-lake-id=\"uba5b2d24\" id=\"uba5b2d24\">服务器回送响应资源并断开连接</span></li><li fid=\"u9e1dc796\" data-lake-id=\"6ce64eef965d25ee9832327e1ab162c5\" id=\"6ce64eef965d25ee9832327e1ab162c5\"><span data-lake-id=\"u446e1206\" id=\"u446e1206\">客户端接收资源并断开连接</span></li></ul><p data-lake-id=\"473f17ad317b813df17025dfd41fa183\" id=\"473f17ad317b813df17025dfd41fa183\"><br></p><p data-lake-id=\"0d297145011a36bddcd3571159090501\" id=\"0d297145011a36bddcd3571159090501\"><span data-lake-id=\"u61261188\" id=\"u61261188\">开启Keep-Alive的</span><strong><span data-lake-id=\"u9c3620ca\" id=\"u9c3620ca\">优点：</span></strong></p><ul list=\"u9baa3b25\"><li fid=\"u3ae485ce\" data-lake-id=\"4efdde620ed1cdf4edd9177f5240a5dd\" id=\"4efdde620ed1cdf4edd9177f5240a5dd\"><span data-lake-id=\"u5553fd60\" id=\"u5553fd60\">较少的CPU和内存的使⽤（由于同时打开的连接的减少了）；</span></li><li fid=\"u3ae485ce\" data-lake-id=\"8b3256cc3f8b2dafac70d83fe2a7d393\" id=\"8b3256cc3f8b2dafac70d83fe2a7d393\"><span data-lake-id=\"ua7108611\" id=\"ua7108611\">允许请求和应答的HTTP管线化； </span></li><li fid=\"u3ae485ce\" data-lake-id=\"a92614745de8bc55a955c7707fa8866f\" id=\"a92614745de8bc55a955c7707fa8866f\"><span data-lake-id=\"u39008f32\" id=\"u39008f32\">降低拥塞控制 （TCP连接减少了）； </span></li><li fid=\"u3ae485ce\" data-lake-id=\"3600c671fcacd349a8967bfb1acd59c7\" id=\"3600c671fcacd349a8967bfb1acd59c7\"><span data-lake-id=\"ue326784d\" id=\"ue326784d\">减少了后续请求的延迟（⽆需再进⾏握⼿）； </span></li><li fid=\"u3ae485ce\" data-lake-id=\"22fd4b838f939a459ca649d956adbe6f\" id=\"22fd4b838f939a459ca649d956adbe6f\"><span data-lake-id=\"u99334cbf\" id=\"u99334cbf\">报告错误⽆需关闭TCP连；</span></li></ul><p data-lake-id=\"6b6e4f2707f4a38b65222fd32c04dad6\" id=\"6b6e4f2707f4a38b65222fd32c04dad6\"><br></p><p data-lake-id=\"572896642c7da9524cdc0738b9c90f01\" id=\"572896642c7da9524cdc0738b9c90f01\"><span data-lake-id=\"ua39ce6e2\" id=\"ua39ce6e2\">开启Keep-Alive的</span><strong><span data-lake-id=\"u97e40a58\" id=\"u97e40a58\">缺点</span></strong><span data-lake-id=\"u300df830\" id=\"u300df830\">：</span></p><ul list=\"u9bcc12d3\"><li fid=\"u16230768\" data-lake-id=\"bce25e628b722795dd69d601f041ea6e\" id=\"bce25e628b722795dd69d601f041ea6e\"><span data-lake-id=\"ucd654f33\" id=\"ucd654f33\">长时间的Tcp连接容易导致系统资源无效占用，浪费系统资源。</span></li></ul><h3 data-lake-id=\"uduTN\" id=\"uduTN\"><span data-lake-id=\"u51ab426e\" id=\"u51ab426e\">13. 页面有多张图片，HTTP是怎样的加载表现？</span></h3><ul list=\"ub3e60c6c\"><li fid=\"u3012f888\" data-lake-id=\"1c82f26be05157c55aaeaae931ea5753\" id=\"1c82f26be05157c55aaeaae931ea5753\"><span data-lake-id=\"u54248726\" id=\"u54248726\">在</span><code data-lake-id=\"ua7fe440c\" id=\"ua7fe440c\"><span data-lake-id=\"ubbc2d82e\" id=\"ubbc2d82e\">HTTP 1</span></code><span data-lake-id=\"uc17f2e43\" id=\"uc17f2e43\">下，浏览器对一个域名下最大TCP连接数为6，所以会请求多次。可以用</span><strong><span data-lake-id=\"u8b4c3a1f\" id=\"u8b4c3a1f\">多域名部署</span></strong><span data-lake-id=\"uc036279d\" id=\"uc036279d\">解决。这样可以提高同时请求的数目，加快页面图片的获取速度。</span></li><li fid=\"u3012f888\" data-lake-id=\"e7784ee46e925142ae056a0b6044395e\" id=\"e7784ee46e925142ae056a0b6044395e\"><span data-lake-id=\"u91e3c3d0\" id=\"u91e3c3d0\">在</span><code data-lake-id=\"ua1ffe4d0\" id=\"ua1ffe4d0\"><span data-lake-id=\"u6508a90c\" id=\"u6508a90c\">HTTP 2</span></code><span data-lake-id=\"u2fa53257\" id=\"u2fa53257\">下，可以一瞬间加载出来很多资源，因为，HTTP2支持多路复用，可以在一个TCP连接中发送多个HTTP请求。</span></li></ul><h3 data-lake-id=\"mXq9J\" id=\"mXq9J\"><span data-lake-id=\"ueba8aac4\" id=\"ueba8aac4\">14. HTTP2的头部压缩算法是怎样的？</span></h3><p data-lake-id=\"a1a45efff3ff91c8f73b0a4a6c87a261\" id=\"a1a45efff3ff91c8f73b0a4a6c87a261\"><span data-lake-id=\"ue56150bd\" id=\"ue56150bd\">HTTP2的头部压缩是HPACK算法。在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。</span></p><p data-lake-id=\"cb260632d3c237513cf97025fbfa1854\" id=\"cb260632d3c237513cf97025fbfa1854\"><br></p><p data-lake-id=\"b0daee309464165ffedfa25c5af6a3e8\" id=\"b0daee309464165ffedfa25c5af6a3e8\"><span data-lake-id=\"u2292c418\" id=\"u2292c418\">具体来说:</span></p><ul list=\"ub0e9324d\"><li fid=\"ub6d7f294\" data-lake-id=\"5c1a2b64b1b7e4b92fe1e3d6fd54a822\" id=\"5c1a2b64b1b7e4b92fe1e3d6fd54a822\"><span data-lake-id=\"u755f12f8\" id=\"u755f12f8\">在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；</span></li><li fid=\"ub6d7f294\" data-lake-id=\"777a6e42113076eef8019a8dfb892816\" id=\"777a6e42113076eef8019a8dfb892816\"><span data-lake-id=\"uef072009\" id=\"uef072009\">首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新；</span></li><li fid=\"ub6d7f294\" data-lake-id=\"f8bfe51b1e70a5e269f5b21e0d0d333c\" id=\"f8bfe51b1e70a5e269f5b21e0d0d333c\"><span data-lake-id=\"u2182cb34\" id=\"u2182cb34\">每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。</span></li></ul><p data-lake-id=\"e4916122350d3010a66b202c5ad051da\" id=\"e4916122350d3010a66b202c5ad051da\"><br></p><p data-lake-id=\"921d2c71065df265c01319c9e851225e\" id=\"921d2c71065df265c01319c9e851225e\"><span data-lake-id=\"ud7b6e9f3\" id=\"ud7b6e9f3\">例如下图中的两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。</span></p><p data-lake-id=\"d39695f7e520c72a1ff491a99836f99e\" id=\"d39695f7e520c72a1ff491a99836f99e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1604070508591-32d79893-7e98-40c8-b779-ffb6da42cd1b.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A506%2C%22height%22%3A423%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A506%2C%22originHeight%22%3A423%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232f3530%22%2C%22id%22%3A%22s7psk%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"UYMTj\" id=\"UYMTj\"><span data-lake-id=\"u3f0233b0\" id=\"u3f0233b0\">15. </span><span data-lake-id=\"u4dae4195\" id=\"u4dae4195\">HTTP请求报文的是什么样的？</span></h3><p data-lake-id=\"98a68c3fee216c7f038d77ba1b4b5965\" id=\"98a68c3fee216c7f038d77ba1b4b5965\"><span data-lake-id=\"ue3883cd2\" id=\"ue3883cd2\">请求报⽂有4部分组成: </span></p><ul list=\"ua32bd3a0\"><li fid=\"u00666366\" data-lake-id=\"b62f197c134f600bee36c778254b59f0\" id=\"b62f197c134f600bee36c778254b59f0\"><span data-lake-id=\"u2966a54d\" id=\"u2966a54d\">请求⾏ </span></li><li fid=\"u00666366\" data-lake-id=\"86cd3c6b6a2a7b145d25eaeac8f442a1\" id=\"86cd3c6b6a2a7b145d25eaeac8f442a1\"><span data-lake-id=\"u6ff97267\" id=\"u6ff97267\">请求头部 </span></li><li fid=\"u00666366\" data-lake-id=\"8a3845cfcfc38d93e60127f77a01bce4\" id=\"8a3845cfcfc38d93e60127f77a01bce4\"><span data-lake-id=\"u8081ac90\" id=\"u8081ac90\">空⾏</span></li><li fid=\"u00666366\" data-lake-id=\"05f27a77436ec01321533e8c9777e061\" id=\"05f27a77436ec01321533e8c9777e061\"><span data-lake-id=\"uc84f4ca3\" id=\"uc84f4ca3\">请求体 </span></li></ul><p data-lake-id=\"3bbcede2b762ef9e3ff391e403008962\" id=\"3bbcede2b762ef9e3ff391e403008962\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615907508156-a82d09e4-00bf-4dc7-a3a3-1ae75481754e.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A676%2C%22height%22%3A241%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A229136%2C%22originWidth%22%3A1352%2C%22originHeight%22%3A482%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E7%A9%BA%E6%A0%BC%20%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%20%E6%8D%A2%E8%A1%8C%E7%AC%A6%20%E7%A9%BA%E6%A0%BC%20%E5%8A%9E%E8%AE%AE%E7%89%88%E6%9C%AC%20%E5%9B%9E%E8%BD%A6%E7%AC%A6%20%E8%AF%B7%E6%B1%82%E8%A1%8C%20URL%20%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5%E5%90%8D%20%E5%9B%9E%E8%BD%A6%E7%AC%A6%20%E6%8D%A2%E8%A1%8C%E7%AC%A6%20%E5%80%BC%20%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8%20%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5%E5%90%8D%20%E5%80%BC%20%E5%9B%9E%E8%BD%A6%E7%AC%A6%20%E6%8D%A2%E8%A1%8C%E7%AC%A6%20%E5%9B%9E%E8%BD%A6%E7%AC%A6%20%E6%8D%A2%E8%A1%8C%E7%AC%A6%20%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A579.4633%2C%22y%22%3A47.1874%2C%22width%22%3A68.52589999999998%2C%22height%22%3A38.94653000000001%2C%22text%22%3A%22%E7%A9%BA%E6%A0%BC%22%7D%2C%7B%22x%22%3A79.355576%2C%22y%22%3A47.20541%2C%22width%22%3A149.226654%2C%22height%22%3A40.43118%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95%22%7D%2C%7B%22x%22%3A1046.5742%2C%22y%22%3A47.7885%2C%22width%22%3A108.91049999999996%2C%22height%22%3A37.637106%2C%22text%22%3A%22%E6%8D%A2%E8%A1%8C%E7%AC%A6%22%7D%2C%7B%22x%22%3A274.21106%2C%22y%22%3A47.877243%2C%22width%22%3A68.64062000000001%2C%22height%22%3A38.288787000000006%2C%22text%22%3A%22%E7%A9%BA%E6%A0%BC%22%7D%2C%7B%22x%22%3A698.8378%2C%22y%22%3A48.008766%2C%22width%22%3A141.87109999999996%2C%22height%22%3A36.616318%2C%22text%22%3A%22%E5%8A%9E%E8%AE%AE%E7%89%88%E6%9C%AC%22%7D%2C%7B%22x%22%3A893.1069%2C%22y%22%3A48.076702%2C%22width%22%3A109.56489999999997%2C%22height%22%3A36.613842000000005%2C%22text%22%3A%22%E5%9B%9E%E8%BD%A6%E7%AC%A6%22%7D%2C%7B%22x%22%3A1196.3253%2C%22y%22%3A50.37274%2C%22width%22%3A107.1599000000001%2C%22height%22%3A35.161319999999996%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E8%A1%8C%22%7D%2C%7B%22x%22%3A431.50208%2C%22y%22%3A51.076824%2C%22width%22%3A56.803920000000005%2C%22height%22%3A31.082155999999998%2C%22text%22%3A%22URL%22%7D%2C%7B%22x%22%3A82.13595%2C%22y%22%3A116.067894%2C%22width%22%3A180.03215%2C%22height%22%3A43.36275600000002%2C%22text%22%3A%22%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5%E5%90%8D%22%7D%2C%7B%22x%22%3A617.73376%2C%22y%22%3A119.65761%2C%22width%22%3A106.38459%2C%22height%22%3A38.01523%2C%22text%22%3A%22%E5%9B%9E%E8%BD%A6%E7%AC%A6%22%7D%2C%7B%22x%22%3A768.0211%2C%22y%22%3A119.91095%2C%22width%22%3A108.4908999999999%2C%22height%22%3A37.703199999999995%2C%22text%22%3A%22%E6%8D%A2%E8%A1%8C%E7%AC%A6%22%7D%2C%7B%22x%22%3A461.46112%2C%22y%22%3A120.16233%2C%22width%22%3A38.424440000000004%2C%22height%22%3A37.67547999999999%2C%22text%22%3A%22%E5%80%BC%22%7D%2C%7B%22x%22%3A955.4003%2C%22y%22%3A190.09915%2C%22width%22%3A148.4737%2C%22height%22%3A41.247449999999986%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%83%A8%22%7D%2C%7B%22x%22%3A80.80173%2C%22y%22%3A261.41922%2C%22width%22%3A179.93010999999996%2C%22height%22%3A39.890840000000026%2C%22text%22%3A%22%E5%A4%B4%E9%83%A8%E5%AD%97%E6%AE%B5%E5%90%8D%22%7D%2C%7B%22x%22%3A459.73694%2C%22y%22%3A262.15305%2C%22width%22%3A38.86559999999997%2C%22height%22%3A38.86559999999997%2C%22text%22%3A%22%E5%80%BC%22%7D%2C%7B%22x%22%3A617.432%2C%22y%22%3A263.41632%2C%22width%22%3A108.56903999999997%2C%22height%22%3A37.15244000000001%2C%22text%22%3A%22%E5%9B%9E%E8%BD%A6%E7%AC%A6%22%7D%2C%7B%22x%22%3A770.3464%2C%22y%22%3A264.68378%2C%22width%22%3A106.33926999999994%2C%22height%22%3A35.28548999999998%2C%22text%22%3A%22%E6%8D%A2%E8%A1%8C%E7%AC%A6%22%7D%2C%7B%22x%22%3A73.09028%2C%22y%22%3A333.6029%2C%22width%22%3A109.50764999999998%2C%22height%22%3A37.1379%2C%22text%22%3A%22%E5%9B%9E%E8%BD%A6%E7%AC%A6%22%7D%2C%7B%22x%22%3A229.03879%2C%22y%22%3A334.74%2C%22width%22%3A107.13225999999997%2C%22height%22%3A39.49763999999999%2C%22text%22%3A%22%E6%8D%A2%E8%A1%8C%E7%AC%A6%22%7D%2C%7B%22x%22%3A922.1109%2C%22y%22%3A406.08496%2C%22width%22%3A143.28830000000005%2C%22height%22%3A36.848209999999995%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23dedede%22%2C%22id%22%3A%22IiTAs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"cfcf35fe1c75bedb1f9d6d73e9cd7fc5\" id=\"cfcf35fe1c75bedb1f9d6d73e9cd7fc5\"><strong><span data-lake-id=\"u4a7b1c84\" id=\"u4a7b1c84\">其中：</span></strong></p><p data-lake-id=\"509498b0d4f236e3c22c312ad5dca9e9\" id=\"509498b0d4f236e3c22c312ad5dca9e9\"><span data-lake-id=\"u74cd7c6a\" id=\"u74cd7c6a\">（1）请求⾏包括：请求⽅法字段、URL字段、HTTP协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。 </span></p><p data-lake-id=\"31ec16883b362b6cffaa79c3ff840ba5\" id=\"31ec16883b362b6cffaa79c3ff840ba5\"><span data-lake-id=\"ua97ce4da\" id=\"ua97ce4da\">（2）请求头部:请求头部由关键字/值对组成，每⾏⼀对，关键字和值⽤英⽂冒号“:”分隔  </span></p><ul list=\"ucbc12f9b\"><li fid=\"u800ecdc0\" data-lake-id=\"7f7f5d5db2440745a3bf411cc4b9388e\" id=\"7f7f5d5db2440745a3bf411cc4b9388e\"><span data-lake-id=\"uf6bf6e21\" id=\"uf6bf6e21\">User-Agent：产⽣请求的浏览器类型。 </span></li><li fid=\"u800ecdc0\" data-lake-id=\"703371637cde9c557af99478ca5c333d\" id=\"703371637cde9c557af99478ca5c333d\"><span data-lake-id=\"uc498d98d\" id=\"uc498d98d\">Accept：客户端可识别的内容类型列表。 </span></li><li fid=\"u800ecdc0\" data-lake-id=\"6099c73d71906b397b4bb987496ee7dc\" id=\"6099c73d71906b397b4bb987496ee7dc\"><span data-lake-id=\"u9e0a5f4c\" id=\"u9e0a5f4c\">Host：请求的主机名，允许多个域名同处⼀个IP地址，即虚拟主机。 </span></li></ul><p data-lake-id=\"7527252e8f4e79a1ae087857948ff003\" id=\"7527252e8f4e79a1ae087857948ff003\"><span data-lake-id=\"ue60d7cbc\" id=\"ue60d7cbc\">（3）请求体: post put等请求携带的数据 </span></p><p data-lake-id=\"5789a1849fa5ae7b460bd52e527d13e3\" id=\"5789a1849fa5ae7b460bd52e527d13e3\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615907573585-6651540d-9dee-4b33-a97f-dee1b31f231c.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A692%2C%22height%22%3A397%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A899482%2C%22originWidth%22%3A1384%2C%22originHeight%22%3A794%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22Request%20%E8%AF%B7%E6%B1%82%E8%A1%8C%20Raw%20Params%20Headers%20Hex%20%E8%AF%B7%E6%B1%9E%E5%A4%B4%20PoSThebndex.phpHTTP.1%20Host%3A123.206.87.240%3A8002%20sAgentMozw%20Accepttexthtlapplicationhlxlc%20AcceptLAnguagE%3Azh%20Accept-Encodlingrgzip.deflate%20Referer%3Ahttp%3A%2F23.206.87.240%3A8002web%20Content-Type%3Aapplicationx-www-for-urlencoded%20Content-Length%3A22%20Connection%3Aclose%20Upgrade-lnsecure-Requests%3A1%20%E8%AF%B7%E6%B1%82%E6%AD%A3%E6%96%87%20flag-abc%26submit-Submit%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A50.28904%2C%22y%22%3A32.19525%2C%22width%22%3A143.67164%2C%22height%22%3A34.88322599999999%2C%22text%22%3A%22Request%22%7D%2C%7B%22x%22%3A653.2039%2C%22y%22%3A96.921326%2C%22width%22%3A105.19119999999998%2C%22height%22%3A40.169494000000014%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E8%A1%8C%22%7D%2C%7B%22x%22%3A70.894295%2C%22y%22%3A113.604935%2C%22width%22%3A65.883035%2C%22height%22%3A28.820094999999995%2C%22text%22%3A%22Raw%22%7D%2C%7B%22x%22%3A175.50851%2C%22y%22%3A114.37454%2C%22width%22%3A102.18671%2C%22height%22%3A28.95639%2C%22text%22%3A%22Params%22%7D%2C%7B%22x%22%3A322.97906%2C%22y%22%3A116.090645%2C%22width%22%3A111.42919999999998%2C%22height%22%3A27.092524999999995%2C%22text%22%3A%22Headers%22%7D%2C%7B%22x%22%3A478.85397%2C%22y%22%3A116.77168%2C%22width%22%3A55.27712999999994%2C%22height%22%3A25.239149999999995%2C%22text%22%3A%22Hex%22%7D%2C%7B%22x%22%3A1018.44183%2C%22y%22%3A154.2779%2C%22width%22%3A97.02386999999999%2C%22height%22%3A36.09727000000001%2C%22text%22%3A%22%E8%AF%B7%E6%B1%9E%E5%A4%B4%22%7D%2C%7B%22x%22%3A25.370884%2C%22y%22%3A174.667%2C%22width%22%3A427.324946%2C%22height%22%3A37.01606000000001%2C%22text%22%3A%22PoSThebndex.phpHTTP.1%22%7D%2C%7B%22x%22%3A30.113743%2C%22y%22%3A221.78082%2C%22width%22%3A352.720177%2C%22height%22%3A32.590180000000004%2C%22text%22%3A%22Host%3A123.206.87.240%3A8002%22%7D%2C%7B%22x%22%3A32.717648%2C%22y%22%3A265.39044%2C%22width%22%3A1228.629852%2C%22height%22%3A31.98624000000001%2C%22text%22%3A%22sAgentMozw%22%7D%2C%7B%22x%22%3A29.75919%2C%22y%22%3A309.08954%2C%22width%22%3A900.47721%2C%22height%22%3A33.39501999999999%2C%22text%22%3A%22Accepttexthtlapplicationhlxlc%22%7D%2C%7B%22x%22%3A29.805914%2C%22y%22%3A353.42752%2C%22width%22%3A1098.618686%2C%22height%22%3A36.27389999999997%2C%22text%22%3A%22AcceptLAnguagE%3Azh%22%7D%2C%7B%22x%22%3A30.10097%2C%22y%22%3A395.126%2C%22width%22%3A400.09096%2C%22height%22%3A33.05120000000005%2C%22text%22%3A%22Accept-Encodlingrgzip.deflate%22%7D%2C%7B%22x%22%3A24.9481%2C%22y%22%3A438.8441%2C%22width%22%3A564.3347%2C%22height%22%3A30.838299999999947%2C%22text%22%3A%22Referer%3Ahttp%3A%2F23.206.87.240%3A8002web%22%7D%2C%7B%22x%22%3A27.279455%2C%22y%22%3A484.8587%2C%22width%22%3A678.931785%2C%22height%22%3A28.274999999999977%2C%22text%22%3A%22Content-Type%3Aapplicationx-www-for-urlencoded%22%7D%2C%7B%22x%22%3A29.505945%2C%22y%22%3A529.59064%2C%22width%22%3A248.80463500000002%2C%22height%22%3A27.02995999999996%2C%22text%22%3A%22Content-Length%3A22%22%7D%2C%7B%22x%22%3A30.201183%2C%22y%22%3A572.37006%2C%22width%22%3A231.97011699999996%2C%22height%22%3A26.659179999999992%2C%22text%22%3A%22Connection%3Aclose%22%7D%2C%7B%22x%22%3A32.10733%2C%22y%22%3A614.00397%2C%22width%22%3A397.83759000000003%2C%22height%22%3A32.32623000000001%2C%22text%22%3A%22Upgrade-lnsecure-Requests%3A1%22%7D%2C%7B%22x%22%3A507.6736%2C%22y%22%3A699.6111%2C%22width%22%3A137.60819999999995%2C%22height%22%3A39.79295000000002%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E6%AD%A3%E6%96%87%22%7D%2C%7B%22x%22%3A25.387878%2C%22y%22%3A702.03436%2C%22width%22%3A325.254022%2C%22height%22%3A27.80078000000003%2C%22text%22%3A%22flag-abc%26submit-Submit%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22dIoHf%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"2TkiA\" id=\"2TkiA\"><span data-lake-id=\"u3b13ce8b\" id=\"u3b13ce8b\">16. </span><span data-lake-id=\"ucbdeebe2\" id=\"ucbdeebe2\">HTTP响应报文的是什么样的？</span></h3><p data-lake-id=\"53f9a78be4286b1dc332cd583d56632f\" id=\"53f9a78be4286b1dc332cd583d56632f\"><span data-lake-id=\"uf7eac7e0\" id=\"uf7eac7e0\">请求报⽂有4部分组成: </span></p><ul list=\"ub334a895\"><li fid=\"ucfd9fae9\" data-lake-id=\"5356793d71973969adcd4fed17b469da\" id=\"5356793d71973969adcd4fed17b469da\"><span data-lake-id=\"ucc06256a\" id=\"ucc06256a\">响应⾏ </span></li><li fid=\"ucfd9fae9\" data-lake-id=\"cff30091b8e9020d427a21dccb4dcb43\" id=\"cff30091b8e9020d427a21dccb4dcb43\"><span data-lake-id=\"u649428e4\" id=\"u649428e4\">响应头 </span></li><li fid=\"ucfd9fae9\" data-lake-id=\"f36ad13158d8e69c18a950e899c103e2\" id=\"f36ad13158d8e69c18a950e899c103e2\"><span data-lake-id=\"udc1f55aa\" id=\"udc1f55aa\">空⾏</span></li><li fid=\"ucfd9fae9\" data-lake-id=\"da1bb709b68394e2040751324d2c5a9b\" id=\"da1bb709b68394e2040751324d2c5a9b\"><span data-lake-id=\"uaeff70ac\" id=\"uaeff70ac\">响应体 </span></li></ul><p data-lake-id=\"cf44a1c75f85e36815de77c184f372d0\" id=\"cf44a1c75f85e36815de77c184f372d0\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615907658281-b3a51c98-db27-45be-9b0c-fb2c7665b015.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A690%2C%22height%22%3A372%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A442788%2C%22originWidth%22%3A1380%2C%22originHeight%22%3A744%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E7%8A%B6%E6%80%81%E7%A0%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E7%9F%AD%E8%AF%AD%20%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC%20%E7%8A%B6%E6%80%81%E7%A0%81%20%E5%93%8D%E5%BA%94%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5%20HTTP%2F1.1%20200%20OK%20Date%3ATue10Jul201206%3A50%3A15GMT%20Content-Length%3A362%20Content-Type%3Atext%2Fhtml%20chtm1%3E%20%E4%B8%BB%E4%BD%93%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A551.8508%2C%22y%22%3A48.734856%2C%22width%22%3A334.53779999999995%2C%22height%22%3A48.106624000000004%2C%22text%22%3A%22%E7%8A%B6%E6%80%81%E7%A0%81%E7%9A%84%E5%8E%9F%E5%9B%A0%E7%9F%AD%E8%AF%AD%22%7D%2C%7B%22x%22%3A62.848083%2C%22y%22%3A95.929306%2C%22width%22%3A164.135987%2C%22height%22%3A43.76568399999999%2C%22text%22%3A%22%E5%8D%8F%E8%AE%AE%E7%89%88%E6%9C%AC%22%7D%2C%7B%22x%22%3A336.42154%2C%22y%22%3A98.32488%2C%22width%22%3A124.47487999999998%2C%22height%22%3A43.562920000000005%2C%22text%22%3A%22%E7%8A%B6%E6%80%81%E7%A0%81%22%7D%2C%7B%22x%22%3A927.23126%2C%22y%22%3A160.22287%2C%22width%22%3A255.1431399999999%2C%22height%22%3A51.76639%2C%22text%22%3A%22%E5%93%8D%E5%BA%94%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5%22%7D%2C%7B%22x%22%3A53.828125%2C%22y%22%3A204.34479%2C%22width%22%3A202.99874499999999%2C%22height%22%3A36.21291000000002%2C%22text%22%3A%22HTTP%2F1.1%22%7D%2C%7B%22x%22%3A300.17184%2C%22y%22%3A204.39029%2C%22width%22%3A83.37516000000005%2C%22height%22%3A35.71924000000001%2C%22text%22%3A%22200%22%7D%2C%7B%22x%22%3A430.49222%2C%22y%22%3A205.17719%2C%22width%22%3A63.52138000000002%2C%22height%22%3A33.43523999999999%2C%22text%22%3A%22OK%22%7D%2C%7B%22x%22%3A56.544807%2C%22y%22%3A283.35873%2C%22width%22%3A913.147493%2C%22height%22%3A35.73349000000002%2C%22text%22%3A%22Date%3ATue10Jul201206%3A50%3A15GMT%22%7D%2C%7B%22x%22%3A56.3049%2C%22y%22%3A331.83572%2C%22width%22%3A497.21866%2C%22height%22%3A41.21448000000004%2C%22text%22%3A%22Content-Length%3A362%22%7D%2C%7B%22x%22%3A56.372334%2C%22y%22%3A388.2501%2C%22width%22%3A598.880766%2C%22height%22%3A33.71508%2C%22text%22%3A%22Content-Type%3Atext%2Fhtml%22%7D%2C%7B%22x%22%3A58.295532%2C%22y%22%3A528.3126%2C%22width%22%3A152.32066799999998%2C%22height%22%3A34.11310000000003%2C%22text%22%3A%22chtm1%3E%22%7D%2C%7B%22x%22%3A649.88873%2C%22y%22%3A674.1461%2C%22width%22%3A77.62420999999995%2C%22height%22%3A41.56939999999997%2C%22text%22%3A%22%E4%B8%BB%E4%BD%93%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22id%22%3A%22cXRtO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ul list=\"uc0c438f4\"><li fid=\"ub84b4175\" data-lake-id=\"9266aadf3615ceba7b79d0bb11c45d26\" id=\"9266aadf3615ceba7b79d0bb11c45d26\"><span data-lake-id=\"u4f7362d5\" id=\"u4f7362d5\">响应⾏：由网络协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。 </span></li><li fid=\"ub84b4175\" data-lake-id=\"e1f3170522a2dfe34929b3431041957a\" id=\"e1f3170522a2dfe34929b3431041957a\"><span data-lake-id=\"ufdcda903\" id=\"ufdcda903\">响应头：响应部⾸组成 </span></li><li fid=\"ub84b4175\" data-lake-id=\"5ab9345b46bdfb1014550a653346bc9a\" id=\"5ab9345b46bdfb1014550a653346bc9a\"><span data-lake-id=\"u0f548ac1\" id=\"u0f548ac1\">响应体：服务器响应的数据 </span></li></ul><h3 data-lake-id=\"Weopr\" id=\"Weopr\"><span data-lake-id=\"u7f55c1d7\" id=\"u7f55c1d7\">17. HTTP协议的优点和缺点</span></h3><p data-lake-id=\"754155f7043d043f8f946d9eb656b809\" id=\"754155f7043d043f8f946d9eb656b809\"><span data-lake-id=\"u45b4e39f\" id=\"u45b4e39f\">HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。</span></p><p data-lake-id=\"b6f88c6020ecd7b95afc2e72e7009fda\" id=\"b6f88c6020ecd7b95afc2e72e7009fda\"><br></p><p data-lake-id=\"a11d2d24bcdde9420db6f4e9225819b5\" id=\"a11d2d24bcdde9420db6f4e9225819b5\"><span data-lake-id=\"u6700bd2c\" id=\"u6700bd2c\">HTTP协议具有以下</span><strong><span data-lake-id=\"uad78804f\" id=\"uad78804f\">优点</span></strong><span data-lake-id=\"u872c03ac\" id=\"u872c03ac\">：</span></p><ul list=\"uaa276d3e\"><li fid=\"ua57e03b9\" data-lake-id=\"87d98498977a8eb313bfded73e496e93\" id=\"87d98498977a8eb313bfded73e496e93\"><span data-lake-id=\"u23566a4c\" id=\"u23566a4c\">支持客户端/服务器模式</span></li><li fid=\"ua57e03b9\" data-lake-id=\"cf194f155c7ee016ebb46c86a695dbfd\" id=\"cf194f155c7ee016ebb46c86a695dbfd\"><strong><span data-lake-id=\"u9162f2f5\" id=\"u9162f2f5\">简单快速</span></strong><span data-lake-id=\"u7bd99335\" id=\"u7bd99335\">：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</span></li><li fid=\"ua57e03b9\" data-lake-id=\"b53fdda99eebb0a5c88a8e416b8d9dc1\" id=\"b53fdda99eebb0a5c88a8e416b8d9dc1\"><strong><span data-lake-id=\"ub04d2f6d\" id=\"ub04d2f6d\">无连接</span></strong><span data-lake-id=\"ud0d680ee\" id=\"ud0d680ee\">：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。</span></li><li fid=\"ua57e03b9\" data-lake-id=\"5eb057ebaf7974c4409e57fdda3f5ede\" id=\"5eb057ebaf7974c4409e57fdda3f5ede\"><strong><span data-lake-id=\"u01c62a17\" id=\"u01c62a17\">无状态</span></strong><span data-lake-id=\"u9a10794c\" id=\"u9a10794c\">：HTTP 协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。</span></li><li fid=\"ua57e03b9\" data-lake-id=\"d23e02a90345126803b4e9bb02de221b\" id=\"d23e02a90345126803b4e9bb02de221b\"><strong><span data-lake-id=\"u1dd7436d\" id=\"u1dd7436d\">灵活</span></strong><span data-lake-id=\"u0a8f3375\" id=\"u0a8f3375\">：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</span></li></ul><p data-lake-id=\"9caa07f8cdbce4ec8409d2ab070de9e8\" id=\"9caa07f8cdbce4ec8409d2ab070de9e8\"><br></p><p data-lake-id=\"869b0959ab483b64548923ca028a1932\" id=\"869b0959ab483b64548923ca028a1932\"><span data-lake-id=\"u8c9db09e\" id=\"u8c9db09e\">HTTP协议具有以下</span><strong><span data-lake-id=\"u52a33234\" id=\"u52a33234\">缺点</span></strong><span data-lake-id=\"u7beef3e8\" id=\"u7beef3e8\">：</span></p><ul list=\"uf76753cd\"><li fid=\"ubc890793\" data-lake-id=\"9fd84193dca1ea33593862659ec1008a\" id=\"9fd84193dca1ea33593862659ec1008a\"><strong><span data-lake-id=\"ua24817d3\" id=\"ua24817d3\">无状态：</span></strong><span data-lake-id=\"u77a94656\" id=\"u77a94656\">HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。</span></li><li fid=\"ubc890793\" data-lake-id=\"d53bfe79cccec43fa59188f157f721d8\" id=\"d53bfe79cccec43fa59188f157f721d8\"><strong><span data-lake-id=\"u9aa95278\" id=\"u9aa95278\">明文传输：</span></strong><span data-lake-id=\"u9ade08c5\" id=\"u9ade08c5\">协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。</span></li><li fid=\"ubc890793\" data-lake-id=\"119c2ac96f9d0b980264dd1a294fdc61\" id=\"119c2ac96f9d0b980264dd1a294fdc61\"><strong><span data-lake-id=\"u9159e72f\" id=\"u9159e72f\">不安全</span></strong></li></ul><p data-lake-id=\"b1173260c9cd5947492e1861454f0646\" id=\"b1173260c9cd5947492e1861454f0646\"><span data-lake-id=\"u8880427b\" id=\"u8880427b\">（1）通信使用明文（不加密），内容可能会被窃听；</span></p><p data-lake-id=\"2b605349729e4521ae1cbfad97bee769\" id=\"2b605349729e4521ae1cbfad97bee769\"><span data-lake-id=\"u83e866c1\" id=\"u83e866c1\">（2）不验证通信方的身份，因此有可能遭遇伪装；</span></p><p data-lake-id=\"2751a23216d37f51f0e2e1a474afaa5f\" id=\"2751a23216d37f51f0e2e1a474afaa5f\"><span data-lake-id=\"ub8d0dd38\" id=\"ub8d0dd38\">（3）无法证明报文的完整性，所以有可能已遭篡改；</span></p><h3 data-lake-id=\"AQkUG\" id=\"AQkUG\"><span data-lake-id=\"uf43f43e6\" id=\"uf43f43e6\">18. 说一下HTTP 3.0</span></h3><p data-lake-id=\"96b53b2c3f045cd59f4123b648e7f5bc\" id=\"96b53b2c3f045cd59f4123b648e7f5bc\"><span data-lake-id=\"u14fff0fe\" id=\"u14fff0fe\">HTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。</span></p><p data-lake-id=\"216a49c6e9b0d6a913b2f289a20d1cc0\" id=\"216a49c6e9b0d6a913b2f289a20d1cc0\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fwebp%2F1500604%2F1604068246276-9b0f553d-3c6e-43a3-8185-8565f9fa1fb4.webp%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A511%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1142%2C%22originHeight%22%3A729%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fefefa%22%2C%22id%22%3A%22kMmbs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ol list=\"u923496e1\"><li fid=\"u260fa8a9\" data-lake-id=\"8d8c5efdb951b40dcf5a44f748a9e45a\" id=\"8d8c5efdb951b40dcf5a44f748a9e45a\"><span data-lake-id=\"ua74509bc\" id=\"ua74509bc\">流量控制、传输可靠性功能：QUIC在UDP的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些TCP中的特性。</span></li><li fid=\"u260fa8a9\" data-lake-id=\"669447f7dd6f898e1f360284fabd9d59\" id=\"669447f7dd6f898e1f360284fabd9d59\"><span data-lake-id=\"u8579ba85\" id=\"u8579ba85\">集成TLS加密功能：目前QUIC使用TLS1.3，减少了握手所花费的RTT数。</span></li><li fid=\"u260fa8a9\" data-lake-id=\"2e90179fdf3e255efe5b58d043675fc3\" id=\"2e90179fdf3e255efe5b58d043675fc3\"><span data-lake-id=\"u0ca47f15\" id=\"u0ca47f15\">多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了TCP的队头阻塞问题。</span></li></ol><p data-lake-id=\"3a1185147ca02b2165d2e92ac250206d\" id=\"3a1185147ca02b2165d2e92ac250206d\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fwebp%2F1500604%2F1604068246276-5d0a5de2-00db-425e-8b21-0cc4bbb54b24.webp%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A186%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1142%2C%22originHeight%22%3A266%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fbeac9%22%2C%22id%22%3A%22mphvQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ol list=\"uffa6e6ab\" start=\"4\"><li fid=\"ue5079aba\" data-lake-id=\"f0a22dfb6958b0b208c9025c556ba190\" id=\"f0a22dfb6958b0b208c9025c556ba190\"><span data-lake-id=\"ud332a17a\" id=\"ud332a17a\">快速握手：由于基于UDP，可以实现使用0 ~ 1个RTT来建立连接。</span></li></ol><h3 data-lake-id=\"bfZxM\" id=\"bfZxM\"><span data-lake-id=\"u1fe37bca\" id=\"u1fe37bca\">19. HTTP协议的性能怎么样 </span></h3><p data-lake-id=\"fbfa05bac8b1727ed832f8e7caf06d8c\" id=\"fbfa05bac8b1727ed832f8e7caf06d8c\"><span data-lake-id=\"u1c93d30f\" id=\"u1c93d30f\">HTTP 协议是基于 TCP/IP，并且使用了</span><strong><span data-lake-id=\"u4b9171fc\" id=\"u4b9171fc\">请求-应答</span></strong><span data-lake-id=\"ub6cb26e5\" id=\"ub6cb26e5\">的通信模式，所以性能的关键就在这两点里。</span></p><ul list=\"u8632931e\"><li fid=\"ud6577a8c\" data-lake-id=\"d85158c1c7266b6b4d0e9b2405283a61\" id=\"d85158c1c7266b6b4d0e9b2405283a61\"><strong><span data-lake-id=\"uaa004ef8\" id=\"uaa004ef8\">长连接</span></strong></li></ul><p data-lake-id=\"9607df686d6f2feae4dbc32589148d0f\" id=\"9607df686d6f2feae4dbc32589148d0f\"><span data-lake-id=\"u6da71c11\" id=\"u6da71c11\">HTTP协议有两种连接模式，一种是持续连接，一种非持续连接。</span></p><p data-lake-id=\"b326806f4eb2713df1a9e2972170dbad\" id=\"b326806f4eb2713df1a9e2972170dbad\"><span data-lake-id=\"uf620ad4a\" id=\"uf620ad4a\">（1）非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。</span></p><p data-lake-id=\"dc8463229ba33b7316dfbcae8dde1892\" id=\"dc8463229ba33b7316dfbcae8dde1892\"><span data-lake-id=\"u0c5ab84e\" id=\"u0c5ab84e\">（2）持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。</span></p><p data-lake-id=\"7c131de93c168b9e21f6ed85a8fa20f0\" id=\"7c131de93c168b9e21f6ed85a8fa20f0\"><br></p><p data-lake-id=\"19e25a096dd3d36513e88bfd32984b1e\" id=\"19e25a096dd3d36513e88bfd32984b1e\"><span data-lake-id=\"u747d4da3\" id=\"u747d4da3\">对于不同版本的采用不同的连接方式：</span></p><ul list=\"uc7bcbf22\"><li fid=\"u1b569cfa\" data-lake-id=\"26842ee8593ea904dd36e8c0b5879d6b\" id=\"26842ee8593ea904dd36e8c0b5879d6b\"><span data-lake-id=\"u941864ab\" id=\"u941864ab\">在HTTP/1.0 每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无畏的 TCP 连接建立和断开，增加了通信开销。该版本</span><span data-lake-id=\"ub4a1b960\" id=\"ub4a1b960\">使用的非持续的连接，但是可以在请求时，加上 Connection: keep-a live 来要求服务器不要关闭 TCP 连接。</span></li><li fid=\"u1b569cfa\" data-lake-id=\"142b4db9cd020a6ce53fea91758778b6\" id=\"142b4db9cd020a6ce53fea91758778b6\"><span data-lake-id=\"u4250aca8\" id=\"u4250aca8\">在HTTP/1.1 提出了</span><strong><span data-lake-id=\"u806b8dc2\" id=\"u806b8dc2\">长连接</span></strong><span data-lake-id=\"ue45bfe02\" id=\"ue45bfe02\">的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。该版本及以后版本</span><span data-lake-id=\"u6f9a1dcc\" id=\"u6f9a1dcc\">默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持同时建立 6 个持久连接。</span></li></ul><p data-lake-id=\"82db1ab4c3d72b66a65ea958b5e58048\" id=\"82db1ab4c3d72b66a65ea958b5e58048\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1604065902281-b98a486c-5442-4d0b-b58d-00aab296ce1a.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A616%2C%22height%22%3A472%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A616%2C%22originHeight%22%3A472%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f6f4f3%22%2C%22id%22%3A%22DQOjt%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ul list=\"u29d09866\"><li fid=\"u1b6c0463\" data-lake-id=\"10f096a4577cc2125fdb1c45d58b27ad\" id=\"10f096a4577cc2125fdb1c45d58b27ad\"><strong><span data-lake-id=\"u1009ad14\" id=\"u1009ad14\">管道网络传输</span></strong></li></ul><p data-lake-id=\"52fad92d6e406a3b85cd48ccc4152ec8\" id=\"52fad92d6e406a3b85cd48ccc4152ec8\"><span data-lake-id=\"uecb274c3\" id=\"uecb274c3\">HTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。</span></p><p data-lake-id=\"f41db1494f243ad08578d466b561c02f\" id=\"f41db1494f243ad08578d466b561c02f\"><br></p><p data-lake-id=\"ed4c0e175035aed18759583797ffec3d\" id=\"ed4c0e175035aed18759583797ffec3d\"><span data-lake-id=\"u61c003b5\" id=\"u61c003b5\">管道（pipeline）网络传输是指：可以在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但是服务器还是按照顺序回应请求。如果前面的回应特别慢，后面就会有许多请求排队等着。这称为队头堵塞。</span></p><ul list=\"ua7bd3788\"><li fid=\"u900d2655\" data-lake-id=\"70597392c81fc371e7579caaa12783b8\" id=\"70597392c81fc371e7579caaa12783b8\"><strong><span data-lake-id=\"ua68eb49e\" id=\"ua68eb49e\">队头堵塞</span></strong></li></ul><p data-lake-id=\"e48a2871ae7028da63ac3fbc2548aad7\" id=\"e48a2871ae7028da63ac3fbc2548aad7\"><span data-lake-id=\"u05321ffd\" id=\"u05321ffd\">HTTP 传输的报文必须是一发一收，但是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是HTTP队头阻塞问题。</span></p><p data-lake-id=\"5f268487b7ca34b1436a8e1554923c98\" id=\"5f268487b7ca34b1436a8e1554923c98\"><br></p><p data-lake-id=\"b302df26370f6f5003ccc2838dc44794\" id=\"b302df26370f6f5003ccc2838dc44794\"><strong><span data-lake-id=\"ua28093ad\" id=\"ua28093ad\">队头阻塞的解决方案：</span></strong></p><p data-lake-id=\"30597aeffcc9b9a6b7adf6fae9e62e6a\" id=\"30597aeffcc9b9a6b7adf6fae9e62e6a\"><span data-lake-id=\"ub64d5819\" id=\"ub64d5819\">（1）并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。</span></p><p data-lake-id=\"acd9bdc9a44b70d5f156416164ace0b1\" id=\"acd9bdc9a44b70d5f156416164ace0b1\"><span data-lake-id=\"u46dd33bf\" id=\"u46dd33bf\">（2）域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。</span></p><h3 data-lake-id=\"DsKOh\" id=\"DsKOh\"><span data-lake-id=\"ud58455a6\" id=\"ud58455a6\">20. URL有哪些组成部分</span></h3><p data-lake-id=\"82490eab9a97987b7cc9856d632d6145\" id=\"82490eab9a97987b7cc9856d632d6145\"><span data-lake-id=\"u3d743702\" id=\"u3d743702\" class=\"lake-fontsize-1515\">以下面的URL为例：</span><strong><span data-lake-id=\"u2afb37a8\" id=\"u2afb37a8\" class=\"lake-fontsize-1515\">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</span></strong><span data-lake-id=\"u23ec117e\" id=\"u23ec117e\" class=\"lake-fontsize-1515\"><br /><br /></span><span data-lake-id=\"ub33708ac\" id=\"ub33708ac\" class=\"lake-fontsize-1515\">从上面的URL可以看出，一个完整的URL包括以下几部分：</span></p><ul list=\"ua10acf84\"><li fid=\"u593748d6\" data-lake-id=\"c09647d63dbf411f8650d7c385484520\" id=\"c09647d63dbf411f8650d7c385484520\"><strong><span data-lake-id=\"uc4df28b7\" id=\"uc4df28b7\" class=\"lake-fontsize-1515\">协议部分</span></strong><span data-lake-id=\"ud704fe6f\" id=\"ud704fe6f\" class=\"lake-fontsize-1515\">：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在&quot;HTTP&quot;后面的“//”为分隔符；</span></li><li fid=\"u593748d6\" data-lake-id=\"d501fc3246b16dafa034b1b08efc5f85\" id=\"d501fc3246b16dafa034b1b08efc5f85\"><strong><span data-lake-id=\"u74adce2e\" id=\"u74adce2e\" class=\"lake-fontsize-1515\">域名部分</span></strong><span data-lake-id=\"uf67b41c8\" id=\"uf67b41c8\" class=\"lake-fontsize-1515\">：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用</span></li><li fid=\"u593748d6\" data-lake-id=\"221153174bb5c4a82cf571336620ea42\" id=\"221153174bb5c4a82cf571336620ea42\"><strong><span data-lake-id=\"u6be4541c\" id=\"u6be4541c\" class=\"lake-fontsize-1515\">端口部分</span></strong><span data-lake-id=\"u92b80478\" id=\"u92b80478\" class=\"lake-fontsize-1515\">：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口（</span><span data-lake-id=\"u92dbbe7e\" id=\"u92dbbe7e\">HTTP协议默认端口是80，HTTPS协议默认端口是443</span><span data-lake-id=\"ub6eade20\" id=\"ub6eade20\" class=\"lake-fontsize-1515\">）；</span></li><li fid=\"u593748d6\" data-lake-id=\"eb7cc5738a88abd7dba5b9948217ec5e\" id=\"eb7cc5738a88abd7dba5b9948217ec5e\"><strong><span data-lake-id=\"u8ae4c03b\" id=\"u8ae4c03b\" class=\"lake-fontsize-1515\">虚拟目录部分</span></strong><span data-lake-id=\"u9f2f8b0f\" id=\"u9f2f8b0f\" class=\"lake-fontsize-1515\">：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”；</span></li><li fid=\"u593748d6\" data-lake-id=\"f5bb9fa7690af4d0c23f52ccd2998dcd\" id=\"f5bb9fa7690af4d0c23f52ccd2998dcd\"><strong><span data-lake-id=\"u6ad5aa47\" id=\"u6ad5aa47\" class=\"lake-fontsize-1515\">文件名部分</span></strong><span data-lake-id=\"u9018598d\" id=\"u9018598d\" class=\"lake-fontsize-1515\">：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名；</span></li><li fid=\"u593748d6\" data-lake-id=\"4f2c475da633c080f1d3d013bdf7e918\" id=\"4f2c475da633c080f1d3d013bdf7e918\"><strong><span data-lake-id=\"uc18ff12c\" id=\"uc18ff12c\" class=\"lake-fontsize-1515\">锚部分</span></strong><span data-lake-id=\"ud5862a21\" id=\"ud5862a21\" class=\"lake-fontsize-1515\">：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分；</span></li><li fid=\"u593748d6\" data-lake-id=\"f3068696c8c09f181abf108b0417093f\" id=\"f3068696c8c09f181abf108b0417093f\"><strong><span data-lake-id=\"u37896688\" id=\"u37896688\" class=\"lake-fontsize-1515\">参数部分</span></strong><span data-lake-id=\"uf2939398\" id=\"uf2939398\" class=\"lake-fontsize-1515\">：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</span></li></ul><h3 data-lake-id=\"wmZSv\" id=\"wmZSv\"><span data-lake-id=\"u5bb6b5a0\" id=\"u5bb6b5a0\">21. 与缓存相关的HTTP请求头有哪些</span></h3><p data-lake-id=\"ua68b63bd\" id=\"ua68b63bd\"><span data-lake-id=\"u20daa25d\" id=\"u20daa25d\" class=\"lake-fontsize-1515\">强缓存：</span></p><ul list=\"u0bd99394\"><li fid=\"ubc490086\" data-lake-id=\"ud19f7591\" id=\"ud19f7591\"><span data-lake-id=\"udb80dd8c\" id=\"udb80dd8c\" class=\"lake-fontsize-1515\">Expires</span></li><li fid=\"ubc490086\" data-lake-id=\"udf49300c\" id=\"udf49300c\"><span data-lake-id=\"uf8924502\" id=\"uf8924502\" class=\"lake-fontsize-1515\">Cache-Control</span></li></ul><p data-lake-id=\"u5013bda1\" id=\"u5013bda1\"><br></p><p data-lake-id=\"uab83b880\" id=\"uab83b880\"><span data-lake-id=\"u92dbbd10\" id=\"u92dbbd10\" class=\"lake-fontsize-1515\">协商缓存：</span></p><ul list=\"u4d1cc2f0\"><li fid=\"u7aaa20ed\" data-lake-id=\"ucf56c8b7\" id=\"ucf56c8b7\"><span data-lake-id=\"u0bcec8f4\" id=\"u0bcec8f4\">Etag、If-None-Match</span></li><li fid=\"u7aaa20ed\" data-lake-id=\"uac8f0602\" id=\"uac8f0602\"><span data-lake-id=\"u95d0a493\" id=\"u95d0a493\">Last-Modified、If-Modified-Since</span></li></ul><h3 data-lake-id=\"VbEnR\" id=\"VbEnR\"><span data-lake-id=\"u0f203cf7\" id=\"u0f203cf7\">22. 端口号的作用</span></h3><p data-lake-id=\"u841af3c6\" id=\"u841af3c6\"><span data-lake-id=\"ude1b64d9\" id=\"ude1b64d9\" class=\"lake-fontsize-11\" style=\"color: rgb(0, 0, 0)\">一台主机(对应一个IP地址)可以提供很多服务，比如web服务，ftp服务等。如果只有一个IP，就无法区分不同的网络服务，所以采用”IP+端口号”来区分不同的服务。</span></p><h2 data-lake-id=\"vNWJY\" id=\"vNWJY\"><span data-lake-id=\"u4928e8bc\" id=\"u4928e8bc\">二、HTTPS协议</span></h2><h3 data-lake-id=\"hsdwI\" id=\"hsdwI\"><span data-lake-id=\"u9247c901\" id=\"u9247c901\">1. 什么是HTTPS协议？</span></h3><p data-lake-id=\"a6f8afaa7d4b0209fa9e7827b1db6625\" id=\"a6f8afaa7d4b0209fa9e7827b1db6625\"><span data-lake-id=\"u091a8edd\" id=\"u091a8edd\">超文本传输安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。HTTPS的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</span></p><p data-lake-id=\"408e718e2b1d5e1e0f8852ca8652d5a7\" id=\"408e718e2b1d5e1e0f8852ca8652d5a7\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1603965685749-8cc21a1b-4277-42b1-aeed-18978c1cdb95.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1525%2C%22height%22%3A726%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1525%2C%22originHeight%22%3A726%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23d9d9d7%22%2C%22id%22%3A%22SXyLJ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"3e7ea089f2d718ae244b837a4da701a4\" id=\"3e7ea089f2d718ae244b837a4da701a4\"><span data-lake-id=\"u1e92b13b\" id=\"u1e92b13b\">HTTP协议采用</span><strong><span data-lake-id=\"u838882e8\" id=\"u838882e8\">明文传输</span></strong><span data-lake-id=\"u9f1db8b8\" id=\"u9f1db8b8\">信息，存在</span><strong><span data-lake-id=\"u4d439f7c\" id=\"u4d439f7c\">信息窃听</span></strong><span data-lake-id=\"u13663bfd\" id=\"u13663bfd\">、</span><strong><span data-lake-id=\"uabdf644a\" id=\"uabdf644a\">信息篡改</span></strong><span data-lake-id=\"ufef654f6\" id=\"ufef654f6\">和</span><strong><span data-lake-id=\"u6603a5bb\" id=\"u6603a5bb\">信息劫持</span></strong><span data-lake-id=\"u1b80a04d\" id=\"u1b80a04d\">的风险，而协议TLS/SSL具有</span><strong><span data-lake-id=\"u4119d424\" id=\"u4119d424\">身份验证</span></strong><span data-lake-id=\"ucc589669\" id=\"ucc589669\">、</span><strong><span data-lake-id=\"uf123a993\" id=\"uf123a993\">信息加密</span></strong><span data-lake-id=\"u33ef8435\" id=\"u33ef8435\">和</span><strong><span data-lake-id=\"u13a241ff\" id=\"u13a241ff\">完整性校验</span></strong><span data-lake-id=\"u94f8d6ed\" id=\"u94f8d6ed\">的功能，可以避免此类问题发生。</span></p><p data-lake-id=\"4fbd5586a0694e1d9684694721c4e0dc\" id=\"4fbd5586a0694e1d9684694721c4e0dc\"><br></p><p data-lake-id=\"f844de5e653d6659388326973763d296\" id=\"f844de5e653d6659388326973763d296\"><span data-lake-id=\"u7157c776\" id=\"u7157c776\">安全层的主要职责就是</span><strong><span data-lake-id=\"ude84c1c0\" id=\"ude84c1c0\">对发起的HTTP请求的数据进行加密操作</span></strong><span data-lake-id=\"u299a34ea\" id=\"u299a34ea\"> 和 </span><strong><span data-lake-id=\"ud1912abc\" id=\"ud1912abc\">对接收到的HTTP的内容进行解密操作</span></strong><span data-lake-id=\"u80dcfbcd\" id=\"u80dcfbcd\">。</span></p><h3 data-lake-id=\"7EC23\" id=\"7EC23\"><span data-lake-id=\"u01e12d9d\" id=\"u01e12d9d\">2. TLS/SSL的工作原理</span></h3><p data-lake-id=\"bd61528c78f33dd3ed162a4cd525eaab\" id=\"bd61528c78f33dd3ed162a4cd525eaab\"><strong><span data-lake-id=\"ud4469c15\" id=\"ud4469c15\">TLS/SSL</span></strong><span data-lake-id=\"u29d0469b\" id=\"u29d0469b\">全称</span><strong><span data-lake-id=\"ua63f35a5\" id=\"ua63f35a5\">安全传输层协议</span></strong><span data-lake-id=\"u82e54f86\" id=\"u82e54f86\">（Transport Layer Security）, 是介于TCP和HTTP之间的一层安全协议，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。</span></p><p data-lake-id=\"18bba8ae0256b39129ea0f9a8f5ad6f3\" id=\"18bba8ae0256b39129ea0f9a8f5ad6f3\"><br></p><p data-lake-id=\"bf92a6c4a23076201d1bc9338bee13af\" id=\"bf92a6c4a23076201d1bc9338bee13af\"><span data-lake-id=\"u1b30962f\" id=\"u1b30962f\">TLS/SSL的功能实现主要依赖三类基本算法：</span><strong><span data-lake-id=\"uf2ed55e0\" id=\"uf2ed55e0\">散列函数hash</span></strong><span data-lake-id=\"udbc0292f\" id=\"udbc0292f\">、</span><strong><span data-lake-id=\"u9b46872e\" id=\"u9b46872e\">对称加密</span></strong><span data-lake-id=\"u1048e255\" id=\"u1048e255\">、</span><strong><span data-lake-id=\"u15b06353\" id=\"u15b06353\">非对称加密</span></strong><span data-lake-id=\"u9ae3152c\" id=\"u9ae3152c\">。这三类算法的作用如下：</span></p><ul list=\"u7cc4d80d\"><li fid=\"ue8c2d9d1\" data-lake-id=\"a08b2e414579f0c1dbe2ee215b2cc36d\" id=\"a08b2e414579f0c1dbe2ee215b2cc36d\"><span data-lake-id=\"ua1aca0b2\" id=\"ua1aca0b2\">基于散列函数验证信息的完整性</span></li><li fid=\"ue8c2d9d1\" data-lake-id=\"a6b01caccb1fb7d12fc239c7e96fb3e8\" id=\"a6b01caccb1fb7d12fc239c7e96fb3e8\"><span data-lake-id=\"udb6001d6\" id=\"udb6001d6\">对称加密算法采用协商的秘钥对数据加密</span></li><li fid=\"ue8c2d9d1\" data-lake-id=\"8e7bea2ba064cb9c13a4a5f031a85dff\" id=\"8e7bea2ba064cb9c13a4a5f031a85dff\"><span data-lake-id=\"uce5ecc11\" id=\"uce5ecc11\">非对称加密实现身份认证和秘钥协商</span></li></ul><p data-lake-id=\"30d7d978bbf7ff61e484e3cb986b4a5e\" id=\"30d7d978bbf7ff61e484e3cb986b4a5e\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1603965685769-63a91dae-936d-42d3-8571-577cefa11e33.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A553%2C%22height%22%3A282%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A553%2C%22originHeight%22%3A282%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3ecea%22%2C%22id%22%3A%22KLJ2m%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h4 data-lake-id=\"f0Cx4\" id=\"f0Cx4\"><span data-lake-id=\"uae264361\" id=\"uae264361\">（1）散列函数hash</span></h4><p data-lake-id=\"2874a7759f5ae3b174bfb21c8b74a852\" id=\"2874a7759f5ae3b174bfb21c8b74a852\"><span data-lake-id=\"u0851f2ca\" id=\"u0851f2ca\">常见的散列函数有MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果，可以用于防止信息篡改并验证数据的完整性。</span></p><p data-lake-id=\"39fd6bafe92955cc2bc62f5559cdd237\" id=\"39fd6bafe92955cc2bc62f5559cdd237\"><br></p><p data-lake-id=\"8e855ddffd87009a6e79add00b15b056\" id=\"8e855ddffd87009a6e79add00b15b056\"><strong><span data-lake-id=\"ud5e22f4d\" id=\"ud5e22f4d\">特点：</span></strong><span data-lake-id=\"u762a28d9\" id=\"u762a28d9\">在信息传输过程中，散列函数不能三都实现信息防篡改，由于传输是明文传输，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。</span></p><h4 data-lake-id=\"4nkMX\" id=\"4nkMX\"><span data-lake-id=\"uc9e3ad66\" id=\"uc9e3ad66\">（2）对称加密</span></h4><p data-lake-id=\"98d4b231261ebc088034d8ec9ec602c6\" id=\"98d4b231261ebc088034d8ec9ec602c6\"><span data-lake-id=\"uc29a53c1\" id=\"uc29a53c1\">对称加密的方法是，双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。 这就要用到非对称加密的方法。</span></p><p data-lake-id=\"d987e57b5425a22f27ccc6fc36c79744\" id=\"d987e57b5425a22f27ccc6fc36c79744\"><br></p><p data-lake-id=\"915c6259f469e5e278aba71a3a45c859\" id=\"915c6259f469e5e278aba71a3a45c859\"><span data-lake-id=\"uf25ff8a7\" id=\"uf25ff8a7\">常见的对称加密算法有AES-CBC、DES、3DES、AES-GCM等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是一对一。</span></p><p data-lake-id=\"696285784b9cd7b85618036f366afb9b\" id=\"696285784b9cd7b85618036f366afb9b\"><br></p><p data-lake-id=\"0b88384b8b970d45546a04ef117b92d3\" id=\"0b88384b8b970d45546a04ef117b92d3\"><strong><span data-lake-id=\"u76559b24\" id=\"u76559b24\">特点：</span></strong><span data-lake-id=\"ud1f2639f\" id=\"ud1f2639f\">对称加密的优势就是信息传输使用一对一，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和N个客户端通信，需要维持N个密码记录且不能修改密码。</span></p><h4 data-lake-id=\"4QEqs\" id=\"4QEqs\"><span data-lake-id=\"u711bd11b\" id=\"u711bd11b\">（3）非对称加密</span></h4><p data-lake-id=\"143613d3a971ca3a72107d99824e3fa0\" id=\"143613d3a971ca3a72107d99824e3fa0\"><span data-lake-id=\"u77077da3\" id=\"u77077da3\">非对称加密的方法是，我们拥有两个秘钥，一个是公钥，一个是私钥。公钥是公开的，私钥是保密的。用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据，只有对应的私钥才能解密。我们可以将公钥公布出去，任何想和我们通信的客户， 都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。但是非对称加密有一个缺点就是加密的过程很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。</span></p><p data-lake-id=\"e3dda7a52837e2d3047bef1933f88ff1\" id=\"e3dda7a52837e2d3047bef1933f88ff1\"><br></p><p data-lake-id=\"a70a612d9e145686220f11a95a12507a\" id=\"a70a612d9e145686220f11a95a12507a\"><span data-lake-id=\"u55837c95\" id=\"u55837c95\">常见的非对称加密算法有RSA、ECC、DH等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。公钥加密的信息只有私钥可以解开，私钥加密的信息只能公钥解开，因此掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。</span></p><p data-lake-id=\"f5e242afbeffc0fb020148d00b078038\" id=\"f5e242afbeffc0fb020148d00b078038\"><br></p><p data-lake-id=\"f731bfd4e253162473994199d6602693\" id=\"f731bfd4e253162473994199d6602693\"><strong><span data-lake-id=\"u33c45f00\" id=\"u33c45f00\">特点：</span></strong><span data-lake-id=\"u2ebd249c\" id=\"u2ebd249c\">非对称加密的特点就是信息一对多，服务器只需要维持一个私钥就可以和多个客户端进行通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密的速度慢。</span></p><p data-lake-id=\"d2bcd9c38e4c0b1f2302e61c1b4a8f89\" id=\"d2bcd9c38e4c0b1f2302e61c1b4a8f89\"><br></p><p data-lake-id=\"fa8ec72c8056ea27973ca3504938af73\" id=\"fa8ec72c8056ea27973ca3504938af73\"><span data-lake-id=\"ud8855170\" id=\"ud8855170\">综合上述算法特点，TLS/SSL的工作方式就是客户端使用非对称加密与服务器进行通信，实现身份的验证并协商对称加密使用的秘钥。对称加密算法采用协商秘钥对信息以及信息摘要进行加密通信，不同节点之间采用的对称秘钥不同，从而保证信息只能通信双方获取。</span><span data-lake-id=\"u39368ff4\" id=\"u39368ff4\">这样就解决了两个方法各自存在的问题。</span></p><h3 data-lake-id=\"fRLQq\" id=\"fRLQq\"><span data-lake-id=\"u5d71095b\" id=\"u5d71095b\">3. 数字证书是什么？</span></h3><p data-lake-id=\"a745628302c0990138dbf8da2d573b67\" id=\"a745628302c0990138dbf8da2d573b67\"><span data-lake-id=\"u120301c4\" id=\"u120301c4\">现在的方法也不一定是安全的，因为没有办法确定得到的公钥就一定是安全的公钥。可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送的信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而自己还不知道。为了解决这样的问题，可以使用数字证书。</span></p><p data-lake-id=\"u6d13df14\" id=\"u6d13df14\"><br></p><p data-lake-id=\"u3bc6c27a\" id=\"u3bc6c27a\"><span data-lake-id=\"u688d8168\" id=\"u688d8168\">首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的认证中心（简称 CA ）用它的私钥对消息摘要加密，形成签名。最后将原始的信息和签名合在一起，称为数字证书。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash 算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。</span></p><p data-lake-id=\"u7ae40c3d\" id=\"u7ae40c3d\"><br></p><p data-lake-id=\"u1a4658e5\" id=\"u1a4658e5\"><span data-lake-id=\"uf1916fc4\" id=\"uf1916fc4\">这个方法最要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样才能保证数据的安全。</span></p><p data-lake-id=\"4fa3ffb74a29e4d3732b025c8a61d350\" id=\"4fa3ffb74a29e4d3732b025c8a61d350\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1603965685765-ffc9a525-ccad-43f0-bb25-8e17281d68fe.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A972%2C%22height%22%3A692%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A972%2C%22originHeight%22%3A692%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fafafa%22%2C%22id%22%3A%22dkWQq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"owQWT\" id=\"owQWT\"><span data-lake-id=\"uf676e8da\" id=\"uf676e8da\">4. HTTPS通信（握手）过程</span></h3><p data-lake-id=\"a21fc823ed13d5e7e8d235900b8b8835\" id=\"a21fc823ed13d5e7e8d235900b8b8835\"><span data-lake-id=\"u93509855\" id=\"u93509855\">HTTPS的通信过程如下：</span></p><ol list=\"u2d21f4ba\"><li fid=\"u7b34724b\" data-lake-id=\"69529883cda00414f0cf2970b15f932d\" id=\"69529883cda00414f0cf2970b15f932d\"><span data-lake-id=\"u0f0eb87d\" id=\"u0f0eb87d\">客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。</span></li><li fid=\"u7b34724b\" data-lake-id=\"4d6169979a65f339de34b0373e735240\" id=\"4d6169979a65f339de34b0373e735240\"><span data-lake-id=\"u7c7a009d\" id=\"u7c7a009d\">服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。</span></li><li fid=\"u7b34724b\" data-lake-id=\"864052d8e9f258731167a934ae68b9f4\" id=\"864052d8e9f258731167a934ae68b9f4\"><span data-lake-id=\"u370673c5\" id=\"u370673c5\">客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验。</span></li><li fid=\"u7b34724b\" data-lake-id=\"4a008ca9a4f69af2d0b4194d9d54f840\" id=\"4a008ca9a4f69af2d0b4194d9d54f840\"><span data-lake-id=\"u49d751bf\" id=\"u49d751bf\">服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验。</span></li><li fid=\"u7b34724b\" data-lake-id=\"1879699f75ff52c8ce55873ffb053ae8\" id=\"1879699f75ff52c8ce55873ffb053ae8\"><span data-lake-id=\"u00ad09cf\" id=\"u00ad09cf\">客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。</span></li></ol><h3 data-lake-id=\"LWzEh\" id=\"LWzEh\"><span data-lake-id=\"ude523b4b\" id=\"ude523b4b\">5. HTTPS的特点</span></h3><p data-lake-id=\"e357269d2c469a164eb259dab26ef0e9\" id=\"e357269d2c469a164eb259dab26ef0e9\"><span data-lake-id=\"ubb289978\" id=\"ubb289978\">HTTPS的</span><strong><span data-lake-id=\"u304f9899\" id=\"u304f9899\">优点</span></strong><span data-lake-id=\"u3aa0d2e3\" id=\"u3aa0d2e3\">如下：</span></p><ul list=\"u61be13d9\"><li fid=\"u73d06499\" data-lake-id=\"b8dba459b35c4447262f74cf410f8404\" id=\"b8dba459b35c4447262f74cf410f8404\"><span data-lake-id=\"ufd8aea7b\" id=\"ufd8aea7b\">使用HTTPS协议可以认证用户和服务器，确保数据发送到正确的客户端和服务器；</span></li><li fid=\"u73d06499\" data-lake-id=\"72080c6b09bcf019b7321c47f722d5ea\" id=\"72080c6b09bcf019b7321c47f722d5ea\"><span data-lake-id=\"u9c9233aa\" id=\"u9c9233aa\">使用HTTPS协议可以进行加密传输、身份认证，通信更加安全，防止数据在传输过程中被窃取、修改，确保数据安全性；</span></li><li fid=\"u73d06499\" data-lake-id=\"0011b7305bbe21d04dd9cc89f14016cb\" id=\"0011b7305bbe21d04dd9cc89f14016cb\"><span data-lake-id=\"u19aeefea\" id=\"u19aeefea\">HTTPS是现行架构下最安全的解决方案，虽然不是绝对的安全，但是大幅增加了中间人攻击的成本；</span></li></ul><p data-lake-id=\"09d876faf5b1b4bbe18eb6d54f7709c6\" id=\"09d876faf5b1b4bbe18eb6d54f7709c6\"><br></p><p data-lake-id=\"01fcccdeff1c737663722c7fdf2cd562\" id=\"01fcccdeff1c737663722c7fdf2cd562\"><span data-lake-id=\"u008e438a\" id=\"u008e438a\">HTTPS的</span><strong><span data-lake-id=\"uab6d3110\" id=\"uab6d3110\">缺点</span></strong><span data-lake-id=\"u7cf1a846\" id=\"u7cf1a846\">如下：</span></p><ul list=\"ua4c683d4\"><li fid=\"u51aea84c\" data-lake-id=\"5652ea74766ec3f64b9abdbae31120d6\" id=\"5652ea74766ec3f64b9abdbae31120d6\"><span data-lake-id=\"u32309cb8\" id=\"u32309cb8\">HTTPS需要做服务器和客户端双方的加密个解密处理，耗费更多服务器资源，过程复杂；</span></li><li fid=\"u51aea84c\" data-lake-id=\"f4eae24f88a5a824190ae7bd7f9b44ca\" id=\"f4eae24f88a5a824190ae7bd7f9b44ca\"><span data-lake-id=\"ub1b9bfe5\" id=\"ub1b9bfe5\">HTTPS协议握手阶段比较费时，增加页面的加载时间；</span></li><li fid=\"u51aea84c\" data-lake-id=\"89bbab8b4e754d438f16e58899e942bc\" id=\"89bbab8b4e754d438f16e58899e942bc\"><span data-lake-id=\"u2afd3694\" id=\"u2afd3694\">SSL证书是收费的，功能越强大的证书费用越高；</span></li><li fid=\"u51aea84c\" data-lake-id=\"2cbdaed5b2d9dd91ae0c8bc8b3ece518\" id=\"2cbdaed5b2d9dd91ae0c8bc8b3ece518\"><span data-lake-id=\"uc94264f5\" id=\"uc94264f5\">HTTPS连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；</span></li><li fid=\"u51aea84c\" data-lake-id=\"ad2040808abdeb81dffb77f930275e41\" id=\"ad2040808abdeb81dffb77f930275e41\"><span data-lake-id=\"u1827978b\" id=\"u1827978b\">SSL证书需要绑定IP，不能再同一个IP上绑定多个域名。</span></li></ul><h3 data-lake-id=\"UUmat\" id=\"UUmat\"><span data-lake-id=\"u59f13b77\" id=\"u59f13b77\">6. </span><strong><span data-lake-id=\"ue5b51cb6\" id=\"ue5b51cb6\">HTTPS</span></strong><span data-lake-id=\"uf697ac2b\" id=\"uf697ac2b\">是如何保证安全的？ </span></h3><p data-lake-id=\"c40970aa80a04b900a101ac8cc53c93b\" id=\"c40970aa80a04b900a101ac8cc53c93b\"><span data-lake-id=\"u9a61b51f\" id=\"u9a61b51f\">先理解两个概念：</span></p><ul list=\"u3e6c1ba4\"><li fid=\"uf5a01b7f\" data-lake-id=\"730bd837fff786a1aeb05e8210fc936a\" id=\"730bd837fff786a1aeb05e8210fc936a\"><span data-lake-id=\"uddcc5ca4\" id=\"uddcc5ca4\">对称加密：即通信的双⽅都使⽤同⼀个秘钥进⾏加解密，对称加密虽然很简单性能也好，但是⽆法解决⾸次把秘钥发给对⽅的问题，很容易被⿊客拦截秘钥。 </span></li><li fid=\"uf5a01b7f\" data-lake-id=\"ca5fb87c371ba314644b00101f498903\" id=\"ca5fb87c371ba314644b00101f498903\"><span data-lake-id=\"u89901dc0\" id=\"u89901dc0\">⾮对称加密： </span></li></ul><p data-lake-id=\"c863fc956b94887865767c33445e224f\" id=\"c863fc956b94887865767c33445e224f\"><span data-lake-id=\"u66d6990a\" id=\"u66d6990a\">1. 私钥 + 公钥= 密钥对 </span></p><p data-lake-id=\"d1189f55a0bb5c5463fb2b0bfc1fcc4f\" id=\"d1189f55a0bb5c5463fb2b0bfc1fcc4f\"><span data-lake-id=\"u4b31eb8c\" id=\"u4b31eb8c\">2. 即⽤私钥加密的数据,只有对应的公钥才能解密,⽤公钥加密的数据,只有对应的私钥才能解密 </span></p><p data-lake-id=\"bf5fe3f45b3548bbe87ae9b6eb767113\" id=\"bf5fe3f45b3548bbe87ae9b6eb767113\"><span data-lake-id=\"u5cdc157b\" id=\"u5cdc157b\">3. 因为通信双⽅的⼿⾥都有⼀套⾃⼰的密钥对,通信之前双⽅会先把⾃⼰的公钥都先发给对⽅ </span></p><p data-lake-id=\"313f3bfe8b17121364fa873e849c328b\" id=\"313f3bfe8b17121364fa873e849c328b\"><span data-lake-id=\"u0f3c35a4\" id=\"u0f3c35a4\">4. 然后对⽅再拿着这个公钥来加密数据响应给对⽅,等到到了对⽅那⾥,对⽅再⽤⾃⼰的私钥进⾏解密 </span></p><p data-lake-id=\"d60dd29351e30e3f2da369aab3d567f8\" id=\"d60dd29351e30e3f2da369aab3d567f8\"><br></p><p data-lake-id=\"992e55c38fb089a3bec2347cd6f31869\" id=\"992e55c38fb089a3bec2347cd6f31869\"><span data-lake-id=\"u1c684f52\" id=\"u1c684f52\">⾮对称加密虽然安全性更⾼，但是带来的问题就是速度很慢，影响性能。 </span></p><p data-lake-id=\"33f3afeb465e23f69de201e1f32439f7\" id=\"33f3afeb465e23f69de201e1f32439f7\"><br></p><p data-lake-id=\"f4d73642f8cd03d1e1fc0cc753319ec1\" id=\"f4d73642f8cd03d1e1fc0cc753319ec1\"><strong><span data-lake-id=\"u4fc126a7\" id=\"u4fc126a7\">解决⽅案： </span></strong></p><p data-lake-id=\"b38ef38fc6c4276661aa0fc9d10e51dc\" id=\"b38ef38fc6c4276661aa0fc9d10e51dc\"><span data-lake-id=\"ua0b33de5\" id=\"ua0b33de5\">结合两种加密⽅式，将对称加密的密钥使⽤⾮对称加密的公钥进⾏加密，然后发送出去，接收⽅使⽤私钥进⾏解密得到对称加密的密钥，然后双⽅可以使⽤对称加密来进⾏沟通。 </span></p><p data-lake-id=\"4c02e746d5aeb93527d84a9512283269\" id=\"4c02e746d5aeb93527d84a9512283269\"><br></p><p data-lake-id=\"f042879d50d486aafa4be5e4997d4060\" id=\"f042879d50d486aafa4be5e4997d4060\"><span data-lake-id=\"uaee1172e\" id=\"uaee1172e\">此时⼜带来⼀个问题，中间⼈问题： </span></p><p data-lake-id=\"b7d104a64e1e24839ec2e16468c12bc0\" id=\"b7d104a64e1e24839ec2e16468c12bc0\"><span data-lake-id=\"uddf347f1\" id=\"uddf347f1\">如果此时在客户端和服务器之间存在⼀个中间⼈,这个中间⼈只需要把原本双⽅通信互发的公钥,换成⾃⼰的公钥,这样中间⼈就可以轻松解密通信双⽅所发送的所有数据。 </span></p><p data-lake-id=\"988355003a02e305697d1aafedcff460\" id=\"988355003a02e305697d1aafedcff460\"><br></p><p data-lake-id=\"e074e73c549e546976a718d48f14fc57\" id=\"e074e73c549e546976a718d48f14fc57\"><span data-lake-id=\"uc1a67bca\" id=\"uc1a67bca\">所以这个时候需要⼀个安全的第三⽅颁发证书（CA），证明身份的身份，防⽌被中间⼈攻击。 证书中包括：签发者、证书⽤途、使⽤者公钥、使⽤者私钥、使⽤者的HASH算法、证书到期时间等。</span></p><p data-lake-id=\"42601a9271b7e04a80f7f16d02e4987c\" id=\"42601a9271b7e04a80f7f16d02e4987c\"><br></p><p data-lake-id=\"6ddde58b40c06a41c4cef0d1aa8fdb5f\" id=\"6ddde58b40c06a41c4cef0d1aa8fdb5f\"><span data-lake-id=\"ua44916a6\" id=\"ua44916a6\">但是问题来了，如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技术，数字签名。 </span></p><p data-lake-id=\"9a2f91e64a72a0d70b2f70594b44617d\" id=\"9a2f91e64a72a0d70b2f70594b44617d\"><br></p><p data-lake-id=\"bb6a5fe32fa2dce4b316a893d745527e\" id=\"bb6a5fe32fa2dce4b316a893d745527e\"><span data-lake-id=\"ud28fa6aa\" id=\"ud28fa6aa\">数字签名就是⽤CA⾃带的HASH算法对证书的内容进⾏HASH得到⼀个摘要，再⽤CA的私钥加密，最终组成数字签名。当别⼈把他的证书发过来的时候,我再⽤同样的Hash算法,再次⽣成消息摘要，然后⽤CA的公钥对数字签名解密,得到CA创建的消息摘要,两者⼀⽐,就知道中间有没有被⼈篡改了。这个时候就能最⼤程度保证通信的安全了。 </span></p><p data-lake-id=\"u79235714\" id=\"u79235714\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673895268943-5e122232-b352-483f-a4f1-0b2e45cfff76.png%22%2C%22taskId%22%3A%22uc34ce274-d3f2-46ed-8f8a-100add3de62%22%2C%22clientId%22%3A%22ucedecab4-ca2e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u077a2231%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"9zVXv\" id=\"9zVXv\"><span data-lake-id=\"uc26ddc94\" id=\"uc26ddc94\">三、HTTP状态码</span></h2><p data-lake-id=\"db0443042447a0016c83303698fed3d6\" id=\"db0443042447a0016c83303698fed3d6\"><span data-lake-id=\"u669a18c9\" id=\"u669a18c9\">状态码的类别：</span></p><table data-lake-id=\"ZLjRK\" id=\"ZLjRK\" margin=\"true\" class=\"lake-table\" style=\"width: 611px\"><colgroup><col width=\"116\"><col width=\"261\"><col width=\"234\"></colgroup><tbody><tr data-lake-id=\"u7ded6f1b\" id=\"u7ded6f1b\" style=\"height: 33px\"><td data-lake-id=\"u936b68c9\" id=\"u936b68c9\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u1d4b3eae\" id=\"u1d4b3eae\" style=\"text-align: center\"><strong><span data-lake-id=\"uba566ec8\" id=\"uba566ec8\">类别</span></strong></p></td><td data-lake-id=\"u1814fd55\" id=\"u1814fd55\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u9af09cd0\" id=\"u9af09cd0\" style=\"text-align: center\"><strong><span data-lake-id=\"uade6f907\" id=\"uade6f907\">原因</span></strong></p></td><td data-lake-id=\"u5daa1c15\" id=\"u5daa1c15\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u11b05b57\" id=\"u11b05b57\" style=\"text-align: center\"><strong><span data-lake-id=\"u6afb687e\" id=\"u6afb687e\">描述</span></strong></p></td></tr><tr data-lake-id=\"u4d4a81d7\" id=\"u4d4a81d7\" style=\"height: 33px\"><td data-lake-id=\"uf7e5680b\" id=\"uf7e5680b\" style=\"vertical-align: middle\"><p data-lake-id=\"u492931c8\" id=\"u492931c8\" style=\"text-align: center\"><span data-lake-id=\"u3ee7d4c1\" id=\"u3ee7d4c1\">1xx</span></p></td><td data-lake-id=\"u2dbaadc1\" id=\"u2dbaadc1\" style=\"vertical-align: middle\"><p data-lake-id=\"u35bd72e0\" id=\"u35bd72e0\" style=\"text-align: center\"><span data-lake-id=\"u1b0cdb65\" id=\"u1b0cdb65\">Informational(信息性状态码)</span></p></td><td data-lake-id=\"uc7e76e7a\" id=\"uc7e76e7a\" style=\"vertical-align: middle\"><p data-lake-id=\"uf147b0d3\" id=\"uf147b0d3\" style=\"text-align: center\"><span data-lake-id=\"u3f5f75a3\" id=\"u3f5f75a3\">接受的请求正在处理</span></p></td></tr><tr data-lake-id=\"u779ecda6\" id=\"u779ecda6\" style=\"height: 33px\"><td data-lake-id=\"u337b8f10\" id=\"u337b8f10\" style=\"vertical-align: middle\"><p data-lake-id=\"ub344d418\" id=\"ub344d418\" style=\"text-align: center\"><span data-lake-id=\"u99699568\" id=\"u99699568\">2xx</span></p></td><td data-lake-id=\"u2dcbac41\" id=\"u2dcbac41\" style=\"vertical-align: middle\"><p data-lake-id=\"ufd22148c\" id=\"ufd22148c\" style=\"text-align: center\"><span data-lake-id=\"uc78d6b3e\" id=\"uc78d6b3e\">Success(成功状态码)</span></p></td><td data-lake-id=\"uebdea708\" id=\"uebdea708\" style=\"vertical-align: middle\"><p data-lake-id=\"u6235dca9\" id=\"u6235dca9\" style=\"text-align: center\"><span data-lake-id=\"uae3db237\" id=\"uae3db237\">请求正常处理完毕</span></p></td></tr><tr data-lake-id=\"uee7ec28c\" id=\"uee7ec28c\" style=\"height: 33px\"><td data-lake-id=\"u20b2dc0a\" id=\"u20b2dc0a\" style=\"vertical-align: middle\"><p data-lake-id=\"u7eacc57b\" id=\"u7eacc57b\" style=\"text-align: center\"><span data-lake-id=\"ud6e5a2cb\" id=\"ud6e5a2cb\">3xx</span></p></td><td data-lake-id=\"u18d2444c\" id=\"u18d2444c\" style=\"vertical-align: middle\"><p data-lake-id=\"u83d9b6a2\" id=\"u83d9b6a2\" style=\"text-align: center\"><span data-lake-id=\"u51bde66c\" id=\"u51bde66c\">Redirection(重定向状态码)</span></p></td><td data-lake-id=\"u922c2b53\" id=\"u922c2b53\" style=\"vertical-align: middle\"><p data-lake-id=\"u7204e926\" id=\"u7204e926\" style=\"text-align: center\"><span data-lake-id=\"u12a43158\" id=\"u12a43158\">需要进行附加操作一完成请求</span></p></td></tr><tr data-lake-id=\"u55b27204\" id=\"u55b27204\" style=\"height: 33px\"><td data-lake-id=\"u240a8521\" id=\"u240a8521\" style=\"vertical-align: middle\"><p data-lake-id=\"u5bee15a7\" id=\"u5bee15a7\" style=\"text-align: center\"><span data-lake-id=\"u4c958bc2\" id=\"u4c958bc2\">4xx</span></p></td><td data-lake-id=\"ubc94019c\" id=\"ubc94019c\" style=\"vertical-align: middle\"><p data-lake-id=\"u4fec936b\" id=\"u4fec936b\" style=\"text-align: center\"><span data-lake-id=\"u0fd225cd\" id=\"u0fd225cd\">Client Error (客户端错误状态码)</span></p></td><td data-lake-id=\"u8fe79e14\" id=\"u8fe79e14\" style=\"vertical-align: middle\"><p data-lake-id=\"u8fb87b59\" id=\"u8fb87b59\" style=\"text-align: center\"><span data-lake-id=\"u3df87b11\" id=\"u3df87b11\">服务器无法处理请求</span></p></td></tr><tr data-lake-id=\"u1fbb4c1a\" id=\"u1fbb4c1a\" style=\"height: 33px\"><td data-lake-id=\"uc6c54f4c\" id=\"uc6c54f4c\" style=\"vertical-align: middle\"><p data-lake-id=\"u7aaaed6c\" id=\"u7aaaed6c\" style=\"text-align: center\"><span data-lake-id=\"ub829adff\" id=\"ub829adff\">5xx</span></p></td><td data-lake-id=\"u9052e8ad\" id=\"u9052e8ad\" style=\"vertical-align: middle\"><p data-lake-id=\"u428ad361\" id=\"u428ad361\" style=\"text-align: center\"><span data-lake-id=\"u89be15c6\" id=\"u89be15c6\">Server Error(服务器错误状态码)</span></p></td><td data-lake-id=\"uccab406a\" id=\"uccab406a\" style=\"vertical-align: middle\"><p data-lake-id=\"u12b0f284\" id=\"u12b0f284\" style=\"text-align: center\"><span data-lake-id=\"u31d2811d\" id=\"u31d2811d\">服务器处理请求出错</span></p></td></tr></tbody></table><h3 data-lake-id=\"XxfgG\" id=\"XxfgG\"><span data-lake-id=\"u7963b95f\" id=\"u7963b95f\">1. 2XX (Success 成功状态码)</span></h3><p data-lake-id=\"c17b099c16a64ccb01235c5a3084f8b5\" id=\"c17b099c16a64ccb01235c5a3084f8b5\"><span data-lake-id=\"u4699826e\" id=\"u4699826e\">状态码2XX表示请求被正常处理了。</span></p><h4 data-lake-id=\"e4dyB\" id=\"e4dyB\"><span data-lake-id=\"uc7ae3d92\" id=\"uc7ae3d92\">（1）200 OK</span></h4><p data-lake-id=\"98099e507ff2efa447dfea31f1a4c886\" id=\"98099e507ff2efa447dfea31f1a4c886\"><span data-lake-id=\"u7a080381\" id=\"u7a080381\">200 OK表示客户端发来的请求被服务器端正常处理了。</span></p><h4 data-lake-id=\"2dsaR\" id=\"2dsaR\"><span data-lake-id=\"u5012a601\" id=\"u5012a601\">（2）204 No Content</span></h4><p data-lake-id=\"5e9b4072552777e1593b9ed91d045477\" id=\"5e9b4072552777e1593b9ed91d045477\"><span data-lake-id=\"ue19ebfde\" id=\"ue19ebfde\">该状态码表示客户端发送的请求已经在服务器端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分。一般在只需要从客户端往服务器端发送信息，而服务器端不需要往客户端发送内容时使用。</span></p><h4 data-lake-id=\"KgvCH\" id=\"KgvCH\"><span data-lake-id=\"udd4eaa29\" id=\"udd4eaa29\">（3）206 Partial Content</span></h4><p data-lake-id=\"4c06641454cda9dfeeec5623c89b5a0d\" id=\"4c06641454cda9dfeeec5623c89b5a0d\"><span data-lake-id=\"u13a5357d\" id=\"u13a5357d\">该状态码表示客户端进行了范围请求，而服务器端执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</span></p><h3 data-lake-id=\"geiRm\" id=\"geiRm\"><span data-lake-id=\"u236ff972\" id=\"u236ff972\">2. 3XX (Redirection 重定向状态码)</span></h3><p data-lake-id=\"796d325bf898d81d014f24d3fb3ed220\" id=\"796d325bf898d81d014f24d3fb3ed220\"><span data-lake-id=\"uf225a919\" id=\"uf225a919\">3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</span></p><h4 data-lake-id=\"aF2UC\" id=\"aF2UC\"><span data-lake-id=\"u93be4267\" id=\"u93be4267\">（1）301 Moved Permanently</span></h4><p data-lake-id=\"b9c895deba2d48c79254aba451df0c74\" id=\"b9c895deba2d48c79254aba451df0c74\"><strong><span data-lake-id=\"u27cd6689\" id=\"u27cd6689\">永久重定向。</span></strong></p><p data-lake-id=\"92ce9bfa5a08833e20b7e1abbbfa99ad\" id=\"92ce9bfa5a08833e20b7e1abbbfa99ad\"><span data-lake-id=\"uf963a85b\" id=\"uf963a85b\">该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。若用户已经把原来的URI保存为书签，此时会按照 Location 中新的URI重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。</span></p><p data-lake-id=\"u16f02e05\" id=\"u16f02e05\"><br></p><p data-lake-id=\"71de2c19ab09e9756ba6647c824faada\" id=\"71de2c19ab09e9756ba6647c824faada\"><strong><span data-lake-id=\"u96377a5a\" id=\"u96377a5a\">使用场景：</span></strong></p><ul list=\"u27d47e41\"><li fid=\"u9216e47b\" data-lake-id=\"7448421d6baad85a3a4ed00a59b3e272\" id=\"7448421d6baad85a3a4ed00a59b3e272\"><span data-lake-id=\"u3be5a03b\" id=\"u3be5a03b\">当我们想换个域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名。其实也是告诉搜索引擎收录的域名需要对新的域名进行收录。</span></li><li fid=\"u9216e47b\" data-lake-id=\"3547da86e6923654db04ef5fdd0beba5\" id=\"3547da86e6923654db04ef5fdd0beba5\"><span data-lake-id=\"ua9c70f65\" id=\"ua9c70f65\">在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。</span></li></ul><h4 data-lake-id=\"Gusp2\" id=\"Gusp2\"><span data-lake-id=\"ua55d4185\" id=\"ua55d4185\">（2）302 Found</span></h4><p data-lake-id=\"e7b0cd8f8060fd2baa62b5c89301c8a1\" id=\"e7b0cd8f8060fd2baa62b5c89301c8a1\"><strong><span data-lake-id=\"u5c08103b\" id=\"u5c08103b\">临时重定向。</span></strong></p><p data-lake-id=\"4f80b45ed8ebdf2daa565dd9bd09739c\" id=\"4f80b45ed8ebdf2daa565dd9bd09739c\"><span data-lake-id=\"ue41aebae\" id=\"ue41aebae\">该状态码表示请求的资源被分配到了新的 URI，希望用户（本次）能使用新的 URI 访问资源。和 301 Moved Permanently 状态码相似，但是 302 代表的资源不是被永久重定向，只是临时性质的。也就是说已移动的资源对应的 URI 将来还有可能发生改变。若用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。同时，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。</span></p><p data-lake-id=\"e164f9bf038725901182f290b82ec4e3\" id=\"e164f9bf038725901182f290b82ec4e3\"><br></p><p data-lake-id=\"9d8a58fb1086bb67057032b2d1bde1a8\" id=\"9d8a58fb1086bb67057032b2d1bde1a8\"><strong><span data-lake-id=\"u2646da93\" id=\"u2646da93\">使用场景：</span></strong></p><ul list=\"u3e42aa92\"><li fid=\"u2764d617\" data-lake-id=\"6735f1b6a7f995f397e2e11bd2e8acf7\" id=\"6735f1b6a7f995f397e2e11bd2e8acf7\"><span data-lake-id=\"u3c73dc15\" id=\"u3c73dc15\">当我们在做活动时，登录到首页自动重定向，进入活动页面。</span></li><li fid=\"u2764d617\" data-lake-id=\"69cb5b2ea55aa6d6b1302fe9bee80b04\" id=\"69cb5b2ea55aa6d6b1302fe9bee80b04\"><span data-lake-id=\"u84705a3d\" id=\"u84705a3d\">未登陆的用户访问用户中心重定向到登录页面。</span></li><li fid=\"u2764d617\" data-lake-id=\"2abb708862d03b2a413b362f2b42ecc1\" id=\"2abb708862d03b2a413b362f2b42ecc1\"><span data-lake-id=\"u63e75596\" id=\"u63e75596\">访问404页面重新定向到首页。</span></li></ul><h4 data-lake-id=\"UhM7i\" id=\"UhM7i\"><span data-lake-id=\"uba10d930\" id=\"uba10d930\">（3）303 See Other</span></h4><p data-lake-id=\"89c525b0039175565c69bf6d3bdbb5ae\" id=\"89c525b0039175565c69bf6d3bdbb5ae\"><span data-lake-id=\"u3a4a1b4e\" id=\"u3a4a1b4e\">该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。</span></p><p data-lake-id=\"e501e43bd28768bc376c78fce013c5fe\" id=\"e501e43bd28768bc376c78fce013c5fe\"><span data-lake-id=\"u52fb9641\" id=\"u52fb9641\">303 状态码和 302 Found 状态码有着相似的功能，但是 303 状态码明确表示客户端应当采用 GET 方法获取资源。</span></p><p data-lake-id=\"6bbdc13e5fd5a19c70d22b0f89d5cbd7\" id=\"6bbdc13e5fd5a19c70d22b0f89d5cbd7\"><br></p><p data-lake-id=\"2eb5bbad421b43eca0144a9d50e34ba4\" id=\"2eb5bbad421b43eca0144a9d50e34ba4\"><span data-lake-id=\"u3a2475e8\" id=\"u3a2475e8\">303 状态码通常作为 PUT 或 POST 操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面，比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。</span></p><p data-lake-id=\"c3410f0a50e450d640a86fc2a22ebb17\" id=\"c3410f0a50e450d640a86fc2a22ebb17\"><br></p><p data-lake-id=\"d17ece9c76feecebe87562ff91b9063f\" id=\"d17ece9c76feecebe87562ff91b9063f\"><span data-lake-id=\"u6f865f1f\" id=\"u6f865f1f\">注意：</span></p><ul list=\"u6ca233a9\"><li fid=\"ube6ec527\" data-lake-id=\"93aefe54d779f2a407ee4c1ac772d42e\" id=\"93aefe54d779f2a407ee4c1ac772d42e\"><span data-lake-id=\"u855de279\" id=\"u855de279\">当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成GET，并删除请求报文内的主体，之后请求会再次自动发送。</span></li><li fid=\"ube6ec527\" data-lake-id=\"d1f61f364c7f26bd83f433fc9e54acae\" id=\"d1f61f364c7f26bd83f433fc9e54acae\"><span data-lake-id=\"ubc35e8b3\" id=\"ubc35e8b3\">301、302 标准是禁止将 POST 方法变成 GET方法的，但实际大家都会这么做。</span></li></ul><h4 data-lake-id=\"pcYoq\" id=\"pcYoq\"><span data-lake-id=\"u91609fe1\" id=\"u91609fe1\">（4）304 Not Modified</span></h4><p data-lake-id=\"c9189ae13d4a1a745fecaacddc8bd67a\" id=\"c9189ae13d4a1a745fecaacddc8bd67a\"><strong><span data-lake-id=\"u9ba81597\" id=\"u9ba81597\">浏览器缓存相关。</span></strong></p><p data-lake-id=\"a9d238a7f43d9a42f7bd0cb738d12dfb\" id=\"a9d238a7f43d9a42f7bd0cb738d12dfb\"><span data-lake-id=\"uff8152c9\" id=\"uff8152c9\">该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。</span></p><p data-lake-id=\"d8fad79b96780125189d1828c66a9b97\" id=\"d8fad79b96780125189d1828c66a9b97\"><br></p><p data-lake-id=\"2bebd85d41671c0d9c01c310f6c756a2\" id=\"2bebd85d41671c0d9c01c310f6c756a2\"><span data-lake-id=\"u9a243acc\" id=\"u9a243acc\">带条件的请求（Http 条件请求）：使用 Get方法 请求，请求报文中包含（</span><code data-lake-id=\"u13c0dc0b\" id=\"u13c0dc0b\"><span data-lake-id=\"ued379782\" id=\"ued379782\">if-match</span></code><span data-lake-id=\"u25207373\" id=\"u25207373\">、</span><code data-lake-id=\"ubc86e276\" id=\"ubc86e276\"><span data-lake-id=\"ud594a7c5\" id=\"ud594a7c5\">if-none-match</span></code><span data-lake-id=\"u43989d6c\" id=\"u43989d6c\">、</span><code data-lake-id=\"ue3120453\" id=\"ue3120453\"><span data-lake-id=\"u1f10f46c\" id=\"u1f10f46c\">if-modified-since</span></code><span data-lake-id=\"u1e0ff6d6\" id=\"u1e0ff6d6\">、</span><code data-lake-id=\"u78570250\" id=\"u78570250\"><span data-lake-id=\"uc094238a\" id=\"uc094238a\">if-unmodified-since</span></code><span data-lake-id=\"ua0d3800b\" id=\"ua0d3800b\">、</span><code data-lake-id=\"ud35f9d4d\" id=\"ud35f9d4d\"><span data-lake-id=\"ub501a6d3\" id=\"ub501a6d3\">if-range</span></code><span data-lake-id=\"u80e52e46\" id=\"u80e52e46\">）中任意首部。</span></p><p data-lake-id=\"fedf18bca70abcb5d81d8e2ef3981239\" id=\"fedf18bca70abcb5d81d8e2ef3981239\"><br></p><p data-lake-id=\"fce8f7cae5810ed5cfe75111e35186ac\" id=\"fce8f7cae5810ed5cfe75111e35186ac\"><span data-lake-id=\"u2832e561\" id=\"u2832e561\">状态码304并不是一种错误，而是告诉客户端有缓存，直接使用缓存中的数据。返回页面的只有头部信息，是没有内容部分的，这样在一定程度上提高了网页的性能。</span></p><h4 data-lake-id=\"0xF8Q\" id=\"0xF8Q\"><span data-lake-id=\"u5cbf18eb\" id=\"u5cbf18eb\">（5）307 Temporary Redirect</span></h4><p data-lake-id=\"616a39d02199ae5ce60996f9fc2ee183\" id=\"616a39d02199ae5ce60996f9fc2ee183\"><strong><span data-lake-id=\"u74ace27e\" id=\"u74ace27e\">307表示临时重定向。</span></strong><span data-lake-id=\"ud11ee4d3\" id=\"ud11ee4d3\">该状态码与 302 Found 有着相同含义，尽管 302 标准禁止 POST 变成 GET，但是实际使用时还是这样做了。</span></p><p data-lake-id=\"2fdfe0cfc5485314c6bc8aef5955068f\" id=\"2fdfe0cfc5485314c6bc8aef5955068f\"><br></p><p data-lake-id=\"4cca8a8bf9c669baecc44fbca589551f\" id=\"4cca8a8bf9c669baecc44fbca589551f\"><span data-lake-id=\"u9d04315e\" id=\"u9d04315e\">307 会遵守浏览器标准，</span><strong><span data-lake-id=\"ud6082839\" id=\"ud6082839\">不会从 POST 变成 GET</span></strong><span data-lake-id=\"u714ce14b\" id=\"u714ce14b\">。但是对于处理请求的行为时，不同浏览器还是会出现不同的情况。规范要求浏览器继续向 Location 的地址 POST 内容。规范要求浏览器继续向 Location 的地址 POST 内容。</span></p><h3 data-lake-id=\"Pa9Ee\" id=\"Pa9Ee\"><span data-lake-id=\"u5d0da39d\" id=\"u5d0da39d\">3. 4XX (Client Error 客户端错误状态码)</span></h3><p data-lake-id=\"c81ee39b1a83cbf315290d9b9d083412\" id=\"c81ee39b1a83cbf315290d9b9d083412\"><span data-lake-id=\"u40637557\" id=\"u40637557\">4XX 的响应结果表明客户端是发生错误的原因所在。</span></p><h4 data-lake-id=\"lr2MR\" id=\"lr2MR\"><span data-lake-id=\"uce4729d0\" id=\"uce4729d0\">（1）400 Bad Request</span></h4><p data-lake-id=\"7e1beddb64b13c26e26b91fea378159d\" id=\"7e1beddb64b13c26e26b91fea378159d\"><span data-lake-id=\"ucb27f414\" id=\"ucb27f414\">该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。</span></p><h4 data-lake-id=\"GCIzV\" id=\"GCIzV\"><span data-lake-id=\"u990eef7d\" id=\"u990eef7d\">（2）401 Unauthorized</span></h4><p data-lake-id=\"aea039183ba474ee9f9203d22a6b050c\" id=\"aea039183ba474ee9f9203d22a6b050c\"><span data-lake-id=\"u80330981\" id=\"u80330981\">该状态码表示发送的请求需要有通过 HTTP 认证(BASIC 认证、DIGEST 认证)的认证信息。若之前已进行过一次请求，则表示用户认证失败</span></p><p data-lake-id=\"0ab489697b3d91239a230aa5053e583e\" id=\"0ab489697b3d91239a230aa5053e583e\"><br></p><p data-lake-id=\"c24221ba179b7c9700144fc1dfd0a2f5\" id=\"c24221ba179b7c9700144fc1dfd0a2f5\"><span data-lake-id=\"u295e6bc2\" id=\"u295e6bc2\">返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询(challenge)用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。</span></p><p data-lake-id=\"faab5a4ae2777e36c97889c236e5aa83\" id=\"faab5a4ae2777e36c97889c236e5aa83\"><br></p><p data-lake-id=\"dd641119318431a41b7f8b851dde887d\" id=\"dd641119318431a41b7f8b851dde887d\"><span data-lake-id=\"u40f60e1d\" id=\"u40f60e1d\">以下情况会出现401：</span></p><ul list=\"ue6a8e512\"><li fid=\"u0a20749c\" data-lake-id=\"822e8fd1e036c06076c0afc0851cef61\" id=\"822e8fd1e036c06076c0afc0851cef61\"><span data-lake-id=\"u6914c88e\" id=\"u6914c88e\">401.1 - 登录失败。</span></li><li fid=\"u0a20749c\" data-lake-id=\"856959fecdcbe32ec9b515615c13196f\" id=\"856959fecdcbe32ec9b515615c13196f\"><span data-lake-id=\"u61984a5e\" id=\"u61984a5e\">401.2 - 服务器配置导致登录失败。</span></li><li fid=\"u0a20749c\" data-lake-id=\"34b63532aa2b4f4632d97412d5d8ab87\" id=\"34b63532aa2b4f4632d97412d5d8ab87\"><span data-lake-id=\"ufc04e653\" id=\"ufc04e653\">401.3 - 由于 ACL 对资源的限制而未获得授权。</span></li><li fid=\"u0a20749c\" data-lake-id=\"8c952fb0c154e9c0f494d2c6e948b9ef\" id=\"8c952fb0c154e9c0f494d2c6e948b9ef\"><span data-lake-id=\"u9bfb57a0\" id=\"u9bfb57a0\">401.4 - 筛选器授权失败。</span></li><li fid=\"u0a20749c\" data-lake-id=\"cac50923a3cffc6d6494ef44aa24766a\" id=\"cac50923a3cffc6d6494ef44aa24766a\"><span data-lake-id=\"ubf8b20f7\" id=\"ubf8b20f7\">401.5 - ISAPI/CGI 应用程序授权失败。</span></li><li fid=\"u0a20749c\" data-lake-id=\"cb872e404b33a1d9a7a0c2e1ef24ac60\" id=\"cb872e404b33a1d9a7a0c2e1ef24ac60\"><span data-lake-id=\"u279a717e\" id=\"u279a717e\">401.7 - 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</span></li></ul><h4 data-lake-id=\"irVzs\" id=\"irVzs\"><span data-lake-id=\"ua0c66406\" id=\"ua0c66406\">（3）403 Forbidden</span></h4><p data-lake-id=\"6ab2d04442eea1040a91d28c32cadb08\" id=\"6ab2d04442eea1040a91d28c32cadb08\"><span data-lake-id=\"u76b784b5\" id=\"u76b784b5\">该状态码表明请求资源的访问被服务器拒绝了，服务器端没有必要给出详细理由，但是可以在响应报文实体的主体中进行说明。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关。</span></p><p data-lake-id=\"cd2fc8a3cc2c616fc50b711fac78493f\" id=\"cd2fc8a3cc2c616fc50b711fac78493f\"><br></p><p data-lake-id=\"cf4eac05ab9a6c283adf580a8773019a\" id=\"cf4eac05ab9a6c283adf580a8773019a\"><span data-lake-id=\"ua1e1435e\" id=\"ua1e1435e\">IIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：</span></p><ul list=\"u0b9aafe5\"><li fid=\"uf37fda37\" data-lake-id=\"8f00345cf1c2e1b3a7a2b0e037795751\" id=\"8f00345cf1c2e1b3a7a2b0e037795751\"><span data-lake-id=\"ucd14231d\" id=\"ucd14231d\">403.1 - 执行访问被禁止。</span></li><li fid=\"uf37fda37\" data-lake-id=\"7d4c2088a53814b87238739c0d1a9d9f\" id=\"7d4c2088a53814b87238739c0d1a9d9f\"><span data-lake-id=\"ub46af1a8\" id=\"ub46af1a8\">403.2 - 读访问被禁止。</span></li><li fid=\"uf37fda37\" data-lake-id=\"770e1ec994f8c515a7fab0e59d7e5037\" id=\"770e1ec994f8c515a7fab0e59d7e5037\"><span data-lake-id=\"u18d7eff4\" id=\"u18d7eff4\">403.3 - 写访问被禁止。</span></li><li fid=\"uf37fda37\" data-lake-id=\"fe3e254b1dcdad7b1e33837062baba2a\" id=\"fe3e254b1dcdad7b1e33837062baba2a\"><span data-lake-id=\"u34100008\" id=\"u34100008\">403.4 - 要求 SSL。</span></li><li fid=\"uf37fda37\" data-lake-id=\"3c09281bb203566ce6e4c26d4af20765\" id=\"3c09281bb203566ce6e4c26d4af20765\"><span data-lake-id=\"u0ad4a2fd\" id=\"u0ad4a2fd\">403.5 - 要求 SSL 128。</span></li><li fid=\"uf37fda37\" data-lake-id=\"f79f7d1415f6e0ec4db014d3b006956c\" id=\"f79f7d1415f6e0ec4db014d3b006956c\"><span data-lake-id=\"u1e0d9531\" id=\"u1e0d9531\">403.6 - IP 地址被拒绝。</span></li><li fid=\"uf37fda37\" data-lake-id=\"bd59aad7bb2f0d4b7443a7834262867e\" id=\"bd59aad7bb2f0d4b7443a7834262867e\"><span data-lake-id=\"u62ca2792\" id=\"u62ca2792\">403.7 - 要求客户端证书。</span></li><li fid=\"uf37fda37\" data-lake-id=\"a4c7823b4c8fe9d95f8359d4b43ef8c1\" id=\"a4c7823b4c8fe9d95f8359d4b43ef8c1\"><span data-lake-id=\"ub877da18\" id=\"ub877da18\">403.8 - 站点访问被拒绝。</span></li><li fid=\"uf37fda37\" data-lake-id=\"d8df84f354110a2f7342154b0b4e8b36\" id=\"d8df84f354110a2f7342154b0b4e8b36\"><span data-lake-id=\"u893b8bfc\" id=\"u893b8bfc\">403.9 - 用户数过多。</span></li><li fid=\"uf37fda37\" data-lake-id=\"3298918dfc0e484098a39c133e6f1542\" id=\"3298918dfc0e484098a39c133e6f1542\"><span data-lake-id=\"u1b9be686\" id=\"u1b9be686\">403.10 - 配置无效。</span></li><li fid=\"uf37fda37\" data-lake-id=\"8cf814cf0abd7da28474d5b5d5468f4b\" id=\"8cf814cf0abd7da28474d5b5d5468f4b\"><span data-lake-id=\"ue6e0e707\" id=\"ue6e0e707\">403.11 - 密码更改。</span></li><li fid=\"uf37fda37\" data-lake-id=\"3e12bd2c6ffdac1d065ebc1ce7dbe589\" id=\"3e12bd2c6ffdac1d065ebc1ce7dbe589\"><span data-lake-id=\"u938e93d4\" id=\"u938e93d4\">403.12 - 拒绝访问映射表。</span></li><li fid=\"uf37fda37\" data-lake-id=\"6d7d0383d8e21e953d5cf05fac7caf65\" id=\"6d7d0383d8e21e953d5cf05fac7caf65\"><span data-lake-id=\"ub5a345f2\" id=\"ub5a345f2\">403.13 - 客户端证书被吊销。</span></li><li fid=\"uf37fda37\" data-lake-id=\"7d93a0159ab4ddd22e3b615583e3ee92\" id=\"7d93a0159ab4ddd22e3b615583e3ee92\"><span data-lake-id=\"u87a66ef1\" id=\"u87a66ef1\">403.14 - 拒绝目录列表。</span></li><li fid=\"uf37fda37\" data-lake-id=\"a8891e55c359154eb0feabe13a334a00\" id=\"a8891e55c359154eb0feabe13a334a00\"><span data-lake-id=\"u724eb5b1\" id=\"u724eb5b1\">403.15 - 超出客户端访问许可。</span></li><li fid=\"uf37fda37\" data-lake-id=\"16cd9d49c3e2a1a72c3c043df84060f2\" id=\"16cd9d49c3e2a1a72c3c043df84060f2\"><span data-lake-id=\"u94157cb2\" id=\"u94157cb2\">403.16 - 客户端证书不受信任或无效。</span></li><li fid=\"uf37fda37\" data-lake-id=\"ce991f469ba5b8bf6a0b3ca95d0776bf\" id=\"ce991f469ba5b8bf6a0b3ca95d0776bf\"><span data-lake-id=\"u6f37bfbc\" id=\"u6f37bfbc\">403.17 - 客户端证书已过期或尚未生效</span></li><li fid=\"uf37fda37\" data-lake-id=\"ba30934400c036e1eb316c5cc6136ecd\" id=\"ba30934400c036e1eb316c5cc6136ecd\"><span data-lake-id=\"ud4857886\" id=\"ud4857886\">403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。</span></li><li fid=\"uf37fda37\" data-lake-id=\"368234a5e48d3693ec76b8174c1ddb46\" id=\"368234a5e48d3693ec76b8174c1ddb46\"><span data-lake-id=\"u4249e930\" id=\"u4249e930\">403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。</span></li><li fid=\"uf37fda37\" data-lake-id=\"6bea15bf0bb2a1c7654bd1838a91e1f3\" id=\"6bea15bf0bb2a1c7654bd1838a91e1f3\"><span data-lake-id=\"u7744ee6c\" id=\"u7744ee6c\">403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</span></li></ul><h4 data-lake-id=\"TaUM1\" id=\"TaUM1\"><span data-lake-id=\"u7807da1c\" id=\"u7807da1c\">（4）404 Not Found</span></h4><p data-lake-id=\"6dc05220bc7215383fe0cf0c828ac9e1\" id=\"6dc05220bc7215383fe0cf0c828ac9e1\"><span data-lake-id=\"ub4ce95a7\" id=\"ub4ce95a7\">该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</span></p><p data-lake-id=\"d8ca6fdd384b2e3475974a03587e1853\" id=\"d8ca6fdd384b2e3475974a03587e1853\"><span data-lake-id=\"u5b5f03a5\" id=\"u5b5f03a5\">以下情况会出现404：</span></p><ul list=\"u72c3ed4f\"><li fid=\"ue1fde73b\" data-lake-id=\"462b8ce0673ae99de8bf25f263d16cc1\" id=\"462b8ce0673ae99de8bf25f263d16cc1\"><span data-lake-id=\"u4cf4c4a0\" id=\"u4cf4c4a0\">404.0 -（无） – 没有找到文件或目录。</span></li><li fid=\"ue1fde73b\" data-lake-id=\"3bdfc4268bd5adcdd3090408b5059038\" id=\"3bdfc4268bd5adcdd3090408b5059038\"><span data-lake-id=\"u0d4c9ae1\" id=\"u0d4c9ae1\">404.1 - 无法在所请求的端口上访问 Web 站点。</span></li><li fid=\"ue1fde73b\" data-lake-id=\"800015ca0587b9e78c8dbedabc79c845\" id=\"800015ca0587b9e78c8dbedabc79c845\"><span data-lake-id=\"ue22c31fd\" id=\"ue22c31fd\">404.2 - Web 服务扩展锁定策略阻止本请求。</span></li><li fid=\"ue1fde73b\" data-lake-id=\"eb3f19951e504224d3cdcfe32c99c106\" id=\"eb3f19951e504224d3cdcfe32c99c106\"><span data-lake-id=\"u92d01a50\" id=\"u92d01a50\">404.3 - MIME 映射策略阻止本请求。</span></li></ul><h4 data-lake-id=\"bsFPq\" id=\"bsFPq\"><span data-lake-id=\"uaefd3d88\" id=\"uaefd3d88\">（5）405 Method Not Allowed</span></h4><p data-lake-id=\"7a54fbfd85c35fc9a6b61b96a61e65c3\" id=\"7a54fbfd85c35fc9a6b61b96a61e65c3\"><span data-lake-id=\"u774a9b84\" id=\"u774a9b84\">该状态码表示客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法。GET 和 HEAD 方法，服务器应该总是允许客户端进行访问。客户端可以通过 OPTIONS 方法（预检）来查看服务器允许的访问方法, 如下</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Access-Control-Allow-Methods%3A%20GET%2CHEAD%2CPUT%2CPATCH%2CPOST%2CDELETE%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Vt5uJ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"iCH5L\" id=\"iCH5L\"><span data-lake-id=\"u29cdd5a4\" id=\"u29cdd5a4\">4. 5XX (Server Error 服务器错误状态码)</span></h3><p data-lake-id=\"f37eb7a49ea3165c37457c9abd98818b\" id=\"f37eb7a49ea3165c37457c9abd98818b\"><span data-lake-id=\"uaa80ea03\" id=\"uaa80ea03\">5XX 的响应结果表明服务器本身发生错误.</span></p><h4 data-lake-id=\"iXi4C\" id=\"iXi4C\"><span data-lake-id=\"u2994e4f3\" id=\"u2994e4f3\">（1）500 Internal Server Error</span></h4><p data-lake-id=\"044c6b97c6254fc3a666126e2d54ac31\" id=\"044c6b97c6254fc3a666126e2d54ac31\"><span data-lake-id=\"u054a2b26\" id=\"u054a2b26\">该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</span></p><h4 data-lake-id=\"vSlKb\" id=\"vSlKb\"><span data-lake-id=\"u1ae0ab13\" id=\"u1ae0ab13\">（2）502 Bad Gateway</span></h4><p data-lake-id=\"89a3d2c78fc0e40b4fef7cf44b53bbe0\" id=\"89a3d2c78fc0e40b4fef7cf44b53bbe0\"><span data-lake-id=\"u3fda0bf1\" id=\"u3fda0bf1\">该状态码表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的。注意，502 错误通常不是客户端能够修复的，而是需要由途经的 Web 服务器或者代理服务器对其进行修复。以下情况会出现502：</span></p><ul list=\"u12a3e8a9\"><li fid=\"u38893983\" data-lake-id=\"d21aea049e17c5dfad04fd4b9521cd7d\" id=\"d21aea049e17c5dfad04fd4b9521cd7d\"><span data-lake-id=\"uc8faa8ce\" id=\"uc8faa8ce\">502.1 - CGI （通用网关接口）应用程序超时。</span></li><li fid=\"u38893983\" data-lake-id=\"5fd96e939437432eb6182035b3d5e3d6\" id=\"5fd96e939437432eb6182035b3d5e3d6\"><span data-lake-id=\"ueb75f79c\" id=\"ueb75f79c\">502.2 - CGI （通用网关接口）应用程序出错。</span></li></ul><h4 data-lake-id=\"cvxsK\" id=\"cvxsK\"><span data-lake-id=\"u95c1f32d\" id=\"u95c1f32d\">（3）503 Service Unavailable</span></h4><p data-lake-id=\"c08e5fcda0beb2f4360225804d615ef7\" id=\"c08e5fcda0beb2f4360225804d615ef7\"><span data-lake-id=\"uacb1089d\" id=\"uacb1089d\">该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。</span></p><p data-lake-id=\"574304ae4b71a04706c9a4ea8e8b01f0\" id=\"574304ae4b71a04706c9a4ea8e8b01f0\"><br></p><p data-lake-id=\"a85afd1d2af8c7d8d29b53cccacfa21f\" id=\"a85afd1d2af8c7d8d29b53cccacfa21f\"><strong><span data-lake-id=\"u7de6996b\" id=\"u7de6996b\">使用场景：</span></strong></p><ul list=\"u6f4ce8b7\"><li fid=\"ucc099411\" data-lake-id=\"388370abdefc24568374597a96ea4ec0\" id=\"388370abdefc24568374597a96ea4ec0\"><span data-lake-id=\"u215f82b5\" id=\"u215f82b5\">服务器停机维护时，主动用503响应请求；</span></li><li fid=\"ucc099411\" data-lake-id=\"ad114991b8f6a576e7453de2a6b0e137\" id=\"ad114991b8f6a576e7453de2a6b0e137\"><span data-lake-id=\"u4eb64c7a\" id=\"u4eb64c7a\">nginx 设置限速，超过限速，会返回503。</span></li></ul><h4 data-lake-id=\"I6u0Q\" id=\"I6u0Q\"><span data-lake-id=\"ufe34f310\" id=\"ufe34f310\">（4）504 Gateway Timeout</span></h4><p data-lake-id=\"060aaebac3a54b3c90928727c7e91f17\" id=\"060aaebac3a54b3c90928727c7e91f17\"><span data-lake-id=\"ud5df0504\" id=\"ud5df0504\">该状态码表示网关或者代理的服务器无法在规定的时间内获得想要的响应。他是HTTP 1.1中新加入的。</span></p><p data-lake-id=\"460f052cb05c8c45f68070cb7de282fb\" id=\"460f052cb05c8c45f68070cb7de282fb\"><br></p><p data-lake-id=\"a3e5f5200d1cd5eb82b712b697d34d16\" id=\"a3e5f5200d1cd5eb82b712b697d34d16\"><span data-lake-id=\"u5eac674f\" id=\"u5eac674f\">使用场景：代码执行时间超时，或者发生了死循环。</span></p><h3 data-lake-id=\"yScDj\" id=\"yScDj\"><span data-lake-id=\"u16f85025\" id=\"u16f85025\">5. 总结</span></h3><p data-lake-id=\"c49b323425c99710811679b18df82f7f\" id=\"c49b323425c99710811679b18df82f7f\"><strong><span data-lake-id=\"u3d95f915\" id=\"u3d95f915\">（1）2XX 成功</span></strong></p><ul list=\"u83da44fb\"><li fid=\"u1fba94a6\" data-lake-id=\"43dfa9b34980e53834055345511c73ad\" id=\"43dfa9b34980e53834055345511c73ad\"><span data-lake-id=\"u39d36757\" id=\"u39d36757\">200 OK，表示从客户端发来的请求在服务器端被正确处理</span></li><li fid=\"u1fba94a6\" data-lake-id=\"3e49f53175f1d0ca2431ba2b7cc6d7b1\" id=\"3e49f53175f1d0ca2431ba2b7cc6d7b1\"><span data-lake-id=\"ufd52dd4b\" id=\"ufd52dd4b\">204 No content，表示请求成功，但响应报文不含实体的主体部分</span></li><li fid=\"u1fba94a6\" data-lake-id=\"dcd5fc85e397fe90ad254305d269d987\" id=\"dcd5fc85e397fe90ad254305d269d987\"><span data-lake-id=\"ub80d4c59\" id=\"ub80d4c59\">205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</span></li><li fid=\"u1fba94a6\" data-lake-id=\"62c5358ed8e3d8cbeffcac9f66aa5ede\" id=\"62c5358ed8e3d8cbeffcac9f66aa5ede\"><span data-lake-id=\"u53c9597e\" id=\"u53c9597e\">206 Partial Content，进行范围请求</span></li></ul><p data-lake-id=\"c878f39babeba42f2847d2add92b49b9\" id=\"c878f39babeba42f2847d2add92b49b9\"><strong><span data-lake-id=\"u415fb0d4\" id=\"u415fb0d4\">（2）3XX 重定向</span></strong></p><ul list=\"ued228581\"><li fid=\"u68f9c3e8\" data-lake-id=\"73d8bb3a43f3c7648f7b9aa9fd315aa5\" id=\"73d8bb3a43f3c7648f7b9aa9fd315aa5\"><span data-lake-id=\"udedee75f\" id=\"udedee75f\">301 moved permanently，永久性重定向，表示资源已被分配了新的 URL</span></li><li fid=\"u68f9c3e8\" data-lake-id=\"e45f3243b3b79bc246f66659d0ae726f\" id=\"e45f3243b3b79bc246f66659d0ae726f\"><span data-lake-id=\"u84d2ee3a\" id=\"u84d2ee3a\">302 found，临时性重定向，表示资源临时被分配了新的 URL</span></li><li fid=\"u68f9c3e8\" data-lake-id=\"e3fcd5b5ef7880455f283297f900c42c\" id=\"e3fcd5b5ef7880455f283297f900c42c\"><span data-lake-id=\"uf3103e8e\" id=\"uf3103e8e\">303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</span></li><li fid=\"u68f9c3e8\" data-lake-id=\"3d31fab2a216b1b178c959d99801b9e5\" id=\"3d31fab2a216b1b178c959d99801b9e5\"><span data-lake-id=\"u834618a0\" id=\"u834618a0\">304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</span></li><li fid=\"u68f9c3e8\" data-lake-id=\"9b49b84c80a4ee445e2c899565fefbdd\" id=\"9b49b84c80a4ee445e2c899565fefbdd\"><span data-lake-id=\"u9ddf8cb9\" id=\"u9ddf8cb9\">307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</span></li></ul><p data-lake-id=\"ce180b215b68738cc397195550521d0a\" id=\"ce180b215b68738cc397195550521d0a\"><strong><span data-lake-id=\"u73b7bff6\" id=\"u73b7bff6\">（3）4XX 客户端错误</span></strong></p><ul list=\"u7e4ee717\"><li fid=\"u9ef38c3a\" data-lake-id=\"2eaf314fdecbbeeaaec1194c973eee0c\" id=\"2eaf314fdecbbeeaaec1194c973eee0c\"><span data-lake-id=\"u3be6e9ba\" id=\"u3be6e9ba\">400 bad request，请求报文存在语法错误</span></li><li fid=\"u9ef38c3a\" data-lake-id=\"be28795c19b2e11c7276ebc9388deaa1\" id=\"be28795c19b2e11c7276ebc9388deaa1\"><span data-lake-id=\"uc7fe6b3a\" id=\"uc7fe6b3a\">401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</span></li><li fid=\"u9ef38c3a\" data-lake-id=\"aacdf30f5425ad1da8fbcdb159057a42\" id=\"aacdf30f5425ad1da8fbcdb159057a42\"><span data-lake-id=\"u7a54c92e\" id=\"u7a54c92e\">403 forbidden，表示对请求资源的访问被服务器拒绝</span></li><li fid=\"u9ef38c3a\" data-lake-id=\"696dea337189f54ce16e3c1e38214609\" id=\"696dea337189f54ce16e3c1e38214609\"><span data-lake-id=\"ua3b67339\" id=\"ua3b67339\">404 not found，表示在服务器上没有找到请求的资源</span></li></ul><p data-lake-id=\"fe44d9bdeb2e3f48f4e06bdc5e5ea81b\" id=\"fe44d9bdeb2e3f48f4e06bdc5e5ea81b\"><strong><span data-lake-id=\"u48484e62\" id=\"u48484e62\">（4）5XX 服务器错误</span></strong></p><ul list=\"u38f48e40\"><li fid=\"ue4a012e3\" data-lake-id=\"5fa09105ca6d1cb4108f5d4e67274fc2\" id=\"5fa09105ca6d1cb4108f5d4e67274fc2\"><span data-lake-id=\"u68b37872\" id=\"u68b37872\">500 internal sever error，表示服务器端在执行请求时发生了错误</span></li><li fid=\"ue4a012e3\" data-lake-id=\"ff5bd9c0058325fe3f61ec505ad008cc\" id=\"ff5bd9c0058325fe3f61ec505ad008cc\"><span data-lake-id=\"u5f5f2785\" id=\"u5f5f2785\">501 Not Implemented，表示服务器不支持当前请求所需要的某个功能</span></li><li fid=\"ue4a012e3\" data-lake-id=\"1d454ff4d184a9948f175bbd51875a3d\" id=\"1d454ff4d184a9948f175bbd51875a3d\"><span data-lake-id=\"uf0af3691\" id=\"uf0af3691\">503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</span></li></ul><h3 data-lake-id=\"VGdGJ\" id=\"VGdGJ\"><span data-lake-id=\"uc09a9dcb\" id=\"uc09a9dcb\">6. 同样是重定向，</span><strong><span data-lake-id=\"u5a65d401\" id=\"u5a65d401\">307</span></strong><span data-lake-id=\"ufc27cb9d\" id=\"ufc27cb9d\">，</span><strong><span data-lake-id=\"u4b538625\" id=\"u4b538625\">303</span></strong><span data-lake-id=\"u4bccba5e\" id=\"u4bccba5e\">，</span><strong><span data-lake-id=\"ub9c19d4c\" id=\"ub9c19d4c\">302</span></strong><span data-lake-id=\"u8af523aa\" id=\"u8af523aa\">的区别？ </span></h3><p data-lake-id=\"ae440375f5a048be469cc58332157f6c\" id=\"ae440375f5a048be469cc58332157f6c\"><span data-lake-id=\"u81e87c3c\" id=\"u81e87c3c\">302是http1.0的协议状态码，在http1.1版本的时候为了细化302状态码⼜出来了两个303和307。 303明确表示客户端应当采⽤get⽅法获取资源，他会把POST请求变为GET请求进⾏重定向。 307会遵照浏览器标准，不会从post变为get。 </span></p><h2 data-lake-id=\"ckFk6\" id=\"ckFk6\"><span data-lake-id=\"ub31e8593\" id=\"ub31e8593\">四、DNS</span><span data-lake-id=\"ue885251c\" id=\"ue885251c\">协议</span><span data-lake-id=\"u544997ef\" id=\"u544997ef\">介绍</span></h2><h3 data-lake-id=\"2c4bf1bf\" id=\"2c4bf1bf\"><span data-lake-id=\"uccc640d1\" id=\"uccc640d1\">1. DNS 协议是什么</span></h3><p data-lake-id=\"d537ed8657877203c76267ff90ed987f\" id=\"d537ed8657877203c76267ff90ed987f\"><strong><span data-lake-id=\"u04fdaecd\" id=\"u04fdaecd\">概念</span></strong><span data-lake-id=\"udf142d94\" id=\"udf142d94\">： DNS 是域名系统 (Domain Name System) 的缩写，</span><span data-lake-id=\"ufb954536\" id=\"ufb954536\">提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。</span><span data-lake-id=\"uba97c16b\" id=\"uba97c16b\">能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。</span></p><p data-lake-id=\"5f49f26fb851b859683090ca3b42fe77\" id=\"5f49f26fb851b859683090ca3b42fe77\"><br></p><p data-lake-id=\"f52c33e9617209b3ad3e72f623d7b5ca\" id=\"f52c33e9617209b3ad3e72f623d7b5ca\"><strong><span data-lake-id=\"u14dbca88\" id=\"u14dbca88\">作用</span></strong><span data-lake-id=\"u717465d3\" id=\"u717465d3\">： 将域名解析为IP地址，客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求，DNS服务器告知客户机Web服务器的 IP 地址。</span></p><h3 data-lake-id=\"PTB9P\" id=\"PTB9P\"><span data-lake-id=\"ubae14103\" id=\"ubae14103\">2. DNS同时使用TCP和UDP协议？</span></h3><p data-lake-id=\"e8cb9da3ca5665f5a593e775437c7eda\" id=\"e8cb9da3ca5665f5a593e775437c7eda\"><strong><span data-lake-id=\"u074363ab\" id=\"u074363ab\">DNS占用53号端口，同时使用TCP和UDP协议。</span></strong></p><p data-lake-id=\"fecb7dcbb14aff131727ae7918c96aab\" id=\"fecb7dcbb14aff131727ae7918c96aab\"><span data-lake-id=\"u66fa9589\" id=\"u66fa9589\">（1）在区域传输的时候使用TCP协议</span></p><ul list=\"u9a50bbaf\"><li fid=\"uc622ceff\" data-lake-id=\"051d45d6fee3b8e76d14321d1ba523b9\" id=\"051d45d6fee3b8e76d14321d1ba523b9\"><span data-lake-id=\"u1b6f0263\" id=\"u1b6f0263\">辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。</span></li><li fid=\"uc622ceff\" data-lake-id=\"31f2077d6126890ed0577c996a56c756\" id=\"31f2077d6126890ed0577c996a56c756\"><span data-lake-id=\"u2ca3d8f1\" id=\"u2ca3d8f1\">TCP是一种可靠连接，保证了数据的准确性。</span></li></ul><p data-lake-id=\"52622a8af9fdb8a555ff607d1a6c44c3\" id=\"52622a8af9fdb8a555ff607d1a6c44c3\"><span data-lake-id=\"u35e13293\" id=\"u35e13293\">（2）在域名解析的时候使用UDP协议</span></p><ul list=\"u5c4623cf\"><li fid=\"ua8a5a9e5\" data-lake-id=\"8044ece6ecfe71b31f4367532d10873c\" id=\"8044ece6ecfe71b31f4367532d10873c\"><span data-lake-id=\"u6706606c\" id=\"u6706606c\">客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。</span></li></ul><h3 data-lake-id=\"egcXy\" id=\"egcXy\"><span data-lake-id=\"u6c85058f\" id=\"u6c85058f\">3. DNS完整的查询过程</span></h3><p data-lake-id=\"588ecfa64a9344c3be8da6ec7cf8151f\" id=\"588ecfa64a9344c3be8da6ec7cf8151f\"><span data-lake-id=\"u290ab2ca\" id=\"u290ab2ca\">DNS服务器解析域名的过程：</span></p><ul list=\"u7bec4590\"><li fid=\"ud1372c91\" data-lake-id=\"f1c4ad340c171dbb0d34aac77c379a46\" id=\"f1c4ad340c171dbb0d34aac77c379a46\"><span data-lake-id=\"u7e40e25e\" id=\"u7e40e25e\">首先会在</span><strong><span data-lake-id=\"ua348462f\" id=\"ua348462f\">浏览器的缓存</span></strong><span data-lake-id=\"u3d85e339\" id=\"u3d85e339\">中查找对应的IP地址，如果查找到直接返回，若找不到继续下一步</span></li><li fid=\"ud1372c91\" data-lake-id=\"59c159ea113faa74d98925fcf53f12b4\" id=\"59c159ea113faa74d98925fcf53f12b4\"><span data-lake-id=\"u521d9d04\" id=\"u521d9d04\">将请求发送给</span><strong><span data-lake-id=\"u3283111b\" id=\"u3283111b\">本地DNS服务器</span></strong><span data-lake-id=\"u282d935d\" id=\"u282d935d\">，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步</span></li><li fid=\"ud1372c91\" data-lake-id=\"0c3048f7025fd8ccdb62a17b255aab1e\" id=\"0c3048f7025fd8ccdb62a17b255aab1e\"><span data-lake-id=\"ufbc6610a\" id=\"ufbc6610a\">本地DNS服务器向</span><strong><span data-lake-id=\"u71b9c17b\" id=\"u71b9c17b\">根域名服务器</span></strong><span data-lake-id=\"u7beaaff2\" id=\"u7beaaff2\">发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址</span></li><li fid=\"ud1372c91\" data-lake-id=\"9036b0f3d4024f08a0911a705854f992\" id=\"9036b0f3d4024f08a0911a705854f992\"><span data-lake-id=\"u8e8bcc0a\" id=\"u8e8bcc0a\">本地DNS服务器向</span><strong><span data-lake-id=\"uf6d6b035\" id=\"uf6d6b035\">顶级域名服务器</span></strong><span data-lake-id=\"u3fbfb268\" id=\"u3fbfb268\">发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址</span></li><li fid=\"ud1372c91\" data-lake-id=\"c8296876596cf1b8c361650c9c913d7f\" id=\"c8296876596cf1b8c361650c9c913d7f\"><span data-lake-id=\"u2ff64998\" id=\"u2ff64998\">本地DNS服务器向</span><strong><span data-lake-id=\"u2d5e1d3e\" id=\"u2d5e1d3e\">权威域名服务器</span></strong><span data-lake-id=\"u26706e73\" id=\"u26706e73\">发送请求，域名服务器返回对应的结果</span></li><li fid=\"ud1372c91\" data-lake-id=\"0b3cda5f5c61b4df8a16e400b0b3c2da\" id=\"0b3cda5f5c61b4df8a16e400b0b3c2da\"><span data-lake-id=\"u3cbfabaf\" id=\"u3cbfabaf\">本地DNS服务器将返回结果保存在缓存中，便于下次使用</span></li><li fid=\"ud1372c91\" data-lake-id=\"60a16b2ec8901f46e51d45fdb3bc67e8\" id=\"60a16b2ec8901f46e51d45fdb3bc67e8\"><span data-lake-id=\"ubd231591\" id=\"ubd231591\">本地DNS服务器将返回结果返回给浏览器</span></li></ul><p data-lake-id=\"c377af02859c4a11f4e772bceaa0a740\" id=\"c377af02859c4a11f4e772bceaa0a740\"><br></p><p data-lake-id=\"c3c2c27442bb15cb59ec906fd25d23f9\" id=\"c3c2c27442bb15cb59ec906fd25d23f9\"><span data-lake-id=\"ucd6519d4\" id=\"ucd6519d4\">比如要查询 </span><a href=\"http://www.baidu.com/\" target=\"_blank\" data-lake-id=\"u7a5aa62b\" id=\"u7a5aa62b\"><span data-lake-id=\"ub782d685\" id=\"ub782d685\">www.baidu.com</span></a><span data-lake-id=\"u109c6c7b\" id=\"u109c6c7b\"> 的 IP 地址，首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS 服务器中，本地DNS服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP 地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu 的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。</span></p><h3 data-lake-id=\"4X183\" id=\"4X183\"><span data-lake-id=\"u40f4f6c7\" id=\"u40f4f6c7\">4. 迭代查询与递归查询</span></h3><p data-lake-id=\"8cd802621608aa226a5f63c0e5a12ba3\" id=\"8cd802621608aa226a5f63c0e5a12ba3\"><span data-lake-id=\"uca7c2a57\" id=\"uca7c2a57\">实际上，DNS解析是一个包含迭代查询和递归查询的过程。</span></p><ul list=\"u6d965153\"><li fid=\"u5b1d55ca\" data-lake-id=\"d8a14ccea9a7e8d8396f6ac962c94cc9\" id=\"d8a14ccea9a7e8d8396f6ac962c94cc9\"><strong><span data-lake-id=\"ub43e69af\" id=\"ub43e69af\">递归查询</span></strong><span data-lake-id=\"uf1336c14\" id=\"uf1336c14\">指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归 查询，用户只需要发出一次查询请求。</span></li><li fid=\"u5b1d55ca\" data-lake-id=\"250578061811a11655265f57a5e2061c\" id=\"250578061811a11655265f57a5e2061c\"><strong><span data-lake-id=\"u5ca2c8b3\" id=\"u5ca2c8b3\">迭代查询</span></strong><span data-lake-id=\"u247a3df9\" id=\"u247a3df9\">指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，用户需要发出 多次的查询请求。</span></li></ul><p data-lake-id=\"6bfdf71eeb1594d1eacbf117f163099f\" id=\"6bfdf71eeb1594d1eacbf117f163099f\"><br></p><p data-lake-id=\"fa096fe6215ca788f3a182b918a447fe\" id=\"fa096fe6215ca788f3a182b918a447fe\"><span data-lake-id=\"u2d3f9c0c\" id=\"u2d3f9c0c\">一般我们向本地 DNS 服务器发送请求的方式就是递归查询，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我 们最终的请求结果。而本地 DNS 服务器向其他域名服务器请求的过程是迭代查询的过程，因为每一次域名服务器只返回单次 查询的结果，下一级的查询由本地 DNS 服务器自己进行。</span></p><h3 data-lake-id=\"lxyKa\" id=\"lxyKa\"><span data-lake-id=\"ub56ade75\" id=\"ub56ade75\">5. DNS 记录和报文</span></h3><p data-lake-id=\"2d4ea90adb82ec380562fcb1644479ca\" id=\"2d4ea90adb82ec380562fcb1644479ca\"><span data-lake-id=\"uf18c73a8\" id=\"uf18c73a8\">DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22http%22%2C%22code%22%3A%22%EF%BC%88Name%EF%BC%8CValue%EF%BC%8CType%EF%BC%8CTTL%EF%BC%89%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22k3pal%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"ef6843bb91268f4e0e2985f8360f3874\" id=\"ef6843bb91268f4e0e2985f8360f3874\"><span data-lake-id=\"u2f6bf163\" id=\"u2f6bf163\">其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。</span></p><p data-lake-id=\"b5fa3c823c811e1766c705dc3232a9a0\" id=\"b5fa3c823c811e1766c705dc3232a9a0\"><br></p><p data-lake-id=\"eb1bb043bc2da196e65ad37ad9b1fa20\" id=\"eb1bb043bc2da196e65ad37ad9b1fa20\"><span data-lake-id=\"uc60c5ab3\" id=\"uc60c5ab3\">常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：</span></p><ul list=\"u157ee10e\"><li fid=\"ub2281d10\" data-lake-id=\"bd754bb9a888886c71208f2bebacc51b\" id=\"bd754bb9a888886c71208f2bebacc51b\"><span data-lake-id=\"u8666fcda\" id=\"u8666fcda\">如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。</span></li><li fid=\"ub2281d10\" data-lake-id=\"89e7f4cfa62f9b01429e002270dd0091\" id=\"89e7f4cfa62f9b01429e002270dd0091\"><span data-lake-id=\"uf00c7a43\" id=\"uf00c7a43\">如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。</span></li><li fid=\"ub2281d10\" data-lake-id=\"93416bc3f4f7377f1ede43afa19151a7\" id=\"93416bc3f4f7377f1ede43afa19151a7\"><span data-lake-id=\"u54ae4e5d\" id=\"u54ae4e5d\">如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。</span></li><li fid=\"ub2281d10\" data-lake-id=\"b5a08cc140840dd6657391e8edce3cca\" id=\"b5a08cc140840dd6657391e8edce3cca\"><span data-lake-id=\"u3079d907\" id=\"u3079d907\">如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。</span></li></ul><p data-lake-id=\"ud0d893a5\" id=\"ud0d893a5\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673895280393-53470a69-3a01-4d2a-9600-964fe5a1d3c1.png%22%2C%22taskId%22%3A%22u86f5063c-2f9c-49e3-aadc-d3b5dec5998%22%2C%22clientId%22%3A%22ucedecab4-ca2e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22stroke%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u74303d7e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"NQHWi\" id=\"NQHWi\"><span data-lake-id=\"ua5662c7a\" id=\"ua5662c7a\">五、网络模型</span></h2><h3 data-lake-id=\"abhKn\" id=\"abhKn\"><span data-lake-id=\"ub69cf293\" id=\"ub69cf293\">1. OSI七层模型</span></h3><p data-lake-id=\"d22b9f7e46f5b1c42b6536993680cac3\" id=\"d22b9f7e46f5b1c42b6536993680cac3\"><code data-lake-id=\"ue0953c9c\" id=\"ue0953c9c\"><span data-lake-id=\"u4809bd4c\" id=\"u4809bd4c\">ISO</span></code><span data-lake-id=\"uccb11462\" id=\"uccb11462\">为了更好的使网络应用更为普及，推出了</span><code data-lake-id=\"u8effce1c\" id=\"u8effce1c\"><span data-lake-id=\"u384f5065\" id=\"u384f5065\">OSI</span></code><span data-lake-id=\"u164229e7\" id=\"u164229e7\">参考模型。</span></p><p data-lake-id=\"bb66e32bff6c319958ca63ac91613caf\" id=\"bb66e32bff6c319958ca63ac91613caf\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fwebp%2F1500604%2F1604024701811-7ac177bc-d649-45b8-8646-53af8f18a0de.webp%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A982%2C%22height%22%3A532%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A982%2C%22originHeight%22%3A532%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2362be5c%22%2C%22id%22%3A%22uhhP1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h4 data-lake-id=\"PnVOD\" id=\"PnVOD\"><span data-lake-id=\"u739d17b2\" id=\"u739d17b2\">（1）应用层</span></h4><p data-lake-id=\"357493f3e1cb3115e81a7d96f89660fe\" id=\"357493f3e1cb3115e81a7d96f89660fe\"><code data-lake-id=\"uc6001d18\" id=\"uc6001d18\"><span data-lake-id=\"u311b276a\" id=\"u311b276a\">OSI</span></code><span data-lake-id=\"ud9933ab9\" id=\"ud9933ab9\">参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。我们常见应用层的网络服务协议有：</span><code data-lake-id=\"uc59f2d6f\" id=\"uc59f2d6f\"><span data-lake-id=\"uec58888f\" id=\"uec58888f\">HTTP</span></code><span data-lake-id=\"u4932d637\" id=\"u4932d637\">，</span><code data-lake-id=\"u93cb229e\" id=\"u93cb229e\"><span data-lake-id=\"u652c4f58\" id=\"u652c4f58\">HTTPS</span></code><span data-lake-id=\"u2b0398c8\" id=\"u2b0398c8\">，</span><code data-lake-id=\"ud4aca1f4\" id=\"ud4aca1f4\"><span data-lake-id=\"ue3071041\" id=\"ue3071041\">FTP</span></code><span data-lake-id=\"u23eff7b2\" id=\"u23eff7b2\">，</span><code data-lake-id=\"u5d9a5b95\" id=\"u5d9a5b95\"><span data-lake-id=\"u06f42af3\" id=\"u06f42af3\">POP3</span></code><span data-lake-id=\"u58105e7a\" id=\"u58105e7a\">、</span><code data-lake-id=\"u1ad63bdb\" id=\"u1ad63bdb\"><span data-lake-id=\"ue2b5ab67\" id=\"ue2b5ab67\">SMTP</span></code><span data-lake-id=\"u6ab8396c\" id=\"u6ab8396c\">等。</span></p><ul list=\"u2ee95ed9\"><li fid=\"ue5d1f346\" data-lake-id=\"fa1e2abf746ebd0a0bbe9db7801ece57\" id=\"fa1e2abf746ebd0a0bbe9db7801ece57\"><span data-lake-id=\"u283e0dae\" id=\"u283e0dae\">在客户端与服务器中经常会有数据的请求，这个时候就是会用到</span><code data-lake-id=\"u9dafe3ad\" id=\"u9dafe3ad\"><span data-lake-id=\"u33cd8757\" id=\"u33cd8757\">http(hyper text transfer protocol)(超文本传输协议)</span></code><span data-lake-id=\"u50f4ef7c\" id=\"u50f4ef7c\">或者</span><code data-lake-id=\"u56762075\" id=\"u56762075\"><span data-lake-id=\"u35fe672f\" id=\"u35fe672f\">https</span></code><span data-lake-id=\"u6f2e455f\" id=\"u6f2e455f\">.在后端设计数据接口时，我们常常使用到这个协议。</span></li><li fid=\"ue5d1f346\" data-lake-id=\"df5c5aad67f2ab26f2668d7bdb08fcba\" id=\"df5c5aad67f2ab26f2668d7bdb08fcba\"><code data-lake-id=\"u47b02059\" id=\"u47b02059\"><span data-lake-id=\"u8d8727ad\" id=\"u8d8727ad\">FTP</span></code><span data-lake-id=\"u878a1420\" id=\"u878a1420\">是文件传输协议，在开发过程中，个人并没有涉及到，但是我想，在一些资源网站，比如</span><code data-lake-id=\"u9411cfc4\" id=\"u9411cfc4\"><span data-lake-id=\"uec8219fc\" id=\"uec8219fc\">百度网盘``迅雷</span></code><span data-lake-id=\"u95eba21d\" id=\"u95eba21d\">应该是基于此协议的。</span></li><li fid=\"ue5d1f346\" data-lake-id=\"02fbf400ae44033f2eb8d8fa260bc8e9\" id=\"02fbf400ae44033f2eb8d8fa260bc8e9\"><code data-lake-id=\"u1dcd7778\" id=\"u1dcd7778\"><span data-lake-id=\"u64752031\" id=\"u64752031\">SMTP</span></code><span data-lake-id=\"u77a8893f\" id=\"u77a8893f\">是</span><code data-lake-id=\"ud5524c82\" id=\"ud5524c82\"><span data-lake-id=\"u50ef06ce\" id=\"u50ef06ce\">simple mail transfer protocol（简单邮件传输协议）</span></code><span data-lake-id=\"u0624929b\" id=\"u0624929b\">。在一个项目中，在用户邮箱验证码登录的功能时，使用到了这个协议。</span></li></ul><h4 data-lake-id=\"09IS6\" id=\"09IS6\"><span data-lake-id=\"u24fc6f78\" id=\"u24fc6f78\">（2）表示层</span></h4><p data-lake-id=\"ab5e82ea3ad3db62b22b641bdbf6936c\" id=\"ab5e82ea3ad3db62b22b641bdbf6936c\"><span data-lake-id=\"u51079f41\" id=\"u51079f41\">表示层提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。</span></p><p data-lake-id=\"31be82b6632df83d60af28905268565c\" id=\"31be82b6632df83d60af28905268565c\"><br></p><p data-lake-id=\"98b3f6167786f9db132a389f9e61b008\" id=\"98b3f6167786f9db132a389f9e61b008\"><span data-lake-id=\"u32f2083f\" id=\"u32f2083f\">在项目开发中，为了方便数据传输，可以使用</span><code data-lake-id=\"u532124e9\" id=\"u532124e9\"><span data-lake-id=\"u24383afd\" id=\"u24383afd\">base64</span></code><span data-lake-id=\"u0e3fc06c\" id=\"u0e3fc06c\">对数据进行编解码。如果按功能来划分，</span><code data-lake-id=\"u8558c1d0\" id=\"u8558c1d0\"><span data-lake-id=\"u20d7cb1c\" id=\"u20d7cb1c\">base64</span></code><span data-lake-id=\"u73a723f5\" id=\"u73a723f5\">应该是工作在表示层。</span></p><h4 data-lake-id=\"flE2f\" id=\"flE2f\"><span data-lake-id=\"u6c5728fb\" id=\"u6c5728fb\">（3）会话层</span></h4><p data-lake-id=\"e7cca0c43c2b7e754b76e8b9388de504\" id=\"e7cca0c43c2b7e754b76e8b9388de504\"><span data-lake-id=\"u5376feb3\" id=\"u5376feb3\">会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</span></p><h4 data-lake-id=\"ILRgG\" id=\"ILRgG\"><span data-lake-id=\"u686fe8cb\" id=\"u686fe8cb\">（4）传输层</span></h4><p data-lake-id=\"685244549046db1220ce323a1b2a8e09\" id=\"685244549046db1220ce323a1b2a8e09\"><span data-lake-id=\"uf6e2ad7f\" id=\"uf6e2ad7f\">传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，</span><code data-lake-id=\"u2deaee25\" id=\"u2deaee25\"><span data-lake-id=\"ub26f1eca\" id=\"ub26f1eca\">TCP</span></code><span data-lake-id=\"u69f585b7\" id=\"u69f585b7\"> </span><code data-lake-id=\"u82e85920\" id=\"u82e85920\"><span data-lake-id=\"u14033c44\" id=\"u14033c44\">UDP</span></code><span data-lake-id=\"u79815b36\" id=\"u79815b36\">就是在这一层。端口号既是这里的“端”。</span></p><h4 data-lake-id=\"1QPcG\" id=\"1QPcG\"><span data-lake-id=\"u2c71bcea\" id=\"u2c71bcea\">（5）网络层</span></h4><p data-lake-id=\"646e39fbc203828310cd0316c5a2132d\" id=\"646e39fbc203828310cd0316c5a2132d\"><span data-lake-id=\"u0b08400a\" id=\"u0b08400a\">本层通过</span><code data-lake-id=\"u2f5ffcf2\" id=\"u2f5ffcf2\"><span data-lake-id=\"ucc0998bd\" id=\"ucc0998bd\">IP</span></code><span data-lake-id=\"u742475c8\" id=\"u742475c8\">寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的</span><code data-lake-id=\"uccc594f7\" id=\"uccc594f7\"><span data-lake-id=\"ud26f88dd\" id=\"ud26f88dd\">IP</span></code><span data-lake-id=\"u90a7ba48\" id=\"u90a7ba48\">层。这一层就是我们经常说的</span><code data-lake-id=\"ua157663a\" id=\"ua157663a\"><span data-lake-id=\"u4817fee1\" id=\"u4817fee1\">IP</span></code><span data-lake-id=\"u4f66436b\" id=\"u4f66436b\">协议层。</span><code data-lake-id=\"u98f696a4\" id=\"u98f696a4\"><span data-lake-id=\"uce1a62b9\" id=\"uce1a62b9\">IP</span></code><span data-lake-id=\"u9e685cb4\" id=\"u9e685cb4\">协议是</span><code data-lake-id=\"uf38b46a2\" id=\"uf38b46a2\"><span data-lake-id=\"u1bc12044\" id=\"u1bc12044\">Internet</span></code><span data-lake-id=\"ue3acd818\" id=\"ue3acd818\">的基础。我们可以这样理解，网络层规定了数据包的传输路线，而传输层则规定了数据包的传输方式。</span></p><h4 data-lake-id=\"TI2FK\" id=\"TI2FK\"><span data-lake-id=\"u6e3cff29\" id=\"u6e3cff29\">（6）数据链路层</span></h4><p data-lake-id=\"97c4446d487783fb7b5b6902cd211aa6\" id=\"97c4446d487783fb7b5b6902cd211aa6\"><span data-lake-id=\"ubcb55ce5\" id=\"ubcb55ce5\">将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。</span></p><p data-lake-id=\"010d06108709622f54ce47637474ff88\" id=\"010d06108709622f54ce47637474ff88\"><span data-lake-id=\"ub079c9db\" id=\"ub079c9db\">网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。</span></p><h4 data-lake-id=\"q1Vzs\" id=\"q1Vzs\"><span data-lake-id=\"uc8968a11\" id=\"uc8968a11\">（7）物理层</span></h4><p data-lake-id=\"268e622d43214d26e1401465ffa8adf1\" id=\"268e622d43214d26e1401465ffa8adf1\"><span data-lake-id=\"u22f8e22c\" id=\"u22f8e22c\">实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。</span></p><p data-lake-id=\"61eb36f4dcb3cdf254950fc7d26504ab\" id=\"61eb36f4dcb3cdf254950fc7d26504ab\"><br></p><p data-lake-id=\"190080e0908313a5daff3ec14149318e\" id=\"190080e0908313a5daff3ec14149318e\"><strong><span data-lake-id=\"u552cf343\" id=\"u552cf343\">OSI七层模型通信特点：对等通信</span></strong></p><p data-lake-id=\"91df333d77e46ea75e23d09ca8fbf6db\" id=\"91df333d77e46ea75e23d09ca8fbf6db\"><span data-lake-id=\"ub2f47e13\" id=\"ub2f47e13\">对等通信，为了使数据分组从源传送到目的地，源端OSI模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。</span></p><h3 data-lake-id=\"pCruo\" id=\"pCruo\"><span data-lake-id=\"udb4eeb1b\" id=\"udb4eeb1b\">2. TCP/IP五层协议</span></h3><p data-lake-id=\"73d3b5f283b5b1d28a3636a023557667\" id=\"73d3b5f283b5b1d28a3636a023557667\"><code data-lake-id=\"u593df652\" id=\"u593df652\"><span data-lake-id=\"ue1b6b969\" id=\"ue1b6b969\">TCP/IP</span></code><span data-lake-id=\"ucaca20f2\" id=\"ucaca20f2\">五层协议和</span><code data-lake-id=\"u01d8d1e6\" id=\"u01d8d1e6\"><span data-lake-id=\"u495f2986\" id=\"u495f2986\">OSI</span></code><span data-lake-id=\"uf335c5e9\" id=\"uf335c5e9\">的七层协议对应关系如下：</span></p><p data-lake-id=\"72dc9510b9452590a4abbcc9496bf19a\" id=\"72dc9510b9452590a4abbcc9496bf19a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1604025489154-966a96f5-1c8e-4d03-b9f9-f51250f63a22.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A736%2C%22height%22%3A374%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A736%2C%22originHeight%22%3A374%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f1f1f1%22%2C%22id%22%3A%22sNNAu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><ul list=\"u93c2964a\"><li fid=\"u9e67315f\" data-lake-id=\"5c65bca285a657ebbe8c23f1577b654c\" id=\"5c65bca285a657ebbe8c23f1577b654c\"><strong><span data-lake-id=\"u15df3323\" id=\"u15df3323\">应用层 (application layer)</span></strong><span data-lake-id=\"ue869cf15\" id=\"ue869cf15\">：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP协议（万维网服务）、FTP协议（文件传输）、SMTP协议（电子邮件）、DNS（域名查询）等。</span></li><li fid=\"u9e67315f\" data-lake-id=\"0c0ce360f49d973ea8f05811581c58eb\" id=\"0c0ce360f49d973ea8f05811581c58eb\"><strong><span data-lake-id=\"ud09ce89c\" id=\"ud09ce89c\">传输层 (transport layer)</span></strong><span data-lake-id=\"u9a3f60e6\" id=\"u9a3f60e6\">：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</span></li></ul><ul list=\"u2a219a13\" data-lake-indent=\"1\"><li fid=\"u53d0d4d9\" data-lake-id=\"c2fd2e08adebe39af0dd7f6740b717df\" id=\"c2fd2e08adebe39af0dd7f6740b717df\"><span data-lake-id=\"u07a09b56\" id=\"u07a09b56\">传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</span></li><li fid=\"u53d0d4d9\" data-lake-id=\"9eb87ea5f52e02e509ca90920d47273f\" id=\"9eb87ea5f52e02e509ca90920d47273f\"><span data-lake-id=\"ua1bda435\" id=\"ua1bda435\">用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</span></li></ul><ul list=\"u6511a71a\"><li fid=\"u01c145b5\" data-lake-id=\"e0f09ca0a4285cc76ae967e187803811\" id=\"e0f09ca0a4285cc76ae967e187803811\"><strong><span data-lake-id=\"ud24304b7\" id=\"ud24304b7\">网络层 (internet layer)</span></strong><span data-lake-id=\"ue8073212\" id=\"ue8073212\">：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。</span></li><li fid=\"u01c145b5\" data-lake-id=\"01baa1a8b60b9971e6cdb750fcc77425\" id=\"01baa1a8b60b9971e6cdb750fcc77425\"><strong><span data-lake-id=\"u4cc27faa\" id=\"u4cc27faa\">数据链路层 (data link layer)</span></strong><span data-lake-id=\"uc5fbf7b9\" id=\"uc5fbf7b9\">：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。</span></li><li fid=\"u01c145b5\" data-lake-id=\"0fda66b2421320f79e348e29057810d7\" id=\"0fda66b2421320f79e348e29057810d7\"><strong><span data-lake-id=\"ub1016958\" id=\"ub1016958\">物理层 (physical Layer)</span></strong><span data-lake-id=\"u2cc09f2d\" id=\"u2cc09f2d\">：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。</span></li></ul><p data-lake-id=\"97d6d4db2d6eaee50917a396f031e25a\" id=\"97d6d4db2d6eaee50917a396f031e25a\"><br></p><p data-lake-id=\"1461a7e1bf7c5b6d618392812058d72b\" id=\"1461a7e1bf7c5b6d618392812058d72b\"><span data-lake-id=\"ud58c88ca\" id=\"ud58c88ca\">从上图中可以看出，</span><code data-lake-id=\"udd338f11\" id=\"udd338f11\"><span data-lake-id=\"u856966ed\" id=\"u856966ed\">TCP/IP</span></code><span data-lake-id=\"ub0f98c5a\" id=\"ub0f98c5a\">模型比</span><code data-lake-id=\"u946e8ab0\" id=\"u946e8ab0\"><span data-lake-id=\"u04702b10\" id=\"u04702b10\">OSI</span></code><span data-lake-id=\"u7eeab4a0\" id=\"u7eeab4a0\">模型更加简洁，它把</span><code data-lake-id=\"u6bdc498f\" id=\"u6bdc498f\"><span data-lake-id=\"u6bd7cbdb\" id=\"u6bd7cbdb\">应用层/表示层/会话层</span></code><span data-lake-id=\"u365b95ab\" id=\"u365b95ab\">全部整合为了</span><code data-lake-id=\"ucc21ee1b\" id=\"ucc21ee1b\"><span data-lake-id=\"ud7ef8f98\" id=\"ud7ef8f98\">应用层</span></code><span data-lake-id=\"u2ae532a8\" id=\"u2ae532a8\">。</span></p><p data-lake-id=\"45dae8d27772ea375cc023ea3fcdecc2\" id=\"45dae8d27772ea375cc023ea3fcdecc2\"><br></p><p data-lake-id=\"07f438f9e0eaa7c38424696bfad03449\" id=\"07f438f9e0eaa7c38424696bfad03449\"><span data-lake-id=\"u8bf75192\" id=\"u8bf75192\">在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。</span></p><p data-lake-id=\"0eabdac03a40b6360bedbb116c23ab93\" id=\"0eabdac03a40b6360bedbb116c23ab93\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fwebp%2F1500604%2F1604025001463-47398363-0ab1-4bcf-b247-5d3d76ce117a.webp%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A843%2C%22height%22%3A323%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1280%2C%22originHeight%22%3A490%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%238ec96f%22%2C%22id%22%3A%22aArAR%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"6114382bebe5729b187e2a6f6e92e59a\" id=\"6114382bebe5729b187e2a6f6e92e59a\"><span data-lake-id=\"u497c4838\" id=\"u497c4838\">在每一层实现的协议也各不同，即每一层的服务也不同，下图列出了每层主要的传输协议：</span></p><p data-lake-id=\"9b7c6761ba8bc05b5308aa950c86c951\" id=\"9b7c6761ba8bc05b5308aa950c86c951\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fwebp%2F1500604%2F1604025001203-7b104c36-1453-475e-a282-ff2e9cb19e2c.webp%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A843%2C%22height%22%3A306%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1280%2C%22originHeight%22%3A464%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2388c86c%22%2C%22id%22%3A%22qugiC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"9bfc829cfa8b2ef9c64c9298947ed697\" id=\"9bfc829cfa8b2ef9c64c9298947ed697\"><br></p><p data-lake-id=\"644acb3e069cc41fd48ec487d3ea465f\" id=\"644acb3e069cc41fd48ec487d3ea465f\"><span data-lake-id=\"u80f05621\" id=\"u80f05621\">同样，</span><code data-lake-id=\"u0c14c8c4\" id=\"u0c14c8c4\"><span data-lake-id=\"ucb51d03e\" id=\"ucb51d03e\">TCP/IP</span></code><span data-lake-id=\"u127debc8\" id=\"u127debc8\">五层协议的通信方式也是对等通信：</span></p><p data-lake-id=\"446a94f15bee924fcb0559d1341a8b80\" id=\"446a94f15bee924fcb0559d1341a8b80\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1604065635582-1a4e62ba-bdfa-45db-8a56-0302ff9a8020.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A453.5%2C%22height%22%3A381%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22image.png%22%2C%22size%22%3A489205%2C%22originWidth%22%3A907%2C%22originHeight%22%3A761%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%BA%94%E7%94%A8%E5%B1%82%20HTTP%E6%95%B0%E6%8D%AE%20HTTP%E6%95%B0%E6%8D%AE%20HTTPFTPSMTP%20TCP%E9%A6%96%E9%83%A8%20TCP%E9%A6%96%E9%83%A8%20%E5%BC%93%E5%8D%8F%E8%AE%AE%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A4%BA%E6%84%8F%E5%9B%BE%20%E4%BC%A0%E8%BE%93%E5%B1%82%20HTTP%E6%95%B0%E6%8D%AE%20HTTP%E6%95%B0%E6%8D%AE%20TCP%2CUDP%20IP%E9%A6%96%E9%83%A8%20IP%E9%A6%96%E9%83%A8%20TCP%E9%A6%96%E9%83%A8%20TCP%E9%A6%96%E9%83%A8%20%E7%BD%91%E7%BB%9C%E5%B1%82%20HTTP%E6%95%B0%E6%8D%AE%20HTTP%E6%95%B0%E6%8D%AE%20IP%2CARP%2C%E8%B7%AF%E7%94%B1%E5%99%A8%20%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%A6%96%E9%83%A8%20%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%A6%96%E9%83%A8%20IP%E9%A6%96%E9%83%A8%20IP%E9%A6%96%E9%83%A8%20%E9%93%BE%E8%B7%AF%E5%B1%82%20TCP%E9%A6%96%E9%83%A8%20TCP%E9%A6%96%E9%83%A8%20%E4%BB%A5%E5%A4%AA%E7%BD%91%2C%E7%BD%91%E6%A1%A5%20HTTP%E6%95%B0%E6%8D%AE%20HTTP%E6%95%B0%E6%8D%AE%20%E7%94%B5%E4%BF%A1%E5%8F%B7%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9E%E7%BA%BF%2C%E5%85%89%E7%BA%A4%2C%E6%97%A0%E7%BA%BF%E7%94%B5%E6%B3%A2)%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A426.1272%2C%22y%22%3A28.00448%2C%22width%22%3A81.68725%2C%22height%22%3A29.485587000000002%2C%22text%22%3A%22%E5%BA%94%E7%94%A8%E5%B1%82%22%7D%2C%7B%22x%22%3A156.0052%2C%22y%22%3A31.309383%2C%22width%22%3A95.60591%2C%22height%22%3A20.828697000000002%2C%22text%22%3A%22HTTP%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A693.79877%2C%22y%22%3A31.201744%2C%22width%22%3A96.33303000000001%2C%22height%22%3A21.555649%2C%22text%22%3A%22HTTP%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A392.84012%2C%22y%22%3A68.190315%2C%22width%22%3A189.09657999999996%2C%22height%22%3A23.326335%2C%22text%22%3A%22HTTPFTPSMTP%22%7D%2C%7B%22x%22%3A653.8302%2C%22y%22%3A133.17899%2C%22width%22%3A80.21605999999997%2C%22height%22%3A22.647289999999998%2C%22text%22%3A%22TCP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A117.18012%2C%22y%22%3A133.15547%2C%22width%22%3A79.0012%2C%22height%22%3A20.84559999999999%2C%22text%22%3A%22TCP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A4.8875175%2C%22y%22%3A159.21315%2C%22width%22%3A34.2655825%2C%22height%22%3A34.2655825%2C%22text%22%3A%22%E5%BC%93%E5%8D%8F%E8%AE%AE%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A4%BA%E6%84%8F%E5%9B%BE%22%7D%2C%7B%22x%22%3A424.59525%2C%22y%22%3A161.95512%2C%22width%22%3A84.26394999999997%2C%22height%22%3A29.284279999999995%2C%22text%22%3A%22%E4%BC%A0%E8%BE%93%E5%B1%82%22%7D%2C%7B%22x%22%3A154.68059%2C%22y%22%3A169.28952%2C%22width%22%3A96.99585000000002%2C%22height%22%3A21.50211999999999%2C%22text%22%3A%22HTTP%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A693.92914%2C%22y%22%3A169.88477%2C%22width%22%3A96.34776%2C%22height%22%3A21.06497999999999%2C%22text%22%3A%22HTTP%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A420.12173%2C%22y%22%3A202.12407%2C%22width%22%3A101.22867000000002%2C%22height%22%3A20.74818000000002%2C%22text%22%3A%22TCP%2CUDP%22%7D%2C%7B%22x%22%3A98.42612%2C%22y%22%3A297.0742%2C%22width%22%3A61.97167999999999%2C%22height%22%3A20.103169999999977%2C%22text%22%3A%22IP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A635.026%2C%22y%22%3A297.14676%2C%22width%22%3A62.5834000000001%2C%22height%22%3A20.787040000000047%2C%22text%22%3A%22IP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A116.9968%2C%22y%22%3A333.53223%2C%22width%22%3A79.11961000000001%2C%22height%22%3A20.42510999999996%2C%22text%22%3A%22TCP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A652.1527%2C%22y%22%3A333.2115%2C%22width%22%3A81.18129999999996%2C%22height%22%3A22.422529999999995%2C%22text%22%3A%22TCP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A424.9314%2C%22y%22%3A338.0436%2C%22width%22%3A83.70745%2C%22height%22%3A29.400459999999953%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E5%B1%82%22%7D%2C%7B%22x%22%3A154.58083%2C%22y%22%3A365.284%2C%22width%22%3A97.09295%2C%22height%22%3A24.09494000000001%2C%22text%22%3A%22HTTP%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A692.4123%2C%22y%22%3A366.5332%2C%22width%22%3A96.5902000000001%2C%22height%22%3A23.29819999999995%2C%22text%22%3A%22HTTP%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A393.69812%2C%22y%22%3A380.03748%2C%22width%22%3A176.61272999999994%2C%22height%22%3A30.436319999999967%2C%22text%22%3A%22IP%2CARP%2C%E8%B7%AF%E7%94%B1%E5%99%A8%22%7D%2C%7B%22x%22%3A69.70787%2C%22y%22%3A501.60382%2C%22width%22%3A106.15595%2C%22height%22%3A25.261540000000025%2C%22text%22%3A%22%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A606.45355%2C%22y%22%3A501.81577%2C%22width%22%3A106.88465000000008%2C%22height%22%3A22.47408999999999%2C%22text%22%3A%22%E4%BB%A5%E5%A4%AA%E7%BD%91%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A98.70141%2C%22y%22%3A538.765%2C%22width%22%3A61.70945000000002%2C%22height%22%3A21.73350000000005%2C%22text%22%3A%22IP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A636.19684%2C%22y%22%3A539.24286%2C%22width%22%3A62.01190000000008%2C%22height%22%3A21.02694000000008%2C%22text%22%3A%22IP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A426.7402%2C%22y%22%3A562.33856%2C%22width%22%3A80.70391999999998%2C%22height%22%3A28.315339999999992%2C%22text%22%3A%22%E9%93%BE%E8%B7%AF%E5%B1%82%22%7D%2C%7B%22x%22%3A117.14627%2C%22y%22%3A573.71405%2C%22width%22%3A79.56906%2C%22height%22%3A21.1107199999999%2C%22text%22%3A%22TCP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A652.9412%2C%22y%22%3A574.69025%2C%22width%22%3A80.41494%2C%22height%22%3A21.456549999999993%2C%22text%22%3A%22TCP%E9%A6%96%E9%83%A8%22%7D%2C%7B%22x%22%3A403.6111%2C%22y%22%3A596.2%2C%22width%22%3A134.37269999999995%2C%22height%22%3A24.571699999999964%2C%22text%22%3A%22%E4%BB%A5%E5%A4%AA%E7%BD%91%2C%E7%BD%91%E6%A1%A5%22%7D%2C%7B%22x%22%3A154.83447%2C%22y%22%3A606.59564%2C%22width%22%3A97.43914999999998%2C%22height%22%3A24.735289999999964%2C%22text%22%3A%22HTTP%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A692.8631%2C%22y%22%3A607.6777%2C%22width%22%3A96.4864%2C%22height%22%3A23.717899999999986%2C%22text%22%3A%22HTTP%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A316.09775%2C%22y%22%3A705.48157%2C%22width%22%3A349.31759%2C%22height%22%3A22.66967999999997%2C%22text%22%3A%22%E7%94%B5%E4%BF%A1%E5%8F%B7%E4%BC%A0%E8%BE%93%E7%BD%91%E7%BB%9E%E7%BA%BF%2C%E5%85%89%E7%BA%A4%2C%E6%97%A0%E7%BA%BF%E7%94%B5%E6%B3%A2)%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23eceee7%22%2C%22id%22%3A%22j7cVo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"YhF2j\" id=\"YhF2j\"><span data-lake-id=\"u74e63707\" id=\"u74e63707\">六、TCP与UDP</span></h2><h3 data-lake-id=\"PvuAx\" id=\"PvuAx\"><span data-lake-id=\"u23f43c63\" id=\"u23f43c63\">1. TCP 和 UDP的概念及特点</span></h3><p data-lake-id=\"3eb25a887fdd097c8e3968b034da6c1f\" id=\"3eb25a887fdd097c8e3968b034da6c1f\"><span data-lake-id=\"ue805a5f3\" id=\"ue805a5f3\">TCP 和 UDP都是传输层协议，他们都属于TCP/IP协议族：</span></p><p data-lake-id=\"ab39cd5471327b8d34d3583ff5108884\" id=\"ab39cd5471327b8d34d3583ff5108884\"><strong><span data-lake-id=\"ubf5ce785\" id=\"ubf5ce785\">（1）UDP</span></strong></p><p data-lake-id=\"b3e0af7915e28f06e150576b91c61eb8\" id=\"b3e0af7915e28f06e150576b91c61eb8\"><span data-lake-id=\"ud19d53ad\" id=\"ud19d53ad\">UDP的全称是</span><strong><span data-lake-id=\"u0a74924e\" id=\"u0a74924e\">用户数据报协议</span></strong><span data-lake-id=\"ubc886030\" id=\"ubc886030\">，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</span></p><p data-lake-id=\"ac7ff21f1803a60b38ec8c748a667776\" id=\"ac7ff21f1803a60b38ec8c748a667776\"><br></p><p data-lake-id=\"59f0e1cb894a417cbb9718ab7695af14\" id=\"59f0e1cb894a417cbb9718ab7695af14\"><span data-lake-id=\"ua551e7df\" id=\"ua551e7df\">它的特点如下：</span></p><p data-lake-id=\"0c31c93bf5a7f581b8b606be6550750e\" id=\"0c31c93bf5a7f581b8b606be6550750e\"><strong><span data-lake-id=\"u2af96273\" id=\"u2af96273\">1）面向无连接</span></strong></p><p data-lake-id=\"adef6460f963208dc605267d6e8862e7\" id=\"adef6460f963208dc605267d6e8862e7\"><span data-lake-id=\"uf48f7650\" id=\"uf48f7650\">首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。</span></p><p data-lake-id=\"1aa60e1405f07e9007e7ad99085d69d0\" id=\"1aa60e1405f07e9007e7ad99085d69d0\"><br></p><p data-lake-id=\"4d3423e6a29be9c1dd8f6562ebd672fb\" id=\"4d3423e6a29be9c1dd8f6562ebd672fb\"><span data-lake-id=\"u1ca83126\" id=\"u1ca83126\">具体来说就是：</span></p><ul list=\"uda12e4a7\"><li fid=\"ucbe91c09\" data-lake-id=\"a640fef08348be097e11a1ed6c6ac2ce\" id=\"a640fef08348be097e11a1ed6c6ac2ce\"><span data-lake-id=\"u61b41cda\" id=\"u61b41cda\">在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</span></li><li fid=\"ucbe91c09\" data-lake-id=\"816ded97abf109932f7aa8a662326b59\" id=\"816ded97abf109932f7aa8a662326b59\"><span data-lake-id=\"ufffa3b3a\" id=\"ufffa3b3a\">在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</span></li></ul><p data-lake-id=\"e9a1881ae299a10f0b7f5bb0818d727c\" id=\"e9a1881ae299a10f0b7f5bb0818d727c\"><strong><span data-lake-id=\"ueb1dd557\" id=\"ueb1dd557\">2）有单播，多播，广播的功能</span></strong></p><p data-lake-id=\"1b8eb4eef8d2e1cbc59a280af4a3ab90\" id=\"1b8eb4eef8d2e1cbc59a280af4a3ab90\"><span data-lake-id=\"u60c40171\" id=\"u60c40171\">UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</span></p><p data-lake-id=\"f89ad3f14b6942748ece9caadd239782\" id=\"f89ad3f14b6942748ece9caadd239782\"><strong><span data-lake-id=\"ua5c41934\" id=\"ua5c41934\">3）面向报文</span></strong></p><p data-lake-id=\"3986df6f4983df96c51659337f9c8af6\" id=\"3986df6f4983df96c51659337f9c8af6\"><span data-lake-id=\"u88bfe2cf\" id=\"u88bfe2cf\">发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</span></p><p data-lake-id=\"4038f299578be41265ff3f3852778cb9\" id=\"4038f299578be41265ff3f3852778cb9\"><strong><span data-lake-id=\"u26f3157b\" id=\"u26f3157b\">4）不可靠性</span></strong></p><p data-lake-id=\"115c8118382e5aca4d17e2d6ff046c09\" id=\"115c8118382e5aca4d17e2d6ff046c09\"><span data-lake-id=\"ue1778f95\" id=\"ue1778f95\">首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。</span></p><p data-lake-id=\"6326ab201e41b591a1083a07380f6d85\" id=\"6326ab201e41b591a1083a07380f6d85\"><span data-lake-id=\"uf4cbc6c9\" id=\"uf4cbc6c9\">并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。</span></p><p data-lake-id=\"8ea632ac54246a79e7e6891590af6434\" id=\"8ea632ac54246a79e7e6891590af6434\"><br></p><p data-lake-id=\"1f003ed84a600ed9dd7959868a8e14dd\" id=\"1f003ed84a600ed9dd7959868a8e14dd\"><span data-lake-id=\"u5ce5ae21\" id=\"u5ce5ae21\">再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</span></p><p data-lake-id=\"80956cedfe4a3120f7fe4fbefe91b100\" id=\"80956cedfe4a3120f7fe4fbefe91b100\"><strong><span data-lake-id=\"u360614d2\" id=\"u360614d2\">5）头部开销小，传输数据报文时是很高效的。</span></strong></p><p data-lake-id=\"eb1209a4235ccca879783cf262ed6281\" id=\"eb1209a4235ccca879783cf262ed6281\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1604023358917-72134998-53bd-4d9c-b71f-7a762dff31a9.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A678%2C%22height%22%3A110%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A678%2C%22originHeight%22%3A110%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22stroke%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f3f4f0%22%2C%22id%22%3A%22mKgAe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"5d98a48419a83fd2374896e4baf69e18\" id=\"5d98a48419a83fd2374896e4baf69e18\"><span data-lake-id=\"u72826b99\" id=\"u72826b99\">UDP 头部包含了以下几个数据：</span></p><ul list=\"u6be18053\"><li fid=\"u4a79f99b\" data-lake-id=\"5bfe6dc894c65ae4356716b2ab2a27bd\" id=\"5bfe6dc894c65ae4356716b2ab2a27bd\"><span data-lake-id=\"uc32a4096\" id=\"uc32a4096\">两个十六位的端口号，分别为源端口（可选字段）和目标端口</span></li><li fid=\"u4a79f99b\" data-lake-id=\"7d1ed0f7b0f0f2c54411c11c37fb8c75\" id=\"7d1ed0f7b0f0f2c54411c11c37fb8c75\"><span data-lake-id=\"u52fc636f\" id=\"u52fc636f\">整个数据报文的长度</span></li><li fid=\"u4a79f99b\" data-lake-id=\"55086be235d06afed17428befee261f2\" id=\"55086be235d06afed17428befee261f2\"><span data-lake-id=\"u98a108ea\" id=\"u98a108ea\">整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误</span></li></ul><p data-lake-id=\"1a93de1f09ecabb5621b93d9bb62602a\" id=\"1a93de1f09ecabb5621b93d9bb62602a\"><br></p><p data-lake-id=\"b9674d721f6f86263c759d7d6f662dc1\" id=\"b9674d721f6f86263c759d7d6f662dc1\"><span data-lake-id=\"u4fcbbff0\" id=\"u4fcbbff0\">因此 UDP 的头部开销小，只有8字节，相比 TCP 的至少20字节要少得多，在传输数据报文时是很高效的。</span></p><p data-lake-id=\"b5124139c493b9c2c67621da6a4cbab5\" id=\"b5124139c493b9c2c67621da6a4cbab5\"><br></p><p data-lake-id=\"5810bb4eff590ce64ca3025b113d650a\" id=\"5810bb4eff590ce64ca3025b113d650a\"><strong><span data-lake-id=\"uba011f3e\" id=\"uba011f3e\">（2）TCP</span></strong></p><p data-lake-id=\"4b270b58cf9c611de40740711ae96638\" id=\"4b270b58cf9c611de40740711ae96638\"><span data-lake-id=\"u36ea1697\" id=\"u36ea1697\">TCP的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。</span></p><p data-lake-id=\"c39d2a229253702fefed77ffedaa529f\" id=\"c39d2a229253702fefed77ffedaa529f\"><br></p><p data-lake-id=\"8e0dadb5edce100a2a44187db9f08823\" id=\"8e0dadb5edce100a2a44187db9f08823\"><span data-lake-id=\"ub992d25f\" id=\"ub992d25f\">它有以下几个特点：</span></p><p data-lake-id=\"3f09212f8e2a1a50f28a2e4a62aa5c96\" id=\"3f09212f8e2a1a50f28a2e4a62aa5c96\"><strong><span data-lake-id=\"uf9c57f26\" id=\"uf9c57f26\">1）面向连接</span></strong></p><p data-lake-id=\"adceebdeab3609033a0adc2823dd6038\" id=\"adceebdeab3609033a0adc2823dd6038\"><span data-lake-id=\"u40b8745d\" id=\"u40b8745d\">面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。</span></p><p data-lake-id=\"bf35c88528f931b5f1d7c46c2034368a\" id=\"bf35c88528f931b5f1d7c46c2034368a\"><strong><span data-lake-id=\"ue237e705\" id=\"ue237e705\">2）仅支持单播传输</span></strong></p><p data-lake-id=\"4a686929923ecf1433f8ed6d2049b887\" id=\"4a686929923ecf1433f8ed6d2049b887\"><span data-lake-id=\"u6819ea97\" id=\"u6819ea97\">每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。</span></p><p data-lake-id=\"6a8d2686c0992d5b2536d212dcdcc015\" id=\"6a8d2686c0992d5b2536d212dcdcc015\"><strong><span data-lake-id=\"u8aacf7a6\" id=\"u8aacf7a6\">3）面向字节流</span></strong></p><p data-lake-id=\"2f2a9af256b2867daba8359163de69e2\" id=\"2f2a9af256b2867daba8359163de69e2\"><span data-lake-id=\"u61603054\" id=\"u61603054\">TCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。</span></p><p data-lake-id=\"0a066128f979fc95115dea05db53997a\" id=\"0a066128f979fc95115dea05db53997a\"><strong><span data-lake-id=\"u5390173c\" id=\"u5390173c\">4）可靠传输</span></strong></p><p data-lake-id=\"b0840c90c149202144da67d98b3a662f\" id=\"b0840c90c149202144da67d98b3a662f\"><span data-lake-id=\"u7135b429\" id=\"u7135b429\">对于可靠传输，判断丢包、误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。</span></p><p data-lake-id=\"f325ad1e90375ee1eabc4b270b14a7fb\" id=\"f325ad1e90375ee1eabc4b270b14a7fb\"><strong><span data-lake-id=\"u10e03275\" id=\"u10e03275\">5）提供拥塞控制</span></strong></p><p data-lake-id=\"5e0206a3dd5268f1c5af2fde30d04986\" id=\"5e0206a3dd5268f1c5af2fde30d04986\"><span data-lake-id=\"ub7cdba8e\" id=\"ub7cdba8e\">当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。</span></p><p data-lake-id=\"d0deccfe47a7e082cdc14510b415955f\" id=\"d0deccfe47a7e082cdc14510b415955f\"><strong><span data-lake-id=\"u02f80117\" id=\"u02f80117\">6）提供全双工通信</span></strong></p><p data-lake-id=\"20682977522bc813e8e1655157c6734e\" id=\"20682977522bc813e8e1655157c6734e\"><span data-lake-id=\"u764cc003\" id=\"u764cc003\">TCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）</span></p><h3 data-lake-id=\"ZUjHs\" id=\"ZUjHs\"><span data-lake-id=\"ub7c7de29\" id=\"ub7c7de29\">2. TCP和UDP的区别</span></h3><table data-lake-id=\"xMZPn\" id=\"xMZPn\" margin=\"true\" class=\"lake-table\" style=\"width: 807px\"><colgroup><col width=\"161\"><col width=\"293\"><col width=\"353\"></colgroup><tbody><tr data-lake-id=\"u0d860866\" id=\"u0d860866\" style=\"height: 33px\"><td data-lake-id=\"u2be2e0b0\" id=\"u2be2e0b0\" style=\"background-color: #EFF3F5; vertical-align: middle\"></td><td data-lake-id=\"ud709dbcb\" id=\"ud709dbcb\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"uda9e24ca\" id=\"uda9e24ca\" style=\"text-align: center\"><span data-lake-id=\"u191306ff\" id=\"u191306ff\">UDP</span></p></td><td data-lake-id=\"u2e0ca4e6\" id=\"u2e0ca4e6\" style=\"background-color: #EFF3F5; vertical-align: middle\"><p data-lake-id=\"u026d4ef7\" id=\"u026d4ef7\" style=\"text-align: center\"><span data-lake-id=\"u1b845267\" id=\"u1b845267\">TCP</span></p></td></tr><tr data-lake-id=\"u147bcb07\" id=\"u147bcb07\" style=\"height: 33px\"><td data-lake-id=\"u8c5e1271\" id=\"u8c5e1271\" style=\"vertical-align: middle\"><p data-lake-id=\"u763c2dcb\" id=\"u763c2dcb\" style=\"text-align: center\"><span data-lake-id=\"uc162469d\" id=\"uc162469d\">是否连接</span></p></td><td data-lake-id=\"uf3b35601\" id=\"uf3b35601\" style=\"vertical-align: middle\"><p data-lake-id=\"udb664bc9\" id=\"udb664bc9\" style=\"text-align: center\"><span data-lake-id=\"u23478b31\" id=\"u23478b31\">无连接</span></p></td><td data-lake-id=\"u5573f24c\" id=\"u5573f24c\" style=\"vertical-align: middle\"><p data-lake-id=\"u66ecdcc2\" id=\"u66ecdcc2\" style=\"text-align: center\"><span data-lake-id=\"ud8899ca5\" id=\"ud8899ca5\">面向连接</span></p></td></tr><tr data-lake-id=\"ubf3193cd\" id=\"ubf3193cd\" style=\"height: 33px\"><td data-lake-id=\"uc9a374c7\" id=\"uc9a374c7\" style=\"vertical-align: middle\"><p data-lake-id=\"u3a0d5715\" id=\"u3a0d5715\" style=\"text-align: center\"><span data-lake-id=\"u1f26504a\" id=\"u1f26504a\">是否可靠</span></p></td><td data-lake-id=\"u2faac4c1\" id=\"u2faac4c1\" style=\"vertical-align: middle\"><p data-lake-id=\"u7063a36c\" id=\"u7063a36c\" style=\"text-align: center\"><span data-lake-id=\"uc4b3fdce\" id=\"uc4b3fdce\">不可靠传输，不使用流量控制和拥塞控制</span></p></td><td data-lake-id=\"uf351c1ff\" id=\"uf351c1ff\" style=\"vertical-align: middle\"><p data-lake-id=\"u24306ae6\" id=\"u24306ae6\" style=\"text-align: center\"><span data-lake-id=\"u57b8dbdb\" id=\"u57b8dbdb\">可靠传输（数据顺序和正确性），使用流量控制和拥塞控制</span></p></td></tr><tr data-lake-id=\"u74c5523d\" id=\"u74c5523d\" style=\"height: 33px\"><td data-lake-id=\"u3949067c\" id=\"u3949067c\" style=\"vertical-align: middle\"><p data-lake-id=\"u343e61d8\" id=\"u343e61d8\" style=\"text-align: center\"><span data-lake-id=\"u4b27355f\" id=\"u4b27355f\">连接对象个数</span></p></td><td data-lake-id=\"u965623e9\" id=\"u965623e9\" style=\"vertical-align: middle\"><p data-lake-id=\"u39a21c54\" id=\"u39a21c54\" style=\"text-align: center\"><span data-lake-id=\"uee1361ce\" id=\"uee1361ce\">支持一对一，一对多，多对一和多对多交互通信</span></p></td><td data-lake-id=\"u3c442935\" id=\"u3c442935\" style=\"vertical-align: middle\"><p data-lake-id=\"ubcabb00f\" id=\"ubcabb00f\" style=\"text-align: center\"><span data-lake-id=\"u82c1f8c1\" id=\"u82c1f8c1\">只能是一对一通信</span></p></td></tr><tr data-lake-id=\"ud0aca2c6\" id=\"ud0aca2c6\" style=\"height: 33px\"><td data-lake-id=\"u53e1d975\" id=\"u53e1d975\" style=\"vertical-align: middle\"><p data-lake-id=\"uaa49496c\" id=\"uaa49496c\" style=\"text-align: center\"><span data-lake-id=\"u2cae3a3a\" id=\"u2cae3a3a\">传输方式</span></p></td><td data-lake-id=\"u14f5a287\" id=\"u14f5a287\" style=\"vertical-align: middle\"><p data-lake-id=\"u99419585\" id=\"u99419585\" style=\"text-align: center\"><span data-lake-id=\"ue53b77ac\" id=\"ue53b77ac\">面向报文</span></p></td><td data-lake-id=\"u3802e631\" id=\"u3802e631\" style=\"vertical-align: middle\"><p data-lake-id=\"ub499fc9f\" id=\"ub499fc9f\" style=\"text-align: center\"><span data-lake-id=\"ubf0ec2a7\" id=\"ubf0ec2a7\">面向字节流</span></p></td></tr><tr data-lake-id=\"uc6874053\" id=\"uc6874053\" style=\"height: 33px\"><td data-lake-id=\"ud0dc9e04\" id=\"ud0dc9e04\" style=\"vertical-align: middle\"><p data-lake-id=\"ube74624c\" id=\"ube74624c\" style=\"text-align: center\"><span data-lake-id=\"u9b2a7398\" id=\"u9b2a7398\">首部开销</span></p></td><td data-lake-id=\"u10627d3a\" id=\"u10627d3a\" style=\"vertical-align: middle\"><p data-lake-id=\"ufc82041e\" id=\"ufc82041e\" style=\"text-align: center\"><span data-lake-id=\"uaeced380\" id=\"uaeced380\">首部开销小，仅8字节</span></p></td><td data-lake-id=\"u1ff83ddc\" id=\"u1ff83ddc\" style=\"vertical-align: middle\"><p data-lake-id=\"ube4991cc\" id=\"ube4991cc\" style=\"text-align: center\"><span data-lake-id=\"u855b94ca\" id=\"u855b94ca\">首部最小20字节，最大60字节</span></p></td></tr><tr data-lake-id=\"u11b94487\" id=\"u11b94487\" style=\"height: 33px\"><td data-lake-id=\"u6374ac56\" id=\"u6374ac56\" style=\"vertical-align: middle\"><p data-lake-id=\"u89d31125\" id=\"u89d31125\" style=\"text-align: center\"><span data-lake-id=\"u82d50599\" id=\"u82d50599\">适用场景</span></p></td><td data-lake-id=\"uf1b8f9b8\" id=\"uf1b8f9b8\" style=\"vertical-align: middle\"><p data-lake-id=\"u9534084a\" id=\"u9534084a\" style=\"text-align: center\"><span data-lake-id=\"u3ae7ab69\" id=\"u3ae7ab69\">适用于实时应用，例如视频会议、直播</span></p></td><td data-lake-id=\"u3cb9f9f3\" id=\"u3cb9f9f3\" style=\"vertical-align: middle\"><p data-lake-id=\"ubf298076\" id=\"ubf298076\" style=\"text-align: center\"><span data-lake-id=\"u0603a7e8\" id=\"u0603a7e8\">适用于要求可靠传输的应用，例如文件传输</span></p></td></tr></tbody></table><h3 data-lake-id=\"dRL9o\" id=\"dRL9o\"><span data-lake-id=\"u85ad8405\" id=\"u85ad8405\">3. TCP和UDP的使用场景</span></h3><ul list=\"u41eaecdd\"><li fid=\"u5bf84675\" data-lake-id=\"9611541a4d01eb3527978ac05c32ca1f\" id=\"9611541a4d01eb3527978ac05c32ca1f\"><strong><span data-lake-id=\"u3fb38059\" id=\"u3fb38059\">TCP应用场景：</span></strong><span data-lake-id=\"u5c7e6604\" id=\"u5c7e6604\"> 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有UDP高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。</span></li><li fid=\"u5bf84675\" data-lake-id=\"f4110127d0e5cde58fb2cc126e5ed8ff\" id=\"f4110127d0e5cde58fb2cc126e5ed8ff\"><strong><span data-lake-id=\"u1f120b1d\" id=\"u1f120b1d\">UDP应用场景：</span></strong><span data-lake-id=\"u076fc7bc\" id=\"u076fc7bc\"> 效率要求相对高，对准确性要求相对低的场景。例如：QQ聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。</span></li></ul><h3 data-lake-id=\"xgz6P\" id=\"xgz6P\"><span data-lake-id=\"u50da073a\" id=\"u50da073a\">4. UDP协议为什么不可靠？</span></h3><p data-lake-id=\"87346a276dfe9224c57e20cb1e652c2e\" id=\"87346a276dfe9224c57e20cb1e652c2e\"><span data-lake-id=\"u5fc94e4b\" id=\"u5fc94e4b\">UDP在传输数据之前不需要先建立连接，远地主机的运输层在接收到UDP报文后，不需要确认，提供不可靠交付。总结就以下四点：</span></p><ul list=\"ub6c6626e\"><li fid=\"u99afc045\" data-lake-id=\"944cf1c993a888cdeaeab525eae176b0\" id=\"944cf1c993a888cdeaeab525eae176b0\"><span data-lake-id=\"u4a4d9b1e\" id=\"u4a4d9b1e\">不保证消息交付：不确认，不重传，无超时</span></li><li fid=\"u99afc045\" data-lake-id=\"f07fa5405fd7556785e5941cbb839cfa\" id=\"f07fa5405fd7556785e5941cbb839cfa\"><span data-lake-id=\"u14d32abc\" id=\"u14d32abc\">不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞</span></li><li fid=\"u99afc045\" data-lake-id=\"ce24b0f58ddac44b73755f3cc22d7436\" id=\"ce24b0f58ddac44b73755f3cc22d7436\"><span data-lake-id=\"u796ef7c4\" id=\"u796ef7c4\">不跟踪连接状态：不必建立连接或重启状态机</span></li><li fid=\"u99afc045\" data-lake-id=\"5ec9dc1a01c5347848806493eeccfe3b\" id=\"5ec9dc1a01c5347848806493eeccfe3b\"><span data-lake-id=\"ubb478b7b\" id=\"ubb478b7b\">不进行拥塞控制：不内置客户端或网络反馈机制</span></li></ul><h3 data-lake-id=\"a93a736d\" id=\"a93a736d\"><span data-lake-id=\"uc4d0f442\" id=\"uc4d0f442\">5. TCP的重传机制</span></h3><p data-lake-id=\"e9b7997e841aef9705ed3b1eaaea9261\" id=\"e9b7997e841aef9705ed3b1eaaea9261\"><span data-lake-id=\"ub834dfe5\" id=\"ub834dfe5\">由于TCP的下层网络（网络层）可能出现</span><strong><span data-lake-id=\"u632912e8\" id=\"u632912e8\">丢失、重复或失序</span></strong><span data-lake-id=\"ued39b445\" id=\"ued39b445\">的情况，TCP协议提供可靠数据传输服务。为保证数据传输的正确性，TCP会重传其认为已丢失（包括报文中的比特错误）的包。TCP使用两套独立的机制来完成重传，一是</span><strong><span data-lake-id=\"ud4acdcc2\" id=\"ud4acdcc2\">基于时间</span></strong><span data-lake-id=\"u5d558de0\" id=\"u5d558de0\">，二是</span><strong><span data-lake-id=\"u605dada6\" id=\"u605dada6\">基于确认信息</span></strong><span data-lake-id=\"ucbac201a\" id=\"ucbac201a\">。</span></p><p data-lake-id=\"1238b7359e0c70ae64eb4d7e88768b15\" id=\"1238b7359e0c70ae64eb4d7e88768b15\"><br></p><p data-lake-id=\"eaf7af3284ecc1a0f66087238192d3d1\" id=\"eaf7af3284ecc1a0f66087238192d3d1\"><span data-lake-id=\"ua1f59916\" id=\"ua1f59916\">TCP在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的ACK确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。</span></p><h3 data-lake-id=\"YadK0\" id=\"YadK0\"><span data-lake-id=\"u55f18046\" id=\"u55f18046\">6. TCP的拥塞控制机制</span></h3><p data-lake-id=\"d52bb79b5d05005c37c2e70a656ea455\" id=\"d52bb79b5d05005c37c2e70a656ea455\"><span data-lake-id=\"u20f17f10\" id=\"u20f17f10\">TCP的拥塞控制机制主要是以下四种机制：</span></p><ul list=\"u2cb73426\"><li fid=\"u33d13766\" data-lake-id=\"972314afadeff5847ffcff7fe9f41746\" id=\"972314afadeff5847ffcff7fe9f41746\"><span data-lake-id=\"u2f52e6fa\" id=\"u2f52e6fa\">慢启动（慢开始）</span></li><li fid=\"u33d13766\" data-lake-id=\"e01fda3e5f2645308897c78e204278a6\" id=\"e01fda3e5f2645308897c78e204278a6\"><span data-lake-id=\"u162d6a5f\" id=\"u162d6a5f\">拥塞避免</span></li><li fid=\"u33d13766\" data-lake-id=\"6007e8200889c597bc3ecb7fb2764a79\" id=\"6007e8200889c597bc3ecb7fb2764a79\"><span data-lake-id=\"uf0d18f10\" id=\"uf0d18f10\">快速重传</span></li><li fid=\"u33d13766\" data-lake-id=\"247fcae312aa863d176eb690ea00b0c5\" id=\"247fcae312aa863d176eb690ea00b0c5\"><span data-lake-id=\"uebd5377c\" id=\"uebd5377c\">快速恢复</span></li></ul><p data-lake-id=\"d8a194f4647b34bf4eb5a0030aa4bbac\" id=\"d8a194f4647b34bf4eb5a0030aa4bbac\"><strong><span data-lake-id=\"ue715d5b0\" id=\"ue715d5b0\">（1）慢启动（慢开始）</span></strong></p><ul list=\"u8f9eaba9\"><li fid=\"u674a3c4a\" data-lake-id=\"59883eff8525a6268f361d429dc9b35d\" id=\"59883eff8525a6268f361d429dc9b35d\"><span data-lake-id=\"u3fe5e016\" id=\"u3fe5e016\">在开始发送的时候设置cwnd = 1（cwnd指的是拥塞窗口）</span></li><li fid=\"u674a3c4a\" data-lake-id=\"3d50ff3dd72edac547984de4109998f0\" id=\"3d50ff3dd72edac547984de4109998f0\"><span data-lake-id=\"u60a66dd6\" id=\"u60a66dd6\">思路：开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小。</span></li><li fid=\"u674a3c4a\" data-lake-id=\"32125f94e2a34a9ac33b04f3aa1a8cc7\" id=\"32125f94e2a34a9ac33b04f3aa1a8cc7\"><span data-lake-id=\"ud91787a2\" id=\"ud91787a2\">为了防止cwnd增长过大引起网络拥塞，设置一个慢开始门限(ssthresh 状态变量)</span></li></ul><ul list=\"uf214ebfd\" data-lake-indent=\"1\"><li fid=\"ued478a9d\" data-lake-id=\"821c62a713a8d77893aaab404188e576\" id=\"821c62a713a8d77893aaab404188e576\"><span data-lake-id=\"u9c43263d\" id=\"u9c43263d\">当cnwd &lt; ssthresh，使用慢开始算法</span></li><li fid=\"ued478a9d\" data-lake-id=\"d13a3aa4388d3a3bad0e71f0600bdf8b\" id=\"d13a3aa4388d3a3bad0e71f0600bdf8b\"><span data-lake-id=\"u193d2f09\" id=\"u193d2f09\">当cnwd = ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法</span></li><li fid=\"ued478a9d\" data-lake-id=\"1e37c0d6d6bff54233fea23ae8bfb13c\" id=\"1e37c0d6d6bff54233fea23ae8bfb13c\"><span data-lake-id=\"u4b354726\" id=\"u4b354726\">当cnwd &gt; ssthresh，使用拥塞避免算法</span></li></ul><p data-lake-id=\"6b0d0cbc308d2fa1b1b8ab21bfe6cef1\" id=\"6b0d0cbc308d2fa1b1b8ab21bfe6cef1\"><strong><span data-lake-id=\"u2a05d09e\" id=\"u2a05d09e\">（2）拥塞避免</span></strong></p><ul list=\"ub9230356\"><li fid=\"u7c1da4ff\" data-lake-id=\"7a8b4711163c55c7e733630b5b0aeaca\" id=\"7a8b4711163c55c7e733630b5b0aeaca\"><span data-lake-id=\"udc8cddab\" id=\"udc8cddab\">拥塞避免未必能够完全避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。</span></li><li fid=\"u7c1da4ff\" data-lake-id=\"0c4b0a0a080180343a6b1a8b20b7099c\" id=\"0c4b0a0a080180343a6b1a8b20b7099c\"><span data-lake-id=\"ue8bb2825\" id=\"ue8bb2825\">思路： 让拥塞窗口cwnd缓慢的增大，即每经过一个返回时间RTT就把发送方的拥塞控制窗口加一</span></li><li fid=\"u7c1da4ff\" data-lake-id=\"c3b4a1868415f128f04823745cdc1e83\" id=\"c3b4a1868415f128f04823745cdc1e83\"><span data-lake-id=\"ufc159200\" id=\"ufc159200\">无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。如图所示:<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1604022952123-62276cba-d882-46c9-8a1c-70655dc501af.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1113%2C%22height%22%3A540%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1113%2C%22originHeight%22%3A540%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23efefef%22%2C%22id%22%3A%22ZxajG%22%7D\"></card><span data-lake-id=\"u3a7d0229\" id=\"u3a7d0229\"><br /></span><span data-lake-id=\"uc4aeaaff\" id=\"uc4aeaaff\">其中，判断网络出现拥塞的根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理。</span></li></ul><p data-lake-id=\"ff6f248f7cfab8ac55546ca7908f6192\" id=\"ff6f248f7cfab8ac55546ca7908f6192\"><strong><span data-lake-id=\"ud9452145\" id=\"ud9452145\">（3）快速重传</span></strong></p><ul list=\"u16eb826b\"><li fid=\"uf89a23d1\" data-lake-id=\"6f73cdf48b1686fd88cda2574e010021\" id=\"6f73cdf48b1686fd88cda2574e010021\"><span data-lake-id=\"ua35a4006\" id=\"ua35a4006\">快重传要求接收方在收到一个失序的报文段后就立即发出重复确认(为的是使发送方及早知道有报文段没有到达对方)。发送方只要连续收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</span></li><li fid=\"uf89a23d1\" data-lake-id=\"d67a655dc5ba48ba8b062b1c72a06ae3\" id=\"d67a655dc5ba48ba8b062b1c72a06ae3\"><span data-lake-id=\"u54fd4021\" id=\"u54fd4021\">由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量</span></li></ul><p data-lake-id=\"2fc08d95252ed263cfe4c37ec742d633\" id=\"2fc08d95252ed263cfe4c37ec742d633\"><strong><span data-lake-id=\"ube686d1c\" id=\"ube686d1c\">（4）快速恢复</span></strong></p><ul list=\"uc9ec61eb\"><li fid=\"u321d4986\" data-lake-id=\"430ac5de6ff8e91407ca6de3df5a6a61\" id=\"430ac5de6ff8e91407ca6de3df5a6a61\"><span data-lake-id=\"ufd10e82f\" id=\"ufd10e82f\">当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。</span></li><li fid=\"u321d4986\" data-lake-id=\"91fc78b7cc479a0a64c6368b9ab0d7b7\" id=\"91fc78b7cc479a0a64c6368b9ab0d7b7\"><span data-lake-id=\"u5e76e4fc\" id=\"u5e76e4fc\">考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。<br /></span><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1604022952153-a7106d22-225d-4081-9b0a-56b0d1876bc2.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1452%2C%22height%22%3A589%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1452%2C%22originHeight%22%3A589%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22none%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23eeeeee%22%2C%22id%22%3A%22VZSet%22%7D\"></card></li></ul><h3 data-lake-id=\"Tcz4G\" id=\"Tcz4G\"><span data-lake-id=\"ud80044d1\" id=\"ud80044d1\">7. TCP的流量控制机制</span></h3><p data-lake-id=\"7ae210a3190776c78b110560e08126dc\" id=\"7ae210a3190776c78b110560e08126dc\"><span data-lake-id=\"u501cdfaa\" id=\"u501cdfaa\">一般来说，流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP采用大小可变的</span><strong><span data-lake-id=\"u0e61a395\" id=\"u0e61a395\">滑动窗口</span></strong><span data-lake-id=\"u758390ff\" id=\"u758390ff\">进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。</span></p><ul list=\"u75cbbcd5\"><li fid=\"u9b445137\" data-lake-id=\"91ba87058dc3932eb6f69a2281213579\" id=\"91ba87058dc3932eb6f69a2281213579\"><span data-lake-id=\"u214fcb51\" id=\"u214fcb51\">当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的大小发送给另一端。</span></li><li fid=\"u9b445137\" data-lake-id=\"43a837fe64d02d1dfbf0388fa22e71c2\" id=\"43a837fe64d02d1dfbf0388fa22e71c2\"><span data-lake-id=\"uad7d99a8\" id=\"uad7d99a8\">当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区大小。（剩余的缓冲区空间的大小被称为窗口，指出窗口大小的通知称为窗口通告 。接收方在发送的每一确认中都含有一个窗口通告。）</span></li><li fid=\"u9b445137\" data-lake-id=\"a67ae7f3c60e9ad6ecb743df7375ae1a\" id=\"a67ae7f3c60e9ad6ecb743df7375ae1a\"><span data-lake-id=\"u23803fd2\" id=\"u23803fd2\">如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。</span></li><li fid=\"u9b445137\" data-lake-id=\"5fbfcb5d221f15097dd398bb0eba1823\" id=\"5fbfcb5d221f15097dd398bb0eba1823\"><span data-lake-id=\"u64a27036\" id=\"u64a27036\">如果发送方操作的速度快于接收方，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。</span></li></ul><h3 data-lake-id=\"nTRrR\" id=\"nTRrR\"><span data-lake-id=\"u8e598ead\" id=\"u8e598ead\">8. TCP的可靠传输机制</span></h3><p data-lake-id=\"b3eabdb217d77dd0c9d742004c640926\" id=\"b3eabdb217d77dd0c9d742004c640926\"><span data-lake-id=\"ubc8c7d5b\" id=\"ubc8c7d5b\">TCP 的可靠传输机制是基于连续 ARQ 协议和滑动窗口协议的。</span></p><p data-lake-id=\"e3e387a0212034172aada72b61407e49\" id=\"e3e387a0212034172aada72b61407e49\"><br></p><p data-lake-id=\"9ae0423bcd4d82dc790f93d943f91c9b\" id=\"9ae0423bcd4d82dc790f93d943f91c9b\"><span data-lake-id=\"ua1fbf2c3\" id=\"ua1fbf2c3\">TCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但 未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发 送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。 如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如 果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送 但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示， 说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发 送但确认的报文段。</span></p><p data-lake-id=\"acf703d9269fe66a1faa690e0899b9a4\" id=\"acf703d9269fe66a1faa690e0899b9a4\"><br></p><p data-lake-id=\"429ad1a3f79dab80734e08ed6773a825\" id=\"429ad1a3f79dab80734e08ed6773a825\"><span data-lake-id=\"u976751de\" id=\"u976751de\">接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都 已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。</span></p><p data-lake-id=\"d4f0490cff6559f822b4085713b50881\" id=\"d4f0490cff6559f822b4085713b50881\"><br></p><p data-lake-id=\"14ae4b79aa87c6ee19c7a1ff4b62a23b\" id=\"14ae4b79aa87c6ee19c7a1ff4b62a23b\"><span data-lake-id=\"u72f1db1b\" id=\"u72f1db1b\">发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文 段的发送速率。</span></p><p data-lake-id=\"5f923f1b856ff62caa72d9936e2ac979\" id=\"5f923f1b856ff62caa72d9936e2ac979\"><br></p><p data-lake-id=\"de201586e716d42d3b8638317cdf1c7d\" id=\"de201586e716d42d3b8638317cdf1c7d\"><span data-lake-id=\"u8d5524d3\" id=\"u8d5524d3\">但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重 传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。</span></p><h3 data-lake-id=\"L6Ep1\" id=\"L6Ep1\"><span data-lake-id=\"u2f9048f7\" id=\"u2f9048f7\">9. TCP的三次握手和四次挥手</span></h3><h4 data-lake-id=\"0XowK\" id=\"0XowK\"><span data-lake-id=\"uc53eefac\" id=\"uc53eefac\">（1）三次握手</span></h4><p data-lake-id=\"29dd5754b63197c31fdd51b4a7cfc4ae\" id=\"29dd5754b63197c31fdd51b4a7cfc4ae\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1604023663256-5eb6dcdf-fdb6-4b67-a3da-da15c1d396fb.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A680%2C%22height%22%3A437%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A680%2C%22originHeight%22%3A437%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ececec%22%2C%22id%22%3A%22OPLIo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"1e5f0e3808c55349e9c91f524c91ef9b\" id=\"1e5f0e3808c55349e9c91f524c91ef9b\"><span data-lake-id=\"u87246575\" id=\"u87246575\">三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。</span></p><p data-lake-id=\"f8b53fe98fe14c53c8d97c6bf1cf6282\" id=\"f8b53fe98fe14c53c8d97c6bf1cf6282\"><br></p><p data-lake-id=\"19b56e6c02e896f4bcd1f09f6c74f671\" id=\"19b56e6c02e896f4bcd1f09f6c74f671\"><span data-lake-id=\"u833b2b99\" id=\"u833b2b99\">刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。</span></p><ul list=\"ue5bcded0\"><li fid=\"u3fceb1c0\" data-lake-id=\"ab1fe80589856eaeaf82eecb54c35eb7\" id=\"ab1fe80589856eaeaf82eecb54c35eb7\"><span data-lake-id=\"ua51608b2\" id=\"ua51608b2\">第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。</span></li></ul><blockquote data-lake-id=\"u419f5864\" id=\"u419f5864\"><p data-lake-id=\"a5b929b5b188fde31cd3dce49a97bd25\" id=\"a5b929b5b188fde31cd3dce49a97bd25\"><span data-lake-id=\"u027d08ed\" id=\"u027d08ed\">首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。</span></p></blockquote><ul list=\"uc70f63d9\"><li fid=\"ud4098836\" data-lake-id=\"12b551146c6163c143e83522a1a11c25\" id=\"12b551146c6163c143e83522a1a11c25\"><span data-lake-id=\"u1f708508\" id=\"u1f708508\">第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。</span></li></ul><blockquote data-lake-id=\"ucd9c1f59\" id=\"ucd9c1f59\"><p data-lake-id=\"2aa0f6420a1cedaff7c59ff1d42d990e\" id=\"2aa0f6420a1cedaff7c59ff1d42d990e\"><span data-lake-id=\"u347bbc24\" id=\"u347bbc24\">在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y</span></p></blockquote><ul list=\"u85cbf0e3\"><li fid=\"u6581abcc\" data-lake-id=\"0941c0939e4e0f89a04ccc67e8bd7bec\" id=\"0941c0939e4e0f89a04ccc67e8bd7bec\"><span data-lake-id=\"u0eeaca4b\" id=\"u0eeaca4b\">第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</span></li></ul><blockquote data-lake-id=\"u5df15880\" id=\"u5df15880\"><p data-lake-id=\"daac42ea1ef9ba85da0d52fcdc8658a1\" id=\"daac42ea1ef9ba85da0d52fcdc8658a1\"><span data-lake-id=\"ufed5d36f\" id=\"ufed5d36f\">确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。</span></p></blockquote><p data-lake-id=\"52b0fb4ef65e6201a89e2113b8072baf\" id=\"52b0fb4ef65e6201a89e2113b8072baf\"><br></p><p data-lake-id=\"70c158138d90be1543530f8a65154cc4\" id=\"70c158138d90be1543530f8a65154cc4\"><strong><span data-lake-id=\"u14c81bb6\" id=\"u14c81bb6\">那为什么要三次握手呢？两次不行吗？</span></strong></p><ul list=\"u7bfe0341\"><li fid=\"u9d34250f\" data-lake-id=\"f8ede45d9ef361ed3e375b3594ab8e5c\" id=\"f8ede45d9ef361ed3e375b3594ab8e5c\"><span data-lake-id=\"u423377e8\" id=\"u423377e8\">为了确认双方的接收能力和发送能力都正常</span></li><li fid=\"u9d34250f\" data-lake-id=\"03de113a5240926e12b1986a5f724352\" id=\"03de113a5240926e12b1986a5f724352\"><span data-lake-id=\"u1e252564\" id=\"u1e252564\">如果是用两次握手，则会出现下面这种情况：</span></li></ul><blockquote data-lake-id=\"u2e03ec77\" id=\"u2e03ec77\"><p data-lake-id=\"4dfc8b5ff346eb355615dcaa087cafdc\" id=\"4dfc8b5ff346eb355615dcaa087cafdc\"><span data-lake-id=\"u4469c195\" id=\"u4469c195\">如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</span></p></blockquote><p data-lake-id=\"686bfc0367f65fe1deeb80def221f5f7\" id=\"686bfc0367f65fe1deeb80def221f5f7\"><br></p><p data-lake-id=\"24894b9cd483f97b318c950fc1df2c21\" id=\"24894b9cd483f97b318c950fc1df2c21\"><strong><span data-lake-id=\"uffdcb9f1\" id=\"uffdcb9f1\">简单来说就是以下三步：</span></strong></p><ul list=\"u23646e17\"><li fid=\"u34dbb522\" data-lake-id=\"6f4a0b40fc427ee5530a339455639af6\" id=\"6f4a0b40fc427ee5530a339455639af6\"><strong><span data-lake-id=\"u7781a8d5\" id=\"u7781a8d5\">第一次握手：</span></strong><span data-lake-id=\"u73f8fc8b\" id=\"u73f8fc8b\">客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</span></li><li fid=\"u34dbb522\" data-lake-id=\"d44c4f50f30b5c0ce2d63eb7f0c14097\" id=\"d44c4f50f30b5c0ce2d63eb7f0c14097\"><strong><span data-lake-id=\"u62f153dc\" id=\"u62f153dc\">第二次握手：</span></strong><span data-lake-id=\"u921fe175\" id=\"u921fe175\">服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</span></li><li fid=\"u34dbb522\" data-lake-id=\"a2db855f854b756a5b4a3f83d6ef20b4\" id=\"a2db855f854b756a5b4a3f83d6ef20b4\"><strong><span data-lake-id=\"udecaa9f8\" id=\"udecaa9f8\">第三次握手：</span></strong><span data-lake-id=\"ue1e14524\" id=\"ue1e14524\">当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</span></li></ul><p data-lake-id=\"deeab6ed964170263e9f95e36ea1bbd0\" id=\"deeab6ed964170263e9f95e36ea1bbd0\"><br></p><p data-lake-id=\"b7d3e0e89fe5055aae252f21c702c842\" id=\"b7d3e0e89fe5055aae252f21c702c842\"><span data-lake-id=\"u08edda03\" id=\"u08edda03\">TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。 第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否 已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。</span></p><h4 data-lake-id=\"ygRqx\" id=\"ygRqx\"><span data-lake-id=\"u7b42f1c8\" id=\"u7b42f1c8\">（2）四次挥手</span></h4><p data-lake-id=\"74d16234638ede6a4f714841185407ef\" id=\"74d16234638ede6a4f714841185407ef\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1604023663279-0ea063ba-a06b-4f57-9aa9-0e2d1c8d373c.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A680%2C%22height%22%3A470%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A680%2C%22originHeight%22%3A470%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23ebebeb%22%2C%22id%22%3A%22aYush%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"6d36576974c4b68c19d0f74b04e04c1f\" id=\"6d36576974c4b68c19d0f74b04e04c1f\"><span data-lake-id=\"u6db69b91\" id=\"u6db69b91\">刚开始双方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</span></p><ul list=\"u7cc9f0d0\"><li fid=\"u81875e00\" data-lake-id=\"be65cfd72e1b3dec9137ef7ba13f7c88\" id=\"be65cfd72e1b3dec9137ef7ba13f7c88\"><span data-lake-id=\"uaabbdbda\" id=\"uaabbdbda\">第一次挥手： 客户端会发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。</span></li></ul><blockquote data-lake-id=\"u848764f4\" id=\"u848764f4\"><p data-lake-id=\"352039cd8439b718f1ed432b569cdc7b\" id=\"352039cd8439b718f1ed432b569cdc7b\"><span data-lake-id=\"u52c321bb\" id=\"u52c321bb\">即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。</span></p></blockquote><ul list=\"u87e448d1\"><li fid=\"u34c5a64b\" data-lake-id=\"7bff010af7c4ca84fb2f9c9c727cca1a\" id=\"7bff010af7c4ca84fb2f9c9c727cca1a\"><span data-lake-id=\"uaa7318d5\" id=\"uaa7318d5\">第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</span></li></ul><blockquote data-lake-id=\"u4a622d36\" id=\"u4a622d36\"><p data-lake-id=\"d81f31e8fcbd3e191c88a9700f3974d8\" id=\"d81f31e8fcbd3e191c88a9700f3974d8\"><span data-lake-id=\"u33807072\" id=\"u33807072\">即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。</span></p></blockquote><ul list=\"u6a2148d6\"><li fid=\"uca94f30a\" data-lake-id=\"c3ab493961913d6d6819004060428b65\" id=\"c3ab493961913d6d6819004060428b65\"><span data-lake-id=\"u8ed48896\" id=\"u8ed48896\">第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。</span></li></ul><blockquote data-lake-id=\"uf2d36b98\" id=\"uf2d36b98\"><p data-lake-id=\"489c79d87fe5f7de3aaeb8898382d102\" id=\"489c79d87fe5f7de3aaeb8898382d102\"><span data-lake-id=\"u571b5d12\" id=\"u571b5d12\">即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。</span></p></blockquote><ul list=\"u0e55df17\"><li fid=\"u987d6a2e\" data-lake-id=\"db567ab51b3480ceff235ced3576bcb3\" id=\"db567ab51b3480ceff235ced3576bcb3\"><span data-lake-id=\"u3eb7233d\" id=\"u3eb7233d\">第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</span></li></ul><blockquote data-lake-id=\"uec5d6dda\" id=\"uec5d6dda\"><p data-lake-id=\"ed9d0554fe538b1548484e60fd654db0\" id=\"ed9d0554fe538b1548484e60fd654db0\"><span data-lake-id=\"u0339de92\" id=\"u0339de92\">即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。</span></p></blockquote><p data-lake-id=\"ee91250f6f8622339f88c71847931f8e\" id=\"ee91250f6f8622339f88c71847931f8e\"><strong><span data-lake-id=\"u3d98bec4\" id=\"u3d98bec4\">那为什么需要四次挥手呢？</span></strong></p><blockquote data-lake-id=\"u29f02160\" id=\"u29f02160\"><p data-lake-id=\"e999c5bf062fa633117fcb261a125cad\" id=\"e999c5bf062fa633117fcb261a125cad\"><span data-lake-id=\"u02cead84\" id=\"u02cead84\">因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送，故需要四次挥手。</span></p></blockquote><p data-lake-id=\"6cc68c61781923d1b15a543d88c2b02b\" id=\"6cc68c61781923d1b15a543d88c2b02b\"><br></p><p data-lake-id=\"936dc5f8ad70526048b203ba0b18f3c9\" id=\"936dc5f8ad70526048b203ba0b18f3c9\"><strong><span data-lake-id=\"u5195c11a\" id=\"u5195c11a\">简单来说就是以下四步：</span></strong></p><ul list=\"u408faad8\"><li fid=\"uea04927d\" data-lake-id=\"b4172808b20a187872ae0cc3ee4277fb\" id=\"b4172808b20a187872ae0cc3ee4277fb\"><strong><span data-lake-id=\"u27a12a1c\" id=\"u27a12a1c\">第一次</span></strong><strong><span data-lake-id=\"u708c4690\" id=\"u708c4690\">挥手</span></strong><strong><span data-lake-id=\"u3585a8fa\" id=\"u3585a8fa\">：</span></strong><span data-lake-id=\"u356d19c0\" id=\"u356d19c0\">若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。</span></li><li fid=\"uea04927d\" data-lake-id=\"b7226a0b4590851688812b584bf7e72a\" id=\"b7226a0b4590851688812b584bf7e72a\"><strong><span data-lake-id=\"ude8f952f\" id=\"ude8f952f\">第二次</span></strong><strong><span data-lake-id=\"ucdf317c2\" id=\"ucdf317c2\">挥手</span></strong><span data-lake-id=\"uacc81f15\" id=\"uacc81f15\">：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明</span><span data-lake-id=\"u546fa415\" id=\"u546fa415\">客户端</span><span data-lake-id=\"u51c78707\" id=\"u51c78707\">到服务端的连接已经释放，不再接收</span><span data-lake-id=\"u2234cf5c\" id=\"u2234cf5c\">客户端</span><span data-lake-id=\"u71120331\" id=\"u71120331\">发的数据了。但是因为 TCP 连接是双向的，所以</span><span data-lake-id=\"u30e2687d\" id=\"u30e2687d\">服务端</span><span data-lake-id=\"ua75d6504\" id=\"ua75d6504\">仍旧可以发送数据给</span><span data-lake-id=\"u369e774b\" id=\"u369e774b\">客户端</span><span data-lake-id=\"ud9136677\" id=\"ud9136677\">。</span></li><li fid=\"uea04927d\" data-lake-id=\"31ac8654db30e6ec7b54ea883a51c6b7\" id=\"31ac8654db30e6ec7b54ea883a51c6b7\"><strong><span data-lake-id=\"ud628f3e0\" id=\"ud628f3e0\">第三次挥手</span></strong><span data-lake-id=\"uf7c7ca8a\" id=\"uf7c7ca8a\">：</span><span data-lake-id=\"uf9a986fd\" id=\"uf9a986fd\">服务端</span><span data-lake-id=\"uaf258a1b\" id=\"uaf258a1b\">如果此时还有没发完的数据会继续发送，完毕后会向</span><span data-lake-id=\"ud617b932\" id=\"ud617b932\">客户端</span><span data-lake-id=\"uef2f59bd\" id=\"uef2f59bd\">发送连接释放请求，然后</span><span data-lake-id=\"ude1f2566\" id=\"ude1f2566\">服务端</span><span data-lake-id=\"u16b93722\" id=\"u16b93722\">便进入 LAST-ACK 状态。</span></li><li fid=\"uea04927d\" data-lake-id=\"91a56b85a8c32a15aeb3ccb35f511a56\" id=\"91a56b85a8c32a15aeb3ccb35f511a56\"><strong><span data-lake-id=\"uc21775bf\" id=\"uc21775bf\">第四次</span></strong><strong><span data-lake-id=\"u12dda598\" id=\"u12dda598\">挥手</span></strong><strong><span data-lake-id=\"u4ad7ba5f\" id=\"u4ad7ba5f\">：</span></strong><span data-lake-id=\"u5f0aa875\" id=\"u5f0aa875\">客户端</span><span data-lake-id=\"u22121650\" id=\"u22121650\">收到释放请求后，向</span><span data-lake-id=\"u05ed76ee\" id=\"u05ed76ee\">服务端</span><span data-lake-id=\"u4f65faf1\" id=\"u4f65faf1\">发送确认应答，此时</span><span data-lake-id=\"u52fabcd1\" id=\"u52fabcd1\">客户端</span><span data-lake-id=\"uef8327aa\" id=\"uef8327aa\">进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有</span><span data-lake-id=\"uf5a4bfd2\" id=\"uf5a4bfd2\">服务端</span><span data-lake-id=\"u3b0c59a3\" id=\"u3b0c59a3\">的重发请求的话，就进入 CLOSED 状态。当</span><span data-lake-id=\"uf4bd3d10\" id=\"uf4bd3d10\">服务端</span><span data-lake-id=\"uf87c80fc\" id=\"uf87c80fc\">收到确认应答后，也便进入 CLOSED 状态。</span></li></ul><p data-lake-id=\"dee611e6facfb74f321a0f7218a017b8\" id=\"dee611e6facfb74f321a0f7218a017b8\"><br></p><p data-lake-id=\"96231f0b9d22b2941acbbe125e89d455\" id=\"96231f0b9d22b2941acbbe125e89d455\"><span data-lake-id=\"u49cca621\" id=\"u49cca621\">TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。</span></p><p data-lake-id=\"48ac36e08009746adb1482a5537f951c\" id=\"48ac36e08009746adb1482a5537f951c\"><br></p><p data-lake-id=\"bc27cb28dab3435be4741cbb4510c2c3\" id=\"bc27cb28dab3435be4741cbb4510c2c3\"><span data-lake-id=\"ucb715840\" id=\"ucb715840\">最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。</span></p><h3 data-lake-id=\"RkRAS\" id=\"RkRAS\"><span data-lake-id=\"uf7447cad\" id=\"uf7447cad\">10. </span><strong><span data-lake-id=\"uddbcb773\" id=\"uddbcb773\">TCP</span></strong><span data-lake-id=\"u9dc205dc\" id=\"u9dc205dc\">粘包是怎么回事，如何处理</span><strong><span data-lake-id=\"uc779b1a5\" id=\"uc779b1a5\">? </span></strong></h3><p data-lake-id=\"1ee4456edea387c740b3b8cae41c5d2d\" id=\"1ee4456edea387c740b3b8cae41c5d2d\"><span data-lake-id=\"u708f7d80\" id=\"u708f7d80\">默认情况下, TCP 连接会启⽤延迟传送算法 (Nagle 算法), 在数据发送之前缓存他们. 如果短时间有多个数据发送, 会缓冲到⼀起作⼀次发送 (缓冲⼤⼩⻅ socket.bufferSize ), 这样可以减少 IO 消耗提⾼性能. </span></p><p data-lake-id=\"0bd6f810694a0e71420c03672e586027\" id=\"0bd6f810694a0e71420c03672e586027\"><br></p><p data-lake-id=\"5fa2e69817def5dd2ec0a1b528911e72\" id=\"5fa2e69817def5dd2ec0a1b528911e72\"><span data-lake-id=\"ue92507f8\" id=\"ue92507f8\">如果是传输⽂件的话, 那么根本不⽤处理粘包的问题, 来⼀个包拼⼀个包就好了。但是如果是多条消息, 或者是别的⽤途的数据那么就需要处理粘包. </span></p><p data-lake-id=\"1002f67e8ff0d593ffb882c8f34f7731\" id=\"1002f67e8ff0d593ffb882c8f34f7731\"><br></p><p data-lake-id=\"4dbc461fdb2de40766b4f9adb7281331\" id=\"4dbc461fdb2de40766b4f9adb7281331\"><span data-lake-id=\"u21ea144a\" id=\"u21ea144a\">下面看⼀个例⼦, 连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况: </span></p><p data-lake-id=\"6950b19e0b8bbea71bf8bd370777e9d1\" id=\"6950b19e0b8bbea71bf8bd370777e9d1\"><span data-lake-id=\"uf08552ca\" id=\"uf08552ca\">A. 先接收到 data1, 然后接收到 data2 . </span></p><p data-lake-id=\"647bf96567f9814c70bbb2b1038509f4\" id=\"647bf96567f9814c70bbb2b1038509f4\"><span data-lake-id=\"ua5f44c77\" id=\"ua5f44c77\">B. 先接收到 data1 的部分数据, 然后接收到 data1 余下的部分以及 data2 的全部. </span></p><p data-lake-id=\"eaebf080ba1c08def32ca36c2ae874eb\" id=\"eaebf080ba1c08def32ca36c2ae874eb\"><span data-lake-id=\"u36eaca4a\" id=\"u36eaca4a\">C. 先接收到了 data1 的全部数据和 data2 的部分数据, 然后接收到了 data2 的余下的数据. </span></p><p data-lake-id=\"66ae14eddb5fa54e1a94ab3ea3647b7c\" id=\"66ae14eddb5fa54e1a94ab3ea3647b7c\"><span data-lake-id=\"ud240a52a\" id=\"ud240a52a\">D. ⼀次性接收到了 data1 和 data2 的全部数据. </span></p><p data-lake-id=\"6e18849b5cfa387e7dbeb262fcc333e8\" id=\"6e18849b5cfa387e7dbeb262fcc333e8\"><br></p><p data-lake-id=\"3230964b9eec477c54d9dec6cb8bf298\" id=\"3230964b9eec477c54d9dec6cb8bf298\"><span data-lake-id=\"u8f8923c4\" id=\"u8f8923c4\">其中的 BCD 就是我们常⻅的粘包的情况. ⽽对于处理粘包的问题, 常⻅的解决⽅案有: </span></p><ul list=\"ub99f78e5\"><li fid=\"u6c5f4bc4\" data-lake-id=\"dffea4f61bafce849d90e9ac39d7b67d\" id=\"dffea4f61bafce849d90e9ac39d7b67d\"><strong><span data-lake-id=\"ubdd08f8f\" id=\"ubdd08f8f\">多次发送之前间隔⼀个等待时间</span></strong><span data-lake-id=\"uf0b13860\" id=\"uf0b13860\">：只需要等上⼀段时间再进⾏下⼀次 send 就好, 适⽤于交互频率特别低的场景. 缺点也很明显, 对于⽐较频繁的场景⽽⾔传输效率实在太低，不过⼏乎不⽤做什么处理. </span></li><li fid=\"u6c5f4bc4\" data-lake-id=\"d8c51015b3f1a5e02c15c258add2b617\" id=\"d8c51015b3f1a5e02c15c258add2b617\"><strong><span data-lake-id=\"uba7a4935\" id=\"uba7a4935\">关闭 </span></strong><strong><span data-lake-id=\"ueaa2d75b\" id=\"ueaa2d75b\">Nagle </span></strong><strong><span data-lake-id=\"uf0ffabde\" id=\"uf0ffabde\">算法</span></strong><span data-lake-id=\"u39a30b25\" id=\"u39a30b25\">：关闭 Nagle 算法, 在 Node.js 中你可以通过 socket.setNoDelay() ⽅法来关闭 Nagle 算法, 让每⼀次 send 都不缓冲直接发送。该⽅法⽐较适⽤于每次发送的数据都⽐较⼤ (但不是⽂件那么⼤), 并且频率不是特别⾼的场景。如果是每次发送的数据量⽐较⼩, 并且频率特别⾼的, 关闭 Nagle 纯属⾃废武功。另外, 该⽅法不适⽤于⽹络较差的情况, 因为 Nagle 算法是在服务端进⾏的包合并情况, 但是如果短时间内客户端的⽹络情况不好, 或者应⽤层由于某些原因不能及时将 TCP 的数据 recv, 就会造成多个包在客户端缓冲从⽽粘包的情况。 (如果是在稳定的机房内部通信那么这个概率是⽐较⼩可以选择忽略的)  </span></li><li fid=\"u6c5f4bc4\" data-lake-id=\"5c0554e0442e21d114c681b7b75692e7\" id=\"5c0554e0442e21d114c681b7b75692e7\"><strong><span data-lake-id=\"u6f302850\" id=\"u6f302850\">进⾏封包</span></strong><strong><span data-lake-id=\"u05d8fb2c\" id=\"u05d8fb2c\">/拆包：</span></strong><span data-lake-id=\"u10f7d9d7\" id=\"u10f7d9d7\">封包/拆包是⽬前业内常⻅的解决⽅案了。即给每个数据包在发送之前, 于其前/后放⼀些有特征的数据, 然后收到数据的时 候根据特征数据分割出来各个数据包。</span></li></ul><h3 data-lake-id=\"kFGuj\" id=\"kFGuj\"><span data-lake-id=\"ucea18c2a\" id=\"ucea18c2a\">11. 为什么</span><strong><span data-lake-id=\"u970c4015\" id=\"u970c4015\">udp</span></strong><span data-lake-id=\"ub862839c\" id=\"ub862839c\">不会粘包？ </span></h3><ul list=\"u95759107\"><li fid=\"u9e1db62f\" data-lake-id=\"e2808231a0265dcdf0ba49d147189f31\" id=\"e2808231a0265dcdf0ba49d147189f31\"><span data-lake-id=\"ue42069f9\" id=\"ue42069f9\">TCP协议是⾯向流的协议，UDP是⾯向消息的协议。UDP段都是⼀条消息，应⽤程序必须以消息为单位提取数据，不能⼀次提取任意字节的数据 </span></li><li fid=\"u9e1db62f\" data-lake-id=\"09bb574c60f90e667ceb36e659affc82\" id=\"09bb574c60f90e667ceb36e659affc82\"><span data-lake-id=\"udf3c23dc\" id=\"udf3c23dc\">UDP具有保护消息边界，在每个UDP包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易进⾏区分处理了。传输协议把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息。接收端⼀次只能接收发送端发出的⼀个数据包,如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收。</span></li></ul><h2 data-lake-id=\"5HP6B\" id=\"5HP6B\"><span data-lake-id=\"u04059ca7\" id=\"u04059ca7\">七、WebSocket</span></h2><h3 data-lake-id=\"nVD7a\" id=\"nVD7a\"><span data-lake-id=\"uf19f787a\" id=\"uf19f787a\">1. 对 WebSocket 的理解</span></h3><p data-lake-id=\"dd5b185a3650932c42f991d116bd2e39\" id=\"dd5b185a3650932c42f991d116bd2e39\"><span data-lake-id=\"u646cd3cc\" id=\"u646cd3cc\">WebSocket是HTML5提供的一种浏览器与服务器进行</span><strong><span data-lake-id=\"ua8a8c71c\" id=\"ua8a8c71c\">全双工通讯</span></strong><span data-lake-id=\"u1841b6e1\" id=\"u1841b6e1\">的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。</span></p><p data-lake-id=\"d23765baee0b4500babbae53cefbaf37\" id=\"d23765baee0b4500babbae53cefbaf37\"><br></p><p data-lake-id=\"7c9e58bacc521d7f9d251fe1832ab50c\" id=\"7c9e58bacc521d7f9d251fe1832ab50c\"><span data-lake-id=\"u02068db9\" id=\"u02068db9\">WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：</span><strong><span data-lake-id=\"uf8ecb159\" id=\"uf8ecb159\">服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</span></strong></p><p data-lake-id=\"c9dad548c4e431d6cc59a7ad2a8ead5b\" id=\"c9dad548c4e431d6cc59a7ad2a8ead5b\"><br></p><p data-lake-id=\"d36fa55dc7830c7f80d44b6977a372c0\" id=\"d36fa55dc7830c7f80d44b6977a372c0\"><strong><span data-lake-id=\"u86e82b11\" id=\"u86e82b11\">WebSocket原理</span></strong><span data-lake-id=\"u1ce1b4e4\" id=\"u1ce1b4e4\">：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。</span></p><p data-lake-id=\"udf7d9a3c\" id=\"udf7d9a3c\"><span data-lake-id=\"ud3f90623\" id=\"ud3f90623\">​</span><br></p><p data-lake-id=\"uefc42552\" id=\"uefc42552\"><strong><span data-lake-id=\"ue0fee32c\" id=\"ue0fee32c\">WebSocket 特点的如下：</span></strong></p><ul list=\"uafeff8c2\"><li fid=\"ub8372cda\" data-lake-id=\"1c7c1ed29fbb78d66c84f4089c31ff24\" id=\"1c7c1ed29fbb78d66c84f4089c31ff24\"><span data-lake-id=\"ue743b6a3\" id=\"ue743b6a3\">支持双向通信，实时性更强</span></li><li fid=\"ub8372cda\" data-lake-id=\"f0d4c94ec181d3ebe2ab774ddd8dc09c\" id=\"f0d4c94ec181d3ebe2ab774ddd8dc09c\"><span data-lake-id=\"ua8a7183b\" id=\"ua8a7183b\">可以发送文本，也可以发送二进制数据‘’</span></li><li fid=\"ub8372cda\" data-lake-id=\"2bc5f4499d9a70a2706d7bc49ef94347\" id=\"2bc5f4499d9a70a2706d7bc49ef94347\"><span data-lake-id=\"ub76df612\" id=\"ub76df612\">建立在TCP协议之上，服务端的实现比较容易</span></li><li fid=\"ub8372cda\" data-lake-id=\"1508513d14ddf95375a779491c5d4d57\" id=\"1508513d14ddf95375a779491c5d4d57\"><span data-lake-id=\"u8187e5f5\" id=\"u8187e5f5\">数据格式比较轻量，性能开销小，通信高效</span></li><li fid=\"ub8372cda\" data-lake-id=\"fd2d8f52c24188ab5b08a2386c1c96ca\" id=\"fd2d8f52c24188ab5b08a2386c1c96ca\"><span data-lake-id=\"u708c706d\" id=\"u708c706d\">没有同源限制，客户端可以与任意服务器通信</span></li><li fid=\"ub8372cda\" data-lake-id=\"d4c77d26f73e2b5e0b918741301bb430\" id=\"d4c77d26f73e2b5e0b918741301bb430\"><span data-lake-id=\"u255e7006\" id=\"u255e7006\">协议标识符是ws（如果加密，则为wss），服务器网址就是 URL</span></li><li fid=\"ub8372cda\" data-lake-id=\"167dd8486067bd5128e56dad4dd89653\" id=\"167dd8486067bd5128e56dad4dd89653\"><span data-lake-id=\"u3d5c7d7b\" id=\"u3d5c7d7b\">与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</span></li></ul><p data-lake-id=\"uc39e9595\" id=\"uc39e9595\"><span data-lake-id=\"u3addedf8\" id=\"u3addedf8\">​</span><br></p><p data-lake-id=\"u57143bbf\" id=\"u57143bbf\"><strong><span data-lake-id=\"u961e232c\" id=\"u961e232c\">Websocket的使用方法如下：</span></strong></p><p data-lake-id=\"u4dd17bd3\" id=\"u4dd17bd3\"><span data-lake-id=\"u7d998f93\" id=\"u7d998f93\">​</span><br></p><p data-lake-id=\"1075d41d24983ce4d8d3338118930093\" id=\"1075d41d24983ce4d8d3338118930093\"><span data-lake-id=\"u4d38a173\" id=\"u4d38a173\">在客户端中：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%9C%A8index.html%E4%B8%AD%E7%9B%B4%E6%8E%A5%E5%86%99WebSocket%EF%BC%8C%E8%AE%BE%E7%BD%AE%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%9A%84%E7%AB%AF%E5%8F%A3%E5%8F%B7%E4%B8%BA%209999%5Cnlet%20ws%20%3D%20new%20WebSocket('ws%3A%2F%2Flocalhost%3A9999')%3B%5Cn%2F%2F%20%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BB%BA%E7%AB%8B%E8%BF%9E%E6%8E%A5%E5%90%8E%E8%A7%A6%E5%8F%91%5Cnws.onopen%20%3D%20function()%20%7B%5Cn%20%20%20%20console.log(%5C%22Connection%20open.%5C%22)%3B%20%5Cn%20%20%20%20ws.send('hello')%3B%5Cn%7D%3B%5Cn%2F%2F%20%E5%9C%A8%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BB%99%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8F%91%E6%9D%A5%E6%B6%88%E6%81%AF%E7%9A%84%E6%97%B6%E5%80%99%E8%A7%A6%E5%8F%91%5Cnws.onmessage%20%3D%20function(res)%20%7B%5Cn%20%20%20%20console.log(res)%3B%20%20%20%20%20%20%20%2F%2F%20%E6%89%93%E5%8D%B0%E7%9A%84%E6%98%AFMessageEvent%E5%AF%B9%E8%B1%A1%5Cn%20%20%20%20console.log(res.data)%3B%20%20%2F%2F%20%E6%89%93%E5%8D%B0%E7%9A%84%E6%98%AF%E6%94%B6%E5%88%B0%E7%9A%84%E6%B6%88%E6%81%AF%5Cn%7D%3B%5Cn%2F%2F%20%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BB%BA%E7%AB%8B%E5%85%B3%E9%97%AD%E5%90%8E%E8%A7%A6%E5%8F%91%5Cnws.onclose%20%3D%20function(evt)%20%7B%5Cn%20%20console.log(%5C%22Connection%20closed.%5C%22)%3B%5Cn%7D%3B%20%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22ONRdP%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"ne0GI\" id=\"ne0GI\"><span data-lake-id=\"u6eaeb499\" id=\"u6eaeb499\">2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？</span></h3><p data-lake-id=\"b167ef5e82568cb4966fa870341a5494\" id=\"b167ef5e82568cb4966fa870341a5494\"><span data-lake-id=\"u3fdaf15f\" id=\"u3fdaf15f\">短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。</span></p><p data-lake-id=\"64b3039f982e7c34154f84a61e60765e\" id=\"64b3039f982e7c34154f84a61e60765e\"><br></p><p data-lake-id=\"cc0954efcb02743ecc658e63ff95fdb0\" id=\"cc0954efcb02743ecc658e63ff95fdb0\"><strong><span data-lake-id=\"uad7f2372\" id=\"uad7f2372\">短轮询的基本思路：</span></strong><span data-lake-id=\"ue1e2ac38\" id=\"ue1e2ac38\">浏览器每隔一段时间向服务器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。</span></p><p data-lake-id=\"abbe72ed59a83d665d3f0d64bce72e02\" id=\"abbe72ed59a83d665d3f0d64bce72e02\"><br></p><p data-lake-id=\"ff2004f8a303f73510398931ed276fc3\" id=\"ff2004f8a303f73510398931ed276fc3\"><strong><span data-lake-id=\"ua5a364cb\" id=\"ua5a364cb\">长轮询的基本思路：</span></strong><span data-lake-id=\"ub866c3dd\" id=\"ub866c3dd\">首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。</span></p><p data-lake-id=\"0e46e5476daf441953da6556a992b3e0\" id=\"0e46e5476daf441953da6556a992b3e0\"><br></p><p data-lake-id=\"a6be3c6fdc9aac15acfe50d55faf7ef0\" id=\"a6be3c6fdc9aac15acfe50d55faf7ef0\"><strong><span data-lake-id=\"ufcd37274\" id=\"ufcd37274\">SSE 的基本思想：</span></strong><span data-lake-id=\"ud6a09630\" id=\"ud6a09630\">服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。</span></p><p data-lake-id=\"07cc3cc9864519ee811bb9183db33443\" id=\"07cc3cc9864519ee811bb9183db33443\"><br></p><p data-lake-id=\"2f36d3a09abb451b40ecd12b433a0cc0\" id=\"2f36d3a09abb451b40ecd12b433a0cc0\"><strong><span data-lake-id=\"uc045987a\" id=\"uc045987a\">WebSocket </span></strong><span data-lake-id=\"ub4a6668a\" id=\"ub4a6668a\">是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。</span></p><p data-lake-id=\"1ac74dfe5b3e7ab8c55fcf13a2fa18f1\" id=\"1ac74dfe5b3e7ab8c55fcf13a2fa18f1\"><br></p><p data-lake-id=\"0f621a56026c62ffeb9b2b1d31b0d293\" id=\"0f621a56026c62ffeb9b2b1d31b0d293\"><strong><span data-lake-id=\"ua6f5fecc\" id=\"ua6f5fecc\">上面的四个通信协议，前三个都是基于HTTP协议的。</span></strong></p><p data-lake-id=\"29b4b224a21846655cfc4ce346f8ce2c\" id=\"29b4b224a21846655cfc4ce346f8ce2c\"><br></p><p data-lake-id=\"cd963927fe48f60a1564fff6c730ef73\" id=\"cd963927fe48f60a1564fff6c730ef73\"><span data-lake-id=\"ua0279066\" id=\"ua0279066\">对于这四种即使通信协议，从性能的角度来看：</span></p><p data-lake-id=\"4552b2172cffc7ad9a717e19c9edb84e\" id=\"4552b2172cffc7ad9a717e19c9edb84e\"><strong><span data-lake-id=\"u20e4aee1\" id=\"u20e4aee1\">WebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询</span></strong></p><p data-lake-id=\"dc57bb0cfbdf213b1c3894a310038861\" id=\"dc57bb0cfbdf213b1c3894a310038861\"><span data-lake-id=\"u4d1222af\" id=\"u4d1222af\">但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了：</span></p><p data-lake-id=\"eb8171d8eb3bde64e56f5d1e257927f3\" id=\"eb8171d8eb3bde64e56f5d1e257927f3\"><strong><span data-lake-id=\"u9373c63e\" id=\"u9373c63e\">短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket</span></strong></p><p data-lake-id=\"4c3c1e3e2c41cafae700b7636eac16aa\" id=\"4c3c1e3e2c41cafae700b7636eac16aa\"><span data-lake-id=\"u2be820b2\" id=\"u2be820b2\">所以，还是要根据具体的使用场景来判断使用哪种方式。</span></p><p data-lake-id=\"u8fd11480\" id=\"u8fd11480\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673895300758-6cb3c1b6-b8dd-4e2a-bdbb-d7e041e7e67c.png%22%2C%22taskId%22%3A%22ub1bf409f-f2bc-4763-aa32-86ae1581d00%22%2C%22clientId%22%3A%22ucedecab4-ca2e-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22udee3def3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
        "selected_at": null,
        "editor_meta": "{\"image\":24,\"codeblock\":4,\"premium\":1}",
        "editor_meta_draft": "{\"image\":24,\"codeblock\":4,\"premium\":1}",
        "meta": {
            "privacy_migrated": true,
            "premium_migrated": true
        },
        "marked": true,
        "mark": {
            "action_name": "mark_doc",
            "id": 110332311760,
            "created_at": "2023-07-03T10:20:56.000Z",
            "updated_at": "2023-07-03T10:20:56.000Z",
            "space_id": 0,
            "action_type": "mark",
            "action_option": "doc",
            "action_setting_type": "default",
            "user_id": 38384436,
            "organization_id": 0,
            "target_type": "Doc",
            "target_id": 23473015,
            "target_book_id": 6862641,
            "target_group_id": 1500604,
            "title": "前端面试题之计算机网络篇"
        },
        "region": "北京",
        "indexed_level": 1,
        "privacy_migrated": true,
        "user": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T06:27:51.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "last_editor": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T06:27:51.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "_serializer": "web.doc_detail"
    }
}