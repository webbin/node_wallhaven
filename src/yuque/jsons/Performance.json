{
    "meta": {
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "latestReviewStatus": -1
    },
    "data": {
        "id": 23475299,
        "space_id": 0,
        "type": "Doc",
        "sub_type": null,
        "title": "前端面试题之性能优化篇",
        "tag": null,
        "slug": "lph6i8",
        "user_id": 1500604,
        "book_id": 6862641,
        "cover": "https://cdn.nlark.com/yuque/0/2020/png/1500604/1603966294889-153271b5-4b9f-4470-b05f-c7a9f030d043.png?x-oss-process=image%2Fresize%2Cw_1500",
        "description": "一、CDN1. CDN的概念CDN（Content Delivery Network，内容分发网络）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。典型的C...",
        "custom_description": null,
        "body_asl": "",
        "format": "lake",
        "origin_format": "lake",
        "status": 1,
        "read_status": 1,
        "view_status": 0,
        "public": 1,
        "draft_version": 47,
        "comments_count": 23,
        "likes_count": 73,
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "content_updated_at": "2023-01-16T18:52:41.000Z",
        "created_at": "2020-12-12T16:31:39.000Z",
        "updated_at": "2023-07-15T03:09:10.000Z",
        "published_at": "2023-01-16T18:52:41.000Z",
        "first_published_at": "2020-12-14T14:26:09.000Z",
        "pinned_at": null,
        "word_count": 8146,
        "content": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u31215889\" id=\"u31215889\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1621611602044-9eff4f96-7acb-4c4a-927e-fa254bf23418.png%22%2C%22taskId%22%3A%22u827ac096-c3c2-4427-bfb5-e3d38582050%22%2C%22clientId%22%3A%22ua9c3b598-0b8e-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1500%2C%22height%22%3A558%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95%E9%A2%98.png%22%2C%22size%22%3A360193%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A2844%2C%22originHeight%22%3A1058%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22CDN%E7%9A%84%E6%A6%82%E5%BF%B5%20%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6%20%E5%9B%BE%E4%BE%8B%20CDN%E7%9A%84%E4%BD%9C%E7%94%A8%20%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%20%E8%80%83%E5%AF%9F%E5%BE%88%E5%A4%9A%20CDN%20CDN%E7%9A%84%E5%8E%9F%E7%90%86%20%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E5%8A%A8%E7%94%BB%20%E8%80%83%E5%AF%9F%E8%BE%83%E5%A4%9A%20%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%20CDN%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%20documentFragment%E6%98%AF%E4%BB%80%E4%B9%88%3F%E7%94%A8%E5%AE%83%20%E8%80%83%E5%AF%9F%E8%BE%83%E5%B0%91%20%E8%B7%9F%E7%9B%B4%E6%8E%A5%E6%93%8D%E4%BD%9CDOM%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%20%E8%80%83%E5%AF%9F%E5%BE%88%E5%B0%91%20%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%A6%82%E5%BF%B5%20%E5%A6%82%E4%BD%95%E5%AF%B9%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%20%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%89%B9%E7%82%B9%20%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95%E9%A2%98%20%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96%20%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%20%E6%87%92%E5%8A%A0%E8%BD%BD%20%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%20%E6%87%92%E5%8A%A0%E8%BD%BD%E4%B8%8E%E9%A2%84%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8C%BA%E5%88%AB%20%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91Webpack%E6%89%93%E5%8C%85%E6%97%B6%E9%97%B4%20%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91Webpack%E6%89%93%E5%8C%85%E4%BD%93%E7%A7%AF%20%E5%AF%B9%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96%E7%9A%84%E7%90%86%E8%A7%A3%20Webpack%E4%BC%98%E5%8C%96%20%E5%A6%82%E4%BD%95%E7%94%A8webpack%E6%9D%A5%E4%BC%98%E5%8C%96%E5%89%8D%E7%AB%AF%E6%80%A7%E9%A6%86%20%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96%20%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E5%92%8C%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%20%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98webpack%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A690.07904%2C%22y%22%3A102.88949%2C%22width%22%3A152.51782000000003%2C%22height%22%3A34.99182999999999%2C%22text%22%3A%22CDN%E7%9A%84%E6%A6%82%E5%BF%B5%22%7D%2C%7B%22x%22%3A2274.4058%2C%22y%22%3A107.51463%2C%22width%22%3A370.92520000000013%2C%22height%22%3A34.659090000000006%2C%22text%22%3A%22%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%E7%9A%84%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6%22%7D%2C%7B%22x%22%3A226.22647%2C%22y%22%3A115.05777%2C%22width%22%3A68.35287999999997%2C%22height%22%3A34.397220000000004%2C%22text%22%3A%22%E5%9B%BE%E4%BE%8B%22%7D%2C%7B%22x%22%3A689.88007%2C%22y%22%3A175.61212%2C%22width%22%3A152.46012999999994%2C%22height%22%3A33.65783999999999%2C%22text%22%3A%22CDN%E7%9A%84%E4%BD%9C%E7%94%A8%22%7D%2C%7B%22x%22%3A2269.4375%2C%22y%22%3A182.30853%2C%22width%22%3A267.3604999999998%2C%22height%22%3A31.990980000000008%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%22%7D%2C%7B%22x%22%3A196.66196%2C%22y%22%3A190.52467%2C%22width%22%3A111.44390999999999%2C%22height%22%3A30.37175000000002%2C%22text%22%3A%22%E8%80%83%E5%AF%9F%E5%BE%88%E5%A4%9A%22%7D%2C%7B%22x%22%3A1001.50555%2C%22y%22%3A240.0212%2C%22width%22%3A82.85325%2C%22height%22%3A35.44673000000003%2C%22text%22%3A%22CDN%22%7D%2C%7B%22x%22%3A691.52325%2C%22y%22%3A251.07503%2C%22width%22%3A148.59265000000005%2C%22height%22%3A30.19282000000001%2C%22text%22%3A%22CDN%E7%9A%84%E5%8E%9F%E7%90%86%22%7D%2C%7B%22x%22%3A2271.1687%2C%22y%22%3A254.31332%2C%22width%22%3A179.29430000000002%2C%22height%22%3A33.22799999999998%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E5%8A%A8%E7%94%BB%22%7D%2C%7B%22x%22%3A195.59625%2C%22y%22%3A259.28857%2C%22width%22%3A111.00772%2C%22height%22%3A29.600099999999998%2C%22text%22%3A%22%E8%80%83%E5%AF%9F%E8%BE%83%E5%A4%9A%22%7D%2C%7B%22x%22%3A1882.45%2C%22y%22%3A260.2%2C%22width%22%3A185.67330000000015%2C%22height%22%3A37.25135%2C%22text%22%3A%22%E5%9B%9E%E6%B5%81%E4%B8%8E%E9%87%8D%E7%BB%98%22%7D%2C%7B%22x%22%3A632.52936%2C%22y%22%3A320.72723%2C%22width%22%3A206.65463999999997%2C%22height%22%3A34.95907%2C%22text%22%3A%22CDN%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%22%7D%2C%7B%22x%22%3A2273.026%2C%22y%22%3A324.6332%2C%22width%22%3A443.0096000000003%2C%22height%22%3A33.28806000000003%2C%22text%22%3A%22documentFragment%E6%98%AF%E4%BB%80%E4%B9%88%3F%E7%94%A8%E5%AE%83%22%7D%2C%7B%22x%22%3A196.83488%2C%22y%22%3A327.56653%2C%22width%22%3A112.40812%2C%22height%22%3A32.445370000000025%2C%22text%22%3A%22%E8%80%83%E5%AF%9F%E8%BE%83%E5%B0%91%22%7D%2C%7B%22x%22%3A2271.5537%2C%22y%22%3A359.72668%2C%22width%22%3A401.4693000000002%2C%22height%22%3A34.97547000000003%2C%22text%22%3A%22%E8%B7%9F%E7%9B%B4%E6%8E%A5%E6%93%8D%E4%BD%9CDOM%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%22%7D%2C%7B%22x%22%3A196.87685%2C%22y%22%3A394.58582%2C%22width%22%3A111.81468000000001%2C%22height%22%3A31.439449999999965%2C%22text%22%3A%22%E8%80%83%E5%AF%9F%E5%BE%88%E5%B0%91%22%7D%2C%7B%22x%22%3A635.34784%2C%22y%22%3A445.91%2C%22width%22%3A174.65666%2C%22height%22%3A32.23684999999995%2C%22text%22%3A%22%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%A6%82%E5%BF%B5%22%7D%2C%7B%22x%22%3A2236.142%2C%22y%22%3A485.78665%2C%22width%22%3A370.09770000000026%2C%22height%22%3A29.119910000000004%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E5%AF%B9%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E4%BC%98%E5%8C%96%22%7D%2C%7B%22x%22%3A635.2516%2C%22y%22%3A519.459%2C%22width%22%3A176.53609999999992%2C%22height%22%3A32.86705000000006%2C%22text%22%3A%22%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E7%89%B9%E7%82%B9%22%7D%2C%7B%22x%22%3A1289.626%2C%22y%22%3A534.4188%2C%22width%22%3A394.3171%2C%22height%22%3A55.266599999999926%2C%22text%22%3A%22%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%9D%A2%E8%AF%95%E9%A2%98%22%7D%2C%7B%22x%22%3A1881.5897%2C%22y%22%3A546.3902%2C%22width%22%3A149.7288000000001%2C%22height%22%3A39.5003999999999%2C%22text%22%3A%22%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96%22%7D%2C%7B%22x%22%3A2237.8848%2C%22y%22%3A558.0409%2C%22width%22%3A342.5344%2C%22height%22%3A30.695370000000025%2C%22text%22%3A%22%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%22%7D%2C%7B%22x%22%3A969.39557%2C%22y%22%3A577.2059%2C%22width%22%3A115.57053000000008%2C%22height%22%3A40.36654999999996%2C%22text%22%3A%22%E6%87%92%E5%8A%A0%E8%BD%BD%22%7D%2C%7B%22x%22%3A579.6792%2C%22y%22%3A588.78094%2C%22width%22%3A231.8524%2C%22height%22%3A33.528999999999996%2C%22text%22%3A%22%E6%87%92%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%22%7D%2C%7B%22x%22%3A523.0266%2C%22y%22%3A659.7439%2C%22width%22%3A287.9783%2C%22height%22%3A33.92279999999994%2C%22text%22%3A%22%E6%87%92%E5%8A%A0%E8%BD%BD%E4%B8%8E%E9%A2%84%E5%8A%A0%E8%BD%BD%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2326.9167%2C%22y%22%3A690.0391%2C%22width%22%3A364.68359999999984%2C%22height%22%3A37.408840000000055%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91Webpack%E6%89%93%E5%8C%85%E6%97%B6%E9%97%B4%22%7D%2C%7B%22x%22%3A2328.7288%2C%22y%22%3A763.6622%2C%22width%22%3A359.63059999999996%2C%22height%22%3A33.23905000000002%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E5%87%8F%E5%B0%91Webpack%E6%89%93%E5%8C%85%E4%BD%93%E7%A7%AF%22%7D%2C%7B%22x%22%3A481.43958%2C%22y%22%3A786.5463%2C%22width%22%3A259.83367%2C%22height%22%3A31.404899999999998%2C%22text%22%3A%22%E5%AF%B9%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96%E7%9A%84%E7%90%86%E8%A7%A3%22%7D%2C%7B%22x%22%3A1880.6237%2C%22y%22%3A823.9369%2C%22width%22%3A239.3995%2C%22height%22%3A41.434099999999944%2C%22text%22%3A%22Webpack%E4%BC%98%E5%8C%96%22%7D%2C%7B%22x%22%3A2328.5452%2C%22y%22%3A835.71185%2C%22width%22%3A400.5036%2C%22height%22%3A32.30561%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E7%94%A8webpack%E6%9D%A5%E4%BC%98%E5%8C%96%E5%89%8D%E7%AB%AF%E6%80%A7%E9%A6%86%22%7D%2C%7B%22x%22%3A903.55975%2C%22y%22%3A846.8559%2C%22width%22%3A180.97905000000003%2C%22height%22%3A39.98735999999997%2C%22text%22%3A%22%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96%22%7D%2C%7B%22x%22%3A424.46255%2C%22y%22%3A857.6464%2C%22width%22%3A315.62195%2C%22height%22%3A32.89710000000002%2C%22text%22%3A%22%E5%AE%9E%E7%8E%B0%E8%8A%82%E6%B5%81%E5%87%BD%E6%95%B0%E5%92%8C%E9%98%B2%E6%8A%96%E5%87%BD%E6%95%B0%22%7D%2C%7B%22x%22%3A2328.9539%2C%22y%22%3A907.351%2C%22width%22%3A367.6709000000001%2C%22height%22%3A32.30280000000005%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98webpack%E7%9A%84%E6%9E%84%E5%BB%BA%E9%80%9F%E5%BA%A6%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9f8f7%22%2C%22id%22%3A%22u63126a5f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"7ff031e1c6a1cc8ea733492b907c3493\" id=\"7ff031e1c6a1cc8ea733492b907c3493\"><span data-lake-id=\"u8f977f10\" id=\"u8f977f10\">一、CDN</span></h2><h3 data-lake-id=\"e4247ee859c8d15d609e0309fa9111fa\" id=\"e4247ee859c8d15d609e0309fa9111fa\"><span data-lake-id=\"uff37f237\" id=\"uff37f237\">1. CDN的概念</span></h3><p data-lake-id=\"09447664d95fddbb0f4eaa3774c2f779\" id=\"09447664d95fddbb0f4eaa3774c2f779\"><span data-lake-id=\"ua00013ea\" id=\"ua00013ea\">CDN（Content Delivery Network，</span><strong><span data-lake-id=\"u8bde61e0\" id=\"u8bde61e0\">内容分发网络</span></strong><span data-lake-id=\"uc4947c96\" id=\"uc4947c96\">）是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，更快、更可靠地将音乐、图片、视频、应用程序及其他文件发送给用户，来提供高性能、可扩展性及低成本的网络内容传递给用户。</span></p><p data-lake-id=\"f4392fe490d5c87ceb6ee978075ef8fe\" id=\"f4392fe490d5c87ceb6ee978075ef8fe\"><br></p><p data-lake-id=\"67d3915333e81aca7bf7c55a5a8e084e\" id=\"67d3915333e81aca7bf7c55a5a8e084e\"><span data-lake-id=\"u10a52cec\" id=\"u10a52cec\">典型的CDN系统由下面三个部分组成：</span></p><ul list=\"ud9fe8bb1\"><li fid=\"uf1eb8724\" data-lake-id=\"145eb5f845ddb68abc48a2ea3dbf32ae\" id=\"145eb5f845ddb68abc48a2ea3dbf32ae\"><strong><span data-lake-id=\"u48547223\" id=\"u48547223\">分发服务系统：</span></strong><span data-lake-id=\"u21ebef95\" id=\"u21ebef95\">最基本的工作单元就是Cache设备，cache（边缘cache）负责直接响应最终用户的访问请求，把缓存在本地的内容快速地提供给用户。同时cache还负责与源站点进行内容同步，把更新的内容以及本地没有的内容从源站点获取并保存在本地。Cache设备的数量、规模、总服务能力是衡量一个CDN系统服务能力的最基本的指标。</span></li><li fid=\"uf1eb8724\" data-lake-id=\"1dce95ea79a4746ecd41948f0e67a24d\" id=\"1dce95ea79a4746ecd41948f0e67a24d\"><strong><span data-lake-id=\"u892e048b\" id=\"u892e048b\">负载均衡系统：</span></strong><span data-lake-id=\"u55cf470f\" id=\"u55cf470f\">主要功能是负责对所有发起服务请求的用户进行访问调度，确定提供给用户的最终实际访问地址。两级调度体系分为全局负载均衡（GSLB）和本地负载均衡（SLB）。</span><strong><span data-lake-id=\"u78df5fa8\" id=\"u78df5fa8\">全局负载均衡</span></strong><span data-lake-id=\"u084461e7\" id=\"u084461e7\">主要根据用户就近性原则，通过对每个服务节点进行“最优”判断，确定向用户提供服务的cache的物理位置。</span><strong><span data-lake-id=\"u398ab53b\" id=\"u398ab53b\">本地负载均衡</span></strong><span data-lake-id=\"ue006a9c0\" id=\"ue006a9c0\">主要负责节点内部的设备负载均衡</span></li><li fid=\"uf1eb8724\" data-lake-id=\"74cc1ce24b96e36c822e3f8075dcbf83\" id=\"74cc1ce24b96e36c822e3f8075dcbf83\"><strong><span data-lake-id=\"uc3d36f42\" id=\"uc3d36f42\">运营管理系统：</span></strong><span data-lake-id=\"uaa38a891\" id=\"uaa38a891\">运营管理系统分为运营管理和网络管理子系统，负责处理业务层面的与外界系统交互所必须的收集、整理、交付工作，包含客户管理、产品管理、计费管理、统计分析等功能。</span></li></ul><h3 data-lake-id=\"a5dc903157ba5acbad1580dce3a099e2\" id=\"a5dc903157ba5acbad1580dce3a099e2\"><span data-lake-id=\"u01643044\" id=\"u01643044\">2. CDN的作用 </span></h3><p data-lake-id=\"6418f55d56aa7a12095bdaa9711e3915\" id=\"6418f55d56aa7a12095bdaa9711e3915\"><span data-lake-id=\"u3e493060\" id=\"u3e493060\">CDN一般会用来托管Web资源（包括文本、图片和脚本等），可供下载的资源（媒体文件、软件、文档等），应用程序（门户网站等）。使用CDN来加速这些资源的访问。</span></p><p data-lake-id=\"d5e7715d2a7d5263b0ddd948b225b59b\" id=\"d5e7715d2a7d5263b0ddd948b225b59b\"><br></p><p data-lake-id=\"c816879def13e015f2391ea74906c2ab\" id=\"c816879def13e015f2391ea74906c2ab\"><span data-lake-id=\"ud5ecde3d\" id=\"ud5ecde3d\">（1）在性能方面，引入CDN的作用在于：</span></p><ul list=\"ue9489fbe\"><li fid=\"u0720bbab\" data-lake-id=\"bc90bac2a7361d84da63237d21bbee9a\" id=\"bc90bac2a7361d84da63237d21bbee9a\"><span data-lake-id=\"u175deed6\" id=\"u175deed6\">用户收到的内容来自最近的数据中心，延迟更低，内容加载更快</span></li><li fid=\"u0720bbab\" data-lake-id=\"7b90e6178ef3e8e3365a48f76b0b42b0\" id=\"7b90e6178ef3e8e3365a48f76b0b42b0\"><span data-lake-id=\"u79ee4d4f\" id=\"u79ee4d4f\">部分资源请求分配给了CDN，减少了服务器的负载</span></li></ul><p data-lake-id=\"75377b02c246e57a331aefbf8cfb1acb\" id=\"75377b02c246e57a331aefbf8cfb1acb\"><span data-lake-id=\"u77595c4d\" id=\"u77595c4d\">（2）在安全方面，CDN有助于防御DDoS、MITM等网络攻击：</span></p><ul list=\"u71689ee7\"><li fid=\"uc996b3f0\" data-lake-id=\"a7c7b355c2dea5b5c21b8f22174f032a\" id=\"a7c7b355c2dea5b5c21b8f22174f032a\"><span data-lake-id=\"ua69bcc2f\" id=\"ua69bcc2f\">针对DDoS：通过监控分析异常流量，限制其请求频率</span></li><li fid=\"uc996b3f0\" data-lake-id=\"8bc597327e061d34783779ed3e945e55\" id=\"8bc597327e061d34783779ed3e945e55\"><span data-lake-id=\"u073a0d6a\" id=\"u073a0d6a\">针对MITM：从源服务器到 CDN 节点到 ISP（Internet Service Provider），全链路 HTTPS 通信</span></li></ul><p data-lake-id=\"95cde28df8dad5f6734c76b2d90800b4\" id=\"95cde28df8dad5f6734c76b2d90800b4\"><span data-lake-id=\"u5ab1290d\" id=\"u5ab1290d\">除此之外，CDN作为一种基础的云服务，同样具有资源托管、按需扩展（能够应对流量高峰）等方面的优势。</span></p><h3 data-lake-id=\"d711a626827360c54e404d2a3386711e\" id=\"d711a626827360c54e404d2a3386711e\"><span data-lake-id=\"ub0348f3b\" id=\"ub0348f3b\">3. CDN的原理</span></h3><p data-lake-id=\"40e64bac573b7fd19abace02114057eb\" id=\"40e64bac573b7fd19abace02114057eb\"><span data-lake-id=\"u2681598f\" id=\"u2681598f\">CDN和DNS有着密不可分的联系，先来看一下DNS的解析域名过程，在浏览器输入 www.test.com 的解析过程如下：</span></p><p data-lake-id=\"e0bfd213bcbaa51a725bd3fc15def7e2\" id=\"e0bfd213bcbaa51a725bd3fc15def7e2\"><span data-lake-id=\"u789e9809\" id=\"u789e9809\">（1） 检查浏览器缓存</span></p><p data-lake-id=\"6d9bbdc60a78240efc664fa59714e850\" id=\"6d9bbdc60a78240efc664fa59714e850\"><span data-lake-id=\"u89c8f8aa\" id=\"u89c8f8aa\">（2）检查操作系统缓存，常见的如hosts文件</span></p><p data-lake-id=\"240ff8ac04c84623154c6fa6da0e72ff\" id=\"240ff8ac04c84623154c6fa6da0e72ff\"><span data-lake-id=\"u832e9f66\" id=\"u832e9f66\">（3）检查路由器缓存</span></p><p data-lake-id=\"0464125e64fd576b7c5b55adf7650e05\" id=\"0464125e64fd576b7c5b55adf7650e05\"><span data-lake-id=\"ub17d4304\" id=\"ub17d4304\">（4）如果前几步都没没找到，会向ISP(网络服务提供商)的LDNS服务器查询</span></p><p data-lake-id=\"ee9e56d2594c3e47b8192e8454c74da9\" id=\"ee9e56d2594c3e47b8192e8454c74da9\"><span data-lake-id=\"u317368f0\" id=\"u317368f0\">（5）如果LDNS服务器没找到，会向根域名服务器(Root Server)请求解析，分为以下几步：</span></p><ul list=\"ubb69dec0\"><li fid=\"ue99e093d\" data-lake-id=\"e0d05b3d63da20bd779371528a74422e\" id=\"e0d05b3d63da20bd779371528a74422e\"><span data-lake-id=\"u3c06802f\" id=\"u3c06802f\">根服务器返回顶级域名(TLD)服务器如</span><code data-lake-id=\"u0885487f\" id=\"u0885487f\"><span data-lake-id=\"uad5f1fa1\" id=\"uad5f1fa1\">.com</span></code><span data-lake-id=\"u777181de\" id=\"u777181de\">，</span><code data-lake-id=\"u7b08dcd1\" id=\"u7b08dcd1\"><span data-lake-id=\"ue209c94a\" id=\"ue209c94a\">.cn</span></code><span data-lake-id=\"uac3bab88\" id=\"uac3bab88\">，</span><code data-lake-id=\"uf32545e4\" id=\"uf32545e4\"><span data-lake-id=\"ue4c8c535\" id=\"ue4c8c535\">.org</span></code><span data-lake-id=\"u059c5786\" id=\"u059c5786\">等的地址，该例子中会返回</span><code data-lake-id=\"u71bbe330\" id=\"u71bbe330\"><span data-lake-id=\"u82bcc715\" id=\"u82bcc715\">.com</span></code><span data-lake-id=\"u59942917\" id=\"u59942917\">的地址</span></li><li fid=\"ue99e093d\" data-lake-id=\"0dc025c9b5b8a0953087fd9b5e4e4ea3\" id=\"0dc025c9b5b8a0953087fd9b5e4e4ea3\"><span data-lake-id=\"u4b1d8d02\" id=\"u4b1d8d02\">接着向顶级域名服务器发送请求，然后会返回次级域名(SLD)服务器的地址，本例子会返回</span><code data-lake-id=\"u73b66189\" id=\"u73b66189\"><span data-lake-id=\"uec4572df\" id=\"uec4572df\">.test</span></code><span data-lake-id=\"ub98249e7\" id=\"ub98249e7\">的地址</span></li><li fid=\"ue99e093d\" data-lake-id=\"4b7b4f7e5fe8b51dbf58819a84d52eca\" id=\"4b7b4f7e5fe8b51dbf58819a84d52eca\"><span data-lake-id=\"u87bb4a6b\" id=\"u87bb4a6b\">接着向次级域名服务器发送请求，然后会返回通过域名查询到的目标IP，本例子会返回</span><code data-lake-id=\"uac9d3b05\" id=\"uac9d3b05\"><span data-lake-id=\"ue111807b\" id=\"ue111807b\">www.test.com</span></code><span data-lake-id=\"u2c0cfd26\" id=\"u2c0cfd26\">的地址</span></li><li fid=\"ue99e093d\" data-lake-id=\"ce024e475e52b72c3a771c483ea2a9aa\" id=\"ce024e475e52b72c3a771c483ea2a9aa\"><span data-lake-id=\"u08f70f7e\" id=\"u08f70f7e\">Local DNS Server会缓存结果，并返回给用户，缓存在系统中</span></li></ul><p data-lake-id=\"b20e25bd0dd69f047b3f38c2f9082af0\" id=\"b20e25bd0dd69f047b3f38c2f9082af0\"><br></p><p data-lake-id=\"89b8884c32380a8adaf6c21532ec0907\" id=\"89b8884c32380a8adaf6c21532ec0907\"><strong><span data-lake-id=\"ub6616dfa\" id=\"ub6616dfa\">CDN的工作原理：</span></strong></p><p data-lake-id=\"1125d00934d0cf06f4486cd5409931d3\" id=\"1125d00934d0cf06f4486cd5409931d3\"><span data-lake-id=\"u89af6d37\" id=\"u89af6d37\">（1）用户未使用CDN缓存资源的过程：</span></p><ol list=\"u816afcd3\"><li fid=\"u0665da68\" data-lake-id=\"dac872f6b2eecb99242fb556f21d0f4c\" id=\"dac872f6b2eecb99242fb556f21d0f4c\"><span data-lake-id=\"u5a1ee34f\" id=\"u5a1ee34f\">浏览器通过DNS对域名进行解析（就是上面的DNS解析过程），依次得到此域名对应的IP地址</span></li><li fid=\"u0665da68\" data-lake-id=\"2279d90904e9b4482b29aaaa1b457cae\" id=\"2279d90904e9b4482b29aaaa1b457cae\"><span data-lake-id=\"uede4e8e7\" id=\"uede4e8e7\">浏览器根据得到的IP地址，向域名的服务主机发送数据请求</span></li><li fid=\"u0665da68\" data-lake-id=\"8e6bb6cfe1163caf4b062f29d006c41e\" id=\"8e6bb6cfe1163caf4b062f29d006c41e\"><span data-lake-id=\"ue054ae1e\" id=\"ue054ae1e\">服务器向浏览器返回响应数据</span></li></ol><p data-lake-id=\"1bccce457b95cab5a56f5384a8dfae65\" id=\"1bccce457b95cab5a56f5384a8dfae65\"><br></p><p data-lake-id=\"81364761c162e61676af72f6dbafd55d\" id=\"81364761c162e61676af72f6dbafd55d\"><span data-lake-id=\"u7e3c77bc\" id=\"u7e3c77bc\">（2）用户使用CDN缓存资源的过程：</span></p><ol list=\"u114a8bd7\"><li fid=\"u5bfc4712\" data-lake-id=\"0efee6d04c2048d44b3076dc1e8de056\" id=\"0efee6d04c2048d44b3076dc1e8de056\"><span data-lake-id=\"u7f356c9c\" id=\"u7f356c9c\">对于点击的数据的URL，经过本地DNS系统的解析，发现该URL对应的是一个CDN专用的DNS服务器，DNS系统就会将域名解析权交给CNAME指向的CDN专用的DNS服务器。</span></li><li fid=\"u5bfc4712\" data-lake-id=\"a6d9e09c6902c3df8ecf86be52cffca7\" id=\"a6d9e09c6902c3df8ecf86be52cffca7\"><span data-lake-id=\"ucf3dddab\" id=\"ucf3dddab\">CND专用DNS服务器将CND的全局负载均衡设备IP地址返回给用户</span></li><li fid=\"u5bfc4712\" data-lake-id=\"12811e07c0f85e951dfddca78c50b9fd\" id=\"12811e07c0f85e951dfddca78c50b9fd\"><span data-lake-id=\"u47e1eacf\" id=\"u47e1eacf\">用户向CDN的全局负载均衡设备发起数据请求</span></li><li fid=\"u5bfc4712\" data-lake-id=\"36fb83433ef99750d960d00650be6437\" id=\"36fb83433ef99750d960d00650be6437\"><span data-lake-id=\"ud827db51\" id=\"ud827db51\">CDN的全局负载均衡设备根据用户的IP地址，以及用户请求的内容URL，选择一台用户所属区域的区域负载均衡设备，告诉用户向这台设备发起请求</span></li><li fid=\"u5bfc4712\" data-lake-id=\"6b5014978c47e9de5548863bad631c10\" id=\"6b5014978c47e9de5548863bad631c10\"><span data-lake-id=\"ua01778b0\" id=\"ua01778b0\">区域负载均衡设备选择一台合适的缓存服务器来提供服务，将该缓存服务器的IP地址返回给全局负载均衡设备</span></li><li fid=\"u5bfc4712\" data-lake-id=\"16a0cd817b95484ece00cbf88f432b8b\" id=\"16a0cd817b95484ece00cbf88f432b8b\"><span data-lake-id=\"u35601a61\" id=\"u35601a61\">全局负载均衡设备把服务器的IP地址返回给用户</span></li><li fid=\"u5bfc4712\" data-lake-id=\"937fac873246056e61d6ffe58533e975\" id=\"937fac873246056e61d6ffe58533e975\"><span data-lake-id=\"u5c77ba28\" id=\"u5c77ba28\">用户向该缓存服务器发起请求，缓存服务器响应用户的请求，将用户所需内容发送至用户终端。</span></li></ol><p data-lake-id=\"b642c0511a15bc156eada14645565c78\" id=\"b642c0511a15bc156eada14645565c78\"><br></p><p data-lake-id=\"ba05b32c70e049718dd49bc71d19d3f7\" id=\"ba05b32c70e049718dd49bc71d19d3f7\"><span data-lake-id=\"u5788cfa6\" id=\"u5788cfa6\">如果缓存服务器没有用户想要的内容，那么缓存服务器就会向它的上一级缓存服务器请求内容，以此类推，直到获取到需要的资源。最后如果还是没有，就会回到自己的服务器去获取资源。</span></p><p data-lake-id=\"b0a3c0c3ef82d364caa62821d9f5c4d1\" id=\"b0a3c0c3ef82d364caa62821d9f5c4d1\"><br></p><p data-lake-id=\"b6738143d340d22af3be61d731ba9d37\" id=\"b6738143d340d22af3be61d731ba9d37\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1603966294889-153271b5-4b9f-4470-b05f-c7a9f030d043.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A600%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1920%2C%22originHeight%22%3A1440%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f7%22%2C%22id%22%3A%22v54mI%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"76abfc4476a0f577a6a6f0e147410e3e\" id=\"76abfc4476a0f577a6a6f0e147410e3e\"><span data-lake-id=\"u7f71818c\" id=\"u7f71818c\">CNAME（意为：别名）：在域名解析中，实际上解析出来的指定域名对应的IP地址，或者该域名的一个CNAME，然后再根据这个CNAME来查找对应的IP地址。</span></p><h3 data-lake-id=\"40cbae254f99a3f15afff95e3993b6eb\" id=\"40cbae254f99a3f15afff95e3993b6eb\"><span data-lake-id=\"u5fb68189\" id=\"u5fb68189\">4. CDN的使用场景</span></h3><ul list=\"ub93a7ca9\"><li fid=\"u0668dd66\" data-lake-id=\"ab19ed2bbc60b366849d09ddc259b081\" id=\"ab19ed2bbc60b366849d09ddc259b081\"><strong><span data-lake-id=\"u15cb8e80\" id=\"u15cb8e80\">使用第三方的CDN服务：</span></strong><span data-lake-id=\"u40e52ad1\" id=\"u40e52ad1\">如果想要开源一些项目，可以使用第三方的CDN服务</span></li><li fid=\"u0668dd66\" data-lake-id=\"c73c8a7fb83769afece0850d2b5eae3c\" id=\"c73c8a7fb83769afece0850d2b5eae3c\"><strong><span data-lake-id=\"uffcb7f41\" id=\"uffcb7f41\">使用CDN进行静态资源的缓存：</span></strong><span data-lake-id=\"uc186112d\" id=\"uc186112d\">将自己网站的静态资源放在CDN上，比如js、css、图片等。可以将整个项目放在CDN上，完成一键部署。</span></li><li fid=\"u0668dd66\" data-lake-id=\"f4b9643e0fee952bfabc09a1bef575f6\" id=\"f4b9643e0fee952bfabc09a1bef575f6\"><strong><span data-lake-id=\"uc6dac838\" id=\"uc6dac838\">直播传送：</span></strong><span data-lake-id=\"u86a29b1a\" id=\"u86a29b1a\">直播本质上是使用流媒体进行传送，CDN也是支持流媒体传送的，所以直播完全可以使用CDN来提高访问速度。CDN在处理流媒体的时候与处理普通静态文件有所不同，普通文件如果在边缘节点没有找到的话，就会去上一层接着寻找，但是流媒体本身数据量就非常大，如果使用回源的方式，必然会带来性能问题，所以流媒体一般采用的都是主动推送的方式来进行。</span></li></ul><h2 data-lake-id=\"8a680572281641d66ab8ec56cbf5c156\" id=\"8a680572281641d66ab8ec56cbf5c156\"><span data-lake-id=\"u64b9531a\" id=\"u64b9531a\">二、懒加载</span></h2><h3 data-lake-id=\"5cf6412e65151b8d4fe0c24a896d071f\" id=\"5cf6412e65151b8d4fe0c24a896d071f\"><span data-lake-id=\"u51edc0f2\" id=\"u51edc0f2\">1. 懒加载的概念</span></h3><p data-lake-id=\"097dbbca8f3d9d446868358114ce796f\" id=\"097dbbca8f3d9d446868358114ce796f\"><span data-lake-id=\"u0aa542ec\" id=\"u0aa542ec\">懒加载也叫做延迟加载、按需加载，指的是在长网页中延迟加载图片数据，是一种较好的网页性能优化的方式。在比较长的网页或应用中，如果图片很多，所有的图片都被加载出来，而用户只能看到可视窗口的那一部分图片数据，这样就浪费了性能。</span></p><p data-lake-id=\"781c636bbfc790a8318bfd1d97065541\" id=\"781c636bbfc790a8318bfd1d97065541\"><br></p><p data-lake-id=\"8f8a8483601baf091506876dfbed4db3\" id=\"8f8a8483601baf091506876dfbed4db3\"><span data-lake-id=\"uf02b8a2a\" id=\"uf02b8a2a\">如果使用图片的懒加载就可以解决以上问题。在滚动屏幕之前，可视化区域之外的图片不会进行加载，在滚动屏幕时才加载。这样使得网页的加载速度更快，减少了服务器的负载。懒加载适用于图片较多，页面列表较长（长列表）的场景中。</span></p><h3 data-lake-id=\"3918c7ef0543dd5474176e5e1b14e5df\" id=\"3918c7ef0543dd5474176e5e1b14e5df\"><span data-lake-id=\"u1991a751\" id=\"u1991a751\">2. 懒加载的特点</span></h3><ul list=\"u308cd7c2\"><li fid=\"u1f549b14\" data-lake-id=\"717448acfc8946085ae1ba259b20530c\" id=\"717448acfc8946085ae1ba259b20530c\"><strong><span data-lake-id=\"u184f71cf\" id=\"u184f71cf\">减少无用资源的加载</span></strong><span data-lake-id=\"u6236b14f\" id=\"u6236b14f\">：使用懒加载明显减少了服务器的压力和流量，同时也减小了浏览器的负担。</span></li><li fid=\"u1f549b14\" data-lake-id=\"833500d1630c771f6db7ae521a481d4e\" id=\"833500d1630c771f6db7ae521a481d4e\"><strong><span data-lake-id=\"uf9c64cf8\" id=\"uf9c64cf8\">提升用户体验</span></strong><span data-lake-id=\"u28a22a9c\" id=\"u28a22a9c\">: 如果同时加载较多图片，可能需要等待的时间较长，这样影响了用户体验，而使用懒加载就能大大的提高用户体验。</span></li><li fid=\"u1f549b14\" data-lake-id=\"55bbc55a17fe0f1c90f488d23cf3f58e\" id=\"55bbc55a17fe0f1c90f488d23cf3f58e\"><strong><span data-lake-id=\"u329bd4d7\" id=\"u329bd4d7\">防止加载过多图片而影响其他资源文件的加载</span></strong><span data-lake-id=\"u08e08023\" id=\"u08e08023\"> ：会影响网站应用的正常使用。</span></li></ul><h3 data-lake-id=\"06a20308fb9ea78ffa2cfb72042603e0\" id=\"06a20308fb9ea78ffa2cfb72042603e0\"><span data-lake-id=\"u97f88e6c\" id=\"u97f88e6c\">3. 懒加载的实现原理</span></h3><p data-lake-id=\"38b680d21a124b01173bd6440f433aa3\" id=\"38b680d21a124b01173bd6440f433aa3\"><span data-lake-id=\"u18b9a02b\" id=\"u18b9a02b\">图片的加载是由</span><code data-lake-id=\"u05cf8cca\" id=\"u05cf8cca\"><span data-lake-id=\"udba1b234\" id=\"udba1b234\">src</span></code><span data-lake-id=\"ubcbf3eda\" id=\"ubcbf3eda\">引起的，当对</span><code data-lake-id=\"ua70dce66\" id=\"ua70dce66\"><span data-lake-id=\"ufd6963f5\" id=\"ufd6963f5\">src</span></code><span data-lake-id=\"ud7d3fee3\" id=\"ud7d3fee3\">赋值时，浏览器就会请求图片资源。根据这个原理，我们使用HTML5 的</span><code data-lake-id=\"u1c11a7cd\" id=\"u1c11a7cd\"><span data-lake-id=\"udd7cf4ff\" id=\"udd7cf4ff\">data-xxx</span></code><span data-lake-id=\"u906d99b3\" id=\"u906d99b3\">属性来储存图片的路径，在需要加载图片的时候，将</span><code data-lake-id=\"ub8044648\" id=\"ub8044648\"><span data-lake-id=\"ud9854ded\" id=\"ud9854ded\">data-xxx</span></code><span data-lake-id=\"u986875d7\" id=\"u986875d7\">中图片的路径赋值给</span><code data-lake-id=\"ucd72e08a\" id=\"ucd72e08a\"><span data-lake-id=\"u9b6c8750\" id=\"u9b6c8750\">src</span></code><span data-lake-id=\"uc22734b6\" id=\"uc22734b6\">，这样就实现了图片的按需加载，即懒加载。</span></p><p data-lake-id=\"0686c03a4b5dd69d65de6f14fd7164ae\" id=\"0686c03a4b5dd69d65de6f14fd7164ae\"><br></p><p data-lake-id=\"449ce5c7fca3d7db2bd825663708b957\" id=\"449ce5c7fca3d7db2bd825663708b957\"><span data-lake-id=\"u04c88816\" id=\"u04c88816\">注意：</span><code data-lake-id=\"ua40dbc87\" id=\"ua40dbc87\"><span data-lake-id=\"uc7c4e5c7\" id=\"uc7c4e5c7\">data-xxx</span></code><span data-lake-id=\"u02a9ca8c\" id=\"u02a9ca8c\"> 中的</span><code data-lake-id=\"u41b42cbb\" id=\"u41b42cbb\"><span data-lake-id=\"uddf684c2\" id=\"uddf684c2\">xxx</span></code><span data-lake-id=\"u7878df23\" id=\"u7878df23\">可以自定义，这里我们使用</span><code data-lake-id=\"ufc7d3a19\" id=\"ufc7d3a19\"><span data-lake-id=\"u61ec59d6\" id=\"u61ec59d6\">data-src</span></code><span data-lake-id=\"u3f3cf359\" id=\"u3f3cf359\">来定义。</span></p><p data-lake-id=\"f8f784706709152c863c4d02b1c0cf96\" id=\"f8f784706709152c863c4d02b1c0cf96\"><br></p><p data-lake-id=\"6235019e51c46177f583d4b8d4cc11b9\" id=\"6235019e51c46177f583d4b8d4cc11b9\"><span data-lake-id=\"ua0b4eb07\" id=\"ua0b4eb07\">懒加载的实现重点在于确定用户需要加载哪张图片，在浏览器中，可视区域内的资源就是用户需要的资源。所以当图片出现在可视区域时，获取图片的真实地址并赋值给图片即可。</span></p><p data-lake-id=\"94989cc8c48919ac417f82b38fe31cc8\" id=\"94989cc8c48919ac417f82b38fe31cc8\"><br></p><p data-lake-id=\"23191c5c61d924578f3ec9e4bd6dd1af\" id=\"23191c5c61d924578f3ec9e4bd6dd1af\"><span data-lake-id=\"u536ec965\" id=\"u536ec965\">使用原生JavaScript实现懒加载：</span></p><p data-lake-id=\"ebe42d06ed824c6799cc71b1764bec71\" id=\"ebe42d06ed824c6799cc71b1764bec71\"><strong><span data-lake-id=\"u9d478cd0\" id=\"u9d478cd0\">知识点：</span></strong></p><p data-lake-id=\"9483141abd9366d1120f7a15ec0fd962\" id=\"9483141abd9366d1120f7a15ec0fd962\"><span data-lake-id=\"uc2481fc1\" id=\"uc2481fc1\">（1）</span><code data-lake-id=\"ucdaefc21\" id=\"ucdaefc21\"><span data-lake-id=\"u03f3eac1\" id=\"u03f3eac1\">window.innerHeight</span></code><span data-lake-id=\"u7ae79df8\" id=\"u7ae79df8\"> 是浏览器可视区的高度</span></p><p data-lake-id=\"a92aa1d9bb60966fb6aece7fc2acaef6\" id=\"a92aa1d9bb60966fb6aece7fc2acaef6\"><span data-lake-id=\"ue07253fa\" id=\"ue07253fa\">（2）</span><code data-lake-id=\"uae309c82\" id=\"uae309c82\"><span data-lake-id=\"ue9abb909\" id=\"ue9abb909\">document.body.scrollTop || document.documentElement.scrollTop</span></code><span data-lake-id=\"u03eb16c0\" id=\"u03eb16c0\"> 是浏览器滚动的过的距离</span></p><p data-lake-id=\"294c9f850f6d7dce7b95022c75ef815b\" id=\"294c9f850f6d7dce7b95022c75ef815b\"><span data-lake-id=\"u0efb7342\" id=\"u0efb7342\">（3）</span><code data-lake-id=\"u2a15fca9\" id=\"u2a15fca9\"><span data-lake-id=\"ua933f495\" id=\"ua933f495\">imgs.offsetTop</span></code><span data-lake-id=\"udb07bffc\" id=\"udb07bffc\"> 是元素顶部距离文档顶部的高度（包括滚动条的距离）</span></p><p data-lake-id=\"79defba935e1c24f06e9445e49be8880\" id=\"79defba935e1c24f06e9445e49be8880\"><span data-lake-id=\"u76b73930\" id=\"u76b73930\">（4）图片加载条件：</span><code data-lake-id=\"u71755f62\" id=\"u71755f62\"><span data-lake-id=\"ueef118e1\" id=\"ueef118e1\">img.offsetTop &lt; window.innerHeight + document.body.scrollTop;</span></code></p><p data-lake-id=\"850d2ac5218fd9ea1d2646dff22b39a0\" id=\"850d2ac5218fd9ea1d2646dff22b39a0\"><strong><span data-lake-id=\"uac4efcab\" id=\"uac4efcab\">图示：</span></strong></p><p data-lake-id=\"e53e3e58b5e5527e42654717f4d61c24\" id=\"e53e3e58b5e5527e42654717f4d61c24\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1603966605254-fe880ec0-ebd1-4f94-b662-cdd5e5396c34.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A746%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1852%2C%22originHeight%22%3A1726%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23848484%22%2C%22id%22%3A%22zYfct%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"96fbffae33a7d93adc3559b54c43abd0\" id=\"96fbffae33a7d93adc3559b54c43abd0\"><strong><span data-lake-id=\"u255f9f5f\" id=\"u255f9f5f\">代码实现：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cdiv%20class%3D%5C%22container%5C%22%3E%5Cn%20%20%20%20%20%3Cimg%20src%3D%5C%22loading.gif%5C%22%20%20data-src%3D%5C%22pic.png%5C%22%3E%5Cn%20%20%20%20%20%3Cimg%20src%3D%5C%22loading.gif%5C%22%20%20data-src%3D%5C%22pic.png%5C%22%3E%5Cn%20%20%20%20%20%3Cimg%20src%3D%5C%22loading.gif%5C%22%20%20data-src%3D%5C%22pic.png%5C%22%3E%5Cn%20%20%20%20%20%3Cimg%20src%3D%5C%22loading.gif%5C%22%20%20data-src%3D%5C%22pic.png%5C%22%3E%5Cn%20%20%20%20%20%3Cimg%20src%3D%5C%22loading.gif%5C%22%20%20data-src%3D%5C%22pic.png%5C%22%3E%5Cn%20%20%20%20%20%3Cimg%20src%3D%5C%22loading.gif%5C%22%20%20data-src%3D%5C%22pic.png%5C%22%3E%5Cn%3C%2Fdiv%3E%5Cn%3Cscript%3E%5Cnvar%20imgs%20%3D%20document.querySelectorAll('img')%3B%5Cnfunction%20lozyLoad()%7B%5Cn%5Ct%5Ctvar%20scrollTop%20%3D%20document.body.scrollTop%20%7C%7C%20document.documentElement.scrollTop%3B%5Cn%5Ct%5Ctvar%20winHeight%3D%20window.innerHeight%3B%5Cn%5Ct%5Ctfor(var%20i%3D0%3Bi%20%3C%20imgs.length%3Bi%2B%2B)%7B%5Cn%5Ct%5Ct%5Ctif(imgs%5Bi%5D.offsetTop%20%3C%20scrollTop%20%2B%20winHeight%20)%7B%5Cn%5Ct%5Ct%5Ct%5Ctimgs%5Bi%5D.src%20%3D%20imgs%5Bi%5D.getAttribute('data-src')%3B%5Cn%5Ct%5Ct%5Ct%7D%5Cn%5Ct%5Ct%7D%5Cn%5Ct%7D%5Cn%20%20window.onscroll%20%3D%20lozyLoad()%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wjDXH%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"dcf3ff4ce33887ef61683c487dbf12eb\" id=\"dcf3ff4ce33887ef61683c487dbf12eb\"><span data-lake-id=\"u77d56e24\" id=\"u77d56e24\">4. 懒加载与预加载的区别</span></h3><p data-lake-id=\"4d10941e80a6dac97441cf7b6a36fc34\" id=\"4d10941e80a6dac97441cf7b6a36fc34\"><span data-lake-id=\"ua7bb43a4\" id=\"ua7bb43a4\">这两种方式都是提高网页性能的方式，两者主要区别是一个是提前加载，一个是迟缓甚至不加载。懒加载对服务器前端有一定的缓解压力作用，预加载则会增加服务器前端压力。</span></p><ul list=\"u09571da3\"><li fid=\"u0bce9f5e\" data-lake-id=\"bebc418e4257b900ba2d027c9fc27f86\" id=\"bebc418e4257b900ba2d027c9fc27f86\"><strong><span data-lake-id=\"u3984bc24\" id=\"u3984bc24\">懒加载也叫延迟加载，指的是在长网页中延迟加载图片的时机，当用户需要访问时，再去加载</span></strong><span data-lake-id=\"u461c5027\" id=\"u461c5027\">，这样可以提高网站的首屏加载速度，提升用户的体验，并且可以减少服务器的压力。它适用于图片很多，页面很长的电商网站的场景。懒加载的实现原理是，将页面上的图片的 src 属性设置为空字符串，将图片的真实路径保存在一个自定义属性中，当页面滚动的时候，进行判断，如果图片进入页面可视区域内，则从自定义属性中取出真实路径赋值给图片的 src 属性，以此来实现图片的延迟加载。</span></li><li fid=\"u0bce9f5e\" data-lake-id=\"252f4d25e1d8b64f52dd4b76b2414450\" id=\"252f4d25e1d8b64f52dd4b76b2414450\"><strong><span data-lake-id=\"u9b8d5e7d\" id=\"u9b8d5e7d\">预加载指的是将所需的资源提前请求加载到本地，这样后面在需要用到时就直接从缓存取资源。</span></strong><span data-lake-id=\"ue47b71ff\" id=\"ue47b71ff\">通过预加载能够减少用户的等待时间，提高用户的体验。我了解的预加载的最常用的方式是使用 js 中的 image 对象，通过为 image 对象来设置 scr 属性，来实现图片的预加载。</span></li></ul><h2 data-lake-id=\"fe6b6efbf83c7c17f85715fd6cbcb5b2\" id=\"fe6b6efbf83c7c17f85715fd6cbcb5b2\"><span data-lake-id=\"u36f22cac\" id=\"u36f22cac\">三、回流与重绘</span></h2><h3 data-lake-id=\"314066976fd5a49da4563fbf43964810\" id=\"314066976fd5a49da4563fbf43964810\"><span data-lake-id=\"u939032ed\" id=\"u939032ed\">1. 回流与重绘的概念及触发条件</span></h3><h4 data-lake-id=\"603ef35fd2b1b30c8db1cebd18d5c0de\" id=\"603ef35fd2b1b30c8db1cebd18d5c0de\"><span data-lake-id=\"ud8506894\" id=\"ud8506894\">（1）回流</span></h4><p data-lake-id=\"8abc4313895ac2e884beaaee962a7faa\" id=\"8abc4313895ac2e884beaaee962a7faa\"><span data-lake-id=\"u3345738c\" id=\"u3345738c\">当渲染树中部分或者全部元素的尺寸、结构或者属性发生变化时，浏览器会重新渲染部分或者全部文档的过程就称为</span><strong><span data-lake-id=\"ub199fb79\" id=\"ub199fb79\">回流</span></strong><span data-lake-id=\"ubb70a41d\" id=\"ubb70a41d\">。</span></p><p data-lake-id=\"47dcfb8bed381f8a7898de219e287f83\" id=\"47dcfb8bed381f8a7898de219e287f83\"><br></p><p data-lake-id=\"a33bf3608e621f392709880f4dc2ed72\" id=\"a33bf3608e621f392709880f4dc2ed72\"><span data-lake-id=\"ub8a2bb68\" id=\"ub8a2bb68\">下面这些操作会导致回流：</span></p><ul list=\"ub459a1a7\"><li fid=\"u031e1ffc\" data-lake-id=\"239ddfee4378a6a71443ba588026e350\" id=\"239ddfee4378a6a71443ba588026e350\"><span data-lake-id=\"u36344f86\" id=\"u36344f86\">页面的首次渲染</span></li><li fid=\"u031e1ffc\" data-lake-id=\"f2eebec68c14bd1ebb0c1ecd8638c15a\" id=\"f2eebec68c14bd1ebb0c1ecd8638c15a\"><span data-lake-id=\"u9840cc37\" id=\"u9840cc37\">浏览器的窗口大小发生变化</span></li><li fid=\"u031e1ffc\" data-lake-id=\"0bc77e9d49663d8c200dce03988fe3ee\" id=\"0bc77e9d49663d8c200dce03988fe3ee\"><span data-lake-id=\"udd900ab3\" id=\"udd900ab3\">元素的内容发生变化</span></li><li fid=\"u031e1ffc\" data-lake-id=\"27bef7f7a3fb6aec6bef9e0f86ae8cf2\" id=\"27bef7f7a3fb6aec6bef9e0f86ae8cf2\"><span data-lake-id=\"u05f12a90\" id=\"u05f12a90\">元素的尺寸或者位置发生变化</span></li><li fid=\"u031e1ffc\" data-lake-id=\"814c9714b245d35dae913d4315d65550\" id=\"814c9714b245d35dae913d4315d65550\"><span data-lake-id=\"ub7e24c44\" id=\"ub7e24c44\">元素的字体大小发生变化</span></li><li fid=\"u031e1ffc\" data-lake-id=\"76250543b4a94b40a1fb765a0cb8051e\" id=\"76250543b4a94b40a1fb765a0cb8051e\"><span data-lake-id=\"ua5009262\" id=\"ua5009262\">激活CSS伪类</span></li><li fid=\"u031e1ffc\" data-lake-id=\"68eb78112e75dae9dd00bffbf2eb4e56\" id=\"68eb78112e75dae9dd00bffbf2eb4e56\"><span data-lake-id=\"u2550d2a5\" id=\"u2550d2a5\">查询某些属性或者调用某些方法</span></li><li fid=\"u031e1ffc\" data-lake-id=\"906dc31def3a2790835755f17807df13\" id=\"906dc31def3a2790835755f17807df13\"><span data-lake-id=\"u944bf85e\" id=\"u944bf85e\">添加或者删除可见的DOM元素</span></li></ul><p data-lake-id=\"22469204cfea820b5ff9ff590a47a559\" id=\"22469204cfea820b5ff9ff590a47a559\"><br></p><p data-lake-id=\"28e219d8fc2bd3d777545842e407a4ba\" id=\"28e219d8fc2bd3d777545842e407a4ba\"><span data-lake-id=\"u0677022e\" id=\"u0677022e\">在触发回流（重排）的时候，由于浏览器渲染页面是基于流式布局的，所以当触发回流时，会导致周围的DOM元素重新排列，它的影响范围有两种：</span></p><ul list=\"u75efe7bb\"><li fid=\"u67573a17\" data-lake-id=\"8e0c2efc465fd05ee986bd0046eb6b67\" id=\"8e0c2efc465fd05ee986bd0046eb6b67\"><span data-lake-id=\"ub43fa90e\" id=\"ub43fa90e\">全局范围：从根节点开始，对整个渲染树进行重新布局</span></li><li fid=\"u67573a17\" data-lake-id=\"4ced6b67217f38e37f3a1f73ce427d49\" id=\"4ced6b67217f38e37f3a1f73ce427d49\"><span data-lake-id=\"u68f8d816\" id=\"u68f8d816\">局部范围：对渲染树的某部分或者一个渲染对象进行重新布局</span></li></ul><h4 data-lake-id=\"92ff1bc77f6f4f9a64e9ffbb26e7033f\" id=\"92ff1bc77f6f4f9a64e9ffbb26e7033f\"><span data-lake-id=\"ue4e996bb\" id=\"ue4e996bb\">（2）重绘</span></h4><p data-lake-id=\"0ef230f91de07ecde0087fae0168157f\" id=\"0ef230f91de07ecde0087fae0168157f\"><span data-lake-id=\"uced695a4\" id=\"uced695a4\">当页面中某些元素的样式发生变化，但是不会影响其在文档流中的位置时，浏览器就会对元素进行重新绘制，这个过程就是</span><strong><span data-lake-id=\"uba620ce7\" id=\"uba620ce7\">重绘</span></strong><span data-lake-id=\"ub5c3712e\" id=\"ub5c3712e\">。</span></p><p data-lake-id=\"fd12f831a9d247c708da017d534203c7\" id=\"fd12f831a9d247c708da017d534203c7\"><br></p><p data-lake-id=\"d49a949e203151212d17f95bd6667546\" id=\"d49a949e203151212d17f95bd6667546\"><span data-lake-id=\"u73abe6cc\" id=\"u73abe6cc\">下面这些操作会导致重绘：</span></p><ul list=\"u4489b8be\"><li fid=\"ubd49c9ac\" data-lake-id=\"a0b4bd5e97e4ff6a120a4c0bab8d1439\" id=\"a0b4bd5e97e4ff6a120a4c0bab8d1439\"><span data-lake-id=\"uc15ca8a7\" id=\"uc15ca8a7\">color、background 相关属性：background-color、background-image 等</span></li><li fid=\"ubd49c9ac\" data-lake-id=\"1bfd8381d7a43ea2fad2bd590520ba1c\" id=\"1bfd8381d7a43ea2fad2bd590520ba1c\"><span data-lake-id=\"u118bd07e\" id=\"u118bd07e\">outline 相关属性：outline-color、outline-width 、text-decoration</span></li><li fid=\"ubd49c9ac\" data-lake-id=\"7b4658337fa1b819266a32c540dc814c\" id=\"7b4658337fa1b819266a32c540dc814c\"><span data-lake-id=\"u246e51fa\" id=\"u246e51fa\">border-radius、visibility、box-shadow</span></li></ul><p data-lake-id=\"30dfa2af3fe279ae0fd83f0b51d87ebd\" id=\"30dfa2af3fe279ae0fd83f0b51d87ebd\"><span data-lake-id=\"uc809432e\" id=\"uc809432e\">注意： </span><strong><span data-lake-id=\"u62ec3e84\" id=\"u62ec3e84\">当触发回流时，一定会触发重绘，但是重绘不一定会引发回流。</span></strong></p><h3 data-lake-id=\"07f74b9386f90fce04ccdd1a750a66a0\" id=\"07f74b9386f90fce04ccdd1a750a66a0\"><span data-lake-id=\"u6a938958\" id=\"u6a938958\">2. </span><span data-lake-id=\"u07af7833\" id=\"u07af7833\">如何避免回流与重绘？</span></h3><p data-lake-id=\"aa216d6c557727854053bfb116c27cf2\" id=\"aa216d6c557727854053bfb116c27cf2\"><strong><span data-lake-id=\"uaf7997d0\" id=\"uaf7997d0\">减少回流与重绘的措施：</span></strong></p><ul list=\"u2b4a235e\"><li fid=\"uc8fe34d7\" data-lake-id=\"2ba5223b479f84edd7687ffdb1819326\" id=\"2ba5223b479f84edd7687ffdb1819326\"><span data-lake-id=\"u6e5cb39f\" id=\"u6e5cb39f\">操作DOM时，尽量在低层级的DOM节点进行操作</span></li><li fid=\"uc8fe34d7\" data-lake-id=\"b89692f9d877790ced3f565dc8b90d5f\" id=\"b89692f9d877790ced3f565dc8b90d5f\"><span data-lake-id=\"u0698a43d\" id=\"u0698a43d\">不要使用</span><code data-lake-id=\"ue5325a21\" id=\"ue5325a21\"><span data-lake-id=\"ua021ee93\" id=\"ua021ee93\">table</span></code><span data-lake-id=\"u2c7501ce\" id=\"u2c7501ce\">布局， 一个小的改动可能会使整个</span><code data-lake-id=\"u749eb692\" id=\"u749eb692\"><span data-lake-id=\"ub0fc181e\" id=\"ub0fc181e\">table</span></code><span data-lake-id=\"ub833933a\" id=\"ub833933a\">进行重新布局</span></li><li fid=\"uc8fe34d7\" data-lake-id=\"e50e1bd19b6c9108954983be178b364e\" id=\"e50e1bd19b6c9108954983be178b364e\"><span data-lake-id=\"u10e5d86a\" id=\"u10e5d86a\">使用CSS的表达式</span></li><li fid=\"uc8fe34d7\" data-lake-id=\"ee05c044ead061e883018f5d1e07402c\" id=\"ee05c044ead061e883018f5d1e07402c\"><span data-lake-id=\"u34d2c24e\" id=\"u34d2c24e\">不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</span></li><li fid=\"uc8fe34d7\" data-lake-id=\"3f0760d4074dd551573df3c4a4d2db0c\" id=\"3f0760d4074dd551573df3c4a4d2db0c\"><span data-lake-id=\"ube30b478\" id=\"ube30b478\">使用absolute或者fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</span></li><li fid=\"uc8fe34d7\" data-lake-id=\"f1d0de1af60df24f84087c58dbb5044b\" id=\"f1d0de1af60df24f84087c58dbb5044b\"><span data-lake-id=\"u7857891f\" id=\"u7857891f\">避免频繁操作DOM，可以创建一个文档片段</span><code data-lake-id=\"u17584ff7\" id=\"u17584ff7\"><span data-lake-id=\"u4e9fc6e1\" id=\"u4e9fc6e1\">documentFragment</span></code><span data-lake-id=\"u12cc85b2\" id=\"u12cc85b2\">，在它上面应用所有DOM操作，最后再把它添加到文档中</span></li><li fid=\"uc8fe34d7\" data-lake-id=\"cd353445e3204898e5986c3abb55a78a\" id=\"cd353445e3204898e5986c3abb55a78a\"><span data-lake-id=\"ub64da819\" id=\"ub64da819\">将元素先设置</span><code data-lake-id=\"u5b2b40cd\" id=\"u5b2b40cd\"><span data-lake-id=\"ub05b6db4\" id=\"ub05b6db4\">display: none</span></code><span data-lake-id=\"u14687a58\" id=\"u14687a58\">，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。</span></li><li fid=\"uc8fe34d7\" data-lake-id=\"34c6f6e14f0f8a86991c6322bd3ddb69\" id=\"34c6f6e14f0f8a86991c6322bd3ddb69\"><span data-lake-id=\"u361e02eb\" id=\"u361e02eb\">将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于</span><strong><span data-lake-id=\"u49c9d300\" id=\"u49c9d300\">浏览器的渲染队列机制</span></strong><span data-lake-id=\"u6ad90803\" id=\"u6ad90803\">。</span></li></ul><p data-lake-id=\"64bce7accefb1b92b6cfd7e5de8a818b\" id=\"64bce7accefb1b92b6cfd7e5de8a818b\"><br></p><p data-lake-id=\"0119ecacac7563c196fdc5ea630016a9\" id=\"0119ecacac7563c196fdc5ea630016a9\"><span data-lake-id=\"u07405ddb\" id=\"u07405ddb\">浏览器针对页面的回流与重绘，进行了自身的优化——</span><strong><span data-lake-id=\"ue7605a24\" id=\"ue7605a24\">渲染队列</span></strong></p><p data-lake-id=\"8c5df4638dd462340098408c61729961\" id=\"8c5df4638dd462340098408c61729961\"><br></p><p data-lake-id=\"460691430d79b40b061672dfa5e8a94e\" id=\"460691430d79b40b061672dfa5e8a94e\"><strong><span data-lake-id=\"u5362fb01\" id=\"u5362fb01\">浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</span></strong></p><p data-lake-id=\"4447ee76bd6842e1f9f711446dede4d5\" id=\"4447ee76bd6842e1f9f711446dede4d5\"><br></p><p data-lake-id=\"def5ffbdfc359ec78eea66602e2acf98\" id=\"def5ffbdfc359ec78eea66602e2acf98\"><span data-lake-id=\"ub55c52a1\" id=\"ub55c52a1\">上面，将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</span></p><h3 data-lake-id=\"e6fa8f0d06de1b71c4da37c5fd8b33e2\" id=\"e6fa8f0d06de1b71c4da37c5fd8b33e2\"><span data-lake-id=\"ubfd0c9a1\" id=\"ubfd0c9a1\">3. 如何优化动画？</span></h3><p data-lake-id=\"c00ddb4101ba42b488272940f506a471\" id=\"c00ddb4101ba42b488272940f506a471\"><span data-lake-id=\"u32c6f07e\" id=\"u32c6f07e\">对于如何优化动画，我们知道，一般情况下，动画需要频繁的操作DOM，就就会导致页面的性能问题，我们可以将动画的</span><code data-lake-id=\"u9f8cc87a\" id=\"u9f8cc87a\"><span data-lake-id=\"ud834a405\" id=\"ud834a405\">position</span></code><span data-lake-id=\"ud4815eea\" id=\"ud4815eea\">属性设置为</span><code data-lake-id=\"ueaead759\" id=\"ueaead759\"><span data-lake-id=\"uf25a9a38\" id=\"uf25a9a38\">absolute</span></code><span data-lake-id=\"ua84f1656\" id=\"ua84f1656\">或者</span><code data-lake-id=\"u6f65c51c\" id=\"u6f65c51c\"><span data-lake-id=\"u9d4cc065\" id=\"u9d4cc065\">fixed</span></code><span data-lake-id=\"u549f00d4\" id=\"u549f00d4\">，将动画脱离文档流，这样他的回流就不会影响到页面了。</span></p><h3 data-lake-id=\"825c08862e85c7204a484bcd4754176f\" id=\"825c08862e85c7204a484bcd4754176f\"><span data-lake-id=\"u5ffcfaa2\" id=\"u5ffcfaa2\">4. documentFragment 是什么？用它跟直接操作 DOM 的区别是什么？</span></h3><p data-lake-id=\"a8dc662b4f7e66884e1e7d7626916c8c\" id=\"a8dc662b4f7e66884e1e7d7626916c8c\"><span data-lake-id=\"u96b24654\" id=\"u96b24654\">MDN中对</span><code data-lake-id=\"u1a99af3d\" id=\"u1a99af3d\"><span data-lake-id=\"ud84f1e28\" id=\"ud84f1e28\">documentFragment</span></code><span data-lake-id=\"u1bd1d419\" id=\"u1bd1d419\">的解释：</span></p><blockquote data-lake-id=\"ue79725c9\" id=\"ue79725c9\"><p data-lake-id=\"bddf4545ea3ce075f889b7763fca06ea\" id=\"bddf4545ea3ce075f889b7763fca06ea\"><span data-lake-id=\"u903f552b\" id=\"u903f552b\">DocumentFragment，文档片段接口，一个没有父对象的最小文档对象。它被作为一个轻量版的 Document使用，就像标准的document一样，存储由节点（nodes）组成的文档结构。与document相比，最大的区别是DocumentFragment不是真实 DOM 树的一部分，它的变化不会触发 DOM 树的重新渲染，且不会导致性能等问题。</span></p></blockquote><p data-lake-id=\"788b8c69967a2b1a3f667728bbe209e6\" id=\"788b8c69967a2b1a3f667728bbe209e6\"><br></p><p data-lake-id=\"b2436375c35508a5363294f2d7955881\" id=\"b2436375c35508a5363294f2d7955881\"><span data-lake-id=\"u786fb2d7\" id=\"u786fb2d7\">当我们把一个 DocumentFragment 节点插入文档树时，插入的不是 DocumentFragment 自身，而是它的所有子孙节点。在频繁的DOM操作时，我们就可以将DOM元素插入DocumentFragment，之后一次性的将所有的子孙节点插入文档中。和直接操作DOM相比，将DocumentFragment 节点插入DOM树时，不会触发页面的重绘，这样就大大提高了页面的性能。</span></p><p data-lake-id=\"u37d4db28\" id=\"u37d4db28\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673895120181-f8ea5ce3-9b46-44a4-8111-b1b23c361fbe.png%22%2C%22taskId%22%3A%22uaee2c0ba-e00d-4120-8261-6e7dca1b42a%22%2C%22clientId%22%3A%22ucc0a67cb-a114-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22AnxDr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"4f2fb1a42cdd5e519574f2a7643bfda0\" id=\"4f2fb1a42cdd5e519574f2a7643bfda0\"><span data-lake-id=\"u8d85bfca\" id=\"u8d85bfca\">四、节流与防抖</span></h2><h3 data-lake-id=\"fcf6baaf3ea0afe5c322fc9227655ca8\" id=\"fcf6baaf3ea0afe5c322fc9227655ca8\"><span data-lake-id=\"ubcc71b42\" id=\"ubcc71b42\">1. 对节流与防抖的理解</span></h3><ul list=\"u38968600\"><li fid=\"uf018eecb\" data-lake-id=\"13a383449bdf97460685e768392e2d6f\" id=\"13a383449bdf97460685e768392e2d6f\"><span data-lake-id=\"u08f16b97\" id=\"u08f16b97\">函数防抖是指在事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时。这可以使用在一些点击请求的事件上，避免因为用户的多次点击向后端发送多次请求。</span></li><li fid=\"uf018eecb\" data-lake-id=\"c1515e50325514e6c76ac84f9fdf1aac\" id=\"c1515e50325514e6c76ac84f9fdf1aac\"><span data-lake-id=\"u87dc7fbe\" id=\"u87dc7fbe\">函数节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。节流可以使用在 scroll 函数的事件监听上，通过事件节流来降低事件调用的频率。</span></li></ul><p data-lake-id=\"26e17b348fbeda11a075b641ee56fd0b\" id=\"26e17b348fbeda11a075b641ee56fd0b\"><br></p><p data-lake-id=\"28e91a13b92f8d76f1e9eb843016903b\" id=\"28e91a13b92f8d76f1e9eb843016903b\"><strong><span data-lake-id=\"u1014848b\" id=\"u1014848b\">防抖函数的应用场景：</span></strong></p><ul list=\"u9b25261b\"><li fid=\"u4d66eed8\" data-lake-id=\"a4201a9b397f05229e26f517add12060\" id=\"a4201a9b397f05229e26f517add12060\"><span data-lake-id=\"u35a6efdf\" id=\"u35a6efdf\" style=\"background-color: transparent\">按钮提交场景：防⽌多次提交按钮，只执⾏最后提交的⼀次 </span></li><li fid=\"u4d66eed8\" data-lake-id=\"588bfa4aff19f524f01087524b9cd2bf\" id=\"588bfa4aff19f524f01087524b9cd2bf\"><span data-lake-id=\"u88fabf05\" id=\"u88fabf05\">服务端验证场景：表单验证需要服务端配合，只执⾏⼀段连续的输⼊事件的最后⼀次，还有搜索联想词功能类似⽣存环境请⽤</span><span data-lake-id=\"u5b8ccd5b\" id=\"u5b8ccd5b\">lodash.debounce </span></li></ul><p data-lake-id=\"ada91e7ce31a5e8441fb38226053fb8b\" id=\"ada91e7ce31a5e8441fb38226053fb8b\"><br></p><p data-lake-id=\"df2d0a47724ffdc9789c59386c8e52b0\" id=\"df2d0a47724ffdc9789c59386c8e52b0\"><strong><span data-lake-id=\"uc7baa9d6\" id=\"uc7baa9d6\">节流函数的</span></strong><strong><span data-lake-id=\"u1442233a\" id=\"u1442233a\">适⽤场景： </span></strong></p><ul list=\"uf44087a5\"><li fid=\"u7dc8540e\" data-lake-id=\"4b8c37874e6758977c11155b7758d8d7\" id=\"4b8c37874e6758977c11155b7758d8d7\"><span data-lake-id=\"u3b498bb3\" id=\"u3b498bb3\">拖拽场景：固定时间内只执⾏⼀次，防⽌超⾼频次触发位置变动 </span></li><li fid=\"u7dc8540e\" data-lake-id=\"d32a39941c051f14aa5690b710acd2be\" id=\"d32a39941c051f14aa5690b710acd2be\"><span data-lake-id=\"uf6b89fe0\" id=\"uf6b89fe0\">缩放场景：监控浏览器</span><span data-lake-id=\"u59e5f46b\" id=\"u59e5f46b\">resize </span></li><li fid=\"u7dc8540e\" data-lake-id=\"176f4c31187444c604dee59e71628ca9\" id=\"176f4c31187444c604dee59e71628ca9\"><span data-lake-id=\"u516a8679\" id=\"u516a8679\">动画场景：避免短时间内多次触发动画引起性能问题 </span></li></ul><h3 data-lake-id=\"c1729be32ca837722d61e5aba10b847f\" id=\"c1729be32ca837722d61e5aba10b847f\"><span data-lake-id=\"ub07d4c35\" id=\"ub07d4c35\">2. </span><span data-lake-id=\"u56938d8d\" id=\"u56938d8d\">实现节流函数和防抖函数</span></h3><p data-lake-id=\"db4946ec65ac478d674c758368363bf9\" id=\"db4946ec65ac478d674c758368363bf9\"><strong><span data-lake-id=\"ua2eafaf9\" id=\"ua2eafaf9\">函数防抖的实现：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20debounce(fn%2C%20wait)%20%7B%5Cn%20%20var%20timer%20%3D%20null%3B%5Cn%5Cn%20%20return%20function()%20%7B%5Cn%20%20%20%20var%20context%20%3D%20this%2C%5Cn%20%20%20%20%20%20args%20%3D%20%5B...arguments%5D%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E6%AD%A4%E6%97%B6%E5%AD%98%E5%9C%A8%E5%AE%9A%E6%97%B6%E5%99%A8%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%88%99%E5%8F%96%E6%B6%88%E4%B9%8B%E5%89%8D%E7%9A%84%E5%AE%9A%E6%97%B6%E5%99%A8%E9%87%8D%E6%96%B0%E8%AE%B0%E6%97%B6%5Cn%20%20%20%20if%20(timer)%20%7B%5Cn%20%20%20%20%20%20clearTimeout(timer)%3B%5Cn%20%20%20%20%20%20timer%20%3D%20null%3B%5Cn%20%20%20%20%7D%5Cn%5Cn%20%20%20%20%2F%2F%20%E8%AE%BE%E7%BD%AE%E5%AE%9A%E6%97%B6%E5%99%A8%EF%BC%8C%E4%BD%BF%E4%BA%8B%E4%BB%B6%E9%97%B4%E9%9A%94%E6%8C%87%E5%AE%9A%E4%BA%8B%E4%BB%B6%E5%90%8E%E6%89%A7%E8%A1%8C%5Cn%20%20%20%20timer%20%3D%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20fn.apply(context%2C%20args)%3B%5Cn%20%20%20%20%7D%2C%20wait)%3B%5Cn%20%20%7D%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%2280QJ7%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"fac15c631348d33fecf06adb143326a4\" id=\"fac15c631348d33fecf06adb143326a4\"><strong><span data-lake-id=\"u473c0958\" id=\"u473c0958\">函数节流的实现：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%97%B6%E9%97%B4%E6%88%B3%E7%89%88%5Cnfunction%20throttle(fn%2C%20delay)%20%7B%5Cn%20%20var%20preTime%20%3D%20Date.now()%3B%5Cn%5Cn%20%20return%20function()%20%7B%5Cn%20%20%20%20var%20context%20%3D%20this%2C%5Cn%20%20%20%20%20%20args%20%3D%20%5B...arguments%5D%2C%5Cn%20%20%20%20%20%20nowTime%20%3D%20Date.now()%3B%5Cn%5Cn%20%20%20%20%2F%2F%20%E5%A6%82%E6%9E%9C%E4%B8%A4%E6%AC%A1%E6%97%B6%E9%97%B4%E9%97%B4%E9%9A%94%E8%B6%85%E8%BF%87%E4%BA%86%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%EF%BC%8C%E5%88%99%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E3%80%82%5Cn%20%20%20%20if%20(nowTime%20-%20preTime%20%3E%3D%20delay)%20%7B%5Cn%20%20%20%20%20%20preTime%20%3D%20Date.now()%3B%5Cn%20%20%20%20%20%20return%20fn.apply(context%2C%20args)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%3B%5Cn%7D%5Cn%5Cn%2F%2F%20%E5%AE%9A%E6%97%B6%E5%99%A8%E7%89%88%5Cnfunction%20throttle%20(fun%2C%20wait)%7B%5Cn%20%20let%20timeout%20%3D%20null%5Cn%20%20return%20function()%7B%5Cn%20%20%20%20let%20context%20%3D%20this%5Cn%20%20%20%20let%20args%20%3D%20%5B...arguments%5D%5Cn%20%20%20%20if(!timeout)%7B%5Cn%20%20%20%20%20%20timeout%20%3D%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20fun.apply(context%2C%20args)%5Cn%20%20%20%20%20%20%20%20timeout%20%3D%20null%20%5Cn%20%20%20%20%20%20%7D%2C%20wait)%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22g6yEl%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"a269103a206df0c6a836737ea6855851\" id=\"a269103a206df0c6a836737ea6855851\"><span data-lake-id=\"u02f8b712\" id=\"u02f8b712\">五、图片优化</span></h2><h3 data-lake-id=\"c1f63eb8f9239c6ee9dbff5b5613cfc9\" id=\"c1f63eb8f9239c6ee9dbff5b5613cfc9\"><span data-lake-id=\"ua8b0fb4e\" id=\"ua8b0fb4e\">1. 如何对项目中的图片进行优化？</span></h3><ol list=\"u07f9d535\"><li fid=\"u2abe7a31\" data-lake-id=\"69e0cf0be4c5f3aaedf4962c78b1838c\" id=\"69e0cf0be4c5f3aaedf4962c78b1838c\"><span data-lake-id=\"uef56a414\" id=\"uef56a414\">不用图片。很多时候会使用到很多修饰类图片，其实这类修饰图片完全可以用 CSS 去代替。</span></li><li fid=\"u2abe7a31\" data-lake-id=\"bfff7891b1aaf5e79944bca25e112076\" id=\"bfff7891b1aaf5e79944bca25e112076\"><span data-lake-id=\"u34437030\" id=\"u34437030\">对于移动端来说，屏幕宽度就那么点，完全没有必要去加载原图浪费带宽。一般图片都用 CDN 加载，可以计算出适配屏幕的宽度，然后去请求相应裁剪好的图片。</span></li><li fid=\"u2abe7a31\" data-lake-id=\"521312e0ac939c4cac4e73c2fd4cdae4\" id=\"521312e0ac939c4cac4e73c2fd4cdae4\"><span data-lake-id=\"u5eaa30bf\" id=\"u5eaa30bf\">小图使用 base64 格式</span></li><li fid=\"u2abe7a31\" data-lake-id=\"157956c0ccd0a696de88c5b1e58d355b\" id=\"157956c0ccd0a696de88c5b1e58d355b\"><span data-lake-id=\"ue604ab19\" id=\"ue604ab19\">将多个图标文件整合到一张图片中（雪碧图）</span></li><li fid=\"u2abe7a31\" data-lake-id=\"81d77bb1b44b1d5cc955e935d2c8e82c\" id=\"81d77bb1b44b1d5cc955e935d2c8e82c\"><span data-lake-id=\"uc8a2dc38\" id=\"uc8a2dc38\">选择正确的图片格式：</span></li></ol><ul list=\"ue40b0b33\" data-lake-indent=\"1\"><li fid=\"u079417e6\" data-lake-id=\"ec99170c3fababe47258cdc7d3dd1c0c\" id=\"ec99170c3fababe47258cdc7d3dd1c0c\"><span data-lake-id=\"ua1351d20\" id=\"ua1351d20\">对于能够显示 WebP 格式的浏览器尽量使用 WebP 格式。因为 WebP 格式具有更好的图像数据压缩算法，能带来更小的图片体积，而且拥有肉眼识别无差异的图像质量，缺点就是兼容性并不好</span></li><li fid=\"u079417e6\" data-lake-id=\"56e80e3a547ec9d8e37bbd485477c67d\" id=\"56e80e3a547ec9d8e37bbd485477c67d\"><span data-lake-id=\"uc53a0d5f\" id=\"uc53a0d5f\">小图使用 PNG，其实对于大部分图标这类图片，完全可以使用 SVG 代替</span></li><li fid=\"u079417e6\" data-lake-id=\"8b6eea892bdd6aeaee194691b51ba8a1\" id=\"8b6eea892bdd6aeaee194691b51ba8a1\"><span data-lake-id=\"u59d00213\" id=\"u59d00213\">照片使用 JPEG</span></li></ul><h3 data-lake-id=\"41251ec200ee31e74c6e02e4faa40bbf\" id=\"41251ec200ee31e74c6e02e4faa40bbf\"><span data-lake-id=\"u85a02520\" id=\"u85a02520\">2. 常见的图片格式及使用场景</span></h3><p data-lake-id=\"156da20c1a77cb10a9d247ad5be502b8\" id=\"156da20c1a77cb10a9d247ad5be502b8\"><span data-lake-id=\"ub9418b96\" id=\"ub9418b96\">（1）</span><strong><span data-lake-id=\"ub9421ecd\" id=\"ub9421ecd\">BMP</span></strong><span data-lake-id=\"ud0b3b822\" id=\"ud0b3b822\">，是无损的、既支持索引色也支持直接色的点阵图。这种图片格式几乎没有对数据进行压缩，所以BMP格式的图片通常是较大的文件。</span></p><p data-lake-id=\"3aaa18631359870c236b310d2dfb03d0\" id=\"3aaa18631359870c236b310d2dfb03d0\"><br></p><p data-lake-id=\"d134cce6656d31d9bc440b050ce2e63f\" id=\"d134cce6656d31d9bc440b050ce2e63f\"><span data-lake-id=\"ufd10609c\" id=\"ufd10609c\">（2）</span><strong><span data-lake-id=\"u1dc91e54\" id=\"u1dc91e54\">GIF</span></strong><span data-lake-id=\"ub343fd3a\" id=\"ub343fd3a\">是无损的、采用索引色的点阵图。采用LZW压缩算法进行编码。文件小，是GIF格式的优点，同时，GIF格式还具有支持动画以及透明的优点。但是GIF格式仅支持8bit的索引色，所以GIF格式适用于对色彩要求不高同时需要文件体积较小的场景。</span></p><p data-lake-id=\"80435f7ad37c2a9d7ac02bb6389c3a9d\" id=\"80435f7ad37c2a9d7ac02bb6389c3a9d\"><br></p><p data-lake-id=\"faca9218b7d49f9452f1cb481d9cb8c7\" id=\"faca9218b7d49f9452f1cb481d9cb8c7\"><span data-lake-id=\"uf375ea82\" id=\"uf375ea82\">（3）</span><strong><span data-lake-id=\"u173a96f2\" id=\"u173a96f2\">JPEG</span></strong><span data-lake-id=\"u8b51c4d3\" id=\"u8b51c4d3\">是有损的、采用直接色的点阵图。JPEG的图片的优点是采用了直接色，得益于更丰富的色彩，JPEG非常适合用来存储照片，与GIF相比，JPEG不适合用来存储企业Logo、线框类的图。因为有损压缩会导致图片模糊，而直接色的选用，又会导致图片文件较GIF更大。</span></p><p data-lake-id=\"92d2ab23ce15468f403aacae44d2fdaa\" id=\"92d2ab23ce15468f403aacae44d2fdaa\"><br></p><p data-lake-id=\"abd0366d922b2d1c597df42ab6da609a\" id=\"abd0366d922b2d1c597df42ab6da609a\"><span data-lake-id=\"ucadcd725\" id=\"ucadcd725\">（4）</span><strong><span data-lake-id=\"ue6eafb6d\" id=\"ue6eafb6d\">PNG-8</span></strong><span data-lake-id=\"ua7cfaec9\" id=\"ua7cfaec9\">是无损的、使用索引色的点阵图。PNG是一种比较新的图片格式，PNG-8是非常好的GIF格式替代者，在可能的情况下，应该尽可能的使用PNG-8而不是GIF，因为在相同的图片效果下，PNG-8具有更小的文件体积。除此之外，PNG-8还支持透明度的调节，而GIF并不支持。除非需要动画的支持，否则没有理由使用GIF而不是PNG-8。</span></p><p data-lake-id=\"c7f60f38707cb9ed4f25927ab864100e\" id=\"c7f60f38707cb9ed4f25927ab864100e\"><br></p><p data-lake-id=\"15501f758d4a48433ca56b702f0f0786\" id=\"15501f758d4a48433ca56b702f0f0786\"><span data-lake-id=\"u5900156c\" id=\"u5900156c\">（5）</span><strong><span data-lake-id=\"u4ba51cab\" id=\"u4ba51cab\">PNG-24</span></strong><span data-lake-id=\"ufdb2f2da\" id=\"ufdb2f2da\">是无损的、使用直接色的点阵图。PNG-24的优点在于它压缩了图片的数据，使得同样效果的图片，PNG-24格式的文件大小要比BMP小得多。当然，PNG24的图片还是要比JPEG、GIF、PNG-8大得多。</span></p><p data-lake-id=\"9796ef61a273f1e999ad7ce72904393a\" id=\"9796ef61a273f1e999ad7ce72904393a\"><br></p><p data-lake-id=\"3981f32d2c9813d35e11daeb71f05c07\" id=\"3981f32d2c9813d35e11daeb71f05c07\"><span data-lake-id=\"uc52b21ab\" id=\"uc52b21ab\">（6）</span><strong><span data-lake-id=\"u648d7397\" id=\"u648d7397\">SVG</span></strong><span data-lake-id=\"ufe3fd382\" id=\"ufe3fd382\">是无损的矢量图。SVG是矢量图意味着SVG图片由直线和曲线以及绘制它们的方法组成。当放大SVG图片时，看到的还是线和曲线，而不会出现像素点。这意味着SVG图片在放大时，不会失真，所以它非常适合用来绘制Logo、Icon等。</span></p><p data-lake-id=\"f51349bc99e6ba4381b4fd83d7a2bb8f\" id=\"f51349bc99e6ba4381b4fd83d7a2bb8f\"><br></p><p data-lake-id=\"0e4a7575dae2f86d71551333546fe06c\" id=\"0e4a7575dae2f86d71551333546fe06c\"><span data-lake-id=\"uc3ef5eea\" id=\"uc3ef5eea\">（7）</span><strong><span data-lake-id=\"ua21e60a4\" id=\"ua21e60a4\">WebP</span></strong><span data-lake-id=\"u3bd2f63f\" id=\"u3bd2f63f\">是谷歌开发的一种新图片格式，WebP是同时支持有损和无损压缩的、使用直接色的点阵图。从名字就可以看出来它是为Web而生的，什么叫为Web而生呢？就是说相同质量的图片，WebP具有更小的文件体积。现在网站上充满了大量的图片，如果能够降低每一个图片的文件大小，那么将大大减少浏览器和服务器之间的数据传输量，进而降低访问延迟，提升访问体验。</span><span data-lake-id=\"ueddd987d\" id=\"ueddd987d\">目前只有Chrome浏览器和Opera浏览器支持WebP格式，兼容性不太好。</span></p><ul list=\"u0895c3a1\"><li fid=\"u59da2d1d\" data-lake-id=\"27a15d638c3572e2158ab426535a581d\" id=\"27a15d638c3572e2158ab426535a581d\"><span data-lake-id=\"ue22c3261\" id=\"ue22c3261\">在无损压缩的情况下，相同质量的WebP图片，文件大小要比PNG小26%；</span></li><li fid=\"u59da2d1d\" data-lake-id=\"dfda36af95d961e14426acc721cc4428\" id=\"dfda36af95d961e14426acc721cc4428\"><span data-lake-id=\"u8e9c69c2\" id=\"u8e9c69c2\">在有损压缩的情况下，具有相同图片精度的WebP图片，文件大小要比JPEG小25%~34%；</span></li><li fid=\"u59da2d1d\" data-lake-id=\"80dca3748c82c64ea197d808c63e1dc1\" id=\"80dca3748c82c64ea197d808c63e1dc1\"><span data-lake-id=\"u25366354\" id=\"u25366354\">WebP图片格式支持图片透明度，一个无损压缩的WebP图片，如果要支持透明度只需要22%的格外文件大小。</span></li></ul><h2 data-lake-id=\"a675631ddc8bbde2135204ddcdbd4d06\" id=\"a675631ddc8bbde2135204ddcdbd4d06\"><span data-lake-id=\"u6c17fdca\" id=\"u6c17fdca\">六、Webpack优化</span></h2><h3 data-lake-id=\"6836b2cec4f05b8898cc7e82ef862312\" id=\"6836b2cec4f05b8898cc7e82ef862312\"><span data-lake-id=\"u70d24839\" id=\"u70d24839\">1. </span><span data-lake-id=\"ue5564453\" id=\"ue5564453\">如何提⾼</span><strong><span data-lake-id=\"u16291ae5\" id=\"u16291ae5\">webpack</span></strong><span data-lake-id=\"u688c182c\" id=\"u688c182c\">的打包速度</span><strong><span data-lake-id=\"uce246508\" id=\"uce246508\">? </span></strong></h3><h4 data-lake-id=\"fecb92edc35e7c720dcc05528b470242\" id=\"fecb92edc35e7c720dcc05528b470242\"><span data-lake-id=\"uce18bc48\" id=\"uce18bc48\">（1）优化 Loader</span></h4><p data-lake-id=\"2051ccfccd34cd0c52738c1941455e4f\" id=\"2051ccfccd34cd0c52738c1941455e4f\"><span data-lake-id=\"u38860146\" id=\"u38860146\">对于 Loader 来说，影响打包效率首当其冲必属 Babel 了。因为 Babel 会将代码转为字符串生成 AST，然后对 AST 继续进行转变最后再生成新的代码，项目越大，</span><strong><span data-lake-id=\"u27232002\" id=\"u27232002\">转换代码越多，效率就越低</span></strong><span data-lake-id=\"u36c96618\" id=\"u36c96618\">。当然了，这是可以优化的。</span></p><p data-lake-id=\"b18cc51086fb83765b0980007a6c3c7c\" id=\"b18cc51086fb83765b0980007a6c3c7c\"><br></p><p data-lake-id=\"e44047a1ffee60bbf237c95f1bda2665\" id=\"e44047a1ffee60bbf237c95f1bda2665\"><span data-lake-id=\"ue0bee1ec\" id=\"ue0bee1ec\">首先我们</span><strong><span data-lake-id=\"ua2a789d4\" id=\"ua2a789d4\">优化 Loader 的文件搜索范围</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20module%3A%20%7B%5Cn%20%20%20%20rules%3A%20%5B%5Cn%20%20%20%20%20%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20js%20%E6%96%87%E4%BB%B6%E6%89%8D%E4%BD%BF%E7%94%A8%20babel%5Cn%20%20%20%20%20%20%20%20test%3A%20%2F%5C%5C.js%24%2F%2C%5Cn%20%20%20%20%20%20%20%20loader%3A%20'babel-loader'%2C%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%8F%AA%E5%9C%A8%20src%20%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%9F%A5%E6%89%BE%5Cn%20%20%20%20%20%20%20%20include%3A%20%5Bresolve('src')%5D%2C%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E4%B8%8D%E4%BC%9A%E5%8E%BB%E6%9F%A5%E6%89%BE%E7%9A%84%E8%B7%AF%E5%BE%84%5Cn%20%20%20%20%20%20%20%20exclude%3A%20%2Fnode_modules%2F%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%5D%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VBwXr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"3be367a83662c91661a9eb1e8179f4f3\" id=\"3be367a83662c91661a9eb1e8179f4f3\"><span data-lake-id=\"ud75bb386\" id=\"ud75bb386\">对于 Babel 来说，希望只作用在 JS 代码上的，然后 </span><code data-lake-id=\"u338fc522\" id=\"u338fc522\"><span data-lake-id=\"ub9e71b99\" id=\"ub9e71b99\">node_modules</span></code><span data-lake-id=\"ua6e17f5e\" id=\"ua6e17f5e\"> 中使用的代码都是编译过的，所以完全没有必要再去处理一遍。</span></p><p data-lake-id=\"9aea04066165482cc53385a70f24f298\" id=\"9aea04066165482cc53385a70f24f298\"><br></p><p data-lake-id=\"7f9633638a3b276be97df2fb4a7e9646\" id=\"7f9633638a3b276be97df2fb4a7e9646\"><span data-lake-id=\"u7dcba57f\" id=\"u7dcba57f\">当然这样做还不够，还可以将 Babel 编译过的文件</span><strong><span data-lake-id=\"u8ff13fdd\" id=\"u8ff13fdd\">缓存</span></strong><span data-lake-id=\"ud2bf4d7a\" id=\"ud2bf4d7a\">起来，下次只需要编译更改过的代码文件即可，这样可以大幅度加快打包时间</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22loader%3A%20'babel-loader%3FcacheDirectory%3Dtrue'%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22SmI69%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"969bce5fc7077ab66513090d19158f0c\" id=\"969bce5fc7077ab66513090d19158f0c\"><span data-lake-id=\"u08194ecb\" id=\"u08194ecb\">（2）HappyPack</span></h4><p data-lake-id=\"5d6b81e7c773d5ffa740ce3548d1ccf8\" id=\"5d6b81e7c773d5ffa740ce3548d1ccf8\"><span data-lake-id=\"u095356a3\" id=\"u095356a3\">受限于 Node 是单线程运行的，所以 Webpack 在打包的过程中也是单线程的，特别是在执行 Loader 的时候，长时间编译的任务很多，这样就会导致等待的情况。</span></p><p data-lake-id=\"8159dcae8378f0aa2612d0579fdc3cee\" id=\"8159dcae8378f0aa2612d0579fdc3cee\"><br></p><p data-lake-id=\"fa3a349cf4323c8dfa9b73e5c6314b47\" id=\"fa3a349cf4323c8dfa9b73e5c6314b47\"><strong><span data-lake-id=\"uaa81b420\" id=\"uaa81b420\">HappyPack 可以将 Loader 的同步执行转换为并行的</span></strong><span data-lake-id=\"ud716d43d\" id=\"ud716d43d\">，这样就能充分利用系统资源来加快打包效率了</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module%3A%20%7B%5Cn%20%20loaders%3A%20%5B%5Cn%20%20%20%20%7B%5Cn%20%20%20%20%20%20test%3A%20%2F%5C%5C.js%24%2F%2C%5Cn%20%20%20%20%20%20include%3A%20%5Bresolve('src')%5D%2C%5Cn%20%20%20%20%20%20exclude%3A%20%2Fnode_modules%2F%2C%5Cn%20%20%20%20%20%20%2F%2F%20id%20%E5%90%8E%E9%9D%A2%E7%9A%84%E5%86%85%E5%AE%B9%E5%AF%B9%E5%BA%94%E4%B8%8B%E9%9D%A2%5Cn%20%20%20%20%20%20loader%3A%20'happypack%2Floader%3Fid%3Dhappybabel'%5Cn%20%20%20%20%7D%5Cn%20%20%5D%5Cn%7D%2C%5Cnplugins%3A%20%5B%5Cn%20%20new%20HappyPack(%7B%5Cn%20%20%20%20id%3A%20'happybabel'%2C%5Cn%20%20%20%20loaders%3A%20%5B'babel-loader%3FcacheDirectory'%5D%2C%5Cn%20%20%20%20%2F%2F%20%E5%BC%80%E5%90%AF%204%20%E4%B8%AA%E7%BA%BF%E7%A8%8B%5Cn%20%20%20%20threads%3A%204%5Cn%20%20%7D)%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22wJQnx%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"f94aa2eb26f587bb3360a172359befc5\" id=\"f94aa2eb26f587bb3360a172359befc5\"><span data-lake-id=\"u30ac61d7\" id=\"u30ac61d7\">（3）DllPlugin</span></h4><p data-lake-id=\"2c628e6d2549a1a84eb33e8f99bd86e9\" id=\"2c628e6d2549a1a84eb33e8f99bd86e9\"><strong><span data-lake-id=\"u1848a60f\" id=\"u1848a60f\">DllPlugin 可以将特定的类库提前打包然后引入</span></strong><span data-lake-id=\"u46b8191d\" id=\"u46b8191d\">。这种方式可以极大的减少打包类库的次数，只有当类库更新版本才有需要重新打包，并且也实现了将公共代码抽离成单独文件的优化方案。DllPlugin的使用方法如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%8D%95%E7%8B%AC%E9%85%8D%E7%BD%AE%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD%5Cn%2F%2F%20webpack.dll.conf.js%5Cnconst%20path%20%3D%20require('path')%5Cnconst%20webpack%20%3D%20require('webpack')%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20entry%3A%20%7B%5Cn%20%20%20%20%2F%2F%20%E6%83%B3%E7%BB%9F%E4%B8%80%E6%89%93%E5%8C%85%E7%9A%84%E7%B1%BB%E5%BA%93%5Cn%20%20%20%20vendor%3A%20%5B'react'%5D%5Cn%20%20%7D%2C%5Cn%20%20output%3A%20%7B%5Cn%20%20%20%20path%3A%20path.join(__dirname%2C%20'dist')%2C%5Cn%20%20%20%20filename%3A%20'%5Bname%5D.dll.js'%2C%5Cn%20%20%20%20library%3A%20'%5Bname%5D-%5Bhash%5D'%5Cn%20%20%7D%2C%5Cn%20%20plugins%3A%20%5B%5Cn%20%20%20%20new%20webpack.DllPlugin(%7B%5Cn%20%20%20%20%20%20%2F%2F%20name%20%E5%BF%85%E9%A1%BB%E5%92%8C%20output.library%20%E4%B8%80%E8%87%B4%5Cn%20%20%20%20%20%20name%3A%20'%5Bname%5D-%5Bhash%5D'%2C%5Cn%20%20%20%20%20%20%2F%2F%20%E8%AF%A5%E5%B1%9E%E6%80%A7%E9%9C%80%E8%A6%81%E4%B8%8E%20DllReferencePlugin%20%E4%B8%AD%E4%B8%80%E8%87%B4%5Cn%20%20%20%20%20%20context%3A%20__dirname%2C%5Cn%20%20%20%20%20%20path%3A%20path.join(__dirname%2C%20'dist'%2C%20'%5Bname%5D-manifest.json')%5Cn%20%20%20%20%7D)%5Cn%20%20%5D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22gYm2Y%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"196f2291eb8fcf241a59bd7bfd7d5abb\" id=\"196f2291eb8fcf241a59bd7bfd7d5abb\"><span data-lake-id=\"ub6968e0a\" id=\"ub6968e0a\">然后需要执行这个配置文件生成依赖文件，接下来需要使用 </span><code data-lake-id=\"u45774838\" id=\"u45774838\"><span data-lake-id=\"ufb12935f\" id=\"ufb12935f\">DllReferencePlugin</span></code><span data-lake-id=\"ue94688b4\" id=\"ue94688b4\"> 将依赖文件引入项目中</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20webpack.conf.js%5Cnmodule.exports%20%3D%20%7B%5Cn%20%20%2F%2F%20...%E7%9C%81%E7%95%A5%E5%85%B6%E4%BB%96%E9%85%8D%E7%BD%AE%5Cn%20%20plugins%3A%20%5B%5Cn%20%20%20%20new%20webpack.DllReferencePlugin(%7B%5Cn%20%20%20%20%20%20context%3A%20__dirname%2C%5Cn%20%20%20%20%20%20%2F%2F%20manifest%20%E5%B0%B1%E6%98%AF%E4%B9%8B%E5%89%8D%E6%89%93%E5%8C%85%E5%87%BA%E6%9D%A5%E7%9A%84%20json%20%E6%96%87%E4%BB%B6%5Cn%20%20%20%20%20%20manifest%3A%20require('.%2Fdist%2Fvendor-manifest.json')%2C%5Cn%20%20%20%20%7D)%5Cn%20%20%5D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22d0AZF%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"aa684aaf03f994acea091babe74c19c1\" id=\"aa684aaf03f994acea091babe74c19c1\"><span data-lake-id=\"uf9b9c442\" id=\"uf9b9c442\">（4）代码压缩</span></h4><p data-lake-id=\"054b3edb9125c029990bc9d2604a05b9\" id=\"054b3edb9125c029990bc9d2604a05b9\"><span data-lake-id=\"u7b6da712\" id=\"u7b6da712\">在 Webpack3 中，一般使用 </span><code data-lake-id=\"u6c59a119\" id=\"u6c59a119\"><span data-lake-id=\"u59581533\" id=\"u59581533\">UglifyJS</span></code><span data-lake-id=\"u1ec1655f\" id=\"u1ec1655f\"> 来压缩代码，但是这个是单线程运行的，为了加快效率，可以使用 </span><code data-lake-id=\"u63325654\" id=\"u63325654\"><span data-lake-id=\"u145f902b\" id=\"u145f902b\">webpack-parallel-uglify-plugin</span></code><span data-lake-id=\"ua1c1219f\" id=\"ua1c1219f\"> 来并行运行 </span><code data-lake-id=\"u8a7e542e\" id=\"u8a7e542e\"><span data-lake-id=\"ufd609d4e\" id=\"ufd609d4e\">UglifyJS</span></code><span data-lake-id=\"u2cfad343\" id=\"u2cfad343\">，从而提高效率。</span></p><p data-lake-id=\"6d6fe7a0a9a579add1655003a10fd6ff\" id=\"6d6fe7a0a9a579add1655003a10fd6ff\"><br></p><p data-lake-id=\"1f5fe1b29433ae2f79fd13120fa3b743\" id=\"1f5fe1b29433ae2f79fd13120fa3b743\"><span data-lake-id=\"ufd6687b1\" id=\"ufd6687b1\">在 Webpack4 中，不需要以上这些操作了，只需要将 </span><code data-lake-id=\"uc5c81aa8\" id=\"uc5c81aa8\"><span data-lake-id=\"udcb0be2c\" id=\"udcb0be2c\">mode</span></code><span data-lake-id=\"u86b8e8d3\" id=\"u86b8e8d3\"> 设置为 </span><code data-lake-id=\"u79695634\" id=\"u79695634\"><span data-lake-id=\"u24dcdc97\" id=\"u24dcdc97\">production</span></code><span data-lake-id=\"ufea3fc0e\" id=\"ufea3fc0e\"> 就可以默认开启以上功能。代码压缩也是我们必做的性能优化方案，当然我们不止可以压缩 JS 代码，还可以压缩 HTML、CSS 代码，并且在压缩 JS 代码的过程中，我们还可以通过配置实现比如删除 </span><code data-lake-id=\"ue08b5a16\" id=\"ue08b5a16\"><span data-lake-id=\"uc00c5aed\" id=\"uc00c5aed\">console.log</span></code><span data-lake-id=\"ub92ad8a0\" id=\"ub92ad8a0\"> 这类代码的功能。</span></p><h4 data-lake-id=\"b4235ee2ba374022bc90e96aebec41db\" id=\"b4235ee2ba374022bc90e96aebec41db\"><span data-lake-id=\"u3a296116\" id=\"u3a296116\">（5）其他</span></h4><p data-lake-id=\"082d305073d3f972e163aa90c19d9b22\" id=\"082d305073d3f972e163aa90c19d9b22\"><span data-lake-id=\"u114828a5\" id=\"u114828a5\">可以通过一些小的优化点来加快打包速度</span></p><ul list=\"u85f35e5f\"><li fid=\"u622c2e77\" data-lake-id=\"a73bcf42d16588dc57afeefbc54dceb8\" id=\"a73bcf42d16588dc57afeefbc54dceb8\"><code data-lake-id=\"udd5b0517\" id=\"udd5b0517\"><span data-lake-id=\"u4c366920\" id=\"u4c366920\">resolve.extensions</span></code><span data-lake-id=\"ubb9c78cd\" id=\"ubb9c78cd\">：用来表明文件后缀列表，默认查找顺序是 </span><code data-lake-id=\"ufdf61ec6\" id=\"ufdf61ec6\"><span data-lake-id=\"u2b81a9ef\" id=\"u2b81a9ef\">['.js', '.json']</span></code><span data-lake-id=\"u0ae8915f\" id=\"u0ae8915f\">，如果你的导入文件没有添加后缀就会按照这个顺序查找文件。我们应该尽可能减少后缀列表长度，然后将出现频率高的后缀排在前面</span></li><li fid=\"u622c2e77\" data-lake-id=\"a19797598585ed300286b6f189478459\" id=\"a19797598585ed300286b6f189478459\"><code data-lake-id=\"u10ceec9a\" id=\"u10ceec9a\"><span data-lake-id=\"u2c61362b\" id=\"u2c61362b\">resolve.alias</span></code><span data-lake-id=\"ub8721e06\" id=\"ub8721e06\">：可以通过别名的方式来映射一个路径，能让 Webpack 更快找到路径</span></li><li fid=\"u622c2e77\" data-lake-id=\"92d7d694e465ea624cbd60ed89447ea7\" id=\"92d7d694e465ea624cbd60ed89447ea7\"><code data-lake-id=\"u1c1d8bc4\" id=\"u1c1d8bc4\"><span data-lake-id=\"ud9ee0ca3\" id=\"ud9ee0ca3\">module.noParse</span></code><span data-lake-id=\"u5f45198e\" id=\"u5f45198e\">：如果你确定一个文件下没有其他依赖，就可以使用该属性让 Webpack 不扫描该文件，这种方式对于大型的类库很有帮助</span></li></ul><h3 data-lake-id=\"c0832eef9c4082b2b1683c9c0acd8b5b\" id=\"c0832eef9c4082b2b1683c9c0acd8b5b\"><span data-lake-id=\"u54079408\" id=\"u54079408\">2. 如何减少 Webpack 打包体积</span></h3><h4 data-lake-id=\"27c01db2c55aa7afd03d205afdbdd0c9\" id=\"27c01db2c55aa7afd03d205afdbdd0c9\"><span data-lake-id=\"u845e41ac\" id=\"u845e41ac\">（1）按需加载</span></h4><p data-lake-id=\"4c05d223c9686464bcb1be0eec473b6d\" id=\"4c05d223c9686464bcb1be0eec473b6d\"><span data-lake-id=\"ub5ca94de\" id=\"ub5ca94de\">在开发 SPA 项目的时候，项目中都会存在很多路由页面。如果将这些页面全部打包进一个 JS 文件的话，虽然将多个请求合并了，但是同样也加载了很多并不需要的代码，耗费了更长的时间。那么为了首页能更快地呈现给用户，希望首页能加载的文件体积越小越好，</span><strong><span data-lake-id=\"u50c3770f\" id=\"u50c3770f\">这时候就可以使用按需加载，将每个路由页面单独打包为一个文件</span></strong><span data-lake-id=\"uf1f85b70\" id=\"uf1f85b70\">。当然不仅仅路由可以按需加载，对于 </span><code data-lake-id=\"ubaf4eb5f\" id=\"ubaf4eb5f\"><span data-lake-id=\"u3184a798\" id=\"u3184a798\">loadash</span></code><span data-lake-id=\"ue349cefe\" id=\"ue349cefe\"> 这种大型类库同样可以使用这个功能。</span></p><p data-lake-id=\"c008ea4eaa679d04db0dfffd5e824cdf\" id=\"c008ea4eaa679d04db0dfffd5e824cdf\"><br></p><p data-lake-id=\"ae6c963435422135103eaa784cef4fef\" id=\"ae6c963435422135103eaa784cef4fef\"><span data-lake-id=\"ue5cd8bb4\" id=\"ue5cd8bb4\">按需加载的代码实现这里就不详细展开了，因为鉴于用的框架不同，实现起来都是不一样的。当然了，虽然他们的用法可能不同，但是底层的机制都是一样的。都是当使用的时候再去下载对应文件，返回一个 </span><code data-lake-id=\"ua36c12d1\" id=\"ua36c12d1\"><span data-lake-id=\"udf614848\" id=\"udf614848\">Promise</span></code><span data-lake-id=\"u4e2fa230\" id=\"u4e2fa230\">，当 </span><code data-lake-id=\"u8b12fdd5\" id=\"u8b12fdd5\"><span data-lake-id=\"ued92ed4a\" id=\"ued92ed4a\">Promise</span></code><span data-lake-id=\"u6e6a64c3\" id=\"u6e6a64c3\"> 成功以后去执行回调。</span></p><h4 data-lake-id=\"2c3b0460bfd42a8e879eaed47dda28d0\" id=\"2c3b0460bfd42a8e879eaed47dda28d0\"><span data-lake-id=\"u48e834c9\" id=\"u48e834c9\">（2）Scope Hoisting</span></h4><p data-lake-id=\"223ab856af2e8e19a16fd1b9bdec87c5\" id=\"223ab856af2e8e19a16fd1b9bdec87c5\"><strong><span data-lake-id=\"u16999e02\" id=\"u16999e02\">Scope Hoisting 会分析出模块之间的依赖关系，尽可能的把打包出来的模块合并到一个函数中去。</span></strong></p><p data-lake-id=\"47100847bb92e29f0d47af03116d0d9f\" id=\"47100847bb92e29f0d47af03116d0d9f\"><br></p><p data-lake-id=\"cfe0c2872f7ebb05584112caaac3783c\" id=\"cfe0c2872f7ebb05584112caaac3783c\"><span data-lake-id=\"ua7cd63c4\" id=\"ua7cd63c4\">比如希望打包两个文件：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20test.js%5Cnexport%20const%20a%20%3D%201%5Cn%2F%2F%20index.js%5Cnimport%20%7B%20a%20%7D%20from%20'.%2Ftest.js'%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%221WlPl%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f430e49f9e83396fae547067a7eadd9d\" id=\"f430e49f9e83396fae547067a7eadd9d\"><span data-lake-id=\"u1263bcf6\" id=\"u1263bcf6\">对于这种情况，打包出来的代码会类似这样：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5B%5Cn%20%20%2F*%200%20*%2F%5Cn%20%20function%20(module%2C%20exports%2C%20require)%20%7B%5Cn%20%20%20%20%2F%2F...%5Cn%20%20%7D%2C%5Cn%20%20%2F*%201%20*%2F%5Cn%20%20function%20(module%2C%20exports%2C%20require)%20%7B%5Cn%20%20%20%20%2F%2F...%5Cn%20%20%7D%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22rYGxz%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4e19c5d378495b734fbb662091ff97fa\" id=\"4e19c5d378495b734fbb662091ff97fa\"><span data-lake-id=\"u1788d5c3\" id=\"u1788d5c3\">但是如果使用 Scope Hoisting ，代码就会尽可能的合并到一个函数中去，也就变成了这样的类似代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%5B%5Cn%20%20%2F*%200%20*%2F%5Cn%20%20function%20(module%2C%20exports%2C%20require)%20%7B%5Cn%20%20%20%20%2F%2F...%5Cn%20%20%7D%5Cn%5D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22dVNeK%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"00737679b7daa0d1e461552a89b57d6c\" id=\"00737679b7daa0d1e461552a89b57d6c\"><span data-lake-id=\"ua3979f12\" id=\"ua3979f12\">这样的打包方式生成的代码明显比之前的少多了。如果在 Webpack4 中你希望开启这个功能，只需要启用 </span><code data-lake-id=\"ue9498d92\" id=\"ue9498d92\"><span data-lake-id=\"u463d5637\" id=\"u463d5637\">optimization.concatenateModules</span></code><span data-lake-id=\"uad502be0\" id=\"uad502be0\"> 就可以了：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20optimization%3A%20%7B%5Cn%20%20%20%20concatenateModules%3A%20true%5Cn%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%220ZLnG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"229fcd58b2f3ef31cad23356969c19bd\" id=\"229fcd58b2f3ef31cad23356969c19bd\"><span data-lake-id=\"ub520406e\" id=\"ub520406e\">（3）Tree Shaking</span></h4><p data-lake-id=\"5d05357863f9f984738c76ae3f796c88\" id=\"5d05357863f9f984738c76ae3f796c88\"><strong><span data-lake-id=\"ue4562900\" id=\"ue4562900\">Tree Shaking 可以实现删除项目中未被引用的代码</span></strong><span data-lake-id=\"ufbe64300\" id=\"ufbe64300\">，比如：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%2F%2F%20test.js%5Cnexport%20const%20a%20%3D%201%5Cnexport%20const%20b%20%3D%202%5Cn%2F%2F%20index.js%5Cnimport%20%7B%20a%20%7D%20from%20'.%2Ftest.js'%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22id%22%3A%22BTZR6%22%7D\"></card><p data-lake-id=\"b52eaf301e4decb0a94cdd8d32bb9d4c\" id=\"b52eaf301e4decb0a94cdd8d32bb9d4c\"><span data-lake-id=\"uefb91dda\" id=\"uefb91dda\">对于以上情况，</span><code data-lake-id=\"u2f3e5fd6\" id=\"u2f3e5fd6\"><span data-lake-id=\"uce2e1993\" id=\"uce2e1993\">test</span></code><span data-lake-id=\"u851e3406\" id=\"u851e3406\"> 文件中的变量 </span><code data-lake-id=\"ub8052886\" id=\"ub8052886\"><span data-lake-id=\"u47fe8586\" id=\"u47fe8586\">b</span></code><span data-lake-id=\"u059643f2\" id=\"u059643f2\"> 如果没有在项目中使用到的话，就不会被打包到文件中。</span></p><p data-lake-id=\"dd77af791f80255fb6759fad9a292634\" id=\"dd77af791f80255fb6759fad9a292634\"><br></p><p data-lake-id=\"687f12ba87b9a9dd47098ec84628f809\" id=\"687f12ba87b9a9dd47098ec84628f809\"><span data-lake-id=\"u52a298c0\" id=\"u52a298c0\">如果使用 Webpack 4 的话，开启生产环境就会自动启动这个优化功能。</span></p><h3 data-lake-id=\"5c63275b3abb8a56d9211f0711335945\" id=\"5c63275b3abb8a56d9211f0711335945\"><span data-lake-id=\"u2c1387d3\" id=\"u2c1387d3\">3. </span><span data-lake-id=\"u6dd6ff18\" id=\"u6dd6ff18\">如何⽤</span><strong><span data-lake-id=\"u118eb40b\" id=\"u118eb40b\">webpack</span></strong><span data-lake-id=\"u585613ae\" id=\"u585613ae\">来优化前端性能？ </span></h3><p data-lake-id=\"5848260cd8bf6cce80558538c83210d0\" id=\"5848260cd8bf6cce80558538c83210d0\"><span data-lake-id=\"ufe980989\" id=\"ufe980989\">⽤</span><span data-lake-id=\"uf727ab0c\" id=\"uf727ab0c\">webpack</span><span data-lake-id=\"u17f3626f\" id=\"u17f3626f\">优化前端性能是指优化</span><span data-lake-id=\"uf71471c8\" id=\"uf71471c8\">webpack</span><span data-lake-id=\"u7d4651ab\" id=\"u7d4651ab\">的输出结果，让打包的最终结果在浏览器运⾏快速⾼效。 </span></p><ul list=\"uf8555d75\"><li fid=\"ube16b920\" data-lake-id=\"c8982ac21819f7e581dc0feaec19d042\" id=\"c8982ac21819f7e581dc0feaec19d042\"><strong><span data-lake-id=\"uff7156f8\" id=\"uff7156f8\">压缩代码</span></strong><span data-lake-id=\"uf8bc0d07\" id=\"uf8bc0d07\">：</span><span data-lake-id=\"u83568edb\" id=\"u83568edb\">删除多余的代码、注释、简化代码的写法等等⽅式。可以利⽤webpack的 </span><span data-lake-id=\"u6ca424c7\" id=\"u6ca424c7\">UglifyJsPlugin </span><span data-lake-id=\"ub1258bec\" id=\"ub1258bec\">和 </span><span data-lake-id=\"u3a33762e\" id=\"u3a33762e\">ParallelUglifyPlugin </span><span data-lake-id=\"u8020a07e\" id=\"u8020a07e\">来压缩</span><span data-lake-id=\"u1272ba46\" id=\"u1272ba46\">JS</span><span data-lake-id=\"u4ed6b04b\" id=\"u4ed6b04b\">⽂件， 利⽤ </span><span data-lake-id=\"u823f187d\" id=\"u823f187d\">cssnano </span><span data-lake-id=\"u065cc397\" id=\"u065cc397\">（</span><span data-lake-id=\"uedf307bf\" id=\"uedf307bf\">css-loader?minimize</span><span data-lake-id=\"ubb52a617\" id=\"ubb52a617\">）来压缩</span><span data-lake-id=\"ub6bf47de\" id=\"ub6bf47de\">css </span></li><li fid=\"ube16b920\" data-lake-id=\"7175e0b75890557ad96f3d6ab9a0f37a\" id=\"7175e0b75890557ad96f3d6ab9a0f37a\"><strong><span data-lake-id=\"ua8d92086\" id=\"ua8d92086\">利⽤</span></strong><strong><span data-lake-id=\"u96e04cf2\" id=\"u96e04cf2\">CDN</span></strong><strong><span data-lake-id=\"u076a8a80\" id=\"u076a8a80\">加速</span></strong><span data-lake-id=\"ufc3a3ac4\" id=\"ufc3a3ac4\">: </span><span data-lake-id=\"ue9ded629\" id=\"ue9ded629\">在构建过程中，将引⽤的静态资源路径修改为</span><span data-lake-id=\"uff7fbdf6\" id=\"uff7fbdf6\">CDN</span><span data-lake-id=\"u053a8a07\" id=\"u053a8a07\">上对应的路径。可以利⽤</span><span data-lake-id=\"u616ff24f\" id=\"u616ff24f\">webpack对于 </span><span data-lake-id=\"uf4297512\" id=\"uf4297512\">output </span><span data-lake-id=\"u7a78d1fa\" id=\"u7a78d1fa\">参数和各</span><span data-lake-id=\"u21357565\" id=\"u21357565\">loader</span><span data-lake-id=\"u4aaec550\" id=\"u4aaec550\">的 </span><span data-lake-id=\"u3f23cef8\" id=\"u3f23cef8\">publicPath </span><span data-lake-id=\"u217599c6\" id=\"u217599c6\">参数来修改资源路径 </span></li><li fid=\"ube16b920\" data-lake-id=\"15314bcfa04c91dd82d9ca92d86ad7f3\" id=\"15314bcfa04c91dd82d9ca92d86ad7f3\"><strong><span data-lake-id=\"ud2b9b4e8\" id=\"ud2b9b4e8\">Tree Shaking</span></strong><span data-lake-id=\"u36b9f2e9\" id=\"u36b9f2e9\">: </span><span data-lake-id=\"u318e5166\" id=\"u318e5166\">将代码中永远不会⾛到的⽚段删除掉。可以通过在启动</span><span data-lake-id=\"u6de7eae7\" id=\"u6de7eae7\">webpack</span><span data-lake-id=\"u60fa5159\" id=\"u60fa5159\">时追加参数 </span><span data-lake-id=\"ufc4b354a\" id=\"ufc4b354a\">--optimize-minimize 来实现</span></li><li fid=\"ube16b920\" data-lake-id=\"4108dcfb4411583dbfece433a3312661\" id=\"4108dcfb4411583dbfece433a3312661\"><strong><span data-lake-id=\"u2b3e3fbb\" id=\"u2b3e3fbb\">Code Splitting:</span></strong><span data-lake-id=\"u9921ccc9\" id=\"u9921ccc9\"> </span><span data-lake-id=\"uaea95a55\" id=\"uaea95a55\">将代码按路由维度或者组件分块</span><span data-lake-id=\"ucc0321fd\" id=\"ucc0321fd\">(chunk),</span><span data-lake-id=\"u4358a7b3\" id=\"u4358a7b3\">这样做到按需加载</span><span data-lake-id=\"uf6014388\" id=\"uf6014388\">,</span><span data-lake-id=\"u470dbf51\" id=\"u470dbf51\">同时可以充分利⽤浏览器缓存 </span></li><li fid=\"ube16b920\" data-lake-id=\"8a23b5e4c6119983baf5df104292094d\" id=\"8a23b5e4c6119983baf5df104292094d\"><strong><span data-lake-id=\"u49261445\" id=\"u49261445\">提取公共第三⽅库</span></strong><span data-lake-id=\"u50756243\" id=\"u50756243\">: SplitChunksPlugin</span><span data-lake-id=\"u7b8aedfe\" id=\"u7b8aedfe\">插件来进⾏公共模块抽取</span><span data-lake-id=\"u8402dbb5\" id=\"u8402dbb5\">,利⽤浏览器缓存可以⻓期缓存这些⽆需频繁变动的公共代码 </span></li></ul><h3 data-lake-id=\"d6c8130dc9a50b7b193718283e67a4c1\" id=\"d6c8130dc9a50b7b193718283e67a4c1\"><span data-lake-id=\"u9e0ad9a6\" id=\"u9e0ad9a6\">4. </span><span data-lake-id=\"u4d79c57e\" id=\"u4d79c57e\">如何提⾼</span><strong><span data-lake-id=\"u3fcfcb55\" id=\"u3fcfcb55\">webpack</span></strong><span data-lake-id=\"uc5e78f34\" id=\"uc5e78f34\">的构建速度？ </span></h3><ol list=\"u6163e91f\"><li fid=\"ue349ee70\" data-lake-id=\"1a6ea82dd4d2e2fc6724fc72eff623c9\" id=\"1a6ea82dd4d2e2fc6724fc72eff623c9\"><span data-lake-id=\"u72676411\" id=\"u72676411\">多⼊⼝情况下，使⽤ </span><span data-lake-id=\"u356505ff\" id=\"u356505ff\">CommonsChunkPlugin </span><span data-lake-id=\"u3235009a\" id=\"u3235009a\">来提取公共代码 </span></li><li fid=\"ue349ee70\" data-lake-id=\"4fb3cc961a7af7631e728e6359983033\" id=\"4fb3cc961a7af7631e728e6359983033\"><span data-lake-id=\"u393fcd38\" id=\"u393fcd38\">通过 </span><span data-lake-id=\"u2dceb2db\" id=\"u2dceb2db\">externals </span><span data-lake-id=\"u0f0ce9f9\" id=\"u0f0ce9f9\">配置来提取常⽤库 </span></li><li fid=\"ue349ee70\" data-lake-id=\"d8308d3641a1b2cc74d0fd8b856c2452\" id=\"d8308d3641a1b2cc74d0fd8b856c2452\"><span data-lake-id=\"uc9c9cab6\" id=\"uc9c9cab6\">利⽤ </span><span data-lake-id=\"ud6d0c82e\" id=\"ud6d0c82e\">DllPlugin </span><span data-lake-id=\"u962a7d17\" id=\"u962a7d17\">和 </span><span data-lake-id=\"u6084d307\" id=\"u6084d307\">DllReferencePlugin </span><span data-lake-id=\"ud3430fbb\" id=\"ud3430fbb\">预编译资源模块 通过 </span><span data-lake-id=\"ud62c3748\" id=\"ud62c3748\">DllPlugin </span><span data-lake-id=\"ub2492721\" id=\"ub2492721\">来对那些我们引⽤但是绝对不会修改的npm包来进⾏预编译，再通过 </span><span data-lake-id=\"u40c239ba\" id=\"u40c239ba\">DllReferencePlugin </span><span data-lake-id=\"u311603b4\" id=\"u311603b4\">将预编译的模块加载进来。 </span></li><li fid=\"ue349ee70\" data-lake-id=\"1ecedab47033a767517d83c8b8285c5d\" id=\"1ecedab47033a767517d83c8b8285c5d\"><span data-lake-id=\"u8ae887f3\" id=\"u8ae887f3\">使⽤ </span><span data-lake-id=\"u9fdd8309\" id=\"u9fdd8309\">Happypack </span><span data-lake-id=\"u60fcb266\" id=\"u60fcb266\">实现多线程加速编译 </span></li><li fid=\"ue349ee70\" data-lake-id=\"e8ae36fb8a40ab023c2c783b1c307bde\" id=\"e8ae36fb8a40ab023c2c783b1c307bde\"><span data-lake-id=\"u81fa35c0\" id=\"u81fa35c0\">使⽤ </span><span data-lake-id=\"ubbb17f3b\" id=\"ubbb17f3b\">webpack-uglify-parallel </span><span data-lake-id=\"uca3beb2e\" id=\"uca3beb2e\">来提升 </span><span data-lake-id=\"u85a7a2b0\" id=\"u85a7a2b0\">uglifyPlugin </span><span data-lake-id=\"u37e1cad4\" id=\"u37e1cad4\">的压缩速度。 原理上 </span><span data-lake-id=\"u0b7a3d5b\" id=\"u0b7a3d5b\">webpack-uglify-parallel 采⽤了多核并⾏压缩来提升压缩速度 </span></li><li fid=\"ue349ee70\" data-lake-id=\"ade1cae7182a45c1d2a1a004f1fadc2c\" id=\"ade1cae7182a45c1d2a1a004f1fadc2c\"><span data-lake-id=\"u6303e346\" id=\"u6303e346\">使⽤ Tree-shaking 和 Scope Hoisting 来剔除多余代码 </span></li></ol><p data-lake-id=\"u3a01f136\" id=\"u3a01f136\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673895156833-d8385e04-b804-4674-b03e-4ef34fe43abe.png%22%2C%22taskId%22%3A%22uaf2bbf0a-c316-423e-a5a1-c342d78281a%22%2C%22clientId%22%3A%22ucc0a67cb-a114-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22ub8865e09%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
        "selected_at": null,
        "editor_meta": "{\"image\":5,\"codeblock\":13}",
        "editor_meta_draft": "{\"image\":5,\"codeblock\":13}",
        "meta": {
            "privacy_migrated": true,
            "premium_migrated": true
        },
        "marked": true,
        "mark": {
            "action_name": "mark_doc",
            "id": 110009280099,
            "created_at": "2023-06-29T06:55:09.000Z",
            "updated_at": "2023-06-29T06:55:09.000Z",
            "space_id": 0,
            "action_type": "mark",
            "action_option": "doc",
            "action_setting_type": "default",
            "user_id": 38384436,
            "organization_id": 0,
            "target_type": "Doc",
            "target_id": 23475299,
            "target_book_id": 6862641,
            "target_group_id": 1500604,
            "title": "前端面试题之性能优化篇"
        },
        "region": "北京",
        "indexed_level": 1,
        "privacy_migrated": true,
        "user": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T06:27:51.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "last_editor": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T06:27:51.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "_serializer": "web.doc_detail"
    }
}