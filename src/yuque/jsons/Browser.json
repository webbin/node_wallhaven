{
    "meta": {
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "latestReviewStatus": -1
    },
    "data": {
        "id": 23474284,
        "space_id": 0,
        "type": "Doc",
        "sub_type": null,
        "title": "前端面试题之浏览器原理篇",
        "tag": null,
        "slug": "browser",
        "user_id": 1500604,
        "book_id": 6862641,
        "cover": "https://cdn.nlark.com/yuque/0/2021/png/1500604/1618393068209-b7156f50-9096-493a-9ad6-be49c0d79896.png",
        "description": "一、浏览器安全1.  什么是XSS ？（1）概念XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚...",
        "custom_description": "一、浏览器安全1.  什么是 XSS 攻击？（1）概念XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨...",
        "body_asl": "",
        "format": "lake",
        "origin_format": "lake",
        "status": 0,
        "read_status": 1,
        "view_status": 0,
        "public": 1,
        "draft_version": 160,
        "comments_count": 88,
        "likes_count": 53,
        "abilities": {
            "create": false,
            "destroy": false,
            "update": false,
            "read": true,
            "export": false,
            "manage": false,
            "join": true,
            "share": false,
            "force_delete": false,
            "create_collaborator": false,
            "destroy_comment": false
        },
        "content_updated_at": "2023-03-11T13:46:46.000Z",
        "created_at": "2020-12-12T15:28:08.000Z",
        "updated_at": "2023-07-17T07:33:33.000Z",
        "published_at": "2023-01-16T18:56:53.000Z",
        "first_published_at": "2020-12-12T16:31:00.000Z",
        "pinned_at": null,
        "word_count": 30022,
        "content": "<!doctype lake><meta name=\"doc-version\" content=\"1\" /><meta name=\"typography\" content=\"classic\" /><meta name=\"viewport\" content=\"fixed\" /><p data-lake-id=\"u7c15239a\" id=\"u7c15239a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1621608379974-5f496e1b-b721-4317-bd17-c3bb0411a510.png%22%2C%22taskId%22%3A%22ucededc02-227a-4c57-915a-6e91a940401%22%2C%22clientId%22%3A%22u9ef7d68e-ce03-4%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A1500%2C%22height%22%3A1075%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86%E9%9D%A2%E8%AF%95%E9%A2%98.png%22%2C%22size%22%3A968517%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A3424%2C%22originHeight%22%3A2454%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B1%BD%E6%9F%93%E8%BF%87%E7%A8%8B%20%E6%B5%8F%E8%A7%88%E5%9A%A3%E6%B4%81%E6%9F%93%E4%BC%98%E5%8C%96%20%E8%BF%BD%E6%9F%93%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B0%AC%E5%88%B0%7C5%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%3F%20%E4%BB%80%E4%B9%88%E6%98%AFxSS%3F%20%E5%9B%BE%E4%BE%8B%20%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%87%E6%A1%A3%E7%9A%84%E9%A2%84%E6%9E%90%3F%20%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%20%E5%A6%82%E4%BD%95%E9%98%B2%E5%A5%8BxSS%3F%20%E8%80%83%E4%B8%9C%E5%BE%88%E5%A4%9A%20CSs%E5%A6%82%E5%8F%AF%E9%98%BB%E5%A1%9E%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%3F%20%E4%BB%80%E4%B9%88%E6%98%AFCSRF%3F%20%E8%80%83%E8%94%A1%E8%BE%83%E5%A4%9A%20%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E5%85%B3%E7%BB%A7%E8%B7%AF%E7%BB%8F%3F%20%E5%A6%82%E4%BD%95%E9%98%B2CSRF%20%E8%80%81%E6%B5%81%E8%BE%83%E5%B0%91%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%20%E4%BB%80%E4%B9%88%E4%BD%B0%E8%AE%B0%E9%98%BB%E4%BA%AB%E6%B3%A8%E6%9F%93%20%E8%80%83%E6%9D%82%E9%93%B6%E5%B0%91%20%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%3F%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%3F%20%E6%9C%89%E5%8F%AB%E4%BA%9B%E5%8F%AF%E8%83%BD%E5%BC%95%E8%B5%B7%E5%89%8D%E7%91%9E%E5%AE%89%E5%85%A8%E7%9A%84%E9%97%AE%E9%A2%98%3F%20%E8%AF%BA%E8%A7%88%E5%99%A8%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%20%E7%BD%91%E7%BB%9C%E5%8A%AB%E6%8E%A5%E6%9C%89%E6%96%AF%E5%87%A0%E7%A5%9E%2C%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83%3F%20Cookie%E6%9C%89%E4%BB%A5%E4%BA%9B%E5%AE%87%E6%AE%B5%2C%E4%BD%9C%E7%94%A8%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%20CoakieLocalstorage%2CSessianstorage%E5%8C%BA%E5%88%AB%20%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%20%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%89%B9%E5%BF%B5%20%E5%89%8D%E7%AB%AF%E5%AD%98%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E8%B6%8A%E4%BA%9B%3F%20%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%20lndexedDB%E6%9C%89%E4%BA%9B%E7%89%B9%E7%82%B9%3F%20%E6%B7%98%E5%AE%8C%E5%99%A8%E6%B3%A8%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%20%E8%BF%9B%E7%A8%8B%E4%B9%8B%E5%89%8D%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%20%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8C%E6%BA%90%E8%B4%AF%E9%99%AA%20%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%20%E5%83%B5%E6%88%B7%E8%BF%9B%E7%A8%8B%E5%92%8C%E6%91%84%E5%84%BF%E9%80%89%E7%A8%8B%E8%B6%B3%E4%BB%80%E4%B9%88%3F%20%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%92%88%E8%B6%8A%E9%97%B4%E9%A2%98%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%20%E6%AD%BB%E9%94%81%E4%BA%A7%E7%94%9F%E7%9A%84%E5%8E%9F%E5%9B%A0%3F%E5%A6%82%E6%9E%9C%E8%A7%A3%E6%89%B6%E6%AD%BB%E9%94%81%E7%9A%84%E9%97%B4%E9%A2%98%3F%20%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB%20%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%86%85%E5%A4%9A%E4%B8%AA%E6%A0%87%E6%95%B4%E9%A1%B5%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BF%A1%3F%20Ngimx%E7%9A%84%E5%93%A5%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%20%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86%E9%9D%A2%E8%AF%95%E9%A2%98%20%E5%AF%B9Servicewarker%E7%9A%84%E7%90%86%E8%A7%A3%20%E6%89%8B%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%3F%E6%89%8B%E4%BB%B6%E5%9E%8B%3F%20%E5%AF%B9%E6%B4%B2%E5%85%9A%E5%99%A8%E7%9A%84%E5%85%B3%E5%AD%98%E6%9C%BA%E5%88%B6%E7%9A%84%E7%90%86%E8%A7%A3%20%E5%A6%82%E4%BD%95%E5%92%80%E6%AD%A2%E5%8D%8A%E4%BB%B6%E5%90%8C%E6%B3%A1%20%E6%B7%98%E5%AE%BD%E9%91%AB%E8%B5%84%E9%85%92%E8%9B%87%E5%AD%98%E7%9A%84%E4%BD%8D%E7%BD%AE%E6%9C%89%E8%BF%8E%E4%BA%9B%20%E5%AF%B9%E6%89%8B%E4%BB%B6%E5%A7%94%E6%89%98%E7%9A%84%E7%90%86%E8%A7%A3%20%E5%8D%8F%E5%95%86%E6%91%86%E5%AD%98%E5%92%8C%E5%BC%BA%E6%91%86%E5%AD%98%E7%9A%84%E5%8C%BA%E5%88%AB%20%E6%89%8B%E4%BB%B6%E5%8F%97%E6%89%98%E7%9A%84%E4%BD%B3%E7%94%A8%E5%9C%BA%E6%B3%B5%20%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%20%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B5%8F%E8%A7%88%E7%A7%BB%E7%BB%8F%E5%AD%98%3F%20%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB%20%E7%82%B9%E5%87%BB%E5%88%B7%E6%96%B0%E6%8C%89%E9%92%AE%E6%88%96%E8%80%85%E6%8C%89FS%2C%E6%8C%89ctrl%2BFs%20(%E5%BC%BA%E5%88%B6%20%E5%AF%B9%E7%BE%BD%E4%BB%B6%E5%BE%81%E7%8E%AF%E7%BA%A6%E7%90%86%E9%A5%BC%20%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%20%E5%88%9B%E6%96%B0)%2C%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%9B%9E%E8%BD%A6%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%3F%20%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E5%88%86%E5%88%AB%E6%9C%89%E5%90%8C%E5%A3%81%20%E4%BB%80%E4%B9%88%E6%98%AF%E6%89%A7%E8%A1%8C%E6%A0%88%20%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%90%86%E4%BD%93%20Node%E4%B8%AD%E7%9A%84EventLoop%E5%92%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E6%9C%89%20%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E7%9A%84%E7%90%86%E8%BE%89%20%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%3Fprocess.nexttick%E6%89%A7%E8%A1%8C%E9%A1%B6%E5%BA%8F%3F%20%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E6%AF%94%E8%BE%83%20%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%84%E6%88%90%20%E4%B9%B0%E4%BB%B6%E7%9A%849%E5%8F%91%E7%9A%84%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%20%E5%B8%B8%E8%A7%81%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%80%E7%94%A8%E5%86%85%E6%A0%B8%20%E6%B5%8F%E5%AE%BD%E8%B5%A3%E7%9A%84%E4%B8%BB%E5%A6%9E%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%20V8%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%20%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%20%E6%93%8D%E4%BD%9C%E4%BC%9A%E9%80%A0%E6%88%90%E5%86%85%E5%AD%98%E6%B3%84%E6%B6%A1%3F%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A2730.4963%2C%22y%22%3A104.30473%2C%22width%22%3A231.9317000000001%2C%22height%22%3A32.17182%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E6%B1%BD%E6%9F%93%E8%BF%87%E7%A8%8B%22%7D%2C%7B%22x%22%3A2726.8838%2C%22y%22%3A179.59854%2C%22width%22%3A213.42189999999982%2C%22height%22%3A36.04996%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%9A%A3%E6%B4%81%E6%9F%93%E4%BC%98%E5%8C%96%22%7D%2C%7B%22x%22%3A2733.5828%2C%22y%22%3A246.84737%2C%22width%22%3A427.5519999999997%2C%22height%22%3A34.88132999999999%2C%22text%22%3A%22%E8%BF%BD%E6%9F%93%E8%BF%87%E7%A8%8B%E4%B8%AD%E8%B0%AC%E5%88%B0%7C5%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%3F%22%7D%2C%7B%22x%22%3A892.83215%2C%22y%22%3A291.9737%2C%22width%22%3A166.65295000000015%2C%22height%22%3A33.43462999999997%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%98%AFxSS%3F%22%7D%2C%7B%22x%22%3A226.34%2C%22y%22%3A301.6558%2C%22width%22%3A66.54037000000002%2C%22height%22%3A30.657899999999984%2C%22text%22%3A%22%E5%9B%BE%E4%BE%8B%22%7D%2C%7B%22x%22%3A2731.737%2C%22y%22%3A322.3384%2C%22width%22%3A269.51800000000003%2C%22height%22%3A31.31346000000002%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%98%AF%E6%96%87%E6%A1%A3%E7%9A%84%E9%A2%84%E6%9E%90%3F%22%7D%2C%7B%22x%22%3A2268.6394%2C%22y%22%3A345.13904%2C%22width%22%3A260.51359999999977%2C%22height%22%3A39.17135999999999%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%22%7D%2C%7B%22x%22%3A880.19946%2C%22y%22%3A368.47705%2C%22width%22%3A181.67614000000003%2C%22height%22%3A31.088719999999967%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E9%98%B2%E5%A5%8BxSS%3F%22%7D%2C%7B%22x%22%3A199.55353%2C%22y%22%3A375.5129%2C%22width%22%3A105.98355000000001%2C%22height%22%3A30.421460000000025%2C%22text%22%3A%22%E8%80%83%E4%B8%9C%E5%BE%88%E5%A4%9A%22%7D%2C%7B%22x%22%3A2719.1575%2C%22y%22%3A395.20334%2C%22width%22%3A318.9831000000004%2C%22height%22%3A31.576859999999954%2C%22text%22%3A%22CSs%E5%A6%82%E5%8F%AF%E9%98%BB%E5%A1%9E%E6%96%87%E6%A1%A3%E8%A7%A3%E6%9E%90%3F%22%7D%2C%7B%22x%22%3A877.51355%2C%22y%22%3A435.70096%2C%22width%22%3A181.47474999999997%2C%22height%22%3A33.09789999999998%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%98%AFCSRF%3F%22%7D%2C%7B%22x%22%3A196.13475%2C%22y%22%3A444.8449%2C%22width%22%3A114.46717999999998%2C%22height%22%3A31.50743%2C%22text%22%3A%22%E8%80%83%E8%94%A1%E8%BE%83%E5%A4%9A%22%7D%2C%7B%22x%22%3A2726.6672%2C%22y%22%3A468.12695%2C%22width%22%3A310.50570000000016%2C%22height%22%3A29.158789999999954%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96%E5%85%B3%E7%BB%A7%E8%B7%AF%E7%BB%8F%3F%22%7D%2C%7B%22x%22%3A883.1554%2C%22y%22%3A510.1322%2C%22width%22%3A186.2836000000001%2C%22height%22%3A29.87914999999998%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E9%98%B2CSRF%22%7D%2C%7B%22x%22%3A195.34886%2C%22y%22%3A513.73364%2C%22width%22%3A115.53107999999997%2C%22height%22%3A28.254959999999983%2C%22text%22%3A%22%E8%80%81%E6%B5%81%E8%BE%83%E5%B0%91%22%7D%2C%7B%22x%22%3A1228.3353%2C%22y%22%3A530.91895%2C%22width%22%3A183.61720000000014%2C%22height%22%3A44.52674999999999%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%22%7D%2C%7B%22x%22%3A2731.9988%2C%22y%22%3A540.3469%2C%22width%22%3A233.38020000000006%2C%22height%22%3A29.428250000000048%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E4%BD%B0%E8%AE%B0%E9%98%BB%E4%BA%AB%E6%B3%A8%E6%9F%93%22%7D%2C%7B%22x%22%3A200.67528%2C%22y%22%3A579.5301%2C%22width%22%3A109.0865%2C%22height%22%3A33.838250000000016%2C%22text%22%3A%22%E8%80%83%E6%9D%82%E9%93%B6%E5%B0%91%22%7D%2C%7B%22x%22%3A530.9717%2C%22y%22%3A577.51917%2C%22width%22%3A524.5625%2C%22height%22%3A39.65032999999994%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%98%AF%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%3F%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB%3F%22%7D%2C%7B%22x%22%3A658.79004%2C%22y%22%3A652.93207%2C%22width%22%3A412.17215999999996%2C%22height%22%3A33.253630000000044%2C%22text%22%3A%22%E6%9C%89%E5%8F%AB%E4%BA%9B%E5%8F%AF%E8%83%BD%E5%BC%95%E8%B5%B7%E5%89%8D%E7%91%9E%E5%AE%89%E5%85%A8%E7%9A%84%E9%97%AE%E9%A2%98%3F%22%7D%2C%7B%22x%22%3A2731.1995%2C%22y%22%3A660.99817%2C%22width%22%3A397.7892999999999%2C%22height%22%3A35.5600300000001%2C%22text%22%3A%22%E8%AF%BA%E8%A7%88%E5%99%A8%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%22%7D%2C%7B%22x%22%3A673.39404%2C%22y%22%3A726.6113%2C%22width%22%3A385.98536%2C%22height%22%3A28.07899999999995%2C%22text%22%3A%22%E7%BD%91%E7%BB%9C%E5%8A%AB%E6%8E%A5%E6%9C%89%E6%96%AF%E5%87%A0%E7%A5%9E%2C%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83%3F%22%7D%2C%7B%22x%22%3A2728.993%2C%22y%22%3A731.202%2C%22width%22%3A463.8488000000002%2C%22height%22%3A38.34649999999999%2C%22text%22%3A%22Cookie%E6%9C%89%E4%BB%A5%E4%BA%9B%E5%AE%87%E6%AE%B5%2C%E4%BD%9C%E7%94%A8%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%22%7D%2C%7B%22x%22%3A2730.1504%2C%22y%22%3A800.5175%2C%22width%22%3A582.9081999999999%2C%22height%22%3A40.510940000000005%2C%22text%22%3A%22CoakieLocalstorage%2CSessianstorage%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2267.993%2C%22y%22%3A828.40735%2C%22width%22%3A261.21500000000015%2C%22height%22%3A42.73212000000001%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%22%7D%2C%7B%22x%22%3A840.35046%2C%22y%22%3A850.31604%2C%22width%22%3A229.9073400000001%2C%22height%22%3A29.984010000000012%2C%22text%22%3A%22%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%89%B9%E5%BF%B5%22%7D%2C%7B%22x%22%3A2736.9685%2C%22y%22%3A878.2206%2C%22width%22%3A305.4475000000002%2C%22height%22%3A36.21550000000002%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%AD%98%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E8%B6%8A%E4%BA%9B%3F%22%7D%2C%7B%22x%22%3A844.98413%2C%22y%22%3A923.44684%2C%22width%22%3A227.64096999999992%2C%22height%22%3A30.035460000000057%2C%22text%22%3A%22%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2728.9973%2C%22y%22%3A951.25726%2C%22width%22%3A316.0897%2C%22height%22%3A35.95234000000005%2C%22text%22%3A%22lndexedDB%E6%9C%89%E4%BA%9B%E7%89%B9%E7%82%B9%3F%22%7D%2C%7B%22x%22%3A696.43945%2C%22y%22%3A993.3789%2C%22width%22%3A375.97185%2C%22height%22%3A34.41049999999984%2C%22text%22%3A%22%E6%B7%98%E5%AE%8C%E5%99%A8%E6%B3%A8%E6%9F%93%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%9C%89%E5%93%AA%E4%BA%9B%22%7D%2C%7B%22x%22%3A812.11694%2C%22y%22%3A1064.6793%2C%22width%22%3A259.6098599999999%2C%22height%22%3A34.74720000000002%2C%22text%22%3A%22%E8%BF%9B%E7%A8%8B%E4%B9%8B%E5%89%8D%E7%9A%84%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%22%7D%2C%7B%22x%22%3A2725.8442%2C%22y%22%3A1071.5396%2C%22width%22%3A212.3040000000001%2C%22height%22%3A34.56709999999998%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%98%AF%E5%90%8C%E6%BA%90%E8%B4%AF%E9%99%AA%22%7D%2C%7B%22x%22%3A1227.4508%2C%22y%22%3A1119.9583%2C%22width%22%3A188.41369999999984%2C%22height%22%3A46.78899999999999%2C%22text%22%3A%22%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%22%7D%2C%7B%22x%22%3A693.1669%2C%22y%22%3A1138.873%2C%22width%22%3A365.88789999999983%2C%22height%22%3A31.047000000000025%2C%22text%22%3A%22%E5%83%B5%E6%88%B7%E8%BF%9B%E7%A8%8B%E5%92%8C%E6%91%84%E5%84%BF%E9%80%89%E7%A8%8B%E8%B6%B3%E4%BB%80%E4%B9%88%3F%22%7D%2C%7B%22x%22%3A2729.8499%2C%22y%22%3A1145.7538%2C%22width%22%3A235.71090000000004%2C%22height%22%3A32.81690000000003%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%92%88%E8%B6%8A%E9%97%B4%E9%A2%98%22%7D%2C%7B%22x%22%3A2268.681%2C%22y%22%3A1204.1864%2C%22width%22%3A259.576%2C%22height%22%3A42.27710000000002%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%22%7D%2C%7B%22x%22%3A550.44037%2C%22y%22%3A1207.7203%2C%22width%22%3A507.98253%2C%22height%22%3A34.114500000000135%2C%22text%22%3A%22%E6%AD%BB%E9%94%81%E4%BA%A7%E7%94%9F%E7%9A%84%E5%8E%9F%E5%9B%A0%3F%E5%A6%82%E6%9E%9C%E8%A7%A3%E6%89%B6%E6%AD%BB%E9%94%81%E7%9A%84%E9%97%B4%E9%A2%98%3F%22%7D%2C%7B%22x%22%3A2734.4893%2C%22y%22%3A1216.8605%2C%22width%22%3A345.4689999999996%2C%22height%22%3A38.19479999999999%2C%22text%22%3A%22%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A545.7738%2C%22y%22%3A1281.8408%2C%22width%22%3A525.0785999999999%2C%22height%22%3A30.504400000000032%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%86%85%E5%A4%9A%E4%B8%AA%E6%A0%87%E6%95%B4%E9%A1%B5%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BF%A1%3F%22%7D%2C%7B%22x%22%3A2734.7012%2C%22y%22%3A1289.6671%2C%22width%22%3A333.3706000000002%2C%22height%22%3A33.218500000000176%2C%22text%22%3A%22Ngimx%E7%9A%84%E5%93%A5%E5%BF%B5%E5%8F%8A%E5%85%B6%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%22%7D%2C%7B%22x%22%3A1615.3787%2C%22y%22%3A1302.7917%2C%22width%22%3A455.89329999999995%2C%22height%22%3A59.72000000000003%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8E%9F%E7%90%86%E9%9D%A2%E8%AF%95%E9%A2%98%22%7D%2C%7B%22x%22%3A743.8753%2C%22y%22%3A1355.5787%2C%22width%22%3A326.45719999999994%2C%22height%22%3A31.255699999999933%2C%22text%22%3A%22%E5%AF%B9Servicewarker%E7%9A%84%E7%90%86%E8%A7%A3%22%7D%2C%7B%22x%22%3A2730.7468%2C%22y%22%3A1409.4767%2C%22width%22%3A307.7662%2C%22height%22%3A37.79770000000008%2C%22text%22%3A%22%E6%89%8B%E4%BB%B6%E6%98%AF%E4%BB%80%E4%B9%88%3F%E6%89%8B%E4%BB%B6%E5%9E%8B%3F%22%7D%2C%7B%22x%22%3A731.7059%2C%22y%22%3A1475.4166%2C%22width%22%3A339.28139999999996%2C%22height%22%3A35.673%2C%22text%22%3A%22%E5%AF%B9%E6%B4%B2%E5%85%9A%E5%99%A8%E7%9A%84%E5%85%B3%E5%AD%98%E6%9C%BA%E5%88%B6%E7%9A%84%E7%90%86%E8%A7%A3%22%7D%2C%7B%22x%22%3A2728.4187%2C%22y%22%3A1486.104%2C%22width%22%3A235.33279999999968%2C%22height%22%3A34.6259%2C%22text%22%3A%22%E5%A6%82%E4%BD%95%E5%92%80%E6%AD%A2%E5%8D%8A%E4%BB%B6%E5%90%8C%E6%B3%A1%22%7D%2C%7B%22x%22%3A704.13556%2C%22y%22%3A1548.7495%2C%22width%22%3A369.7578399999999%2C%22height%22%3A33.077400000000125%2C%22text%22%3A%22%E6%B7%98%E5%AE%BD%E9%91%AB%E8%B5%84%E9%85%92%E8%9B%87%E5%AD%98%E7%9A%84%E4%BD%8D%E7%BD%AE%E6%9C%89%E8%BF%8E%E4%BA%9B%22%7D%2C%7B%22x%22%3A2732.4358%2C%22y%22%3A1559.6543%2C%22width%22%3A231.99139999999989%2C%22height%22%3A30.191400000000158%2C%22text%22%3A%22%E5%AF%B9%E6%89%8B%E4%BB%B6%E5%A7%94%E6%89%98%E7%9A%84%E7%90%86%E8%A7%A3%22%7D%2C%7B%22x%22%3A757.346%2C%22y%22%3A1622.1208%2C%22width%22%3A313.99649999999997%2C%22height%22%3A31.006500000000187%2C%22text%22%3A%22%E5%8D%8F%E5%95%86%E6%91%86%E5%AD%98%E5%92%8C%E5%BC%BA%E6%91%86%E5%AD%98%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A2732.779%2C%22y%22%3A1626.6348%2C%22width%22%3A258.37379999999985%2C%22height%22%3A34.51279999999997%2C%22text%22%3A%22%E6%89%8B%E4%BB%B6%E5%8F%97%E6%89%98%E7%9A%84%E4%BD%B3%E7%94%A8%E5%9C%BA%E6%B3%B5%22%7D%2C%7B%22x%22%3A1227.2152%2C%22y%22%3A1662.6002%2C%22width%22%3A188.80919999999992%2C%22height%22%3A43.1259%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A754.2542%2C%22y%22%3A1696.2277%2C%22width%22%3A303.3192%2C%22height%22%3A29.915500000000065%2C%22text%22%3A%22%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E6%B5%8F%E8%A7%88%E7%A7%BB%E7%BB%8F%E5%AD%98%3F%22%7D%2C%7B%22x%22%3A2730.8582%2C%22y%22%3A1700.1561%2C%22width%22%3A229.17549999999983%2C%22height%22%3A34.51189999999997%2C%22text%22%3A%22%E5%90%8C%E6%AD%A5%E5%92%8C%E5%BC%82%E6%AD%A5%E7%9A%84%E5%8C%BA%E5%88%AB%22%7D%2C%7B%22x%22%3A516.7643%2C%22y%22%3A1765.9175%2C%22width%22%3A449.2795%2C%22height%22%3A35.50610000000006%2C%22text%22%3A%22%E7%82%B9%E5%87%BB%E5%88%B7%E6%96%B0%E6%8C%89%E9%92%AE%E6%88%96%E8%80%85%E6%8C%89FS%2C%E6%8C%89ctrl%2BFs%22%7D%2C%7B%22x%22%3A989.09766%2C%22y%22%3A1767.6067%2C%22width%22%3A69.96924000000001%2C%22height%22%3A28.632100000000037%2C%22text%22%3A%22(%E5%BC%BA%E5%88%B6%22%7D%2C%7B%22x%22%3A2731.4993%2C%22y%22%3A1772.5831%2C%22width%22%3A230.8197%2C%22height%22%3A31.88189999999986%2C%22text%22%3A%22%E5%AF%B9%E7%BE%BD%E4%BB%B6%E5%BE%81%E7%8E%AF%E7%BA%A6%E7%90%86%E9%A5%BC%22%7D%2C%7B%22x%22%3A2267.61%2C%22y%22%3A1778.8007%2C%22width%22%3A259.10699999999997%2C%22height%22%3A40.573900000000094%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%22%7D%2C%7B%22x%22%3A515.67377%2C%22y%22%3A1801.9802%2C%22width%22%3A412.04683%2C%22height%22%3A34.12259999999992%2C%22text%22%3A%22%E5%88%9B%E6%96%B0)%2C%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%9B%9E%E8%BD%A6%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%3F%22%7D%2C%7B%22x%22%3A2727.5132%2C%22y%22%3A1845.9371%2C%22width%22%3A352.43110000000024%2C%22height%22%3A32.22869999999989%2C%22text%22%3A%22%E5%AE%8F%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%BE%AE%E4%BB%BB%E5%8A%A1%E5%88%86%E5%88%AB%E6%9C%89%E5%90%8C%E5%A3%81%22%7D%2C%7B%22x%22%3A2729.5469%2C%22y%22%3A1918.9337%2C%22width%22%3A176.00580000000036%2C%22height%22%3A31.50669999999991%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E6%98%AF%E6%89%A7%E8%A1%8C%E6%A0%88%22%7D%2C%7B%22x%22%3A866.1222%2C%22y%22%3A1924.254%2C%22width%22%3A206.3179%2C%22height%22%3A33.9054000000001%2C%22text%22%3A%22%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E7%90%86%E4%BD%93%22%7D%2C%7B%22x%22%3A2734.0698%2C%22y%22%3A1984.8121%2C%22width%22%3A495.4653999999996%2C%22height%22%3A43.6407999999999%2C%22text%22%3A%22Node%E4%B8%AD%E7%9A%84EventLoop%E5%92%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E6%9C%89%22%7D%2C%7B%22x%22%3A813.8999%2C%22y%22%3A2000.205%2C%22width%22%3A256.4277000000001%2C%22height%22%3A31.784900000000107%2C%22text%22%3A%22%E5%AF%B9%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E7%9A%84%E7%90%86%E8%BE%89%22%7D%2C%7B%22x%22%3A2728.1313%2C%22y%22%3A2024.2927%2C%22width%22%3A503.1669999999999%2C%22height%22%3A35.7818000000002%2C%22text%22%3A%22%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%3Fprocess.nexttick%E6%89%A7%E8%A1%8C%E9%A1%B6%E5%BA%8F%3F%22%7D%2C%7B%22x%22%3A789.91833%2C%22y%22%3A2071.9739%2C%22width%22%3A283.5921700000001%2C%22height%22%3A30.18769999999995%2C%22text%22%3A%22%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8%E6%AF%94%E8%BE%83%22%7D%2C%7B%22x%22%3A1228.3248%2C%22y%22%3A2092.408%2C%22width%22%3A191.04089999999997%2C%22height%22%3A41.71849999999995%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%84%E6%88%90%22%7D%2C%7B%22x%22%3A2729.731%2C%22y%22%3A2096.027%2C%22width%22%3A321.48849999999993%2C%22height%22%3A34.81899999999996%2C%22text%22%3A%22%E4%B9%B0%E4%BB%B6%E7%9A%849%E5%8F%91%E7%9A%84%E8%BF%87%E7%A8%8B%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%22%7D%2C%7B%22x%22%3A811.31696%2C%22y%22%3A2141.2349%2C%22width%22%3A261.80193999999995%2C%22height%22%3A31.181100000000242%2C%22text%22%3A%22%E5%B8%B8%E8%A7%81%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%80%E7%94%A8%E5%86%85%E6%A0%B8%22%7D%2C%7B%22x%22%3A787.5924%2C%22y%22%3A2212.7598%2C%22width%22%3A283.58860000000004%2C%22height%22%3A35.29820000000018%2C%22text%22%3A%22%E6%B5%8F%E5%AE%BD%E8%B5%A3%E7%9A%84%E4%B8%BB%E5%A6%9E%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%22%7D%2C%7B%22x%22%3A2697.1538%2C%22y%22%3A2223.072%2C%22width%22%3A349.62480000000005%2C%22height%22%3A32.06619999999975%2C%22text%22%3A%22V8%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%E6%98%AF%E6%80%8E%E6%A0%B7%E7%9A%84%22%7D%2C%7B%22x%22%3A2271.1482%2C%22y%22%3A2281.727%2C%22width%22%3A218.2565999999997%2C%22height%22%3A38.469800000000305%2C%22text%22%3A%22%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6%22%7D%2C%7B%22x%22%3A2697.2559%2C%22y%22%3A2292.8362%2C%22width%22%3A333.3292999999999%2C%22height%22%3A34.97409999999991%2C%22text%22%3A%22%E6%93%8D%E4%BD%9C%E4%BC%9A%E9%80%A0%E6%88%90%E5%86%85%E5%AD%98%E6%B3%84%E6%B6%A1%3F%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23faf8f6%22%2C%22id%22%3A%22u560592e3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"f6b4773517a43f9268f7fe75e7f887eb\" id=\"f6b4773517a43f9268f7fe75e7f887eb\"><span data-lake-id=\"u832f7159\" id=\"u832f7159\">一、浏览器安全</span></h2><h3 data-lake-id=\"afc79dc67e7ba920c635f1bbca68d162\" id=\"afc79dc67e7ba920c635f1bbca68d162\"><span data-lake-id=\"u8e453274\" id=\"u8e453274\">1.  什么是 XSS 攻击？</span></h3><h4 data-lake-id=\"1e1f965b1d031d078b1a1d0d11d65396\" id=\"1e1f965b1d031d078b1a1d0d11d65396\"><span data-lake-id=\"ub20eb6a4\" id=\"ub20eb6a4\">（1）概念</span></h4><p data-lake-id=\"4c6bf279eb38640f959a25511bc70687\" id=\"4c6bf279eb38640f959a25511bc70687\"><span data-lake-id=\"uc73e7d5d\" id=\"uc73e7d5d\">XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。</span></p><p data-lake-id=\"515f93bf9904641c39e8662031cebc7d\" id=\"515f93bf9904641c39e8662031cebc7d\"><br></p><p data-lake-id=\"26d38e6e14ee7e897b33dd0cc90834d5\" id=\"26d38e6e14ee7e897b33dd0cc90834d5\"><span data-lake-id=\"u3824080e\" id=\"u3824080e\">XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。</span></p><p data-lake-id=\"be65daad8e660ffc9705387cc8e81f53\" id=\"be65daad8e660ffc9705387cc8e81f53\"><br></p><p data-lake-id=\"4916c1c93880154d4452a4ed8f9bc749\" id=\"4916c1c93880154d4452a4ed8f9bc749\"><span data-lake-id=\"u383dba52\" id=\"u383dba52\">攻击者可以通过这种攻击方式可以进行以下操作：</span></p><ul list=\"u29cf9811\"><li fid=\"ud06289ea\" data-lake-id=\"be6ba605bd8b8bb1fd497b40d85fea59\" id=\"be6ba605bd8b8bb1fd497b40d85fea59\"><span data-lake-id=\"uc2bdeef7\" id=\"uc2bdeef7\">获取页面的数据，如DOM、cookie、localStorage；</span></li><li fid=\"ud06289ea\" data-lake-id=\"d7385a378eb54af6d326e8b71456838c\" id=\"d7385a378eb54af6d326e8b71456838c\"><span data-lake-id=\"u65b50a66\" id=\"u65b50a66\">DOS攻击，发送合理请求，占用服务器资源，从而使用户无法访问服务器；</span></li><li fid=\"ud06289ea\" data-lake-id=\"f0eb514812bb4be98489a14af26aa932\" id=\"f0eb514812bb4be98489a14af26aa932\"><span data-lake-id=\"u013bb6a8\" id=\"u013bb6a8\">破坏页面结构；</span></li><li fid=\"ud06289ea\" data-lake-id=\"0127dabd2046fa424566cb4e4f9a4841\" id=\"0127dabd2046fa424566cb4e4f9a4841\"><span data-lake-id=\"uecfe1a32\" id=\"uecfe1a32\">流量劫持（将链接指向某网站）；</span></li></ul><h4 data-lake-id=\"14a274ab54b19177320113c784d9f52e\" id=\"14a274ab54b19177320113c784d9f52e\"><span data-lake-id=\"u54413095\" id=\"u54413095\">（2）攻击类型</span></h4><p data-lake-id=\"1a6ab6f308ef88827b622ccab18ab8a9\" id=\"1a6ab6f308ef88827b622ccab18ab8a9\"><span data-lake-id=\"u78599e70\" id=\"u78599e70\">XSS 可以分为存储型、反射型和 DOM 型：</span></p><ul list=\"ub3d5a286\"><li fid=\"u44e40034\" data-lake-id=\"25739d9270d7fbf176e81c88b14eb5c2\" id=\"25739d9270d7fbf176e81c88b14eb5c2\"><span data-lake-id=\"ua0a10f21\" id=\"ua0a10f21\">存储型指的是</span><span data-lake-id=\"u1dc3cb20\" id=\"u1dc3cb20\" class=\"lake-fontsize-11\" style=\"color: #333333\">恶意脚本会存储在目标服务器上，当浏览器请求数据时，脚本从服务器传回并执行。</span></li><li fid=\"u44e40034\" data-lake-id=\"362dd108a95d8680ca277861601c02fe\" id=\"362dd108a95d8680ca277861601c02fe\"><span data-lake-id=\"u343df78c\" id=\"u343df78c\">反射型指的是</span><span data-lake-id=\"ubad7be59\" id=\"ubad7be59\" class=\"lake-fontsize-11\" style=\"color: #333333\">攻击者诱导用户访问一个带有恶意代码的 URL 后，服务器端接收数据后处理，然后把带有恶意代码的数据发送到浏览器端，浏览器端解析这段带有 XSS 代码的数据后当做脚本执行，最终完成 XSS 攻击。 </span></li><li fid=\"u44e40034\" data-lake-id=\"e9d802c56e9da6ddb3e7cdd1b311cb36\" id=\"e9d802c56e9da6ddb3e7cdd1b311cb36\"><span data-lake-id=\"ub0c62511\" id=\"ub0c62511\">DOM 型指的</span><span data-lake-id=\"u6be96dd1\" id=\"u6be96dd1\" class=\"lake-fontsize-11\" style=\"color: #333333\">通过修改页面的 DOM 节点形成的 XSS。</span></li></ul><p data-lake-id=\"f6f2fe7100b1c03d6a318708c54c47b4\" id=\"f6f2fe7100b1c03d6a318708c54c47b4\"><br></p><p data-lake-id=\"ce742821a4575274c1ab21ba72090c95\" id=\"ce742821a4575274c1ab21ba72090c95\"><strong><span data-lake-id=\"ua1eb776c\" id=\"ua1eb776c\" style=\"color: #000000\">1）存储型 </span></strong><strong><span data-lake-id=\"u90b34451\" id=\"u90b34451\" style=\"color: #000000\">XSS </span></strong><strong><span data-lake-id=\"u4345b734\" id=\"u4345b734\" style=\"color: #000000\">的攻击步骤： </span></strong></p><ol list=\"u2866f6a8\"><li fid=\"ue87b579f\" data-lake-id=\"c12026ac5344429ab687c480e9d252ed\" id=\"c12026ac5344429ab687c480e9d252ed\"><span data-lake-id=\"u912d5391\" id=\"u912d5391\" style=\"color: #000000\">攻击者将恶意代码提交到⽬标⽹站的数据库中。 </span></li><li fid=\"ue87b579f\" data-lake-id=\"efb66b656b8d4cea72a937d75eea5da7\" id=\"efb66b656b8d4cea72a937d75eea5da7\"><span data-lake-id=\"uc55ce03c\" id=\"uc55ce03c\" style=\"color: #000000\">⽤户打开⽬标⽹站时，⽹站服务端将恶意代码从数据库取出，拼接在 </span><span data-lake-id=\"udb839661\" id=\"udb839661\" style=\"color: #000000\">HTML </span><span data-lake-id=\"u04eee984\" id=\"u04eee984\" style=\"color: #000000\">中返回给浏览器。 </span></li><li fid=\"ue87b579f\" data-lake-id=\"a888762b54d325a55455d08ce90c12dc\" id=\"a888762b54d325a55455d08ce90c12dc\"><span data-lake-id=\"u2b9d9f29\" id=\"u2b9d9f29\" style=\"color: #000000\">⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。 </span></li><li fid=\"ue87b579f\" data-lake-id=\"e08eadf0ba7914a8da19dae5cf147e68\" id=\"e08eadf0ba7914a8da19dae5cf147e68\"><span data-lake-id=\"u75db7c9b\" id=\"u75db7c9b\" style=\"color: #000000\">恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。 </span></li></ol><p data-lake-id=\"f67576586856a0e91ddcadbee0d520b8\" id=\"f67576586856a0e91ddcadbee0d520b8\"><br></p><p data-lake-id=\"8c9143f4db00e25b762cea3b7a25b348\" id=\"8c9143f4db00e25b762cea3b7a25b348\"><span data-lake-id=\"u8cd9167f\" id=\"u8cd9167f\" style=\"color: #000000\">这种攻击常⻅于带有⽤户保存数据的⽹站功能，如论坛发帖、商品评论、⽤户私信等。</span></p><p data-lake-id=\"575bd0f448b07327e404d92e62733be5\" id=\"575bd0f448b07327e404d92e62733be5\"><br></p><p data-lake-id=\"7682ec9049e02223088ca6839075b3d1\" id=\"7682ec9049e02223088ca6839075b3d1\"><strong><span data-lake-id=\"uc54961f4\" id=\"uc54961f4\" style=\"color: #000000\">2）反射型 </span></strong><strong><span data-lake-id=\"ube9f5871\" id=\"ube9f5871\" style=\"color: #000000\">XSS </span></strong><strong><span data-lake-id=\"u5b83618c\" id=\"u5b83618c\" style=\"color: #000000\">的攻击步骤： </span></strong></p><ol list=\"ue2572020\"><li fid=\"u302918fa\" data-lake-id=\"0e3e2ebb5b1df44c4ebc25f0cc8399e3\" id=\"0e3e2ebb5b1df44c4ebc25f0cc8399e3\"><span data-lake-id=\"u46d39a53\" id=\"u46d39a53\" style=\"color: #000000\">攻击者构造出特殊的 </span><span data-lake-id=\"u323dff9f\" id=\"u323dff9f\" style=\"color: #000000\">URL</span><span data-lake-id=\"u4e6ddf81\" id=\"u4e6ddf81\" style=\"color: #000000\">，其中包含恶意代码。 </span></li><li fid=\"u302918fa\" data-lake-id=\"566167991b5899b75f060e4d518f013e\" id=\"566167991b5899b75f060e4d518f013e\"><span data-lake-id=\"ue0221842\" id=\"ue0221842\" style=\"color: #000000\">⽤户打开带有恶意代码的 </span><span data-lake-id=\"ub6011a92\" id=\"ub6011a92\" style=\"color: #000000\">URL </span><span data-lake-id=\"u19ad958a\" id=\"u19ad958a\" style=\"color: #000000\">时，⽹站服务端将恶意代码从 </span><span data-lake-id=\"u1e9d873d\" id=\"u1e9d873d\" style=\"color: #000000\">URL </span><span data-lake-id=\"ued2de41b\" id=\"ued2de41b\" style=\"color: #000000\">中取出，拼接在 </span><span data-lake-id=\"udd1f5e8b\" id=\"udd1f5e8b\" style=\"color: #000000\">HTML </span><span data-lake-id=\"u923d1286\" id=\"u923d1286\" style=\"color: #000000\">中返回给浏览器。 </span></li><li fid=\"u302918fa\" data-lake-id=\"ef5939b80ebb0bb19b3515ac76bb03b6\" id=\"ef5939b80ebb0bb19b3515ac76bb03b6\"><span data-lake-id=\"uc6ef4be9\" id=\"uc6ef4be9\" style=\"color: #000000\">⽤户浏览器接收到响应后解析执⾏，混在其中的恶意代码也被执⾏。 </span></li><li fid=\"u302918fa\" data-lake-id=\"99327de6c437a3592bbb2a5fd006ab3c\" id=\"99327de6c437a3592bbb2a5fd006ab3c\"><span data-lake-id=\"u4e3f7091\" id=\"u4e3f7091\" style=\"color: #000000\">恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。 </span></li></ol><p data-lake-id=\"9900e3f21ba97afba2cd942c09c2a12b\" id=\"9900e3f21ba97afba2cd942c09c2a12b\"><br></p><p data-lake-id=\"90ebeaa168855c09092fde65291b3c3a\" id=\"90ebeaa168855c09092fde65291b3c3a\"><span data-lake-id=\"u9f6d0f0c\" id=\"u9f6d0f0c\" style=\"color: #000000\">反射型 </span><span data-lake-id=\"ud096bb6e\" id=\"ud096bb6e\" style=\"color: #000000\">XSS </span><span data-lake-id=\"u53786a50\" id=\"u53786a50\" style=\"color: #000000\">跟存储型 </span><span data-lake-id=\"uc69ead7c\" id=\"uc69ead7c\" style=\"color: #000000\">XSS </span><span data-lake-id=\"ucc4b11d1\" id=\"ucc4b11d1\" style=\"color: #000000\">的区别是：存储型 </span><span data-lake-id=\"u2af57258\" id=\"u2af57258\" style=\"color: #000000\">XSS </span><span data-lake-id=\"u7bf6d6ad\" id=\"u7bf6d6ad\" style=\"color: #000000\">的恶意代码存在数据库⾥，反射型 </span><span data-lake-id=\"ua724116a\" id=\"ua724116a\" style=\"color: #000000\">XSS </span><span data-lake-id=\"ufdd9eefd\" id=\"ufdd9eefd\" style=\"color: #000000\">的恶意代码存在 </span><span data-lake-id=\"u3dd32401\" id=\"u3dd32401\" style=\"color: #000000\">URL </span><span data-lake-id=\"u7b427226\" id=\"u7b427226\" style=\"color: #000000\">⾥。 </span></p><p data-lake-id=\"740f030b5d0c74b73b169844c6ce61fe\" id=\"740f030b5d0c74b73b169844c6ce61fe\"><br></p><p data-lake-id=\"7daf03c9004bdc920712f42920e523c9\" id=\"7daf03c9004bdc920712f42920e523c9\"><span data-lake-id=\"ufe7028e3\" id=\"ufe7028e3\" style=\"color: #000000\">反射型 </span><span data-lake-id=\"u717b888d\" id=\"u717b888d\" style=\"color: #000000\">XSS </span><span data-lake-id=\"u3fb5ca91\" id=\"u3fb5ca91\" style=\"color: #000000\">漏洞常⻅于通过 </span><span data-lake-id=\"ub498a497\" id=\"ub498a497\" style=\"color: #000000\">URL 传递参数的功能，如⽹站搜索、跳转等。 由于需要⽤户主动打开恶意的 </span><span data-lake-id=\"u9d562b30\" id=\"u9d562b30\" style=\"color: #000000\">URL </span><span data-lake-id=\"u64e26391\" id=\"u64e26391\" style=\"color: #000000\">才能⽣效，攻击者往往会结合多种⼿段诱导⽤户点击。 </span><span data-lake-id=\"u8046408b\" id=\"u8046408b\" style=\"color: #000000\"> </span></p><p data-lake-id=\"f0da8ea7911883aa4d7a7fecdf9069d8\" id=\"f0da8ea7911883aa4d7a7fecdf9069d8\"><br></p><p data-lake-id=\"1c67de55d1befbe66746a80fd1e3a61a\" id=\"1c67de55d1befbe66746a80fd1e3a61a\"><strong><span data-lake-id=\"u94e9d486\" id=\"u94e9d486\" style=\"color: #000000\">3）DOM </span></strong><strong><span data-lake-id=\"u1d66789e\" id=\"u1d66789e\" style=\"color: #000000\">型 </span></strong><strong><span data-lake-id=\"ud025ca2e\" id=\"ud025ca2e\" style=\"color: #000000\">XSS </span></strong><strong><span data-lake-id=\"ud8167885\" id=\"ud8167885\" style=\"color: #000000\">的攻击步骤：</span></strong><span data-lake-id=\"ue5df61ee\" id=\"ue5df61ee\" style=\"color: #000000\"> </span></p><ol list=\"u121030f8\"><li fid=\"u2257b2bc\" data-lake-id=\"aa554b43680431228996e2c7579070c3\" id=\"aa554b43680431228996e2c7579070c3\"><span data-lake-id=\"u6aaad797\" id=\"u6aaad797\" style=\"color: #000000\">攻击者构造出特殊的 </span><span data-lake-id=\"u09befcd5\" id=\"u09befcd5\" style=\"color: #000000\">URL</span><span data-lake-id=\"u10811d7d\" id=\"u10811d7d\" style=\"color: #000000\">，其中包含恶意代码。 </span></li><li fid=\"u2257b2bc\" data-lake-id=\"c8a94022bea0513c1ef19b4cba3b75e4\" id=\"c8a94022bea0513c1ef19b4cba3b75e4\"><span data-lake-id=\"u773dfb84\" id=\"u773dfb84\" style=\"color: #000000\">⽤户打开带有恶意代码的 </span><span data-lake-id=\"ubfb65111\" id=\"ubfb65111\" style=\"color: #000000\">URL</span><span data-lake-id=\"u6da69c77\" id=\"u6da69c77\" style=\"color: #000000\">。 </span></li><li fid=\"u2257b2bc\" data-lake-id=\"d4b04a7d13aaf407a754f5400123c0b6\" id=\"d4b04a7d13aaf407a754f5400123c0b6\"><span data-lake-id=\"u0ba30dd5\" id=\"u0ba30dd5\" style=\"color: #000000\">⽤户浏览器接收到响应后解析执⾏，前端 </span><span data-lake-id=\"u0f330db4\" id=\"u0f330db4\" style=\"color: #000000\">JavaScript </span><span data-lake-id=\"u5d4efd46\" id=\"u5d4efd46\" style=\"color: #000000\">取出 </span><span data-lake-id=\"u05940b31\" id=\"u05940b31\" style=\"color: #000000\">URL </span><span data-lake-id=\"u61853f37\" id=\"u61853f37\" style=\"color: #000000\">中的恶意代码并执⾏。 </span></li><li fid=\"u2257b2bc\" data-lake-id=\"bb3088970412bb427b120885b41a1ad1\" id=\"bb3088970412bb427b120885b41a1ad1\"><span data-lake-id=\"uf9839368\" id=\"uf9839368\" style=\"color: #000000\">恶意代码窃取⽤户数据并发送到攻击者的⽹站，或者冒充⽤户的⾏为，调⽤⽬标⽹站接⼝执⾏攻击者指定的操作。 </span></li></ol><p data-lake-id=\"00f1e68c653a469745c05e715d723499\" id=\"00f1e68c653a469745c05e715d723499\"><br></p><p data-lake-id=\"b70ab3cb2314536bc5c28e83931f3661\" id=\"b70ab3cb2314536bc5c28e83931f3661\"><span data-lake-id=\"ue11fbc6d\" id=\"ue11fbc6d\" style=\"color: #000000\">DOM </span><span data-lake-id=\"u222d3f22\" id=\"u222d3f22\" style=\"color: #000000\">型 </span><span data-lake-id=\"u4674444b\" id=\"u4674444b\" style=\"color: #000000\">XSS </span><span data-lake-id=\"uaabce467\" id=\"uaabce467\" style=\"color: #000000\">跟前两种 </span><span data-lake-id=\"u8f6a35a6\" id=\"u8f6a35a6\" style=\"color: #000000\">XSS </span><span data-lake-id=\"ub640b301\" id=\"ub640b301\" style=\"color: #000000\">的区别：</span><span data-lake-id=\"u9be827b2\" id=\"u9be827b2\" style=\"color: #000000\">DOM </span><span data-lake-id=\"u531e535b\" id=\"u531e535b\" style=\"color: #000000\">型 </span><span data-lake-id=\"ue9fa43bf\" id=\"ue9fa43bf\" style=\"color: #000000\">XSS 攻击中，取出和执⾏恶意代码由浏览器端完成，属于前端JavaScript </span><span data-lake-id=\"u662577cb\" id=\"u662577cb\" style=\"color: #000000\">⾃身的安全漏洞，⽽其他两种 </span><span data-lake-id=\"u0408723a\" id=\"u0408723a\" style=\"color: #000000\">XSS </span><span data-lake-id=\"ub46e00d0\" id=\"ub46e00d0\" style=\"color: #000000\">都属于服务端的安全漏洞。 </span></p><h3 data-lake-id=\"bd0d59a01fec6ed3c8b21ddaa3ce809c\" id=\"bd0d59a01fec6ed3c8b21ddaa3ce809c\"><span data-lake-id=\"u96cc3927\" id=\"u96cc3927\">2. 如何防御 XSS 攻击？</span></h3><p data-lake-id=\"af02702f1bec073651b12f7f2e454ee5\" id=\"af02702f1bec073651b12f7f2e454ee5\"><span data-lake-id=\"u4584cfb3\" id=\"u4584cfb3\">可以看到XSS危害如此之大， 那么在开发网站时就要做好防御措施，具体措施如下：</span></p><ul list=\"u68249562\"><li fid=\"u8b410591\" data-lake-id=\"77e95a1c74640600702d6f3c8969196d\" id=\"77e95a1c74640600702d6f3c8969196d\"><span data-lake-id=\"ubad647a1\" id=\"ubad647a1\">可以从浏览器的执行来进行预防，一种是使用纯前端的方式，不用服务器端拼接后返回（不使用服务端渲染）。另一种是对需要插入到 HTML 中的代码做好充分的转义。对于 DOM 型的攻击，主要是前端脚本的不可靠而造成的，对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断。</span></li><li fid=\"u8b410591\" data-lake-id=\"ac92948e88ee3d253b60015209dae9a3\" id=\"ac92948e88ee3d253b60015209dae9a3\"><span data-lake-id=\"udc42829d\" id=\"udc42829d\">使用 CSP ，CSP 的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行，从而防止恶意代码的注入攻击。</span></li></ul><blockquote data-lake-id=\"u6087d2bc\" id=\"u6087d2bc\"><ol list=\"u0e44cffe\"><li fid=\"ue8841dbb\" data-lake-id=\"2c60eca6f250df47550152328aeaef3c\" id=\"2c60eca6f250df47550152328aeaef3c\"><span data-lake-id=\"u3e6eb457\" id=\"u3e6eb457\">CSP 指的是内容安全策略，它的本质是建立一个白名单，告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截由浏览器自己来实现。</span></li><li fid=\"ue8841dbb\" data-lake-id=\"afb05d8f235060e2e8ce6d113705476a\" id=\"afb05d8f235060e2e8ce6d113705476a\"><span data-lake-id=\"u29d40eb4\" id=\"u29d40eb4\">通常有两种方式来开启 CSP，一种是设置 HTTP 首部中的 Content-Security-Policy，一种是设置 meta 标签的方式 &lt;meta http-equiv=&quot;Content-Security-Policy&quot;&gt;</span></li></ol></blockquote><ul list=\"u504789e1\"><li fid=\"u4c772f63\" data-lake-id=\"fa618e11c70da0d6ffda0f8fb5f9deaf\" id=\"fa618e11c70da0d6ffda0f8fb5f9deaf\"><span data-lake-id=\"u4309fb06\" id=\"u4309fb06\">对一些敏感信息进行保护，比如 cookie 使用 http-only，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。</span></li></ul><h3 data-lake-id=\"2614e68e72f404c43fad8102f4b8362b\" id=\"2614e68e72f404c43fad8102f4b8362b\"><span data-lake-id=\"u7c7542c5\" id=\"u7c7542c5\">3. 什么是 CSRF 攻击？</span></h3><h4 data-lake-id=\"000722fb7a64932efc476973f70edf2b\" id=\"000722fb7a64932efc476973f70edf2b\"><span data-lake-id=\"u91dcc911\" id=\"u91dcc911\">（1）概念</span></h4><p data-lake-id=\"1026617eae56b443389f03e3b5dac4fd\" id=\"1026617eae56b443389f03e3b5dac4fd\"><span data-lake-id=\"uf3cce405\" id=\"uf3cce405\">CSRF 攻击指的是</span><strong><span data-lake-id=\"u77284a8d\" id=\"u77284a8d\">跨站请求伪造攻击</span></strong><span data-lake-id=\"uf7600684\" id=\"uf7600684\">，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。</span></p><p data-lake-id=\"2e61aab59de28bf70e85aa61ae7f6e59\" id=\"2e61aab59de28bf70e85aa61ae7f6e59\"><br></p><p data-lake-id=\"d78e46a333a0e2ae9180cfed2765bd9f\" id=\"d78e46a333a0e2ae9180cfed2765bd9f\"><span data-lake-id=\"u864f9537\" id=\"u864f9537\">CSRF 攻击的</span><strong><span data-lake-id=\"u90b775d6\" id=\"u90b775d6\">本质是</span></strong><strong><span data-lake-id=\"ub8a8311c\" id=\"ub8a8311c\">利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</span></strong></p><h4 data-lake-id=\"23619fd71fe73798302acdaec55587f6\" id=\"23619fd71fe73798302acdaec55587f6\"><span data-lake-id=\"ucf045c58\" id=\"ucf045c58\">（2）</span><span data-lake-id=\"uc3bd719f\" id=\"uc3bd719f\">攻击类型</span></h4><p data-lake-id=\"d5f1482a37ad596f5c05d63373f6621c\" id=\"d5f1482a37ad596f5c05d63373f6621c\"><span data-lake-id=\"uae850352\" id=\"uae850352\">常见的 CSRF 攻击有三种：</span></p><ul list=\"u1922c0bf\"><li fid=\"ud51ea68d\" data-lake-id=\"aee0b6bc78c44fbfcf7d2a524c9b302b\" id=\"aee0b6bc78c44fbfcf7d2a524c9b302b\"><span data-lake-id=\"uc026d241\" id=\"uc026d241\"> GET 类型的 CSRF 攻击，比如在网站中的一个 img 标签里构建一个请求，当用户打开这个网站的时候就会自动发起提交。</span></li><li fid=\"ud51ea68d\" data-lake-id=\"0f7808b2ca0a69067f7b3985bf032922\" id=\"0f7808b2ca0a69067f7b3985bf032922\"><span data-lake-id=\"ue10c9758\" id=\"ue10c9758\"> POST 类型的 CSRF 攻击，比如构建一个表单，然后隐藏它，当用户进入页面时，自动提交这个表单。</span></li><li fid=\"ud51ea68d\" data-lake-id=\"2a178387c5d1a5dad3cd2d4b22d1db59\" id=\"2a178387c5d1a5dad3cd2d4b22d1db59\"><span data-lake-id=\"u7e9c39bc\" id=\"u7e9c39bc\">链接类型的 CSRF 攻击，比如在 a 标签的 href 属性里构建一个请求，然后诱导用户去点击。</span></li></ul><h3 data-lake-id=\"d81aff296c9962f2c2ea3f991371954b\" id=\"d81aff296c9962f2c2ea3f991371954b\"><span data-lake-id=\"u4b731f55\" id=\"u4b731f55\">4. 如何防御 CSRF 攻击？</span></h3><p data-lake-id=\"01425883e6c823cc3920c1cfa8409b0c\" id=\"01425883e6c823cc3920c1cfa8409b0c\"><strong><span data-lake-id=\"u903da1d7\" id=\"u903da1d7\">CSRF 攻击可以使用以下方法来防护：</span></strong></p><ul list=\"ub293ecc8\"><li fid=\"u21551afd\" data-lake-id=\"f93b6379be29e827d3a783394b813ad0\" id=\"f93b6379be29e827d3a783394b813ad0\"><strong><span data-lake-id=\"u05b3eb30\" id=\"u05b3eb30\">进行同源检测</span></strong><span data-lake-id=\"u5c0403e4\" id=\"u5c0403e4\">，服务器根据 http 请求头中 origin 或者 referer 信息来判断请求是否为允许访问的站点，从而对请求进行过滤。当 origin 或者 referer 信息都不存在的时候，直接阻止请求。这种方式的缺点是有些情况下 referer 可以被伪造，同时还会把搜索引擎的链接也给屏蔽了。所以一般网站会允许搜索引擎的页面请求，但是相应的页面请求这种请求方式也可能被攻击者给利用。（</span><span data-lake-id=\"ub13ae9cd\" id=\"ub13ae9cd\" class=\"lake-fontsize-11\" style=\"color: #333333\">Referer 字段会告诉服务器该网页是从哪个页面链接过来的</span><span data-lake-id=\"u042b6dc6\" id=\"u042b6dc6\">）</span></li><li fid=\"u21551afd\" data-lake-id=\"65f8636e9c8fcf59671aa5f02e1705d3\" id=\"65f8636e9c8fcf59671aa5f02e1705d3\"><strong><span data-lake-id=\"uc147da7f\" id=\"uc147da7f\">使用 CSRF Token 进行验证</span></strong><span data-lake-id=\"u55490d8c\" id=\"u55490d8c\">，服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie 单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。这种情况可以通过改变 token 的构建方式来解决。</span></li><li fid=\"u21551afd\" data-lake-id=\"919ac8c5fe0103603b420dbacbd1ed56\" id=\"919ac8c5fe0103603b420dbacbd1ed56\"><strong><span data-lake-id=\"ua4096455\" id=\"ua4096455\">对 </span></strong><strong><span data-lake-id=\"u77990625\" id=\"u77990625\">Cookie 进行</span></strong><strong><span data-lake-id=\"u35a0870a\" id=\"u35a0870a\">双重验证</span></strong><span data-lake-id=\"u3f28335d\" id=\"u3f28335d\">，服务器在用户访问网站页面时，向请求域名注入一个Cookie，内容为随机字符串，然后当用户再次向服务器发送请求的时候，从 cookie 中取出这个字符串，添加到 URL 参数中，然后服务器通过对 cookie 中的数据和参数中的数据进行比较，来进行验证。使用这种方式是利用了攻击者只能利用 cookie，但是不能访问获取 cookie 的特点。并且这种方法比 CSRF Token 的方法更加方便，并且不涉及到分布式访问的问题。这种方法的缺点是如果网站存在 XSS 漏洞的，那么这种方式会失效。同时这种方式不能做到子域名的隔离。</span></li><li fid=\"u21551afd\" data-lake-id=\"408b85ea73a3384458dd37290fe214a1\" id=\"408b85ea73a3384458dd37290fe214a1\"><strong><span data-lake-id=\"u282778d9\" id=\"u282778d9\">在设置 cookie 属性的时候设置 Samesite ，限制 cookie 不能作为被第三方使用</span></strong><span data-lake-id=\"ubda14e49\" id=\"ubda14e49\">，从而可以避免被攻击者利用。Samesite 一共有两种模式，一种是严格模式，在严格模式下 cookie 在任何情况下都不可能作为第三方 Cookie 使用，在宽松模式下，cookie 可以被请求是 GET 请求，且会发生页面跳转的请求所使用。</span></li></ul><h3 data-lake-id=\"6a17e9cc3d047dd85d8566c9f4b37dee\" id=\"6a17e9cc3d047dd85d8566c9f4b37dee\"><span data-lake-id=\"u814b2e8e\" id=\"u814b2e8e\">5. 什么是中间人攻击？如何防范中间人攻击？</span></h3><p data-lake-id=\"ecf59175b2b43816b29fa6f12e01e829\" id=\"ecf59175b2b43816b29fa6f12e01e829\"><span data-lake-id=\"u37da1c69\" id=\"u37da1c69\" style=\"color: #000000\">中间⼈ </span><span data-lake-id=\"u87c0b0e5\" id=\"u87c0b0e5\" style=\"color: #000000\">(Man-in-the-middle attack, MITM) </span><span data-lake-id=\"ua76a6a30\" id=\"ua76a6a30\" style=\"color: #000000\">是指攻击者与通讯的两端分别创建独⽴的联系</span><span data-lake-id=\"u7c9de688\" id=\"u7c9de688\" style=\"color: #000000\">, </span><span data-lake-id=\"u610afe1a\" id=\"u610afe1a\" style=\"color: #000000\">并交换其所收到的数据</span><span data-lake-id=\"ubaef8cde\" id=\"ubaef8cde\" style=\"color: #000000\">, 使通讯的两端认为他们正在通过⼀个私密的连接与对⽅直接对话</span><span data-lake-id=\"u6ee736b0\" id=\"u6ee736b0\" style=\"color: #000000\">, </span><span data-lake-id=\"ua5a2dad8\" id=\"ua5a2dad8\" style=\"color: #000000\">但事实上整个会话都被攻击者完全控制</span><span data-lake-id=\"u3bde093c\" id=\"u3bde093c\" style=\"color: #000000\">。</span><span data-lake-id=\"ufa8d6172\" id=\"ufa8d6172\" style=\"color: #000000\">在中间⼈攻击中，攻击者可以拦截通讯双⽅的通话并插⼊新的内容</span><span data-lake-id=\"u8c8c3377\" id=\"u8c8c3377\" style=\"color: #000000\">。</span></p><p data-lake-id=\"c05646751981c035b09c1fb017fbf7af\" id=\"c05646751981c035b09c1fb017fbf7af\"><br></p><p data-lake-id=\"34be1f069e742551eab7c0e959147d00\" id=\"34be1f069e742551eab7c0e959147d00\"><span data-lake-id=\"ue336d248\" id=\"ue336d248\" style=\"color: #000000\">攻击过程如下</span><span data-lake-id=\"u40df5c70\" id=\"u40df5c70\" style=\"color: #000000\">: </span></p><ul list=\"u286c60e4\"><li fid=\"uace8ad0a\" data-lake-id=\"523ac5cf6c0acaa20bba76aaff6c17b4\" id=\"523ac5cf6c0acaa20bba76aaff6c17b4\"><span data-lake-id=\"ue517dc44\" id=\"ue517dc44\" style=\"color: #000000\">客户端发送请求到服务端，请求被中间⼈截获 </span></li><li fid=\"uace8ad0a\" data-lake-id=\"c1c0a76ad526367f27063fcd9a4080d3\" id=\"c1c0a76ad526367f27063fcd9a4080d3\"><span data-lake-id=\"u7e2171db\" id=\"u7e2171db\" style=\"color: #000000\">服务器向客户端发送公钥 </span></li><li fid=\"uace8ad0a\" data-lake-id=\"498826ac8340f31c7de7f81feff78afd\" id=\"498826ac8340f31c7de7f81feff78afd\"><span data-lake-id=\"ue7085de3\" id=\"ue7085de3\" style=\"color: #000000\">中间⼈截获公钥，保留在⾃⼰⼿上。然后⾃⼰⽣成⼀个</span><strong><span data-lake-id=\"u17c79797\" id=\"u17c79797\" style=\"color: #000000\">伪造的</span></strong><span data-lake-id=\"u6698541b\" id=\"u6698541b\" style=\"color: #000000\">公钥，发给客户端 </span></li><li fid=\"uace8ad0a\" data-lake-id=\"079d8a580bc5c3e365724239cf9285cf\" id=\"079d8a580bc5c3e365724239cf9285cf\"><span data-lake-id=\"u3aecbb26\" id=\"u3aecbb26\" style=\"color: #000000\">客户端收到伪造的公钥后，⽣成加密</span><span data-lake-id=\"u811e086f\" id=\"u811e086f\" style=\"color: #000000\">hash</span><span data-lake-id=\"u435dcf04\" id=\"u435dcf04\" style=\"color: #000000\">值发给服务器 </span></li><li fid=\"uace8ad0a\" data-lake-id=\"fd0a94338f6f0d0d8eea00553411bccf\" id=\"fd0a94338f6f0d0d8eea00553411bccf\"><span data-lake-id=\"uf37fa797\" id=\"uf37fa797\" style=\"color: #000000\">中间⼈获得加密</span><span data-lake-id=\"u7416faa5\" id=\"u7416faa5\" style=\"color: #000000\">hash</span><span data-lake-id=\"u58b4847f\" id=\"u58b4847f\" style=\"color: #000000\">值，⽤⾃⼰的私钥解密获得真秘钥</span><span data-lake-id=\"u1f4093b8\" id=\"u1f4093b8\" style=\"color: #000000\">,</span><span data-lake-id=\"uf3dca811\" id=\"uf3dca811\" style=\"color: #000000\">同时⽣成假的加密</span><span data-lake-id=\"u4b627317\" id=\"u4b627317\" style=\"color: #000000\">hash</span><span data-lake-id=\"uda4272cc\" id=\"uda4272cc\" style=\"color: #000000\">值，发给服务器 </span></li><li fid=\"uace8ad0a\" data-lake-id=\"99629f76dfc294dfe504c2ac4dcade84\" id=\"99629f76dfc294dfe504c2ac4dcade84\"><span data-lake-id=\"u2858da0d\" id=\"u2858da0d\" style=\"color: #000000\">服务器⽤私钥解密获得假密钥</span><span data-lake-id=\"u1e412495\" id=\"u1e412495\" style=\"color: #000000\">,</span><span data-lake-id=\"ufe3efaeb\" id=\"ufe3efaeb\" style=\"color: #000000\">然后加密数据传输给客户端 </span></li></ul><h3 data-lake-id=\"f256967263b0caece471c6535f53024e\" id=\"f256967263b0caece471c6535f53024e\"><span data-lake-id=\"u3c616bdd\" id=\"u3c616bdd\">6. </span><span data-lake-id=\"u15530d4b\" id=\"u15530d4b\" style=\"color: #000000\">有哪些可能引起前端安全的问题</span><strong><span data-lake-id=\"u1a53f0c0\" id=\"u1a53f0c0\">? </span></strong></h3><ul list=\"ua1cf788a\"><li fid=\"u39030b3c\" data-lake-id=\"f867c4dfa0cb4145ab2b26413cd0fa83\" id=\"f867c4dfa0cb4145ab2b26413cd0fa83\"><span data-lake-id=\"ue837d097\" id=\"ue837d097\" style=\"color: #000000\">跨站脚本 </span><span data-lake-id=\"uc5528c00\" id=\"uc5528c00\" style=\"color: #000000\">(Cross-Site Scripting, XSS): </span><span data-lake-id=\"uc502b262\" id=\"uc502b262\" style=\"color: #000000\">⼀种代码注⼊⽅式</span><span data-lake-id=\"ud565486e\" id=\"ud565486e\" style=\"color: #000000\">, </span><span data-lake-id=\"u04ef7847\" id=\"u04ef7847\" style=\"color: #000000\">为了与 </span><span data-lake-id=\"u40962730\" id=\"u40962730\" style=\"color: #000000\">CSS </span><span data-lake-id=\"u945a2b8d\" id=\"u945a2b8d\" style=\"color: #000000\">区分所以被称作 </span><span data-lake-id=\"u6188d536\" id=\"u6188d536\" style=\"color: #000000\">XSS。</span><span data-lake-id=\"ud227b384\" id=\"ud227b384\" style=\"color: #000000\">早期常⻅于⽹络论坛, 起因是⽹站没有对⽤户的输⼊进⾏严格的限制</span><span data-lake-id=\"ua0621d80\" id=\"ua0621d80\" style=\"color: #000000\">, 使得攻击者可以将脚本上传到帖⼦让其他⼈浏览到有恶意脚本的⻚⾯</span><span data-lake-id=\"u1b2d5598\" id=\"u1b2d5598\" style=\"color: #000000\">, </span><span data-lake-id=\"ub28afada\" id=\"ub28afada\" style=\"color: #000000\">其注⼊⽅式很简单包括但不限于 </span><span data-lake-id=\"u8d1e7131\" id=\"u8d1e7131\" style=\"color: #000000\">JavaScript / CSS / Flash </span><span data-lake-id=\"u51855ecf\" id=\"u51855ecf\" style=\"color: #000000\">等； </span></li><li fid=\"u39030b3c\" data-lake-id=\"2c658bcfc692ea937de4b1edc5191ff0\" id=\"2c658bcfc692ea937de4b1edc5191ff0\"><span data-lake-id=\"u7699265b\" id=\"u7699265b\" style=\"color: #000000\">iframe</span><span data-lake-id=\"ud29ab28c\" id=\"ud29ab28c\" style=\"color: #000000\">的滥⽤</span><span data-lake-id=\"u8352bfab\" id=\"u8352bfab\" style=\"color: #000000\">: iframe</span><span data-lake-id=\"u4b3f62b5\" id=\"u4b3f62b5\" style=\"color: #000000\">中的内容是由第三⽅来提供的，默认情况下他们不受控制，他们可以在</span><span data-lake-id=\"u06e9a266\" id=\"u06e9a266\" style=\"color: #000000\">iframe中运⾏JavaScirpt</span><span data-lake-id=\"u61354219\" id=\"u61354219\" style=\"color: #000000\">脚本、</span><span data-lake-id=\"u1317cd7a\" id=\"u1317cd7a\" style=\"color: #000000\">Flash</span><span data-lake-id=\"u58c986a6\" id=\"u58c986a6\" style=\"color: #000000\">插件、弹出对话框等等，这可能会破坏前端⽤户体验；</span></li><li fid=\"u39030b3c\" data-lake-id=\"c84a2c0326655215bd863dda4e17ec96\" id=\"c84a2c0326655215bd863dda4e17ec96\"><span data-lake-id=\"u52198800\" id=\"u52198800\" style=\"color: #000000\">跨站点请求伪造（</span><span data-lake-id=\"uce38572e\" id=\"uce38572e\" style=\"color: #000000\">Cross-Site Request Forgeries</span><span data-lake-id=\"u90cba603\" id=\"u90cba603\" style=\"color: #000000\">，</span><span data-lake-id=\"ua85b2547\" id=\"ua85b2547\" style=\"color: #000000\">CSRF</span><span data-lake-id=\"u2ec685f8\" id=\"u2ec685f8\" style=\"color: #000000\">）</span><span data-lake-id=\"uc17d495c\" id=\"uc17d495c\" style=\"color: #000000\">: 指攻击者通过设置好的陷阱，强制对已完成认证的⽤户进⾏⾮预期的个⼈信息或设定信息等某些状态更新，属于被动攻击 </span></li><li fid=\"u39030b3c\" data-lake-id=\"98f516fb52c50a4128a045401e81eba2\" id=\"98f516fb52c50a4128a045401e81eba2\"><span data-lake-id=\"u8f23ed03\" id=\"u8f23ed03\" style=\"color: #000000\">恶意第三⽅库</span><span data-lake-id=\"uce782ef7\" id=\"uce782ef7\" style=\"color: #000000\">: ⽆论是后端服务器应⽤还是前端应⽤开发，绝⼤多数时候都是在借助开发框架和各种类库进⾏快速开发，</span><span data-lake-id=\"uce64165d\" id=\"uce64165d\" style=\"color: #000000\">⼀旦第三⽅库被植⼊恶意代码很容易引起安全问题</span><span data-lake-id=\"u3e066b41\" id=\"u3e066b41\" style=\"color: #000000\">。</span></li></ul><h3 data-lake-id=\"d1ebac88ba3ee8a1f2303025fc40d255\" id=\"d1ebac88ba3ee8a1f2303025fc40d255\"><span data-lake-id=\"u5cdccbe5\" id=\"u5cdccbe5\">7. 网络劫持有哪几种，如何防范？</span></h3><p data-lake-id=\"53a7478a399ac3fa02417d6891db8ea9\" id=\"53a7478a399ac3fa02417d6891db8ea9\"><span data-lake-id=\"udd954626\" id=\"udd954626\" style=\"color: #000000\">⽹络劫持分为两种</span><span data-lake-id=\"uca21fc12\" id=\"uca21fc12\" style=\"color: #000000\">: </span></p><p data-lake-id=\"223fc1db8cef8813f214785fce41b6dc\" id=\"223fc1db8cef8813f214785fce41b6dc\"><span data-lake-id=\"u09cb3413\" id=\"u09cb3413\" style=\"color: #000000\">（1）</span><strong><span data-lake-id=\"u0c18554d\" id=\"u0c18554d\" style=\"color: #000000\">DNS</span></strong><strong><span data-lake-id=\"uff0856f4\" id=\"uff0856f4\" style=\"color: #000000\">劫持</span></strong><span data-lake-id=\"u18bb9c4d\" id=\"u18bb9c4d\" style=\"color: #000000\">: (</span><span data-lake-id=\"ue93fa9b1\" id=\"ue93fa9b1\" style=\"color: #000000\">输⼊京东被强制跳转到淘宝这就属于</span><span data-lake-id=\"ud821f463\" id=\"ud821f463\" style=\"color: #000000\">dns</span><span data-lake-id=\"u9e9891da\" id=\"u9e9891da\" style=\"color: #000000\">劫持</span><span data-lake-id=\"u6f4d3570\" id=\"u6f4d3570\" style=\"color: #000000\">) </span></p><ul list=\"u9fa20492\"><li fid=\"u0b969ba6\" data-lake-id=\"cb7d8393f1187f919d997b9c37d2e078\" id=\"cb7d8393f1187f919d997b9c37d2e078\"><span data-lake-id=\"u213ff593\" id=\"u213ff593\" style=\"color: #000000\">DNS</span><span data-lake-id=\"ud1ae59ff\" id=\"ud1ae59ff\" style=\"color: #000000\">强制解析</span><span data-lake-id=\"uf7a99e4e\" id=\"uf7a99e4e\" style=\"color: #000000\">: </span><span data-lake-id=\"uffe7c4e0\" id=\"uffe7c4e0\" style=\"color: #000000\">通过修改运营商的本地</span><span data-lake-id=\"u2c5490ac\" id=\"u2c5490ac\" style=\"color: #000000\">DNS记录，来引导⽤户流量到缓存服务器</span></li><li fid=\"u0b969ba6\" data-lake-id=\"a1b2ac5447da205fb367497b01526298\" id=\"a1b2ac5447da205fb367497b01526298\"><span data-lake-id=\"u53966466\" id=\"u53966466\" style=\"color: #000000\">302</span><span data-lake-id=\"u74bdd561\" id=\"u74bdd561\" style=\"color: #000000\">跳转的⽅式</span><span data-lake-id=\"ufdbc6e51\" id=\"ufdbc6e51\" style=\"color: #000000\">: </span><span data-lake-id=\"ub0246abc\" id=\"ub0246abc\" style=\"color: #000000\">通过监控⽹络出⼝的流量，分析判断哪些内容是可以进⾏劫持处理的</span><span data-lake-id=\"u994e7658\" id=\"u994e7658\" style=\"color: #000000\">,</span><span data-lake-id=\"u5437b8ff\" id=\"u5437b8ff\" style=\"color: #000000\">再对劫持的内存发起302跳转的回复，引导⽤户获取内容 </span></li></ul><p data-lake-id=\"1b9aee6a70d35540ee25aa3e61be231f\" id=\"1b9aee6a70d35540ee25aa3e61be231f\"><span data-lake-id=\"u13577343\" id=\"u13577343\" style=\"color: #000000\">（2）</span><strong><span data-lake-id=\"ua18d1dbe\" id=\"ua18d1dbe\" style=\"color: #000000\">HTTP</span></strong><strong><span data-lake-id=\"u39867ed0\" id=\"u39867ed0\" style=\"color: #000000\">劫持</span></strong><span data-lake-id=\"uc945fbe0\" id=\"uc945fbe0\" style=\"color: #000000\">: (</span><span data-lake-id=\"u57a8dbea\" id=\"u57a8dbea\" style=\"color: #000000\">访问⾕歌但是⼀直有贪玩蓝⽉的⼴告</span><span data-lake-id=\"uc1009739\" id=\"uc1009739\" style=\"color: #000000\">),</span><span data-lake-id=\"ue399eb4f\" id=\"ue399eb4f\" style=\"color: #000000\">由于</span><span data-lake-id=\"u71d9b519\" id=\"u71d9b519\" style=\"color: #000000\">http</span><span data-lake-id=\"ubbfa1435\" id=\"ubbfa1435\" style=\"color: #000000\">明⽂传输</span><span data-lake-id=\"ub18a9c34\" id=\"ub18a9c34\" style=\"color: #000000\">,</span><span data-lake-id=\"u8905de2e\" id=\"u8905de2e\" style=\"color: #000000\">运营商会修改你的</span><span data-lake-id=\"uacc2041f\" id=\"uacc2041f\" style=\"color: #000000\">http</span><span data-lake-id=\"u58a591b3\" id=\"u58a591b3\" style=\"color: #000000\">响应内容</span><span data-lake-id=\"u9b690b29\" id=\"u9b690b29\" style=\"color: #000000\">(</span><span data-lake-id=\"u8fab7c70\" id=\"u8fab7c70\" style=\"color: #000000\">即加⼴告</span><span data-lake-id=\"uf2fbe19a\" id=\"uf2fbe19a\" style=\"color: #000000\">) </span></p><p data-lake-id=\"f90d3ba0c49e7f49cd02333a44629189\" id=\"f90d3ba0c49e7f49cd02333a44629189\"><br></p><p data-lake-id=\"b055571a48b6427b6ea43cb17cf49f77\" id=\"b055571a48b6427b6ea43cb17cf49f77\"><span data-lake-id=\"u66353d89\" id=\"u66353d89\" style=\"color: #000000\">DNS</span><span data-lake-id=\"ud75d2ae7\" id=\"ud75d2ae7\" style=\"color: #000000\">劫持由于涉嫌违法</span><span data-lake-id=\"u75e87305\" id=\"u75e87305\" style=\"color: #000000\">，</span><span data-lake-id=\"u78ac089b\" id=\"u78ac089b\" style=\"color: #000000\">已经被监管起来</span><span data-lake-id=\"u96192aec\" id=\"u96192aec\" style=\"color: #000000\">，</span><span data-lake-id=\"u40ee7f83\" id=\"u40ee7f83\" style=\"color: #000000\">现在很少会有</span><span data-lake-id=\"u48676f2f\" id=\"u48676f2f\" style=\"color: #000000\">DNS</span><span data-lake-id=\"ud93006fb\" id=\"ud93006fb\" style=\"color: #000000\">劫持</span><span data-lake-id=\"u359d8c56\" id=\"u359d8c56\" style=\"color: #000000\">，</span><span data-lake-id=\"u94678ee0\" id=\"u94678ee0\" style=\"color: #000000\">⽽</span><span data-lake-id=\"u3ef42048\" id=\"u3ef42048\" style=\"color: #000000\">http</span><span data-lake-id=\"ue5e54807\" id=\"ue5e54807\" style=\"color: #000000\">劫持依然⾮常盛⾏，最有效的办法就是全站</span><span data-lake-id=\"u30a48b74\" id=\"u30a48b74\" style=\"color: #000000\">HTTPS，</span><span data-lake-id=\"u8ee846c9\" id=\"u8ee846c9\" style=\"color: #000000\">将</span><span data-lake-id=\"uf4d0970f\" id=\"uf4d0970f\" style=\"color: #000000\">HTTP</span><span data-lake-id=\"uf3fbd3a4\" id=\"uf3fbd3a4\" style=\"color: #000000\">加密</span><span data-lake-id=\"ubb5bfbeb\" id=\"ubb5bfbeb\" style=\"color: #000000\">，</span><span data-lake-id=\"u02031506\" id=\"u02031506\" style=\"color: #000000\">这使得运营商⽆法获取明⽂</span><span data-lake-id=\"uefef1c8e\" id=\"uefef1c8e\" style=\"color: #000000\">，</span><span data-lake-id=\"u3e754552\" id=\"u3e754552\" style=\"color: #000000\">就⽆法劫持你的响应内容</span><span data-lake-id=\"u053a8d04\" id=\"u053a8d04\" style=\"color: #000000\">。 </span></p><h2 data-lake-id=\"e5da94c4ea214cc0b8f68f36354cfc1b\" id=\"e5da94c4ea214cc0b8f68f36354cfc1b\"><span data-lake-id=\"ue3e3c329\" id=\"ue3e3c329\">二、进程与线程</span></h2><h3 data-lake-id=\"10e3eafe602a673189f6b9ba0ec86aee\" id=\"10e3eafe602a673189f6b9ba0ec86aee\"><span data-lake-id=\"u2055a389\" id=\"u2055a389\">1. 进程与线程的概念</span></h3><p data-lake-id=\"a6b90aca58fb9b93f02c60e56d0eacf4\" id=\"a6b90aca58fb9b93f02c60e56d0eacf4\"><span data-lake-id=\"u2e1a8468\" id=\"u2e1a8468\">从本质上说，进程和线程都是 CPU 工作时间片的一个描述：</span></p><ul list=\"uec87f337\"><li fid=\"u7d875f4b\" data-lake-id=\"076bb2664f62f9ed9f33b30d9c9fbaed\" id=\"076bb2664f62f9ed9f33b30d9c9fbaed\"><span data-lake-id=\"u3aa03ad8\" id=\"u3aa03ad8\">进程描述了 CPU 在运行指令及加载和保存上下文所需的时间，放在应用上来说就代表了一个程序。</span></li><li fid=\"u7d875f4b\" data-lake-id=\"c26c12f1adf71fdbf592086dc4e017e6\" id=\"c26c12f1adf71fdbf592086dc4e017e6\"><span data-lake-id=\"uf1bc8166\" id=\"uf1bc8166\">线程是进程中的更小单位，描述了执行一段指令所需的时间。</span></li></ul><p data-lake-id=\"c177fff28ee2704b7b8416b0252234e2\" id=\"c177fff28ee2704b7b8416b0252234e2\"><br></p><p data-lake-id=\"6aa97a4c7c1a8feccfe4c1633be4e25d\" id=\"6aa97a4c7c1a8feccfe4c1633be4e25d\"><strong><span data-lake-id=\"u7a8cf5e9\" id=\"u7a8cf5e9\">进程是资源分配的最小单位，线程是CPU调度的最小单位。</span></strong></p><p data-lake-id=\"883da96c22973d09cc79743aac3814c5\" id=\"883da96c22973d09cc79743aac3814c5\"><br></p><p data-lake-id=\"b9c8887c0d7a48e3469e6625bc1db840\" id=\"b9c8887c0d7a48e3469e6625bc1db840\"><span data-lake-id=\"u320a4985\" id=\"u320a4985\">一个进程就是一个程序的运行实例。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫</span><strong><span data-lake-id=\"ua4a6f46f\" id=\"ua4a6f46f\">进程</span></strong><span data-lake-id=\"ufe92608c\" id=\"ufe92608c\">。</span><strong><span data-lake-id=\"u251e0f18\" id=\"u251e0f18\">进程是运行在虚拟内存上的，虚拟内存是用来解决用户对硬件资源的无限需求和有限的硬件资源之间的矛盾的。从操作系统角度来看，虚拟内存即交换文件；从处理器角度看，虚拟内存即虚拟地址空间。</span></strong></p><p data-lake-id=\"23e0fce5fccee11189683063c213bbae\" id=\"23e0fce5fccee11189683063c213bbae\"><br></p><p data-lake-id=\"875574d00841f13b8cf7d6dd650d1882\" id=\"875574d00841f13b8cf7d6dd650d1882\"><span data-lake-id=\"ud570dfe9\" id=\"ud570dfe9\">如果程序很多时，内存可能会不够，操作系统为每个进程提供一套独立的虚拟地址空间，从而使得同一块物理内存在不同的进程中可以对应到不同或相同的虚拟地址，变相的增加了程序可以使用的内存。</span></p><p data-lake-id=\"66a177a90457594d2fba98dd63948c24\" id=\"66a177a90457594d2fba98dd63948c24\"><br></p><p data-lake-id=\"1794b93bd02913eebf82e8dec170d452\" id=\"1794b93bd02913eebf82e8dec170d452\"><span data-lake-id=\"u80fc0887\" id=\"u80fc0887\">进程和线程之间的关系有以下四个特点：</span></p><p data-lake-id=\"7de127d03c08e3f8582f4124421fff95\" id=\"7de127d03c08e3f8582f4124421fff95\"><strong><span data-lake-id=\"u8a56a134\" id=\"u8a56a134\">（1）进程中的任意一线程执行出错，都会导致整个进程的崩溃。</span></strong></p><p data-lake-id=\"b617a81c714349ddf61ec7c7e3fcc36d\" id=\"b617a81c714349ddf61ec7c7e3fcc36d\"><strong><span data-lake-id=\"u0a4c66c4\" id=\"u0a4c66c4\">（2）线程之间共享进程中的数据。</span></strong></p><p data-lake-id=\"7f5b67bfe1f9d1a2d6358bdf3c4c1301\" id=\"7f5b67bfe1f9d1a2d6358bdf3c4c1301\"><strong><span data-lake-id=\"u8706d57d\" id=\"u8706d57d\">（3）当一个进程关闭之后，操作系统会回收进程所占用的内存，</span></strong><span data-lake-id=\"u979a430c\" id=\"u979a430c\">当一个进程退出时，操作系统会回收该进程所申请的所有资源；即使其中任意线程因为操作不当导致内存泄漏，当进程退出时，这些内存也会被正确回收。</span></p><p data-lake-id=\"9cb5a623ad5f887f97aba28f5f885447\" id=\"9cb5a623ad5f887f97aba28f5f885447\"><strong><span data-lake-id=\"uebc01842\" id=\"uebc01842\">（4）进程之间的内容相互隔离。</span></strong><span data-lake-id=\"u0a2d39d3\" id=\"u0a2d39d3\">进程隔离就是为了使操作系统中的进程互不干扰，每一个进程只能访问自己占有的数据，也就避免出现进程 A 写入数据到进程 B 的情况。正是因为进程之间的数据是严格隔离的，所以一个进程如果崩溃了，或者挂起了，是不会影响到其他进程的。如果进程之间需要进行数据的通信，这时候，就需要使用用于进程间通信的机制了。</span></p><p data-lake-id=\"bd72c664b1e9596d2324523cc89ca4b2\" id=\"bd72c664b1e9596d2324523cc89ca4b2\"><br></p><p data-lake-id=\"7128030678b5d7592fbc79e6feb12221\" id=\"7128030678b5d7592fbc79e6feb12221\"><strong><span data-lake-id=\"u783b54cb\" id=\"u783b54cb\">Chrome浏览器的架构图</span></strong><span data-lake-id=\"ua805725d\" id=\"ua805725d\">：</span></p><p data-lake-id=\"51bacb9565f562088067d689ba36c117\" id=\"51bacb9565f562088067d689ba36c117\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1603803289911-191cabf3-e7e2-4354-a83d-858668cc116f.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A346%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1142%2C%22originHeight%22%3A494%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23faf9f9%22%2C%22id%22%3A%22iPHYC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"c749d159a00694c1836152352569b2d9\" id=\"c749d159a00694c1836152352569b2d9\"><span data-lake-id=\"ubcf42770\" id=\"ubcf42770\">从图中可以看出，最新的 Chrome 浏览器包括：</span></p><ul list=\"u38adbf43\"><li fid=\"u06c26624\" data-lake-id=\"49a662589c2064fb726e3ff14d62c341\" id=\"49a662589c2064fb726e3ff14d62c341\"><span data-lake-id=\"u85072b63\" id=\"u85072b63\">1 个浏览器主进程</span></li><li fid=\"u06c26624\" data-lake-id=\"c1f01606cb8e32b7f4ac5a23dc4abc9a\" id=\"c1f01606cb8e32b7f4ac5a23dc4abc9a\"><span data-lake-id=\"u3873759f\" id=\"u3873759f\">1 个 GPU 进程</span></li><li fid=\"u06c26624\" data-lake-id=\"74afca5b12cf0c6ade08425d15eee5ac\" id=\"74afca5b12cf0c6ade08425d15eee5ac\"><span data-lake-id=\"u0b99797e\" id=\"u0b99797e\">1 个网络进程</span></li><li fid=\"u06c26624\" data-lake-id=\"774699e8e490fe223fbd7ca45b7f624c\" id=\"774699e8e490fe223fbd7ca45b7f624c\"><span data-lake-id=\"u0084932f\" id=\"u0084932f\">多个渲染进程</span></li><li fid=\"u06c26624\" data-lake-id=\"b1d7880d67dc25331b4243af33b407c3\" id=\"b1d7880d67dc25331b4243af33b407c3\"><span data-lake-id=\"u60698388\" id=\"u60698388\">多个插件进程</span></li></ul><p data-lake-id=\"f42f18f20e255a1a0c8711c8feb1147e\" id=\"f42f18f20e255a1a0c8711c8feb1147e\"><br></p><p data-lake-id=\"f179393617e93e4e89ad13bec9410f17\" id=\"f179393617e93e4e89ad13bec9410f17\"><span data-lake-id=\"uf06e6771\" id=\"uf06e6771\">这些进程的功能：</span></p><ul list=\"ue5c01bd2\"><li fid=\"u2904646d\" data-lake-id=\"09eb3d1c6cfc01afa6c6d0db69f2cd15\" id=\"09eb3d1c6cfc01afa6c6d0db69f2cd15\"><strong><span data-lake-id=\"u068136fc\" id=\"u068136fc\">浏览器进程</span></strong><span data-lake-id=\"ufd28144c\" id=\"ufd28144c\">：主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</span></li><li fid=\"u2904646d\" data-lake-id=\"873d1a0d2b511922ec0691341a13ac9b\" id=\"873d1a0d2b511922ec0691341a13ac9b\"><strong><span data-lake-id=\"u3831fd7e\" id=\"u3831fd7e\">渲染进程</span></strong><span data-lake-id=\"u16b5e00a\" id=\"u16b5e00a\">：核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</span></li><li fid=\"u2904646d\" data-lake-id=\"b51701bade5de6e346e62e3d85a4c0b6\" id=\"b51701bade5de6e346e62e3d85a4c0b6\"><strong><span data-lake-id=\"udd18b627\" id=\"udd18b627\">GPU 进程</span></strong><span data-lake-id=\"u77fed029\" id=\"u77fed029\">：其实， GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</span></li><li fid=\"u2904646d\" data-lake-id=\"dee1fb673064021e9dd6f35588a444b0\" id=\"dee1fb673064021e9dd6f35588a444b0\"><strong><span data-lake-id=\"u60f5ae1a\" id=\"u60f5ae1a\">网络进程</span></strong><span data-lake-id=\"u09d9df3f\" id=\"u09d9df3f\">：主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</span></li><li fid=\"u2904646d\" data-lake-id=\"69222f98fd1cdf52602226e7a9ea7208\" id=\"69222f98fd1cdf52602226e7a9ea7208\"><strong><span data-lake-id=\"u3ad98940\" id=\"u3ad98940\">插件进程</span></strong><span data-lake-id=\"ua3ab61f7\" id=\"ua3ab61f7\">：主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</span></li></ul><p data-lake-id=\"6f049986a673d7339c443586657c980d\" id=\"6f049986a673d7339c443586657c980d\"><br></p><p data-lake-id=\"7c394e87ac461137908d5b32722a4d5b\" id=\"7c394e87ac461137908d5b32722a4d5b\"><span data-lake-id=\"u7ba01411\" id=\"u7ba01411\">所以，</span><strong><span data-lake-id=\"u6d06255e\" id=\"u6d06255e\">打开一个网页，最少需要四个进程</span></strong><span data-lake-id=\"u5aecbf76\" id=\"u5aecbf76\">：1 个网络进程、1 个浏览器进程、1 个 GPU 进程以及 1 个渲染进程。如果打开的页面有运行插件的话，还需要再加上 1 个插件进程。</span></p><p data-lake-id=\"63689fa275bb17be4ad96497b5a675f2\" id=\"63689fa275bb17be4ad96497b5a675f2\"><br></p><p data-lake-id=\"b20b3cfd1953ecdb2ed46dbc393effff\" id=\"b20b3cfd1953ecdb2ed46dbc393effff\"><span data-lake-id=\"u0fbdff28\" id=\"u0fbdff28\">虽然多进程模型提升了浏览器的稳定性、流畅性和安全性，但同样不可避免地带来了一些问题：</span></p><ul list=\"u33dcf232\"><li fid=\"u01c2bf70\" data-lake-id=\"7c231331af586d1742aa1744e4709839\" id=\"7c231331af586d1742aa1744e4709839\"><strong><span data-lake-id=\"u6b36a7b6\" id=\"u6b36a7b6\">更高的资源占用</span></strong><span data-lake-id=\"ue78ee478\" id=\"ue78ee478\">：因为每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。</span></li><li fid=\"u01c2bf70\" data-lake-id=\"b6e9a04452c9c40015a723bae2d9da1d\" id=\"b6e9a04452c9c40015a723bae2d9da1d\"><strong><span data-lake-id=\"u547af6d4\" id=\"u547af6d4\">更复杂的体系架构</span></strong><span data-lake-id=\"ue2b75eb1\" id=\"ue2b75eb1\">：浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。</span></li></ul><h3 data-lake-id=\"4bd4a97006b8458bb09a318fea71bd4c\" id=\"4bd4a97006b8458bb09a318fea71bd4c\"><span data-lake-id=\"u34b4ab8a\" id=\"u34b4ab8a\">2. 进程和线程的区别</span></h3><ul list=\"u27977c03\"><li fid=\"u7b40b2f3\" data-lake-id=\"a26c3e79d58f026baa39b5e1444157c5\" id=\"a26c3e79d58f026baa39b5e1444157c5\"><span data-lake-id=\"u3eacc6cf\" id=\"u3eacc6cf\">进程可以看做独立应用，线程不能</span></li><li fid=\"u7b40b2f3\" data-lake-id=\"1c9fe53c8ee583be995bd577ea1bf9ce\" id=\"1c9fe53c8ee583be995bd577ea1bf9ce\"><span data-lake-id=\"u73bc9891\" id=\"u73bc9891\">资源：</span><span data-lake-id=\"ucda228ea\" id=\"ucda228ea\" class=\"lake-fontsize-12\" style=\"color: rgba(0, 0, 0, 0.75)\">进程是cpu资源分配的最小单位（是能拥有资源和独立运行的最小单位）；线程是cpu调度的最小单位（线程是建立在进程的基础上的一次程序运行单位，一个进程中可以有多个线程）。</span></li><li fid=\"u7b40b2f3\" data-lake-id=\"0fbc8d5410fbce71eb64d337867872e3\" id=\"0fbc8d5410fbce71eb64d337867872e3\"><span data-lake-id=\"uc3ff5d88\" id=\"uc3ff5d88\">通信方面：线程间可以通过直接共享同一进程中的资源，而进程通信需要借助 进程间通信。</span></li><li fid=\"u7b40b2f3\" data-lake-id=\"52b35ec81eb08b0fc0e62b40c27fac2a\" id=\"52b35ec81eb08b0fc0e62b40c27fac2a\"><span data-lake-id=\"ucdb07da5\" id=\"ucdb07da5\">调度：进程切换比线程切换的开销要大。线程是CPU调度的基本单位，线程的切换不会引起进程切换，但某个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</span></li><li fid=\"u7b40b2f3\" data-lake-id=\"fbe266a4543bc9f40ee2e8900b7b06d3\" id=\"fbe266a4543bc9f40ee2e8900b7b06d3\"><span data-lake-id=\"u250be3aa\" id=\"u250be3aa\">系统开销：由于创建或撤销进程时，系统都要为之分配或回收资源，如内存、I/O 等，其开销远大于创建或撤销线程时的开销。同理，在进行进程切换时，涉及当前执行进程 CPU 环境还有各种各样状态的保存及新调度进程状态的设置，而线程切换时只需保存和设置少量寄存器内容，开销较小。</span></li></ul><h3 data-lake-id=\"be1b9d4b73ec4d8faea59661ee26a2cb\" id=\"be1b9d4b73ec4d8faea59661ee26a2cb\"><span data-lake-id=\"u0a05a033\" id=\"u0a05a033\">3. 浏览器渲染进程的线程有哪些</span></h3><p data-lake-id=\"521f30dcf6ee493bfd0e417d947e2e85\" id=\"521f30dcf6ee493bfd0e417d947e2e85\"><span data-lake-id=\"u5930eed0\" id=\"u5930eed0\">浏览器的渲染进程的线程总共有五种：</span></p><p data-lake-id=\"5cef40f51d17e8f5d5569771f36ac0d4\" id=\"5cef40f51d17e8f5d5569771f36ac0d4\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1603803289922-6462f252-aa33-4cf6-b541-d8bc2e285125.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A428%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A854%2C%22originHeight%22%3A457%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23c5ddb6%22%2C%22id%22%3A%22NeQsQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"130111944f995399130abb704fe32537\" id=\"130111944f995399130abb704fe32537\"><strong><span data-lake-id=\"ude3e0979\" id=\"ude3e0979\">（1）GUI渲染线程</span></strong></p><p data-lake-id=\"fc5c8779be664893cce2980cf19c6e7a\" id=\"fc5c8779be664893cce2980cf19c6e7a\"><span data-lake-id=\"ub4866569\" id=\"ub4866569\">负责渲染浏览器页面，解析HTML、CSS，构建DOM树、构建CSSOM树、构建渲染树和绘制页面；当界面需要</span><strong><span data-lake-id=\"ud53c9e7f\" id=\"ud53c9e7f\">重绘</span></strong><span data-lake-id=\"ud6ba5f7b\" id=\"ud6ba5f7b\">或由于某种操作引发</span><strong><span data-lake-id=\"ub48ecfaf\" id=\"ub48ecfaf\">回流</span></strong><span data-lake-id=\"ub0948f62\" id=\"ub0948f62\">时，该线程就会执行。</span></p><p data-lake-id=\"3c32463e8d1c55c1a6bd717864c5ecc6\" id=\"3c32463e8d1c55c1a6bd717864c5ecc6\"><br></p><p data-lake-id=\"300b86475594bafa91d67c98286315fa\" id=\"300b86475594bafa91d67c98286315fa\"><span data-lake-id=\"u7e424a39\" id=\"u7e424a39\">注意：GUI渲染线程和JS引擎线程是互斥的，当JS引擎执行时GUI线程会被挂起，GUI更新会被保存在一个队列中等到JS引擎空闲时立即被执行。</span></p><p data-lake-id=\"7ea2d46989dcc51cbc497128d888f33c\" id=\"7ea2d46989dcc51cbc497128d888f33c\"><br></p><p data-lake-id=\"52ca201c72981521db530d9f97217bec\" id=\"52ca201c72981521db530d9f97217bec\"><strong><span data-lake-id=\"u6fc15f2a\" id=\"u6fc15f2a\">（2）JS引擎线程</span></strong></p><p data-lake-id=\"dd05fbb84a47395e7dcbda277796e865\" id=\"dd05fbb84a47395e7dcbda277796e865\"><span data-lake-id=\"u92c045a2\" id=\"u92c045a2\">JS引擎线程也称为JS内核，负责处理Javascript脚本程序，解析Javascript脚本，运行代码；JS引擎线程一直等待着任务队列中任务的到来，然后加以处理，一个Tab页中无论什么时候都只有一个JS引擎线程在运行JS程序；</span></p><p data-lake-id=\"5eba84039c0da416fa1717b463728b06\" id=\"5eba84039c0da416fa1717b463728b06\"><br></p><p data-lake-id=\"7498fd87021a45b9c2242723d0e42fdc\" id=\"7498fd87021a45b9c2242723d0e42fdc\"><span data-lake-id=\"u4104a16f\" id=\"u4104a16f\">注意：GUI渲染线程与JS引擎线程的互斥关系，所以如果JS执行的时间过长，会造成页面的渲染不连贯，导致页面渲染加载阻塞。</span></p><p data-lake-id=\"71a0562b3a871be29ddd8832b0292a02\" id=\"71a0562b3a871be29ddd8832b0292a02\"><br></p><p data-lake-id=\"2b99c8fda38ed7569c213a19d3ee302a\" id=\"2b99c8fda38ed7569c213a19d3ee302a\"><strong><span data-lake-id=\"ue19d272a\" id=\"ue19d272a\">（3）时间触发线程</span></strong></p><p data-lake-id=\"e25c511fbffdabab8d97c2474afb3f20\" id=\"e25c511fbffdabab8d97c2474afb3f20\"><strong><span data-lake-id=\"u5998f820\" id=\"u5998f820\">时间触发线程</span></strong><span data-lake-id=\"u8ada8416\" id=\"u8ada8416\">属于浏览器而不是JS引擎，用来控制事件循环；当JS引擎执行代码块如setTimeOut时（也可是来自浏览器内核的其他线程,如鼠标点击、AJAX异步请求等），会将对应任务添加到事件触发线程中；当对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理；</span></p><p data-lake-id=\"4f2fa53cbef766a6915ce1a530e062a5\" id=\"4f2fa53cbef766a6915ce1a530e062a5\"><br></p><p data-lake-id=\"2ae1e05e4af93a5acb781991d4dc95f2\" id=\"2ae1e05e4af93a5acb781991d4dc95f2\"><span data-lake-id=\"u703690e5\" id=\"u703690e5\">注意：由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）；</span></p><p data-lake-id=\"7cfd3b5e4e4b84bc41581645c172a8b7\" id=\"7cfd3b5e4e4b84bc41581645c172a8b7\"><br></p><p data-lake-id=\"081bb1c88a8f1cdd89968eb946dd0522\" id=\"081bb1c88a8f1cdd89968eb946dd0522\"><strong><span data-lake-id=\"ud82baca3\" id=\"ud82baca3\">（4）定时器触发进程</span></strong></p><p data-lake-id=\"f5c057ed995a21fc572f928494412d9e\" id=\"f5c057ed995a21fc572f928494412d9e\"><strong><span data-lake-id=\"u473d70ce\" id=\"u473d70ce\">定时器触发进程</span></strong><span data-lake-id=\"ua736793e\" id=\"ua736793e\">即setInterval与setTimeout所在线程；浏览器定时计数器并不是由JS引擎计数的，因为JS引擎是单线程的，如果处于阻塞线程状态就会影响记计时的准确性；因此使用单独线程来计时并触发定时器，计时完毕后，添加到事件队列中，等待JS引擎空闲后执行，所以定时器中的任务在设定的时间点不一定能够准时执行，定时器只是在指定时间点将任务添加到事件队列中；</span></p><p data-lake-id=\"84e695cee20c173bee565f9ebf1e0030\" id=\"84e695cee20c173bee565f9ebf1e0030\"><br></p><p data-lake-id=\"ea2bc09ce9fc0e9891dd52e5a11a5024\" id=\"ea2bc09ce9fc0e9891dd52e5a11a5024\"><span data-lake-id=\"u6267dce8\" id=\"u6267dce8\">注意：W3C在HTML标准中规定，定时器的定时时间不能小于4ms，如果是小于4ms，则默认为4ms。</span></p><p data-lake-id=\"e43d5e294ba9c618b9ea86fdc604b615\" id=\"e43d5e294ba9c618b9ea86fdc604b615\"><br></p><p data-lake-id=\"7946a5b8aa41a6b99c534e84383d4b63\" id=\"7946a5b8aa41a6b99c534e84383d4b63\"><strong><span data-lake-id=\"u329f4a0b\" id=\"u329f4a0b\">（5）异步http请求线程</span></strong></p><ul list=\"uf7a56394\"><li fid=\"u0db90f86\" data-lake-id=\"a577c774f30d9b18e641d8b93acb33e5\" id=\"a577c774f30d9b18e641d8b93acb33e5\"><span data-lake-id=\"uf6bff3c1\" id=\"uf6bff3c1\">XMLHttpRequest连接后通过浏览器新开一个线程请求；</span></li><li fid=\"u0db90f86\" data-lake-id=\"0d30cf50728fefadf436daa2f8cc82ba\" id=\"0d30cf50728fefadf436daa2f8cc82ba\"><span data-lake-id=\"u6063cd64\" id=\"u6063cd64\">检测到状态变更时，如果设置有回调函数，异步线程就产生状态变更事件，将回调函数放入事件队列中，等待JS引擎空闲后执行；</span></li></ul><h3 data-lake-id=\"a91dbcc8bafe18db180291486efa6f2f\" id=\"a91dbcc8bafe18db180291486efa6f2f\"><span data-lake-id=\"u780fb51a\" id=\"u780fb51a\">4. 进程之前的通信方式</span></h3><p data-lake-id=\"a23b91ffbac2d3b220d63c4620fe8a1f\" id=\"a23b91ffbac2d3b220d63c4620fe8a1f\"><strong><span data-lake-id=\"u5fdbdde1\" id=\"u5fdbdde1\">（1）管道通信</span></strong></p><p data-lake-id=\"043dc199e44dd47f8b34afe618793f55\" id=\"043dc199e44dd47f8b34afe618793f55\"><span data-lake-id=\"u19909e8a\" id=\"u19909e8a\">管道是一种最基本的进程间通信机制。</span><strong><span data-lake-id=\"u746b5755\" id=\"u746b5755\">管道就是操作系统在内核中开辟的一段缓冲区，进程1可以将需要交互的数据拷贝到这段缓冲区，进程2就可以读取了。</span></strong></p><p data-lake-id=\"fa6a4ffa526f1bd5839374e1d6b6776c\" id=\"fa6a4ffa526f1bd5839374e1d6b6776c\"><br></p><p data-lake-id=\"fb4e726c1b56c312a9119d3d26dfb9c6\" id=\"fb4e726c1b56c312a9119d3d26dfb9c6\"><span data-lake-id=\"u564f926d\" id=\"u564f926d\">管道的特点：</span></p><ul list=\"u964d23e6\"><li fid=\"ua035c636\" data-lake-id=\"d2eb812d836fe4064ba4dba8b6d9b7ae\" id=\"d2eb812d836fe4064ba4dba8b6d9b7ae\"><span data-lake-id=\"u032fd8e9\" id=\"u032fd8e9\">只能单向通信</span></li><li fid=\"ua035c636\" data-lake-id=\"cbfcf66fc5f02dc9ff1cc8795347f03d\" id=\"cbfcf66fc5f02dc9ff1cc8795347f03d\"><span data-lake-id=\"u99ca0a8a\" id=\"u99ca0a8a\">只能血缘关系的进程进行通信</span></li><li fid=\"ua035c636\" data-lake-id=\"2d461c8f5222bc1c09b340e969a9b236\" id=\"2d461c8f5222bc1c09b340e969a9b236\"><span data-lake-id=\"u8f1b8de0\" id=\"u8f1b8de0\">依赖于文件系统</span></li><li fid=\"ua035c636\" data-lake-id=\"e69cbc60c1e89e37caa06a7fb2e764ff\" id=\"e69cbc60c1e89e37caa06a7fb2e764ff\"><span data-lake-id=\"u2818dd1a\" id=\"u2818dd1a\">生命周期随进程</span></li><li fid=\"ua035c636\" data-lake-id=\"be2869f4e05df6ed3049d3b0756e0693\" id=\"be2869f4e05df6ed3049d3b0756e0693\"><span data-lake-id=\"ue4d53546\" id=\"ue4d53546\">面向字节流的服务</span></li><li fid=\"ua035c636\" data-lake-id=\"7e4cb80d79eac638e9e5398398ffcc91\" id=\"7e4cb80d79eac638e9e5398398ffcc91\"><span data-lake-id=\"u13c7f8e6\" id=\"u13c7f8e6\">管道内部提供了同步机制</span></li></ul><p data-lake-id=\"35b91682f06c0c25ce30d4be322c1648\" id=\"35b91682f06c0c25ce30d4be322c1648\"><strong><span data-lake-id=\"u740ef6a1\" id=\"u740ef6a1\">（2）消息队列通信</span></strong></p><p data-lake-id=\"cde8a88d843ac528210381cdc88cdaab\" id=\"cde8a88d843ac528210381cdc88cdaab\"><span data-lake-id=\"u5119c69b\" id=\"u5119c69b\" style=\"color: #4D4D4D\">消息队列就是一个消息的列表。用户可以在消息队列中添加消息、读取消息等。</span><span data-lake-id=\"u6a2c6a23\" id=\"u6a2c6a23\">消息队列提供了一种从一个进程向另一个进程发送一个数据块的方法。 每个数据块都被认为含有一个类型，接收进程可以独立地接收含有不同类型的数据结构。可以通过发送消息来避免命名管道的同步和阻塞问题。但是消息队列与命名管道一样，每个数据块都有一个最大长度的限制。</span></p><p data-lake-id=\"8d9c778cfefd52607e83ebb3984adc76\" id=\"8d9c778cfefd52607e83ebb3984adc76\"><br></p><p data-lake-id=\"99f8f81831ca6a373982944f8cc9ef2c\" id=\"99f8f81831ca6a373982944f8cc9ef2c\"><span data-lake-id=\"u29b0eccc\" id=\"u29b0eccc\">使用消息队列进行进程间通信，可能会收到数据块最大长度的限制约束等，这也是这种通信方式的缺点。如果频繁的发生进程间的通信行为，那么进程需要频繁地读取队列中的数据到内存，相当于间接地从一个进程拷贝到另一个进程，这需要花费时间。</span></p><p data-lake-id=\"0b3d9636688c763da001b198babeac42\" id=\"0b3d9636688c763da001b198babeac42\"><strong><span data-lake-id=\"ub1fcf8ad\" id=\"ub1fcf8ad\">（3）信号量通信</span></strong></p><p data-lake-id=\"b72b298c09a4985642df98780ab49bca\" id=\"b72b298c09a4985642df98780ab49bca\"><span data-lake-id=\"u76ac6d11\" id=\"u76ac6d11\">共享内存最大的问题就是多进程竞争内存的问题，就像类似于线程安全问题。我们可以使用信号量来解决这个问题。信号量的本质就是一个计数器，用来实现进程之间的互斥与同步。例如信号量的初始值是 1，然后 a 进程来访问内存1的时候，我们就把信号量的值设为 0，然后进程b 也要来访问内存1的时候，看到信号量的值为 0 就知道已经有进程在访问内存1了，这个时候进程 b 就会访问不了内存1。所以说，信号量也是进程之间的一种通信方式。</span></p><p data-lake-id=\"86b02a8a4fea8be91f66a4b217176f3c\" id=\"86b02a8a4fea8be91f66a4b217176f3c\"><strong><span data-lake-id=\"u1cefce43\" id=\"u1cefce43\">（4）信号通信</span></strong></p><p data-lake-id=\"ef31bcd90a4dd712922cdb4b2ca58f0e\" id=\"ef31bcd90a4dd712922cdb4b2ca58f0e\"><span data-lake-id=\"u161ab613\" id=\"u161ab613\" class=\"lake-fontsize-11\" style=\"color: #333333\">信号（Signals ）是Unix系统中使用的最古老的进程间通信的方法之一。操作系统通过信号来通知进程系统中发生了某种预先规定好的事件（一组事件中的一个），它也是用户进程之间通信和同步的一种原始机制。</span></p><p data-lake-id=\"edcf6978bb1e747af87c5c1197b67dbe\" id=\"edcf6978bb1e747af87c5c1197b67dbe\"><strong><span data-lake-id=\"u257e4cbc\" id=\"u257e4cbc\">（5）共享内存通信</span></strong></p><p data-lake-id=\"27c66bac89fbf9814d19ddc4b60581e5\" id=\"27c66bac89fbf9814d19ddc4b60581e5\"><span data-lake-id=\"ub089b4a4\" id=\"ub089b4a4\" class=\"lake-fontsize-11\" style=\"color: #333333\">共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问（使多个进程可以访问同一块内存空间）。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量，配合使用，来实现进程间的同步和通信。</span></p><p data-lake-id=\"0e16b9f92f13c46553b3ce66da0ef109\" id=\"0e16b9f92f13c46553b3ce66da0ef109\"><strong><span data-lake-id=\"ua70a1d29\" id=\"ua70a1d29\">（6）套接字通信</span></strong></p><p data-lake-id=\"24e0166e7af61e54849723297c3b11d0\" id=\"24e0166e7af61e54849723297c3b11d0\"><span data-lake-id=\"u65df042f\" id=\"u65df042f\">上面我们说的共享内存、管道、信号量、消息队列，他们都是多个进程在一台主机之间的通信，那两个相隔几千里的进程能够进行通信吗？答是必须的，这个时候 Socket 这家伙就派上用场了，例如我们平时通过浏览器发起一个 http 请求，然后服务器给你返回对应的数据，这种就是采用 Socket 的通信方式了。</span></p><h3 data-lake-id=\"85228cf5121a318c4b129f0449be36a1\" id=\"85228cf5121a318c4b129f0449be36a1\"><span data-lake-id=\"ub8515b02\" id=\"ub8515b02\">5. 僵尸进程和孤儿进程是什么？</span></h3><ul list=\"ubf6eeeeb\"><li fid=\"ua287da9d\" data-lake-id=\"d5d1371d26a0844f25afec0095e6e6b5\" id=\"d5d1371d26a0844f25afec0095e6e6b5\"><strong><span data-lake-id=\"u0aa8949d\" id=\"u0aa8949d\">孤儿进程</span></strong><span data-lake-id=\"u3fdee39d\" id=\"u3fdee39d\">：父进程退出了，而它的一个或多个进程还在运行，那这些子进程都会成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。</span></li><li fid=\"ua287da9d\" data-lake-id=\"2dfd4911076f82ec799265586df7a024\" id=\"2dfd4911076f82ec799265586df7a024\"><strong><span data-lake-id=\"u060d20da\" id=\"u060d20da\">僵尸进程</span></strong><span data-lake-id=\"u264c834e\" id=\"u264c834e\">：子进程比父进程先结束，而父进程又没有释放子进程占用的资源，那么子进程的进程描述符仍然保存在系统中，这种进程称之为僵死进程。</span></li></ul><h3 data-lake-id=\"dda6b57476fcc1d8b7dbadd422b7aeaa\" id=\"dda6b57476fcc1d8b7dbadd422b7aeaa\"><span data-lake-id=\"u68896a51\" id=\"u68896a51\">6. 死锁产生的原因？ 如果解决死锁的问题？</span></h3><p data-lake-id=\"008a1e610a6ab3add7cbbb05a8ac72b1\" id=\"008a1e610a6ab3add7cbbb05a8ac72b1\"><span data-lake-id=\"u19b3b91c\" id=\"u19b3b91c\">所谓死锁，是指多个进程在运行过程中因争夺资源而造成的一种僵局，当进程处于这种僵持状态时，若无外力作用，它们都将无法再向前推进。</span></p><p data-lake-id=\"9cccf75e13b4209254db9ec67a2f0fb2\" id=\"9cccf75e13b4209254db9ec67a2f0fb2\"><br></p><p data-lake-id=\"8138c74fd38d0644cd6c77673e535b24\" id=\"8138c74fd38d0644cd6c77673e535b24\"><span data-lake-id=\"u05a91da8\" id=\"u05a91da8\">系统中的资源可以分为两类：</span></p><ul list=\"u8e0afd5b\"><li fid=\"uf5208ac4\" data-lake-id=\"c5c3fc741d4919273d1460733dfc6786\" id=\"c5c3fc741d4919273d1460733dfc6786\"><span data-lake-id=\"u5c5457ea\" id=\"u5c5457ea\">可剥夺资源，是指某进程在获得这类资源后，该资源可以再被其他进程或系统剥夺，CPU和主存均属于可剥夺性资源；</span></li><li fid=\"uf5208ac4\" data-lake-id=\"585afbc131d3108a1b8222bee3b8f741\" id=\"585afbc131d3108a1b8222bee3b8f741\"><span data-lake-id=\"u351367a0\" id=\"u351367a0\">不可剥夺资源，当系统把这类资源分配给某进程后，再不能强行收回，只能在进程用完后自行释放，如磁带机、打印机等。</span></li></ul><p data-lake-id=\"1b8745cb2f07cbff9ea075e5e7ad606f\" id=\"1b8745cb2f07cbff9ea075e5e7ad606f\"><br></p><p data-lake-id=\"4aeff3a9837ac1906705eaa99c153e68\" id=\"4aeff3a9837ac1906705eaa99c153e68\"><strong><span data-lake-id=\"uf403d2f5\" id=\"uf403d2f5\">产生死锁的原因：</span></strong></p><p data-lake-id=\"6e38d4ef81630b0e4c0463c9465c99d5\" id=\"6e38d4ef81630b0e4c0463c9465c99d5\"><strong><span data-lake-id=\"u83ee49f6\" id=\"u83ee49f6\">（1）竞争资源</span></strong></p><ul list=\"u8968c286\"><li fid=\"uc4a227d4\" data-lake-id=\"f7115a94433055fa1838d950e8db373f\" id=\"f7115a94433055fa1838d950e8db373f\"><span data-lake-id=\"u6856d291\" id=\"u6856d291\">产生死锁中的竞争资源之一指的是</span><strong><span data-lake-id=\"u1832304f\" id=\"u1832304f\">竞争不可剥夺资源</span></strong><span data-lake-id=\"uc64105c4\" id=\"uc64105c4\">（例如：系统中只有一台打印机，可供进程P1使用，假定P1已占用了打印机，若P2继续要求打印机打印将阻塞）</span></li><li fid=\"uc4a227d4\" data-lake-id=\"c97ce3bf1f3b1dd22d086481d8858bb6\" id=\"c97ce3bf1f3b1dd22d086481d8858bb6\"><span data-lake-id=\"u6db4e141\" id=\"u6db4e141\">产生死锁中的竞争资源另外一种资源指的是</span><strong><span data-lake-id=\"u9014aada\" id=\"u9014aada\">竞争临时资源</span></strong><span data-lake-id=\"u37b830a2\" id=\"u37b830a2\">（临时资源包括硬件中断、信号、消息、缓冲区内的消息等），通常消息通信顺序进行不当，则会产生死锁</span></li></ul><p data-lake-id=\"bd5f525adf8620046f9edd63e7e94181\" id=\"bd5f525adf8620046f9edd63e7e94181\"><strong><span data-lake-id=\"u9141b1bd\" id=\"u9141b1bd\">（2）进程间推进顺序非法</span></strong></p><p data-lake-id=\"4f0d058baf9a243071aff53269ff079e\" id=\"4f0d058baf9a243071aff53269ff079e\"><span data-lake-id=\"u7cb7150d\" id=\"u7cb7150d\">若P1保持了资源R1，P2保持了资源R2，系统处于不安全状态，因为这两个进程再向前推进，便可能发生死锁。例如，当P1运行到P1：Request（R2）时，将因R2已被P2占用而阻塞；当P2运行到P2：Request（R1）时，也将因R1已被P1占用而阻塞，于是发生进程死锁</span></p><p data-lake-id=\"a23c1cf04cbb90ddb02d3713aa72be40\" id=\"a23c1cf04cbb90ddb02d3713aa72be40\"><br></p><p data-lake-id=\"45bba5b1a4456e3390770d431f0db594\" id=\"45bba5b1a4456e3390770d431f0db594\"><strong><span data-lake-id=\"u600f709a\" id=\"u600f709a\">产生死锁的必要条件：</span></strong></p><ul list=\"u273d4294\"><li fid=\"ud0c20a56\" data-lake-id=\"d5667dd6f6f112e036855a48308bb01c\" id=\"d5667dd6f6f112e036855a48308bb01c\"><span data-lake-id=\"u17c00a97\" id=\"u17c00a97\">互斥条件：进程要求对所分配的资源进行排它性控制，即在一段时间内某资源仅为一进程所占用。</span></li><li fid=\"ud0c20a56\" data-lake-id=\"e2a52317f4dbee95193fcc813afbec69\" id=\"e2a52317f4dbee95193fcc813afbec69\"><span data-lake-id=\"u50de74d0\" id=\"u50de74d0\">请求和保持条件：当进程因请求资源而阻塞时，对已获得的资源保持不放。</span></li><li fid=\"ud0c20a56\" data-lake-id=\"e9faf4808ecdfc3388517e6966a831f2\" id=\"e9faf4808ecdfc3388517e6966a831f2\"><span data-lake-id=\"u9ec5cc97\" id=\"u9ec5cc97\">不剥夺条件：进程已获得的资源在未使用完之前，不能剥夺，只能在使用完时由自己释放。</span></li><li fid=\"ud0c20a56\" data-lake-id=\"fba742c750b0b836da77a8cc8f7cfa2d\" id=\"fba742c750b0b836da77a8cc8f7cfa2d\"><span data-lake-id=\"u55249b51\" id=\"u55249b51\">环路等待条件：在发生死锁时，必然存在一个进程——资源的环形链。</span></li></ul><p data-lake-id=\"2a7a7184ee4de9af033693b64f27d6a2\" id=\"2a7a7184ee4de9af033693b64f27d6a2\"><br></p><p data-lake-id=\"83a617f322655820ecf139dfe0822e03\" id=\"83a617f322655820ecf139dfe0822e03\"><strong><span data-lake-id=\"ud80f5c1f\" id=\"ud80f5c1f\">预防死锁的方法：</span></strong></p><ul list=\"uf0dfe304\"><li fid=\"ubb349d76\" data-lake-id=\"33ac6da90e570505100d14d13ae1a814\" id=\"33ac6da90e570505100d14d13ae1a814\"><span data-lake-id=\"u3b76d76e\" id=\"u3b76d76e\">资源一次性分配：一次性分配所有资源，这样就不会再有请求了（破坏请求条件）</span></li><li fid=\"ubb349d76\" data-lake-id=\"a6c97b5cfe19de859e8f2cd9d87390dd\" id=\"a6c97b5cfe19de859e8f2cd9d87390dd\"><span data-lake-id=\"u2d44604f\" id=\"u2d44604f\">只要有一个资源得不到分配，也不给这个进程分配其他的资源（破坏请保持条件）</span></li><li fid=\"ubb349d76\" data-lake-id=\"7ec7729e153d4f651731ee6d78ba381d\" id=\"7ec7729e153d4f651731ee6d78ba381d\"><span data-lake-id=\"ud5af0fae\" id=\"ud5af0fae\">可剥夺资源：即当某进程获得了部分资源，但得不到其它资源，则释放已占有的资源（破坏不可剥夺条件）</span></li><li fid=\"ubb349d76\" data-lake-id=\"6a1988693d2341c4f68023f7f756e35f\" id=\"6a1988693d2341c4f68023f7f756e35f\"><span data-lake-id=\"u84319a06\" id=\"u84319a06\">资源有序分配法：系统给每类资源赋予一个编号，每一个进程按编号递增的顺序请求资源，释放则相反（破坏环路等待条件）</span></li></ul><h3 data-lake-id=\"760ec2ee60b9e79a194e12280ddb7f8c\" id=\"760ec2ee60b9e79a194e12280ddb7f8c\"><span data-lake-id=\"ud05d7349\" id=\"ud05d7349\">7. 如何实现浏览器内多个标签页之间的通信?</span></h3><p data-lake-id=\"4818631ba4883fc25e60f42238762446\" id=\"4818631ba4883fc25e60f42238762446\"><span data-lake-id=\"ub637386e\" id=\"ub637386e\">实现多个标签页之间的通信，本质上都是通过中介者模式来实现的。因为标签页之间没有办法直接通信，因此我们可以找一个中介者，让标签页和中介者进行通信，然后让这个中介者来进行消息的转发。通信方法如下：</span></p><ul list=\"u366d5724\"><li fid=\"uc1ca0e9b\" data-lake-id=\"7e9c9f4ebae4359723a3ccf8c99487e5\" id=\"7e9c9f4ebae4359723a3ccf8c99487e5\"><strong><span data-lake-id=\"u68a538e4\" id=\"u68a538e4\">使用 websocket 协议</span></strong><span data-lake-id=\"u0a055ed6\" id=\"u0a055ed6\">，因为 websocket 协议可以实现服务器推送，所以服务器就可以用来当做这个中介者。标签页通过向服务器发送数据，然后由服务器向其他标签页推送转发。</span></li><li fid=\"uc1ca0e9b\" data-lake-id=\"6969bdbde533545a45d1d8fa6bb03249\" id=\"6969bdbde533545a45d1d8fa6bb03249\"><strong><span data-lake-id=\"u066d3a95\" id=\"u066d3a95\">使用 ShareWorker 的方式</span></strong><span data-lake-id=\"uae4f926e\" id=\"uae4f926e\">，shareWorker 会在页面存在的生命周期内创建一个唯一的线程，并且开启多个页面也只会使用同一个线程。这个时候共享线程就可以充当中介者的角色。标签页间通过共享一个线程，然后通过这个共享的线程来实现数据的交换。</span></li><li fid=\"uc1ca0e9b\" data-lake-id=\"be5aabd2a7f25e619ee5e2c42e1f92fd\" id=\"be5aabd2a7f25e619ee5e2c42e1f92fd\"><strong><span data-lake-id=\"u52887b74\" id=\"u52887b74\">使</span></strong><strong><span data-lake-id=\"ueb224aab\" id=\"ueb224aab\">用 localStorage 的方式</span></strong><span data-lake-id=\"u41481d74\" id=\"u41481d74\">，我们可以在一个标签页对 localStorage 的变化事件进行监听，然后当另一个标签页修改数据的时候，我们就可以通过这个监听事件来获取到数据。这个时候 localStorage 对象就是充当的中介者的角色。</span></li><li fid=\"uc1ca0e9b\" data-lake-id=\"c1c98a1cba10163636424da242763ae7\" id=\"c1c98a1cba10163636424da242763ae7\"><strong><span data-lake-id=\"u7dab990e\" id=\"u7dab990e\">使用 postMessage 方法</span></strong><span data-lake-id=\"u61535b31\" id=\"u61535b31\">，如果我们能够获得对应标签页的引用，就可以使用postMessage 方法，进行通信。</span></li></ul><h3 data-lake-id=\"3833c1f021551adca9ad413afce16b51\" id=\"3833c1f021551adca9ad413afce16b51\"><span data-lake-id=\"u7641b0e7\" id=\"u7641b0e7\">8. 对Service Worker的理解</span></h3><p data-lake-id=\"1aa4d4e6387e3a9112cf320ad24317fa\" id=\"1aa4d4e6387e3a9112cf320ad24317fa\"><span data-lake-id=\"u19e2434a\" id=\"u19e2434a\">Service Worker 是运行在浏览器背后的</span><strong><span data-lake-id=\"u9a7db67a\" id=\"u9a7db67a\">独立线程</span></strong><span data-lake-id=\"u07dee57c\" id=\"u07dee57c\">，一般可以用来实现缓存功能。使用 Service Worker的话，传输协议必须为 </span><strong><span data-lake-id=\"uf418b7f9\" id=\"uf418b7f9\">HTTPS</span></strong><span data-lake-id=\"ua149eeec\" id=\"ua149eeec\">。因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全。</span></p><p data-lake-id=\"00713914ddca9999233f27c367dfcb7b\" id=\"00713914ddca9999233f27c367dfcb7b\"><br></p><p data-lake-id=\"d6ae4e854c070b54d4fb229e3837a580\" id=\"d6ae4e854c070b54d4fb229e3837a580\"><span data-lake-id=\"u315b74e8\" id=\"u315b74e8\">Service Worker 实现缓存功能一般分为三个步骤：首先需要先注册 Service Worker，然后监听到 </span><code data-lake-id=\"u03eb162e\" id=\"u03eb162e\"><span data-lake-id=\"ua6cb0ee8\" id=\"ua6cb0ee8\">install</span></code><span data-lake-id=\"u6e01188b\" id=\"u6e01188b\"> 事件以后就可以缓存需要的文件，那么在下次用户访问的时候就可以通过拦截请求的方式查询是否存在缓存，存在缓存的话就可以直接读取缓存文件，否则就去请求数据。以下是这个步骤的实现：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20index.js%5Cnif%20(navigator.serviceWorker)%20%7B%5Cn%20%20navigator.serviceWorker%5Cn%20%20%20%20.register('sw.js')%5Cn%20%20%20%20.then(function(registration)%20%7B%5Cn%20%20%20%20%20%20console.log('service%20worker%20%E6%B3%A8%E5%86%8C%E6%88%90%E5%8A%9F')%5Cn%20%20%20%20%7D)%5Cn%20%20%20%20.catch(function(err)%20%7B%5Cn%20%20%20%20%20%20console.log('servcie%20worker%20%E6%B3%A8%E5%86%8C%E5%A4%B1%E8%B4%A5')%5Cn%20%20%20%20%7D)%5Cn%7D%5Cn%2F%2F%20sw.js%5Cn%2F%2F%20%E7%9B%91%E5%90%AC%20%60install%60%20%E4%BA%8B%E4%BB%B6%EF%BC%8C%E5%9B%9E%E8%B0%83%E4%B8%AD%E7%BC%93%E5%AD%98%E6%89%80%E9%9C%80%E6%96%87%E4%BB%B6%5Cnself.addEventListener('install'%2C%20e%20%3D%3E%20%7B%5Cn%20%20e.waitUntil(%5Cn%20%20%20%20caches.open('my-cache').then(function(cache)%20%7B%5Cn%20%20%20%20%20%20return%20cache.addAll(%5B'.%2Findex.html'%2C%20'.%2Findex.js'%5D)%5Cn%20%20%20%20%7D)%5Cn%20%20)%5Cn%7D)%5Cn%2F%2F%20%E6%8B%A6%E6%88%AA%E6%89%80%E6%9C%89%E8%AF%B7%E6%B1%82%E4%BA%8B%E4%BB%B6%5Cn%2F%2F%20%E5%A6%82%E6%9E%9C%E7%BC%93%E5%AD%98%E4%B8%AD%E5%B7%B2%E7%BB%8F%E6%9C%89%E8%AF%B7%E6%B1%82%E7%9A%84%E6%95%B0%E6%8D%AE%E5%B0%B1%E7%9B%B4%E6%8E%A5%E7%94%A8%E7%BC%93%E5%AD%98%EF%BC%8C%E5%90%A6%E5%88%99%E5%8E%BB%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE%5Cnself.addEventListener('fetch'%2C%20e%20%3D%3E%20%7B%5Cn%20%20e.respondWith(%5Cn%20%20%20%20caches.match(e.request).then(function(response)%20%7B%5Cn%20%20%20%20%20%20if%20(response)%20%7B%5Cn%20%20%20%20%20%20%20%20return%20response%5Cn%20%20%20%20%20%20%7D%5Cn%20%20%20%20%20%20console.log('fetch%20source')%5Cn%20%20%20%20%7D)%5Cn%20%20)%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22aK8Fi%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"c7c253ef913c8fe96c1f4cccb9c4149d\" id=\"c7c253ef913c8fe96c1f4cccb9c4149d\"><span data-lake-id=\"u06a46ade\" id=\"u06a46ade\">打开页面，可以在开发者工具中的 </span><code data-lake-id=\"u3ab6de0c\" id=\"u3ab6de0c\"><span data-lake-id=\"u49b443e5\" id=\"u49b443e5\">Application</span></code><span data-lake-id=\"ue7bbafd2\" id=\"ue7bbafd2\"> 看到 Service Worker 已经启动了：</span></p><p data-lake-id=\"518e6a6b5c5c711163d4ed408d8a6720\" id=\"518e6a6b5c5c711163d4ed408d8a6720\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615478097248-5e3c9a93-5683-41de-8787-e87705d31fe1.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A326%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1770%2C%22originHeight%22%3A722%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f7f7f6%22%2C%22id%22%3A%22BwMRa%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"3a830965142dc3c4790a9603030e01a7\" id=\"3a830965142dc3c4790a9603030e01a7\"><span data-lake-id=\"u56754ce2\" id=\"u56754ce2\">在 Cache 中也可以发现所需的文件已被缓存：</span></p><p data-lake-id=\"08dfd27b84f46bd27c5903037eac2ba1\" id=\"08dfd27b84f46bd27c5903037eac2ba1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615477994804-e7eaa2c7-91bf-406d-b024-5add76d37d5e.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A521%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1118%2C%22originHeight%22%3A728%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f4f4f4%22%2C%22id%22%3A%22tzZll%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u92369ea6\" id=\"u92369ea6\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673895332835-2bf4877e-3b46-4c6d-a5f2-b8adcbdc0e3a.png%22%2C%22taskId%22%3A%22ub1552f96-c1e8-4d53-9306-707d3e0badf%22%2C%22clientId%22%3A%22u99f2bd58-2b6a-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u1b8ec131%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"2c65c0ec980f4ff2f8c22ec116716ceb\" id=\"2c65c0ec980f4ff2f8c22ec116716ceb\"><span data-lake-id=\"u975a300f\" id=\"u975a300f\">三、浏览器缓存</span></h2><h3 data-lake-id=\"99c53e61e71d5ec607dba81148bbc602\" id=\"99c53e61e71d5ec607dba81148bbc602\"><span data-lake-id=\"u19901796\" id=\"u19901796\">1. 对浏览器的缓存机制的理解</span></h3><p data-lake-id=\"592ba0985edc52a6585efc3c622d624a\" id=\"592ba0985edc52a6585efc3c622d624a\"><strong><span data-lake-id=\"uc0d16415\" id=\"uc0d16415\" class=\"lake-fontsize-11\" style=\"color: #262626\">浏览器缓存的全过程：</span></strong></p><ul list=\"ue3c96790\"><li fid=\"u149c327e\" data-lake-id=\"589cbf3c37bbf7c2aa1284fbb65b50da\" id=\"589cbf3c37bbf7c2aa1284fbb65b50da\"><span data-lake-id=\"u236796a9\" id=\"u236796a9\">浏览器第一次加载资源，服务器返回 200，浏览器从服务器下载资源文件，并缓存资源文件与 response header，以供下次加载时对比使用；</span></li><li fid=\"u149c327e\" data-lake-id=\"17ba6781e70e9b40c6dde26d593612f9\" id=\"17ba6781e70e9b40c6dde26d593612f9\"><span data-lake-id=\"ua76a1fbf\" id=\"ua76a1fbf\">下一次加载资源时，由于强制缓存优先级较高，先比较当前时间与上一次返回 200 时的时间差，如果没有超过 cache-control 设置的 max-age，则没有过期，并命中强缓存，直接从本地读取资源。如果浏览器不支持HTTP1.1，则使用 expires 头判断是否过期；</span></li><li fid=\"u149c327e\" data-lake-id=\"94263b5330b57996ac5e06cbd5615ba0\" id=\"94263b5330b57996ac5e06cbd5615ba0\"><span data-lake-id=\"u3c7b1e97\" id=\"u3c7b1e97\">如果资源已过期，则表明强制缓存没有被命中，则开始协商缓存，向服务器发送带有 If-None-Match 和 If-Modified-Since 的请求；</span></li><li fid=\"u149c327e\" data-lake-id=\"38f683e3dc9d1bad43753e10ea2ca7be\" id=\"38f683e3dc9d1bad43753e10ea2ca7be\"><span data-lake-id=\"ua1c1353d\" id=\"ua1c1353d\">服务器收到请求后，优先根据 Etag 的值判断被请求的文件有没有做修改，Etag 值一致则没有修改，命中协商缓存，返回 304；如果不一致则有改动，直接返回新的资源文件带上新的 Etag 值并返回 200；</span></li><li fid=\"u149c327e\" data-lake-id=\"8ee03f7ee87e302e3df4a0917574c54e\" id=\"8ee03f7ee87e302e3df4a0917574c54e\"><span data-lake-id=\"uc1e2962a\" id=\"uc1e2962a\">如果服务器收到的请求没有 Etag 值，则将 If-Modified-Since 和被请求文件的最后修改时间做比对，一致则命中协商缓存，返回 304；不一致则返回新的 last-modified 和文件并返回 200；</span></li></ul><p data-lake-id=\"424822f7dfb33c282018b5cf0137e805\" id=\"424822f7dfb33c282018b5cf0137e805\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1618399660902-60a33dae-cedc-4bd0-9a5b-160c5da3f516.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A528%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%9B%BE1.png%22%2C%22size%22%3A78100%2C%22originWidth%22%3A995%2C%22originHeight%22%3A657%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%20%E6%9C%89%E7%BC%93%E5%AD%98%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E5%B8%A6%3AIf-None-Match%20%E6%98%AF%E5%90%A6%E8%BF%87%E6%9C%9F%20%E5%90%A6%20%E6%98%AF%20Etag%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%A4%E6%96%AD%20%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E5%B8%A6%3A%5C%22f-Modifed-Since%20Last-Modined%20%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%20200or304%20200%20304%20%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%20%E4%BB%8E%E7%BC%93%E5%AD%98%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%20%E4%BB%8E%E7%BC%93%E5%AD%98%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%20%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A154.94023%2C%22y%22%3A53.596912%2C%22width%22%3A92.93381%2C%22height%22%3A15.089894000000001%2C%22text%22%3A%22%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A181.74652%2C%22y%22%3A127.62261%2C%22width%22%3A39.968879999999984%2C%22height%22%3A14.859169999999992%2C%22text%22%3A%22%E6%9C%89%E7%BC%93%E5%AD%98%22%7D%2C%7B%22x%22%3A554.5333%2C%22y%22%3A210.01097%2C%22width%22%3A171.05464999999992%2C%22height%22%3A16.144260000000003%2C%22text%22%3A%22%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E5%B8%A6%3AIf-None-Match%22%7D%2C%7B%22x%22%3A174.43672%2C%22y%22%3A210.38524%2C%22width%22%3A54.398679999999985%2C%22height%22%3A15.271029999999996%2C%22text%22%3A%22%E6%98%AF%E5%90%A6%E8%BF%87%E6%9C%9F%22%7D%2C%7B%22x%22%3A298.2564%2C%22y%22%3A212.28041%2C%22width%22%3A16.187299999999993%2C%22height%22%3A13.936290000000014%2C%22text%22%3A%22%E5%90%A6%22%7D%2C%7B%22x%22%3A497.36716%2C%22y%22%3A212.3787%2C%22width%22%3A19.26058999999998%2C%22height%22%3A14.274729999999977%2C%22text%22%3A%22%E6%98%AF%22%7D%2C%7B%22x%22%3A394.01938%2C%22y%22%3A213.04402%2C%22width%22%3A29.631249999999966%2C%22height%22%3A14.479980000000012%2C%22text%22%3A%22Etag%22%7D%2C%7B%22x%22%3A794.18085%2C%22y%22%3A250.86356%2C%22width%22%3A65.96551%2C%22height%22%3A14.481809999999996%2C%22text%22%3A%22%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%A4%E6%96%AD%22%7D%2C%7B%22x%22%3A555.2457%2C%22y%22%3A314.36862%2C%22width%22%3A188.70409999999993%2C%22height%22%3A16.323339999999973%2C%22text%22%3A%22%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%E5%B8%A6%3A%5C%22f-Modifed-Since%22%7D%2C%7B%22x%22%3A365.05038%2C%22y%22%3A316.31952%2C%22width%22%3A87.09826999999996%2C%22height%22%3A11.587080000000014%2C%22text%22%3A%22Last-Modined%22%7D%2C%7B%22x%22%3A356.66672%2C%22y%22%3A408.32343%2C%22width%22%3A105.50047999999998%2C%22height%22%3A16.11291%2C%22text%22%3A%22%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82%22%7D%2C%7B%22x%22%3A792.4697%2C%22y%22%3A416.3024%2C%22width%22%3A69.82315000000006%2C%22height%22%3A12.754330000000039%2C%22text%22%3A%22200or304%22%7D%2C%7B%22x%22%3A606.50165%2C%22y%22%3A452.10193%2C%22width%22%3A26.194849999999974%2C%22height%22%3A13.110569999999996%2C%22text%22%3A%22200%22%7D%2C%7B%22x%22%3A813.56177%2C%22y%22%3A476.47253%2C%22width%22%3A26.98973000000001%2C%22height%22%3A11.868629999999996%2C%22text%22%3A%22304%22%7D%2C%7B%22x%22%3A382.31326%2C%22y%22%3A487.43387%2C%22width%22%3A54.49557999999996%2C%22height%22%3A13.896829999999966%2C%22text%22%3A%22%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%22%7D%2C%7B%22x%22%3A156.70465%2C%22y%22%3A518.84686%2C%22width%22%3A92.03601%2C%22height%22%3A14.097340000000031%2C%22text%22%3A%22%E4%BB%8E%E7%BC%93%E5%AD%98%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A781.7501%2C%22y%22%3A522.91504%2C%22width%22%3A92.44680000000005%2C%22height%22%3A14.268000000000029%2C%22text%22%3A%22%E4%BB%8E%E7%BC%93%E5%AD%98%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%22%7D%2C%7B%22x%22%3A380.66678%2C%22y%22%3A582.5411%2C%22width%22%3A54.98262%2C%22height%22%3A14.516459999999938%2C%22text%22%3A%22%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23d7d6d4%22%2C%22id%22%3A%22vXaw9%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"101c828c8d0d85523b3e14aa23ff4ffb\" id=\"101c828c8d0d85523b3e14aa23ff4ffb\" style=\"text-align: justify\"><span data-lake-id=\"u39fda8b8\" id=\"u39fda8b8\">很多网站的资源后面都加了版本号，这样做的目的是：每次升级了 JS 或 CSS 文件后，为了防止浏览器进行缓存，强制改变版本号，客户端浏览器就会重新下载新的 JS 或 CSS 文件 ，以保证用户能够及时获得网站的最新更新。</span></p><h3 data-lake-id=\"Ih9vo\" id=\"Ih9vo\"><span data-lake-id=\"u8e28dd0e\" id=\"u8e28dd0e\">2. 协商缓存和强缓存的区别</span></h3><h4 data-lake-id=\"5538a99bae95c7f8c4005e6144e59fc6\" id=\"5538a99bae95c7f8c4005e6144e59fc6\"><span data-lake-id=\"u23c44424\" id=\"u23c44424\">（1）强缓存</span></h4><p data-lake-id=\"8f28bfb3aa44eea9eb3e75f6633cfab4\" id=\"8f28bfb3aa44eea9eb3e75f6633cfab4\"><span data-lake-id=\"ua636f2cf\" id=\"ua636f2cf\">使用强缓存策略时，如果缓存资源有效，则直接使用缓存资源，不必再向服务器发起请求。</span></p><p data-lake-id=\"294668a61b160dfcc26b75f4e05f58c4\" id=\"294668a61b160dfcc26b75f4e05f58c4\"><br></p><p data-lake-id=\"0b963d1c897081aa73780c678c1113ce\" id=\"0b963d1c897081aa73780c678c1113ce\"><span data-lake-id=\"uabf6d531\" id=\"uabf6d531\">强缓存策略可以通过两种方式来设置，分别是 http 头信息中的 Expires 属性和 Cache-Control 属性。</span></p><p data-lake-id=\"2326c888c7f90287361a03ee23588a09\" id=\"2326c888c7f90287361a03ee23588a09\"><br></p><p data-lake-id=\"395f00b8fee26ede095d714fc14c48d8\" id=\"395f00b8fee26ede095d714fc14c48d8\"><span data-lake-id=\"u8122d8b8\" id=\"u8122d8b8\">（1）服务器通过在响应头中添加 Expires 属性，来指定资源的过期时间。在过期时间以内，该资源可以被缓存使用，不必再向服务器发送请求。这个时间是一个绝对时间，它是服务器的时间，因此可能存在这样的问题，就是客户端的时间和服务器端的时间不一致，或者用户可以对客户端时间进行修改的情况，这样就可能会影响缓存命中的结果。</span></p><p data-lake-id=\"2081c8d985512634462e47f96a0dd078\" id=\"2081c8d985512634462e47f96a0dd078\"><span data-lake-id=\"u32b5fe2f\" id=\"u32b5fe2f\">（2）Expires 是 http1.0 中的方式，因为它的一些缺点，在 HTTP 1.1 中提出了一个新的头部属性就是 Cache-Control 属性，它提供了对资源的缓存的更精确的控制。它有很多不同的值，</span></p><p data-lake-id=\"7b2309f42cf83f9315ffa93ccdd36f56\" id=\"7b2309f42cf83f9315ffa93ccdd36f56\"><br></p><p data-lake-id=\"31fe6fa36650b865fb4ab2ccf2133011\" id=\"31fe6fa36650b865fb4ab2ccf2133011\"><code data-lake-id=\"u1bab35b5\" id=\"u1bab35b5\"><span data-lake-id=\"ud7a365ea\" id=\"ud7a365ea\">Cache-Control</span></code><span data-lake-id=\"ud63f025c\" id=\"ud63f025c\">可设置的字段：</span></p><ul list=\"ub2a9dd6e\"><li fid=\"u5dd2c9a1\" data-lake-id=\"2300025a28ce4f9cd5c9f832c928ef81\" id=\"2300025a28ce4f9cd5c9f832c928ef81\"><code data-lake-id=\"uceefb4f7\" id=\"uceefb4f7\"><span data-lake-id=\"u3b919930\" id=\"u3b919930\">public</span></code><span data-lake-id=\"u97f892ff\" id=\"u97f892ff\">：设置了该字段值的资源表示可以被任何对象（包括：发送请求的客户端、代理服务器等等）缓存。这个字段值不常用，一般还是使用max-age=来精确控制；</span></li><li fid=\"u5dd2c9a1\" data-lake-id=\"cb32a4e57c0e9d6d8ad866d6d92bff41\" id=\"cb32a4e57c0e9d6d8ad866d6d92bff41\"><code data-lake-id=\"ubfff7f9b\" id=\"ubfff7f9b\"><span data-lake-id=\"u15e81f89\" id=\"u15e81f89\">private</span></code><span data-lake-id=\"u38f0024d\" id=\"u38f0024d\">：设置了该字段值的资源只能被用户浏览器缓存，不允许任何代理服务器缓存。在实际开发当中，对于一些含有用户信息的HTML，通常都要设置这个字段值，避免代理服务器(CDN)缓存；</span></li><li fid=\"u5dd2c9a1\" data-lake-id=\"ffa15cf5d1295124f3b63fd7c587efb4\" id=\"ffa15cf5d1295124f3b63fd7c587efb4\"><code data-lake-id=\"uef7ddd85\" id=\"uef7ddd85\"><span data-lake-id=\"u22fbd11d\" id=\"u22fbd11d\">no-cache</span></code><span data-lake-id=\"u20bbe8c8\" id=\"u20bbe8c8\">：设置了该字段需要先和服务端确认返回的资源是否发生了变化，如果资源未发生变化，则直接使用缓存好的资源；</span></li><li fid=\"u5dd2c9a1\" data-lake-id=\"a07dc7a7ace8ab0b23ff0cf1ea04159f\" id=\"a07dc7a7ace8ab0b23ff0cf1ea04159f\"><code data-lake-id=\"ud305d850\" id=\"ud305d850\"><span data-lake-id=\"u3f24efbf\" id=\"u3f24efbf\">no-store</span></code><span data-lake-id=\"u623e099f\" id=\"u623e099f\">：设置了该字段表示禁止任何缓存，每次都会向服务端发起新的请求，拉取最新的资源；</span></li><li fid=\"u5dd2c9a1\" data-lake-id=\"ae67b6d8fea7f3a0eb035789459b47d1\" id=\"ae67b6d8fea7f3a0eb035789459b47d1\"><code data-lake-id=\"u345a8bb3\" id=\"u345a8bb3\"><span data-lake-id=\"uf55eff02\" id=\"uf55eff02\">max-age=</span></code><span data-lake-id=\"ud4d47614\" id=\"ud4d47614\">：设置缓存的最大有效期，单位为秒；</span></li><li fid=\"u5dd2c9a1\" data-lake-id=\"44100f405245d9bc9932e523447580a8\" id=\"44100f405245d9bc9932e523447580a8\"><code data-lake-id=\"ubff89059\" id=\"ubff89059\"><span data-lake-id=\"u5787b0ba\" id=\"u5787b0ba\">s-maxage=</span></code><span data-lake-id=\"u4bebae8c\" id=\"u4bebae8c\">：优先级高于max-age=，仅适用于共享缓存(CDN)，优先级高于max-age或者Expires头；</span></li><li fid=\"u5dd2c9a1\" data-lake-id=\"86af49f5c8425651a49cd4b30d512242\" id=\"86af49f5c8425651a49cd4b30d512242\"><code data-lake-id=\"uf03c21d1\" id=\"uf03c21d1\"><span data-lake-id=\"u20460656\" id=\"u20460656\">max-stale[=]</span></code><span data-lake-id=\"u65f93caf\" id=\"u65f93caf\">：设置了该字段表明客户端愿意接收已经过期的资源，但是不能超过给定的时间限制。</span></li></ul><p data-lake-id=\"5d0b2f101984b3f4d7b4adebcbe4d5e5\" id=\"5d0b2f101984b3f4d7b4adebcbe4d5e5\"><br></p><p data-lake-id=\"d3d32796aa38a3b513ccde76026f8af3\" id=\"d3d32796aa38a3b513ccde76026f8af3\"><span data-lake-id=\"u38880f1a\" id=\"u38880f1a\">一般来说只需要设置其中一种方式就可以实现强缓存策略，当两种方式一起使用时，Cache-Control 的优先级要高于 Expires。</span></p><p data-lake-id=\"e861f7910448d84b4f59ec1d60e4928c\" id=\"e861f7910448d84b4f59ec1d60e4928c\"><br></p><p data-lake-id=\"d998145c000cef6cd98f5c295cd317fb\" id=\"d998145c000cef6cd98f5c295cd317fb\"><strong><span data-lake-id=\"ud1aac0d1\" id=\"ud1aac0d1\">no-cache和no-store很容易混淆：</span></strong></p><ul list=\"udf568c9e\"><li fid=\"u4f271ed3\" data-lake-id=\"f7cde20db6b4214887864d0e32744794\" id=\"f7cde20db6b4214887864d0e32744794\"><span data-lake-id=\"udeb6f476\" id=\"udeb6f476\">no-cache 是指先要和服务器确认是否有资源更新，在进行判断。也就是说没有强缓存，但是会有协商缓存；</span></li><li fid=\"u4f271ed3\" data-lake-id=\"07d17a993d30cda4d55a35c9a96bc9d1\" id=\"07d17a993d30cda4d55a35c9a96bc9d1\"><span data-lake-id=\"u8d209a6a\" id=\"u8d209a6a\">no-store 是指不使用任何缓存，每次请求都直接从服务器获取资源。</span></li></ul><h4 data-lake-id=\"68413117f5bacf19cf7cd4b818b7ac99\" id=\"68413117f5bacf19cf7cd4b818b7ac99\"><span data-lake-id=\"u1405b535\" id=\"u1405b535\">（2）协商缓存</span></h4><p data-lake-id=\"2c56a38d5fa8c677c7c49a35ec149750\" id=\"2c56a38d5fa8c677c7c49a35ec149750\"><span data-lake-id=\"u53431b0f\" id=\"u53431b0f\">如果命中强制缓存，我们无需发起新的请求，直接使用缓存内容，如果没有命中强制缓存，如果设置了协商缓存，这个时候协商缓存就会发挥作用了。</span></p><p data-lake-id=\"570921610d4bc679832025178bbc274c\" id=\"570921610d4bc679832025178bbc274c\"><br></p><p data-lake-id=\"f0842387aa36e4638148d547c157bb84\" id=\"f0842387aa36e4638148d547c157bb84\"><span data-lake-id=\"uaef086cc\" id=\"uaef086cc\">上面已经说到了，命中协商缓存的条件有两个：</span></p><ul list=\"u3931ba53\"><li fid=\"u09b4bcae\" data-lake-id=\"87495d9b9d4bf13864baaadd79c91d13\" id=\"87495d9b9d4bf13864baaadd79c91d13\"><code data-lake-id=\"ubdeaf69d\" id=\"ubdeaf69d\"><span data-lake-id=\"u781b17a4\" id=\"u781b17a4\">max-age=xxx</span></code><span data-lake-id=\"ud57c72a7\" id=\"ud57c72a7\"> 过期了</span></li><li fid=\"u09b4bcae\" data-lake-id=\"8fd0882bff734cb448ef993deb9256f3\" id=\"8fd0882bff734cb448ef993deb9256f3\"><span data-lake-id=\"u1c15c389\" id=\"u1c15c389\">值为</span><code data-lake-id=\"ueeb0e91a\" id=\"ueeb0e91a\"><span data-lake-id=\"u219d4e85\" id=\"u219d4e85\">no-store</span></code></li></ul><p data-lake-id=\"321cba74ca7a58745e4ed4ec42bf5dc2\" id=\"321cba74ca7a58745e4ed4ec42bf5dc2\"><br></p><p data-lake-id=\"460af974cc9cf5dfd719a92ca8605d27\" id=\"460af974cc9cf5dfd719a92ca8605d27\"><span data-lake-id=\"u2e052eae\" id=\"u2e052eae\">使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 304 状态，让浏览器使用本地的缓存副本。如果资源发生了修改，则返回修改后的资源。</span></p><p data-lake-id=\"08207f43ad402942e2b9c0bb1fa323db\" id=\"08207f43ad402942e2b9c0bb1fa323db\"><br></p><p data-lake-id=\"11193deac3745ab86f135907b89bf177\" id=\"11193deac3745ab86f135907b89bf177\"><span data-lake-id=\"udcce32bd\" id=\"udcce32bd\">协商缓存也可以通过两种方式来设置，分别是 http 头信息中的</span><strong><span data-lake-id=\"u3a0e155e\" id=\"u3a0e155e\"> Etag</span></strong><span data-lake-id=\"u1b070ee0\" id=\"u1b070ee0\"> 和</span><strong><span data-lake-id=\"u9a5d8d9b\" id=\"u9a5d8d9b\"> Last-Modified </span></strong><span data-lake-id=\"u6076706f\" id=\"u6076706f\">属性。</span></p><p data-lake-id=\"31ab115bfe4e9ad7625a977fc176bcf1\" id=\"31ab115bfe4e9ad7625a977fc176bcf1\"><span data-lake-id=\"u65a7707f\" id=\"u65a7707f\">（1）服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 If-Modified-Since 的属性，属性值为上一次资源返回时的 Last-Modified 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。使用这种方法有一个缺点，就是 Last-Modified 标注的最后修改时间只能精确到秒级，如果某些文件在1秒钟以内，被修改多次的话，那么文件已将改变了但是 Last-Modified 却没有改变，这样会造成缓存命中的不准确。</span></p><p data-lake-id=\"f3634c5e602254f45e4826149c922d80\" id=\"f3634c5e602254f45e4826149c922d80\"><span data-lake-id=\"uf9b79ad1\" id=\"uf9b79ad1\">（2）因为 Last-Modified 的这种可能发生的不准确性，http 中提供了另外一种方式，那就是 Etag 属性。服务器在返回资源的时候，在头信息中添加了 Etag 属性，这个属性是资源生成的唯一标识符，当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 If-None-Match 属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。通过这种方式，比 Last-Modified 的方式更加精确。</span></p><p data-lake-id=\"808842491861a70edd3d674a6c1f6267\" id=\"808842491861a70edd3d674a6c1f6267\"><br></p><p data-lake-id=\"a60936ca8753b5d20dd3d56eafaf307d\" id=\"a60936ca8753b5d20dd3d56eafaf307d\"><span data-lake-id=\"ud069fded\" id=\"ud069fded\">当 Last-Modified 和 Etag 属性同时出现的时候，Etag 的优先级更高。使用协商缓存的时候，服务器需要考虑负载平衡的问题，因此多个服务器上资源的 Last-Modified 应该保持一致，因为每个服务器上 Etag 的值都不一样，因此在考虑负载平衡时，最好不要设置 Etag 属性。</span></p><p data-lake-id=\"d4df4fa9aa6e1486967f1ee3a673a926\" id=\"d4df4fa9aa6e1486967f1ee3a673a926\"><br></p><p data-lake-id=\"14726ffc16706ed37f6de8aad9866b13\" id=\"14726ffc16706ed37f6de8aad9866b13\"><strong><span data-lake-id=\"u9f1c753d\" id=\"u9f1c753d\">总结：</span></strong></p><p data-lake-id=\"89318aa3f6a81e0bbdde1354dfb47949\" id=\"89318aa3f6a81e0bbdde1354dfb47949\"><span data-lake-id=\"u8e0ed61c\" id=\"u8e0ed61c\">强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。</span></p><h3 data-lake-id=\"8a8c4171b99791657793869edf445f9b\" id=\"8a8c4171b99791657793869edf445f9b\"><span data-lake-id=\"u23bc3df9\" id=\"u23bc3df9\">3. 为什么需要浏览器缓存？</span></h3><p data-lake-id=\"40409855ed2397b30e1810f1f30c3abd\" id=\"40409855ed2397b30e1810f1f30c3abd\"><span data-lake-id=\"u5c0e3261\" id=\"u5c0e3261\">对于浏览器的缓存，主要针对的是前端的静态资源，最好的效果就是，在发起请求之后，拉取相应的静态资源，并保存在本地。如果服务器的静态资源没有更新，那么在下次请求的时候，就直接从本地读取即可，如果服务器的静态资源已经更新，那么我们再次请求的时候，就到服务器拉取新的资源，并保存在本地。这样就大大的减少了请求的次数，提高了网站的性能。这就要用到浏览器的缓存策略了。</span></p><p data-lake-id=\"6b09dbf1a59e768a93cd485eb281fa49\" id=\"6b09dbf1a59e768a93cd485eb281fa49\"><br></p><p data-lake-id=\"ff99d0f0f5db4ea5063cf201cedc4c86\" id=\"ff99d0f0f5db4ea5063cf201cedc4c86\"><span data-lake-id=\"u4a4bfb6d\" id=\"u4a4bfb6d\">所谓的</span><strong><span data-lake-id=\"uf15a73b5\" id=\"uf15a73b5\">浏览器缓存</span></strong><span data-lake-id=\"u8fb30813\" id=\"u8fb30813\">指的是浏览器将用户请求过的静态资源，存储到电脑本地磁盘中，当浏览器再次访问时，就可以直接从本地加载，不需要再去服务端请求了。</span></p><p data-lake-id=\"21e29807d0e8816871ddee6fc22e193a\" id=\"21e29807d0e8816871ddee6fc22e193a\"><br></p><p data-lake-id=\"62bf3efbcb8a66bd26569ad8b4e9c576\" id=\"62bf3efbcb8a66bd26569ad8b4e9c576\"><span data-lake-id=\"ub549dab7\" id=\"ub549dab7\">使用浏览器缓存，有以下优点：</span></p><ul list=\"uc8083b4b\"><li fid=\"ueb7acc19\" data-lake-id=\"d0f2d3ab97d8576b56eefafafec982b3\" id=\"d0f2d3ab97d8576b56eefafafec982b3\"><span data-lake-id=\"u5d581595\" id=\"u5d581595\">减少了服务器的负担，提高了网站的性能</span></li><li fid=\"ueb7acc19\" data-lake-id=\"ca43a0b962788744264a81b7c6cd7e41\" id=\"ca43a0b962788744264a81b7c6cd7e41\"><span data-lake-id=\"u0341a6a8\" id=\"u0341a6a8\">加快了客户端网页的加载速度</span></li><li fid=\"ueb7acc19\" data-lake-id=\"4cf74962973321aa1676cd0ac339f03f\" id=\"4cf74962973321aa1676cd0ac339f03f\"><span data-lake-id=\"ub3c3209b\" id=\"ub3c3209b\">减少了多余网络数据传输</span></li></ul><h3 data-lake-id=\"d8ebecf8d4884d23475f4a698820be8a\" id=\"d8ebecf8d4884d23475f4a698820be8a\"><span data-lake-id=\"u4227c247\" id=\"u4227c247\">4. 点击刷新按钮或者按 F5、按 Ctrl+F5 （强制刷新）、地址栏回车有什么区别？</span></h3><ul list=\"u836b2bcf\"><li fid=\"u068fe067\" data-lake-id=\"7bc03535afc51360faf9d49ffdc91c8d\" id=\"7bc03535afc51360faf9d49ffdc91c8d\"><strong><span data-lake-id=\"u4289896c\" id=\"u4289896c\">点击刷新按钮或者按 F5：</span></strong><span data-lake-id=\"ua8512f35\" id=\"ua8512f35\">浏览器直接对本地的缓存文件过期，但是会带上If-Modifed-Since，If-None-Match，这就意味着服务器会对文件检查新鲜度，返回结果可能是 304，也有可能是 200。</span></li><li fid=\"u068fe067\" data-lake-id=\"f7aae00390fa795c6f16b7142f5ec48b\" id=\"f7aae00390fa795c6f16b7142f5ec48b\"><strong><span data-lake-id=\"u3a8bc5d6\" id=\"u3a8bc5d6\">用户按 Ctrl+F5（强制刷新）：</span></strong><span data-lake-id=\"u1ad9c2fb\" id=\"u1ad9c2fb\">浏览器不仅会对本地文件过期，而且不会带上 If-Modifed-Since，If-None-Match，相当于之前从来没有请求过，返回结果是 200。</span></li><li fid=\"u068fe067\" data-lake-id=\"3910fce05860e979c66af57a7305f2e4\" id=\"3910fce05860e979c66af57a7305f2e4\"><span data-lake-id=\"u33de9cda\" id=\"u33de9cda\">地址栏回车： 浏览器发起请求，按照正常流程，本地检查是否过期，然后服务器检查新鲜度，最后返回内容。</span></li></ul><h2 data-lake-id=\"e85a397022e868aaa8ba8b54215c0d6a\" id=\"e85a397022e868aaa8ba8b54215c0d6a\"><span data-lake-id=\"u15a1ffc8\" id=\"u15a1ffc8\">四、浏览器组成</span></h2><h3 data-lake-id=\"74357ecba84bf0c56bb51a3c23656607\" id=\"74357ecba84bf0c56bb51a3c23656607\"><span data-lake-id=\"u73cfae58\" id=\"u73cfae58\">1. 对浏览器的理解</span></h3><p data-lake-id=\"a6892922007abd78992a3fccc737ed0e\" id=\"a6892922007abd78992a3fccc737ed0e\"><span data-lake-id=\"u927c3506\" id=\"u927c3506\">浏览器的主要功能是将用户选择的 web 资源呈现出来，它需要从服务器请求资源，并将其显示在浏览器窗口中，资源的格式通常是 HTML，也包括 PDF、image 及其他格式。用户用 URI（Uniform Resource Identifier 统一资源标识符）来指定所请求资源的位置。</span></p><p data-lake-id=\"d4feb6566a326761dee8c6deb6a4cd66\" id=\"d4feb6566a326761dee8c6deb6a4cd66\"><br></p><p data-lake-id=\"1b176d2f5a607f640e362078894419f2\" id=\"1b176d2f5a607f640e362078894419f2\"><span data-lake-id=\"u8c097521\" id=\"u8c097521\">HTML 和 CSS 规范中规定了浏览器解释 html 文档的方式，由 W3C 组织对这些规范进行维护，W3C 是负责制定 web 标准的组织。但是浏览器厂商纷纷开发自己的扩展，对规范的遵循并不完善，这为 web 开发者带来了严重的兼容性问题。</span></p><p data-lake-id=\"35529a326b25ca6f27b25a9d26b5fef0\" id=\"35529a326b25ca6f27b25a9d26b5fef0\"><br></p><p data-lake-id=\"aebf34adf9837fb46dbe4dc954795c5b\" id=\"aebf34adf9837fb46dbe4dc954795c5b\"><span data-lake-id=\"u78cede02\" id=\"u78cede02\">浏览器可以分为两部分，shell 和 内核。其中 shell 的种类相对比较多，内核则比较少。</span><span data-lake-id=\"u0ced2a78\" id=\"u0ced2a78\">也有一些浏览器并不区分外壳和内核。从 Mozilla 将 Gecko 独立出来后，才有了外壳和内核的明确划分。</span></p><ul list=\"ub7249bc4\"><li fid=\"u13044a5f\" data-lake-id=\"93032e597605176514e11bb023e6a3f3\" id=\"93032e597605176514e11bb023e6a3f3\"><span data-lake-id=\"u0089b614\" id=\"u0089b614\">shell 是指浏览器的外壳：例如菜单，工具栏等。主要是提供给用户界面操作，参数设置等等。它是调用内核来实现各种功能的。</span></li><li fid=\"u13044a5f\" data-lake-id=\"f3dd7641e1d8ec4fefef56fb5119daa8\" id=\"f3dd7641e1d8ec4fefef56fb5119daa8\"><span data-lake-id=\"u19f9e14a\" id=\"u19f9e14a\">内核是浏览器的核心。内核是基于标记语言显示内容的程序或模块。</span></li></ul><h3 data-lake-id=\"6e1d6520be7e3646edcaf4bcf54bab80\" id=\"6e1d6520be7e3646edcaf4bcf54bab80\"><span data-lake-id=\"u5549325e\" id=\"u5549325e\">2. 对浏览器内核的理解</span></h3><p data-lake-id=\"40d050b3d2b0f0543ed707a5a895c23e\" id=\"40d050b3d2b0f0543ed707a5a895c23e\"><span data-lake-id=\"uc64730da\" id=\"uc64730da\">浏览器内核主要分成两部分：</span></p><ul list=\"u123b4367\"><li fid=\"u8758908d\" data-lake-id=\"cadfc6c1555a07dcd964f4742cc8dc13\" id=\"cadfc6c1555a07dcd964f4742cc8dc13\"><span data-lake-id=\"u39b2673b\" id=\"u39b2673b\">渲染引擎的职责就是渲染，即在浏览器窗口中显示所请求的内容。默认情况下，渲染引擎可以显示 html、xml 文档及图片，它也可以借助插件显示其他类型数据，例如使用 PDF 阅读器插件，可以显示 PDF 格式。</span></li><li fid=\"u8758908d\" data-lake-id=\"d889ea38fcc53f6d0886d3238eb171fa\" id=\"d889ea38fcc53f6d0886d3238eb171fa\"><span data-lake-id=\"ua38b4134\" id=\"ua38b4134\">JS 引擎：解析和执行 javascript 来实现网页的动态效果。</span></li></ul><p data-lake-id=\"6983267e74b17e2fc984b464d967e7a0\" id=\"6983267e74b17e2fc984b464d967e7a0\"><br></p><p data-lake-id=\"3444bc5c4bda76a4a3668cf506caddbd\" id=\"3444bc5c4bda76a4a3668cf506caddbd\"><span data-lake-id=\"uab428ab3\" id=\"uab428ab3\">最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。</span></p><h3 data-lake-id=\"4dd7a00cfebefc3bda1a2d540b041551\" id=\"4dd7a00cfebefc3bda1a2d540b041551\"><span data-lake-id=\"ub28021b8\" id=\"ub28021b8\">3. 常见的浏览器内核比较</span></h3><ul list=\"u7ff6c622\"><li fid=\"u741c9c7e\" data-lake-id=\"5f381e300e882307a78958395a80306c\" id=\"5f381e300e882307a78958395a80306c\"><strong><span data-lake-id=\"u1ecd4814\" id=\"u1ecd4814\">Trident：</span></strong><span data-lake-id=\"u66c8cf02\" id=\"u66c8cf02\">这种浏览器内核是 IE 浏览器用的内核，因为在早期 IE 占有大量的市场份额，所以这种内核比较流行，以前有很多网页也是根据这个内核的标准来编写的，但是实际上这个内核对真正的网页标准支持不是很好。但是由于 IE 的高市场占有率，微软也很长时间没有更新 Trident 内核，就导致了 Trident 内核和 W3C 标准脱节。还有就是 Trident 内核的大量 Bug 等安全问题没有得到解决，加上一些专家学者公开自己认为 IE 浏览器不安全的观点，使很多用户开始转向其他浏览器。</span></li><li fid=\"u741c9c7e\" data-lake-id=\"7766d86633bc566f3e7e20a6ac20aab5\" id=\"7766d86633bc566f3e7e20a6ac20aab5\"><strong><span data-lake-id=\"udbde8883\" id=\"udbde8883\">Gecko：</span></strong><span data-lake-id=\"u427dee04\" id=\"u427dee04\">这是 Firefox 和 Flock 所采用的内核，这个内核的优点就是功能强大、丰富，可以支持很多复杂网页效果和浏览器扩展接口，但是代价是也显而易见就是要消耗很多的资源，比如内存。</span></li><li fid=\"u741c9c7e\" data-lake-id=\"8595856658c4fa2e596ef92483b8e694\" id=\"8595856658c4fa2e596ef92483b8e694\"><strong><span data-lake-id=\"u15c2fe8e\" id=\"u15c2fe8e\">Presto：</span></strong><span data-lake-id=\"u7d898795\" id=\"u7d898795\">Opera 曾经采用的就是 Presto 内核，Presto 内核被称为公认的浏览网页速度最快的内核，这得益于它在开发时的天生优势，在处理 JS 脚本等脚本语言时，会比其他的内核快3倍左右，缺点就是为了达到很快的速度而丢掉了一部分网页兼容性。</span></li><li fid=\"u741c9c7e\" data-lake-id=\"ed7c1a3753359e2b0eb40872393a9b78\" id=\"ed7c1a3753359e2b0eb40872393a9b78\"><strong><span data-lake-id=\"u4c4a83aa\" id=\"u4c4a83aa\">Webkit：</span></strong><span data-lake-id=\"u9993f6ca\" id=\"u9993f6ca\">Webkit 是 Safari 采用的内核，它的优点就是网页浏览速度较快，虽然不及 Presto 但是也胜于 Gecko 和 Trident，缺点是对于网页代码的容错性不高，也就是说对网页代码的兼容性较低，会使一些编写不标准的网页无法正确显示。WebKit 前身是 KDE 小组的 KHTML 引擎，可以说 WebKit 是 KHTML 的一个开源的分支。</span></li><li fid=\"u741c9c7e\" data-lake-id=\"04cfe9af46dc2358d796d4ac66e3c2fb\" id=\"04cfe9af46dc2358d796d4ac66e3c2fb\"><strong><span data-lake-id=\"u72c1f413\" id=\"u72c1f413\">Blink：</span></strong><span data-lake-id=\"u49aa4abc\" id=\"u49aa4abc\">谷歌在 Chromium Blog 上发表博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。其实 Blink 引擎就是 Webkit 的一个分支，就像 webkit 是KHTML 的分支一样。Blink 引擎现在是谷歌公司与 Opera Software 共同研发，上面提到过的，Opera 弃用了自己的 Presto 内核，加入 Google 阵营，跟随谷歌一起研发 Blink。</span></li></ul><h3 data-lake-id=\"dba07eafce3d59c306930b6c14a14776\" id=\"dba07eafce3d59c306930b6c14a14776\"><span data-lake-id=\"u5bda7f63\" id=\"u5bda7f63\">4. 常见浏览器所用内核</span></h3><p data-lake-id=\"786be122b6c326a5f1289410c7ca619c\" id=\"786be122b6c326a5f1289410c7ca619c\"><span data-lake-id=\"u7eaa5037\" id=\"u7eaa5037\">  （1） IE 浏览器内核：Trident 内核，也是俗称的 IE 内核；</span></p><p data-lake-id=\"9c2308b50f049af8c58d4d3f7445f114\" id=\"9c2308b50f049af8c58d4d3f7445f114\"><span data-lake-id=\"u06bc5894\" id=\"u06bc5894\"> （2） Chrome 浏览器内核：统称为 Chromium 内核或 Chrome 内核，以前是 Webkit 内核，现在是 Blink内核；</span></p><p data-lake-id=\"426e7872e519ef3a45ef3e03829de71a\" id=\"426e7872e519ef3a45ef3e03829de71a\"><span data-lake-id=\"u700e1075\" id=\"u700e1075\"> （3） Firefox 浏览器内核：Gecko 内核，俗称 Firefox 内核；</span></p><p data-lake-id=\"6ac1a787059567510678b47428e07119\" id=\"6ac1a787059567510678b47428e07119\"><span data-lake-id=\"uef73c7b4\" id=\"uef73c7b4\"> （4） Safari 浏览器内核：Webkit 内核；</span></p><p data-lake-id=\"3a43aa7b8a1c78651cc941063fc2ac58\" id=\"3a43aa7b8a1c78651cc941063fc2ac58\"><span data-lake-id=\"u3bd36c22\" id=\"u3bd36c22\"> （5） Opera 浏览器内核：最初是自己的 Presto 内核，后来加入谷歌大军，从 Webkit 又到了 Blink 内核；</span></p><p data-lake-id=\"6853e7ff58b24ea1de4cfc5fd1f332c2\" id=\"6853e7ff58b24ea1de4cfc5fd1f332c2\"><span data-lake-id=\"u612ed28e\" id=\"u612ed28e\"> （6） 360浏览器、猎豹浏览器内核：IE + Chrome 双内核；</span></p><p data-lake-id=\"6a6bec3ded9ebdc623658a37e390ccd9\" id=\"6a6bec3ded9ebdc623658a37e390ccd9\"><span data-lake-id=\"uc384bf6b\" id=\"uc384bf6b\"> （7） 搜狗、遨游、QQ 浏览器内核：Trident（兼容模式）+ Webkit（高速模式）；</span></p><p data-lake-id=\"2c4238498ad5fcfa7db0636591d15ef1\" id=\"2c4238498ad5fcfa7db0636591d15ef1\"><span data-lake-id=\"uf64cc9dd\" id=\"uf64cc9dd\"> （8） 百度浏览器、世界之窗内核：IE 内核；</span></p><p data-lake-id=\"5a64a4d99febb6a922b54e762095dfce\" id=\"5a64a4d99febb6a922b54e762095dfce\"><span data-lake-id=\"ua86634c5\" id=\"ua86634c5\"> （9） 2345浏览器内核：好像以前是 IE 内核，现在也是 IE + Chrome 双内核了；</span></p><p data-lake-id=\"828861175981dd7b8d0c20e5662734e7\" id=\"828861175981dd7b8d0c20e5662734e7\"><span data-lake-id=\"ua2b98fae\" id=\"ua2b98fae\"> （10）UC 浏览器内核：这个众口不一，UC 说是他们自己研发的 U3 内核，但好像还是基于 Webkit 和 Trident ，还有说是基于火狐内核。</span></p><h3 data-lake-id=\"1bb76ef059fad541f517479e040c5377\" id=\"1bb76ef059fad541f517479e040c5377\"><span data-lake-id=\"u6df0a0f4\" id=\"u6df0a0f4\">5. </span><span data-lake-id=\"u0c1624f4\" id=\"u0c1624f4\" style=\"color: #000000\">浏览器的主要组成部分</span></h3><ul list=\"u19871f4a\"><li fid=\"u2871702d\" data-lake-id=\"3ae7d94e09a514b6711012c0cfe60914\" id=\"3ae7d94e09a514b6711012c0cfe60914\"><strong><span data-lake-id=\"uab9f7b92\" id=\"uab9f7b92\" style=\"color: #000000\">⽤户界⾯</span></strong><span data-lake-id=\"ucd62b92c\" id=\"ucd62b92c\" style=\"color: #000000\"> </span><span data-lake-id=\"u7f935609\" id=\"u7f935609\" style=\"color: #000000\">- </span><span data-lake-id=\"u4640df76\" id=\"u4640df76\" style=\"color: #000000\">包括地址栏、前进</span><span data-lake-id=\"u4f5a1884\" id=\"u4f5a1884\" style=\"color: #000000\">/后退按钮、书签菜单等。除了浏览器主窗⼝显示的您请求的⻚⾯外，其他显示的各个部分都属于⽤户界⾯。 </span></li><li fid=\"u2871702d\" data-lake-id=\"2afc37e956fa9d63291e82d2c95631b0\" id=\"2afc37e956fa9d63291e82d2c95631b0\"><strong><span data-lake-id=\"uca1c1b0b\" id=\"uca1c1b0b\" style=\"color: #000000\">浏览器引擎</span></strong><span data-lake-id=\"ucada6221\" id=\"ucada6221\" style=\"color: #000000\"> </span><span data-lake-id=\"uaf54f69e\" id=\"uaf54f69e\" style=\"color: #000000\">- </span><span data-lake-id=\"u2a314719\" id=\"u2a314719\" style=\"color: #000000\">在⽤户界⾯和呈现引擎之间传送指令。 </span></li><li fid=\"u2871702d\" data-lake-id=\"55ff7f98d0d70dc83a9639c0821d3482\" id=\"55ff7f98d0d70dc83a9639c0821d3482\"><strong><span data-lake-id=\"u680d3be0\" id=\"u680d3be0\" style=\"color: #000000\">呈现引擎</span></strong><span data-lake-id=\"u7617105a\" id=\"u7617105a\" style=\"color: #000000\"> </span><span data-lake-id=\"u545d9f22\" id=\"u545d9f22\" style=\"color: #000000\">- </span><span data-lake-id=\"u177950cd\" id=\"u177950cd\" style=\"color: #000000\">负责显示请求的内容。如果请求的内容是 </span><span data-lake-id=\"uda440f5a\" id=\"uda440f5a\" style=\"color: #000000\">HTML</span><span data-lake-id=\"u054bb112\" id=\"u054bb112\" style=\"color: #000000\">，它就负责解析 </span><span data-lake-id=\"ufa34f9ad\" id=\"ufa34f9ad\" style=\"color: #000000\">HTML </span><span data-lake-id=\"ubcbca672\" id=\"ubcbca672\" style=\"color: #000000\">和 </span><span data-lake-id=\"u339e302f\" id=\"u339e302f\" style=\"color: #000000\">CSS 内容，并将解析后的内容显示在屏幕上。 </span></li><li fid=\"u2871702d\" data-lake-id=\"7062e1a84f144fb2380de255662be48b\" id=\"7062e1a84f144fb2380de255662be48b\"><strong><span data-lake-id=\"ud40b2f52\" id=\"ud40b2f52\" style=\"color: #000000\">⽹络 </span></strong><span data-lake-id=\"ud30e83c8\" id=\"ud30e83c8\" style=\"color: #000000\">- </span><span data-lake-id=\"u25565d81\" id=\"u25565d81\" style=\"color: #000000\">⽤于⽹络调⽤，⽐如 </span><span data-lake-id=\"u36a7ef41\" id=\"u36a7ef41\" style=\"color: #000000\">HTTP </span><span data-lake-id=\"u03f260e9\" id=\"u03f260e9\" style=\"color: #000000\">请求。其接⼝与平台⽆关，并为所有平台提供底层实现。 </span></li><li fid=\"u2871702d\" data-lake-id=\"94e132dfab7241cf7c7e7dd6c828a40f\" id=\"94e132dfab7241cf7c7e7dd6c828a40f\"><strong><span data-lake-id=\"u789df852\" id=\"u789df852\" style=\"color: #000000\">⽤户界⾯后端</span></strong><span data-lake-id=\"u19968f80\" id=\"u19968f80\" style=\"color: #000000\"> </span><span data-lake-id=\"u91013df1\" id=\"u91013df1\" style=\"color: #000000\">- ⽤于绘制基本的窗⼝⼩部件，⽐如组合框和窗⼝。其公开了与平台⽆关的通⽤接⼝，⽽在底层使⽤操作系统的⽤户界⾯⽅法。 </span></li><li fid=\"u2871702d\" data-lake-id=\"274d01ce71280f98c986810582383dbc\" id=\"274d01ce71280f98c986810582383dbc\"><strong><span data-lake-id=\"ub635a44e\" id=\"ub635a44e\">JavaScript </span></strong><strong><span data-lake-id=\"u8ed7bb71\" id=\"u8ed7bb71\" style=\"color: #000000\">解释器</span></strong><span data-lake-id=\"u2cc7422b\" id=\"u2cc7422b\" style=\"color: #000000\">。⽤于解析和执⾏ </span><span data-lake-id=\"u6955c229\" id=\"u6955c229\" style=\"color: #000000\">JavaScript </span><span data-lake-id=\"ud6167742\" id=\"ud6167742\" style=\"color: #000000\">代码。 </span></li><li fid=\"u2871702d\" data-lake-id=\"f4a6e789a75c396e2ff45d13ef35ed49\" id=\"f4a6e789a75c396e2ff45d13ef35ed49\"><strong><span data-lake-id=\"u93cc3f81\" id=\"u93cc3f81\" style=\"color: #000000\">数据存储 </span></strong><span data-lake-id=\"u5f75fafa\" id=\"u5f75fafa\" style=\"color: #000000\">- 这是持久层。浏览器需要在硬盘上保存各种数据，例如 </span><span data-lake-id=\"u41ed8bd8\" id=\"u41ed8bd8\" style=\"color: #000000\">Cookie</span><span data-lake-id=\"u486611e2\" id=\"u486611e2\" style=\"color: #000000\">。新的 </span><span data-lake-id=\"ue704679f\" id=\"ue704679f\" style=\"color: #000000\">HTML </span><span data-lake-id=\"u63302b60\" id=\"u63302b60\" style=\"color: #000000\">规范 </span><span data-lake-id=\"u3a707bf8\" id=\"u3a707bf8\" style=\"color: #000000\">(HTML5) </span><span data-lake-id=\"u05aa8533\" id=\"u05aa8533\" style=\"color: #000000\">定义了</span><span data-lake-id=\"u59e58a0f\" id=\"u59e58a0f\" style=\"color: #000000\">“⽹络数据库</span><span data-lake-id=\"u29aa64b7\" id=\"u29aa64b7\" style=\"color: #000000\">”</span><span data-lake-id=\"u1dd15f9b\" id=\"u1dd15f9b\" style=\"color: #000000\">，这是⼀个完整（但是轻便）的浏览器内数据库。 </span></li></ul><p data-lake-id=\"f71dc3c0e8e2a1473ea2a22692c8cc16\" id=\"f71dc3c0e8e2a1473ea2a22692c8cc16\"><br></p><p data-lake-id=\"5b8c15ea73e00e992adc269c0d67cc4f\" id=\"5b8c15ea73e00e992adc269c0d67cc4f\"><span data-lake-id=\"u109179da\" id=\"u109179da\" style=\"color: #000000\">值得注意的是，和⼤多数浏览器不同，</span><span data-lake-id=\"ue68bd3d4\" id=\"ue68bd3d4\" style=\"color: #000000\">Chrome 浏览器的每个标签⻚都分别对应⼀个呈现引擎实例。每个标签⻚都是⼀个独⽴的进程。</span></p><h2 data-lake-id=\"7da36c79d9dc993f8c7dd743a9a2ca9e\" id=\"7da36c79d9dc993f8c7dd743a9a2ca9e\"><span data-lake-id=\"u1c78f81e\" id=\"u1c78f81e\">五、浏览器渲染原理</span></h2><h3 data-lake-id=\"0e18bcf331f4b88cf133642cbf20702f\" id=\"0e18bcf331f4b88cf133642cbf20702f\"><span data-lake-id=\"uf75899dd\" id=\"uf75899dd\">1. 浏览器的渲染过程</span></h3><p data-lake-id=\"4e5214b72d97993ecedda3498987a118\" id=\"4e5214b72d97993ecedda3498987a118\"><span data-lake-id=\"u15cbce73\" id=\"u15cbce73\">浏览器渲染主要有以下步骤：</span></p><ul list=\"u38faec7f\"><li fid=\"u380dc967\" data-lake-id=\"49e83d2c7e909787cd1d272e335af451\" id=\"49e83d2c7e909787cd1d272e335af451\"><span data-lake-id=\"u7772b87b\" id=\"u7772b87b\">首先解析收到的文档，根据文档定义构建一棵 DOM 树，DOM 树是由 DOM 元素及属性节点组成的。</span></li><li fid=\"u380dc967\" data-lake-id=\"a83dd3f09254b4dedc5956afabe66b5f\" id=\"a83dd3f09254b4dedc5956afabe66b5f\"><span data-lake-id=\"u4f5b6283\" id=\"u4f5b6283\">然后对 CSS 进行解析，生成 CSSOM 规则树。</span></li><li fid=\"u380dc967\" data-lake-id=\"4a20b9e6d7a60751292bc91eeeb7ae2e\" id=\"4a20b9e6d7a60751292bc91eeeb7ae2e\"><span data-lake-id=\"u38650ffe\" id=\"u38650ffe\">根据 DOM 树和 CSSOM 规则树构建渲染树。渲染树的节点被称为渲染对象，渲染对象是一个包含有颜色和大小等属性的矩形，渲染对象和 DOM 元素相对应，但这种对应关系不是一对一的，不可见的 DOM 元素不会被插入渲染树。还有一些 DOM元素对应几个可见对象，它们一般是一些具有复杂结构的元素，无法用一个矩形来描述。</span></li><li fid=\"u380dc967\" data-lake-id=\"ac24541f8ae209a0554f24921b7c3a5b\" id=\"ac24541f8ae209a0554f24921b7c3a5b\"><span data-lake-id=\"ud8840513\" id=\"ud8840513\">当渲染对象被创建并添加到树中，它们并没有位置和大小，所以当浏览器生成渲染树以后，就会根据渲染树来进行布局（也可以叫做回流）。这一阶段浏览器要做的事情是要弄清楚各个节点在页面中的确切位置和大小。通常这一行为也被称为“自动重排”。</span></li><li fid=\"u380dc967\" data-lake-id=\"d7f239e95c7b0eef19b121ad440f4467\" id=\"d7f239e95c7b0eef19b121ad440f4467\"><span data-lake-id=\"u63c529be\" id=\"u63c529be\">布局阶段结束后是绘制阶段，遍历渲染树并调用渲染对象的 paint 方法将它们的内容显示在屏幕上，绘制使用 UI 基础组件。</span></li></ul><p data-lake-id=\"33883760673962e2e3e1b6c049499b3a\" id=\"33883760673962e2e3e1b6c049499b3a\"><span data-lake-id=\"ue5ede2d0\" id=\"ue5ede2d0\"> </span></p><p data-lake-id=\"66332cd15157880d7bf150aa6ccb0645\" id=\"66332cd15157880d7bf150aa6ccb0645\"><span data-lake-id=\"uf521a024\" id=\"uf521a024\">大致过程如图所示：</span></p><p data-lake-id=\"7accff6cc8dcd38b56d1ab3922df0aa1\" id=\"7accff6cc8dcd38b56d1ab3922df0aa1\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fpng%2F1500604%2F1603797939165-3bf54e28-5469-4093-a0e1-e0569cec1305.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A663%2C%22height%22%3A307%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A663%2C%22originHeight%22%3A307%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23e1e5a4%22%2C%22id%22%3A%22MziEN%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"8727b4f2251aa20830356eb25a5a41c4\" id=\"8727b4f2251aa20830356eb25a5a41c4\"><strong><span data-lake-id=\"ue606110a\" id=\"ue606110a\">注意：</span></strong><span data-lake-id=\"uc1f24555\" id=\"uc1f24555\">这个过程是逐步完成的，为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html 都解析完成之后再去构建和布局 render 树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</span></p><h3 data-lake-id=\"b45d69a1233b815f6e9574d74747c3c4\" id=\"b45d69a1233b815f6e9574d74747c3c4\"><span data-lake-id=\"u87521fea\" id=\"u87521fea\">2. 浏览器渲染优化</span></h3><p data-lake-id=\"ba673103889330b5cf8935998d4cb84f\" id=\"ba673103889330b5cf8935998d4cb84f\"><strong><span data-lake-id=\"ufae470f6\" id=\"ufae470f6\">（1）针对JavaScript：</span></strong><span data-lake-id=\"u5ddf4843\" id=\"u5ddf4843\">JavaScript既会阻塞HTML的解析，也会阻塞CSS的解析。因此我们可以对JavaScript的加载方式进行改变，来进行优化：</span></p><p data-lake-id=\"19b7e849910177812579807d124c577a\" id=\"19b7e849910177812579807d124c577a\"><span data-lake-id=\"ubf521b76\" id=\"ubf521b76\">（1）尽量将JavaScript文件放在body的最后</span></p><p data-lake-id=\"a101ac08f26f6ec1bb0ddc4778ea3c76\" id=\"a101ac08f26f6ec1bb0ddc4778ea3c76\"><span data-lake-id=\"u013e4a30\" id=\"u013e4a30\">（2） body中间尽量不要写</span><code data-lake-id=\"u9e8e0098\" id=\"u9e8e0098\"><span data-lake-id=\"ue34b1ef1\" id=\"ue34b1ef1\">&lt;script&gt;</span></code><span data-lake-id=\"u85d4d68c\" id=\"u85d4d68c\">标签</span></p><p data-lake-id=\"f22161bf179eadfb71cfcc69657af1df\" id=\"f22161bf179eadfb71cfcc69657af1df\"><span data-lake-id=\"udcc79807\" id=\"udcc79807\">（3）</span><code data-lake-id=\"u12bac9dd\" id=\"u12bac9dd\"><span data-lake-id=\"u91f38f55\" id=\"u91f38f55\">&lt;script&gt;</span></code><span data-lake-id=\"ua5438892\" id=\"ua5438892\">标签的引入资源方式有三种，有一种就是我们常用的直接引入，还有两种就是使用 async 属性和 defer 属性来异步引入，两者都是去异步加载外部的JS文件，不会阻塞DOM的解析（尽量使用异步加载）。三者的区别如下：</span></p><ul list=\"u85d0b63a\"><li fid=\"uc6ed821d\" data-lake-id=\"d08f7d4018fb74fad11a8eda394596ae\" id=\"d08f7d4018fb74fad11a8eda394596ae\"><strong><span data-lake-id=\"u001d2d66\" id=\"u001d2d66\">script</span></strong><span data-lake-id=\"ue543554d\" id=\"ue543554d\"> 立即停止页面渲染去加载资源文件，当资源加载完毕后立即执行js代码，js代码执行完毕后继续渲染页面；</span></li><li fid=\"uc6ed821d\" data-lake-id=\"d4b99cd2e34ad4173144d811433feec8\" id=\"d4b99cd2e34ad4173144d811433feec8\"><strong><span data-lake-id=\"u1df398e7\" id=\"u1df398e7\">async</span></strong><span data-lake-id=\"ufda1f850\" id=\"ufda1f850\"> 是在下载完成之后，立即异步加载，加载好后立即执行，多个带async属性的标签，不能保证加载的顺序；</span></li><li fid=\"uc6ed821d\" data-lake-id=\"93a3bfdd8fa876b32baecd1ccc61f053\" id=\"93a3bfdd8fa876b32baecd1ccc61f053\"><strong><span data-lake-id=\"u6248305d\" id=\"u6248305d\">defer</span></strong><span data-lake-id=\"u604edd5c\" id=\"u604edd5c\"> 是在下载完成之后，立即异步加载。加载好后，如果 DOM 树还没构建好，则先等 DOM 树解析好再执行；如果DOM树已经准备好，则立即执行。多个带defer属性的标签，按照顺序执行。</span></li></ul><p data-lake-id=\"a83ba69cfeea9fdddb9d6bf1f5261091\" id=\"a83ba69cfeea9fdddb9d6bf1f5261091\"><br></p><p data-lake-id=\"05935521424479313d5bbf08c8774e6c\" id=\"05935521424479313d5bbf08c8774e6c\"><strong><span data-lake-id=\"u97e4e284\" id=\"u97e4e284\">（2）针对CSS：</span></strong><span data-lake-id=\"u3b7b92bf\" id=\"u3b7b92bf\">使用CSS有三种方式：使用</span><strong><span data-lake-id=\"u5af25fbb\" id=\"u5af25fbb\">link、@import、内联样式</span></strong><span data-lake-id=\"u770420df\" id=\"u770420df\">，其中link和@import都是导入外部样式。它们之间的区别：</span></p><ul list=\"u3ff9f187\"><li fid=\"ucee026b4\" data-lake-id=\"2803604c7fa61b21a95a84f0b0f51e2e\" id=\"2803604c7fa61b21a95a84f0b0f51e2e\"><strong><span data-lake-id=\"uc0ed1d8a\" id=\"uc0ed1d8a\">link</span></strong><span data-lake-id=\"ubc9cff31\" id=\"ubc9cff31\">：浏览器会派发一个新等线程(HTTP线程)去加载资源文件，与此同时GUI渲染线程会继续向下渲染代码</span></li><li fid=\"ucee026b4\" data-lake-id=\"eacf130674c15d8243e5eeacc4822702\" id=\"eacf130674c15d8243e5eeacc4822702\"><strong><span data-lake-id=\"uf3243550\" id=\"uf3243550\">@import</span></strong><span data-lake-id=\"u5dc05d3f\" id=\"u5dc05d3f\">：GUI渲染线程会暂时停止渲染，去服务器加载资源文件，资源文件没有返回之前不会继续渲染(阻碍浏览器渲染)</span></li><li fid=\"ucee026b4\" data-lake-id=\"fd9872b67c3a36366558dcd703a26103\" id=\"fd9872b67c3a36366558dcd703a26103\"><strong><span data-lake-id=\"u395c357f\" id=\"u395c357f\">style</span></strong><span data-lake-id=\"ucb314748\" id=\"ucb314748\">：GUI直接渲染</span></li></ul><p data-lake-id=\"0682b4888f51e086b906884de6a6195d\" id=\"0682b4888f51e086b906884de6a6195d\"><br></p><p data-lake-id=\"351784e85495ad1bd4c3b940e1ce233d\" id=\"351784e85495ad1bd4c3b940e1ce233d\"><span data-lake-id=\"u7fd1d005\" id=\"u7fd1d005\">外部样式如果长时间没有加载完毕，浏览器为了用户体验，会使用浏览器会默认样式，确保首次渲染的速度。所以CSS一般写在headr中，让浏览器尽快发送请求去获取css样式。</span></p><p data-lake-id=\"1b159d1d9d79c1ce7ed113f9341aa695\" id=\"1b159d1d9d79c1ce7ed113f9341aa695\"><br></p><p data-lake-id=\"0cbe5be27b4ac7de176f7a3aaec347af\" id=\"0cbe5be27b4ac7de176f7a3aaec347af\"><span data-lake-id=\"uad846323\" id=\"uad846323\">所以，在开发过程中，导入外部样式使用link，而不用@import。如果css少，尽可能采用内嵌样式，直接写在style标签中。</span></p><p data-lake-id=\"2fca5ddca5f6a4f796dccf8e3238e4f7\" id=\"2fca5ddca5f6a4f796dccf8e3238e4f7\"><br></p><p data-lake-id=\"fc94704af5aa3d377191664b345c9712\" id=\"fc94704af5aa3d377191664b345c9712\"><strong><span data-lake-id=\"u9deb4e18\" id=\"u9deb4e18\">（3）针对DOM树、CSSOM树：</span></strong></p><p data-lake-id=\"bf17ffc8df27b4199a8c7566c740fae9\" id=\"bf17ffc8df27b4199a8c7566c740fae9\"><span data-lake-id=\"u3718dc6d\" id=\"u3718dc6d\">可以通过以下几种方式来减少渲染的时间：</span></p><ul list=\"u30958298\"><li fid=\"ub4a943a3\" data-lake-id=\"8976c786251517298fa62bfd61e0d405\" id=\"8976c786251517298fa62bfd61e0d405\"><span data-lake-id=\"u4578f1b7\" id=\"u4578f1b7\">HTML文件的代码层级尽量不要太深</span></li><li fid=\"ub4a943a3\" data-lake-id=\"7e65346c60a28fe9f1eac8054ad1d3a9\" id=\"7e65346c60a28fe9f1eac8054ad1d3a9\"><span data-lake-id=\"uf3daccf7\" id=\"uf3daccf7\">使用语义化的标签，来避免不标准语义化的特殊处理</span></li><li fid=\"ub4a943a3\" data-lake-id=\"a58b3c472a2db2aa29b59ba54ccc30eb\" id=\"a58b3c472a2db2aa29b59ba54ccc30eb\"><span data-lake-id=\"ucae3492d\" id=\"ucae3492d\">减少CSSD代码的层级，因为选择器是从左向右进行解析的</span></li></ul><p data-lake-id=\"5a519d46a8b36734ebea44b74b67fdaf\" id=\"5a519d46a8b36734ebea44b74b67fdaf\"><br></p><p data-lake-id=\"6ce85f2b7a0b55a1b04c6d020cc43aee\" id=\"6ce85f2b7a0b55a1b04c6d020cc43aee\"><strong><span data-lake-id=\"u7cfed0e8\" id=\"u7cfed0e8\">（4）减少回流与重绘：</span></strong></p><ul list=\"u0813f1a3\"><li fid=\"u66ef1052\" data-lake-id=\"e8f310ee219f67b9d5cae4cc1fc202bd\" id=\"e8f310ee219f67b9d5cae4cc1fc202bd\"><span data-lake-id=\"ue1c739a0\" id=\"ue1c739a0\">操作DOM时，尽量在低层级的DOM节点进行操作</span></li><li fid=\"u66ef1052\" data-lake-id=\"28009de6b27d090565fd972a1420d520\" id=\"28009de6b27d090565fd972a1420d520\"><span data-lake-id=\"u3a8d759e\" id=\"u3a8d759e\">不要使用</span><code data-lake-id=\"u6120a372\" id=\"u6120a372\"><span data-lake-id=\"u50facaea\" id=\"u50facaea\">table</span></code><span data-lake-id=\"u26598ab8\" id=\"u26598ab8\">布局， 一个小的改动可能会使整个</span><code data-lake-id=\"udcf090a0\" id=\"udcf090a0\"><span data-lake-id=\"u49e7e186\" id=\"u49e7e186\">table</span></code><span data-lake-id=\"u9113ab8b\" id=\"u9113ab8b\">进行重新布局</span></li><li fid=\"u66ef1052\" data-lake-id=\"9b2644e0d84914eb170bdad012058eee\" id=\"9b2644e0d84914eb170bdad012058eee\"><span data-lake-id=\"uf650a40b\" id=\"uf650a40b\">使用CSS的表达式</span></li><li fid=\"u66ef1052\" data-lake-id=\"dba0828d3f59ee0762c00dd8376d5300\" id=\"dba0828d3f59ee0762c00dd8376d5300\"><span data-lake-id=\"ue485f01a\" id=\"ue485f01a\">不要频繁操作元素的样式，对于静态页面，可以修改类名，而不是样式。</span></li><li fid=\"u66ef1052\" data-lake-id=\"11af377deff03259796da21901b069fd\" id=\"11af377deff03259796da21901b069fd\"><span data-lake-id=\"ua265daa9\" id=\"ua265daa9\">使用absolute或者fixed，使元素脱离文档流，这样他们发生变化就不会影响其他元素</span></li><li fid=\"u66ef1052\" data-lake-id=\"67af8d757a991461ea9e3544d053366f\" id=\"67af8d757a991461ea9e3544d053366f\"><span data-lake-id=\"ud2cecc7e\" id=\"ud2cecc7e\">避免频繁操作DOM，可以创建一个文档片段</span><code data-lake-id=\"u03ed7e7c\" id=\"u03ed7e7c\"><span data-lake-id=\"ua7d67163\" id=\"ua7d67163\">documentFragment</span></code><span data-lake-id=\"u28d12743\" id=\"u28d12743\">，在它上面应用所有DOM操作，最后再把它添加到文档中</span></li><li fid=\"u66ef1052\" data-lake-id=\"cd06d3560ca2a821ca5b87879eb6a34e\" id=\"cd06d3560ca2a821ca5b87879eb6a34e\"><span data-lake-id=\"ua895ce61\" id=\"ua895ce61\">将元素先设置</span><code data-lake-id=\"ub9250ab0\" id=\"ub9250ab0\"><span data-lake-id=\"u2105938a\" id=\"u2105938a\">display: none</span></code><span data-lake-id=\"u3cd98abb\" id=\"u3cd98abb\">，操作结束后再把它显示出来。因为在display属性为none的元素上进行的DOM操作不会引发回流和重绘。</span></li><li fid=\"u66ef1052\" data-lake-id=\"be3aadf225c5aa57b8ab8e6b1393c037\" id=\"be3aadf225c5aa57b8ab8e6b1393c037\"><span data-lake-id=\"u97f21cad\" id=\"u97f21cad\">将DOM的多个读操作（或者写操作）放在一起，而不是读写操作穿插着写。这得益于</span><strong><span data-lake-id=\"uf0d42bc0\" id=\"uf0d42bc0\">浏览器的渲染队列机制</span></strong><span data-lake-id=\"u368075da\" id=\"u368075da\">。</span></li></ul><p data-lake-id=\"6680634d6c82a0a5a265a1200a99c0d8\" id=\"6680634d6c82a0a5a265a1200a99c0d8\"><br></p><p data-lake-id=\"85a217ae6508fd868ce612ab466b7157\" id=\"85a217ae6508fd868ce612ab466b7157\"><span data-lake-id=\"u431f69c2\" id=\"u431f69c2\">浏览器针对页面的回流与重绘，进行了自身的优化——</span><strong><span data-lake-id=\"uad75949f\" id=\"uad75949f\">渲染队列</span></strong></p><p data-lake-id=\"460c82c081f3cd2f4d7a883a7b43831a\" id=\"460c82c081f3cd2f4d7a883a7b43831a\"><br></p><p data-lake-id=\"d8c2a243ca5ed68a2d3e5c08e01371a4\" id=\"d8c2a243ca5ed68a2d3e5c08e01371a4\"><strong><span data-lake-id=\"ucaabe5ba\" id=\"ucaabe5ba\">浏览器会将所有的回流、重绘的操作放在一个队列中，当队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会对队列进行批处理。这样就会让多次的回流、重绘变成一次回流重绘。</span></strong></p><p data-lake-id=\"fa860204ba3f19b219391ff06f6e5be1\" id=\"fa860204ba3f19b219391ff06f6e5be1\"><br></p><p data-lake-id=\"5a6f47cb5cb4969d50f51e667b45ab23\" id=\"5a6f47cb5cb4969d50f51e667b45ab23\"><span data-lake-id=\"u99f68ce5\" id=\"u99f68ce5\">将多个读操作（或者写操作）放在一起，就会等所有的读操作进入队列之后执行，这样，原本应该是触发多次回流，变成了只触发一次回流。</span></p><h3 data-lake-id=\"6b19dc50ffe93f10f8859cfec811a015\" id=\"6b19dc50ffe93f10f8859cfec811a015\"><span data-lake-id=\"uaa737a81\" id=\"uaa737a81\">3. 渲染过程中遇到 JS 文件如何处理？</span></h3><p data-lake-id=\"739ba41fce4d5936631813c01f45d2da\" id=\"739ba41fce4d5936631813c01f45d2da\"><span data-lake-id=\"u19a9564f\" id=\"u19a9564f\">JavaScript 的加载、解析与执行会阻塞文档的解析，也就是说，在构建 DOM 时，HTML 解析器若遇到了 JavaScript，那么它会暂停文档的解析，将控制权移交给 JavaScript 引擎，等 JavaScript 引擎运行完毕，浏览器再从中断的地方恢复继续解析文档。也就是说，如果想要首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。</span></p><h3 data-lake-id=\"5ec659018b9c0636b1b16184af4e1f64\" id=\"5ec659018b9c0636b1b16184af4e1f64\"><span data-lake-id=\"u41499ee4\" id=\"u41499ee4\">4. 什么是文档的预解析？</span></h3><p data-lake-id=\"c40f8558dd3051d151c1e00b909b57dc\" id=\"c40f8558dd3051d151c1e00b909b57dc\"><span data-lake-id=\"u26cff4cb\" id=\"u26cff4cb\">Webkit 和 Firefox 都做了这个优化，当执行 JavaScript 脚本时，另一个线程解析剩下的文档，并加载后面需要通过网络加载的资源。这种方式可以使资源并行加载从而使整体速度更快。需要注意的是，预解析并不改变 DOM 树，它将这个工作留给主解析过程，自己只解析外部资源的引用，比如外部脚本、样式表及图片。</span></p><h3 data-lake-id=\"74c01464f6f8a81cb413286232794089\" id=\"74c01464f6f8a81cb413286232794089\"><span data-lake-id=\"ue55b9fb0\" id=\"ue55b9fb0\">5. CSS 如何阻塞文档解析？</span></h3><p data-lake-id=\"beec2ab3c0854a02162fd7c669e5e008\" id=\"beec2ab3c0854a02162fd7c669e5e008\"><span data-lake-id=\"u8e6b1ee7\" id=\"u8e6b1ee7\">理论上，既然样式表不改变 DOM 树，也就没有必要停下文档的解析等待它们。然而，存在一个问题，JavaScript 脚本执行时可能在文档的解析过程中请求样式信息，如果样式还没有加载和解析，脚本将得到错误的值，显然这将会导致很多问题。所以如果浏览器尚未完成 CSSOM 的下载和构建，而我们却想在此时运行脚本，那么浏览器将延迟 JavaScript 脚本执行和文档的解析，直至其完成 CSSOM 的下载和构建。也就是说，在这种情况下，浏览器会先下载和构建 CSSOM，然后再执行 JavaScript，最后再继续文档的解析。</span></p><h3 data-lake-id=\"1739a02a96c8698931ff89e979add920\" id=\"1739a02a96c8698931ff89e979add920\"><span data-lake-id=\"u70695d02\" id=\"u70695d02\">6. 如何优化关键渲染路径？</span></h3><p data-lake-id=\"b6fb6388d5bf7af00a9be5a1fbdc1f47\" id=\"b6fb6388d5bf7af00a9be5a1fbdc1f47\"><span data-lake-id=\"u7094330d\" id=\"u7094330d\">为尽快完成首次渲染，我们需要最大限度减小以下三种可变因素：</span></p><p data-lake-id=\"da1490fa6871102bc64ac79a05903823\" id=\"da1490fa6871102bc64ac79a05903823\"><span data-lake-id=\"u497e540f\" id=\"u497e540f\"> （1）关键资源的数量。</span></p><p data-lake-id=\"f9c909d33c07f3681a96fb4814ecede1\" id=\"f9c909d33c07f3681a96fb4814ecede1\"><span data-lake-id=\"ud2c03ef3\" id=\"ud2c03ef3\"> （2）关键路径长度。</span></p><p data-lake-id=\"0257ad4a497ac2c5581a24752bdd89d1\" id=\"0257ad4a497ac2c5581a24752bdd89d1\"><span data-lake-id=\"uf267f245\" id=\"uf267f245\"> （3）关键字节的数量。</span></p><p data-lake-id=\"576b7f7117c1aa4dbafcb6f5b6d14936\" id=\"576b7f7117c1aa4dbafcb6f5b6d14936\"><br></p><p data-lake-id=\"2496217e3a335535e69f31b0c7e28309\" id=\"2496217e3a335535e69f31b0c7e28309\"><span data-lake-id=\"uadc6d36f\" id=\"uadc6d36f\">关键资源是可能阻止网页首次渲染的资源。这些资源越少，浏览器的工作量就越小，对 CPU 以及其他资源的占用也就越少。同样，关键路径长度受所有关键资源与其字节大小之间依赖关系图的影响：某些资源只能在上一资源处理完毕之后才能开始下载，并且资源越大，下载所需的往返次数就越多。最后，浏览器需要下载的关键字节越少，处理内容并让其出现在屏幕上的速度就越快。要减少字节数，我们可以减少资源数（将它们删除或设为非关键资源），此外还要压缩和优化各项资源，确保最大限度减小传送大小。</span></p><p data-lake-id=\"05cba74378343b5ef42c0e473933e0e5\" id=\"05cba74378343b5ef42c0e473933e0e5\"><br></p><p data-lake-id=\"d0d5c2006591e76f89bebdf5c492b98d\" id=\"d0d5c2006591e76f89bebdf5c492b98d\"><span data-lake-id=\"u2d2840ae\" id=\"u2d2840ae\">优化关键渲染路径的常规步骤如下：</span></p><p data-lake-id=\"f9fee2e19330820ab8c153fe5649fc60\" id=\"f9fee2e19330820ab8c153fe5649fc60\"><span data-lake-id=\"ub9d16a4e\" id=\"ub9d16a4e\"> （1）对关键路径进行分析和特性描述：资源数、字节数、长度。</span></p><p data-lake-id=\"dc2b132c23ed3c2263cf6660d9aa60e6\" id=\"dc2b132c23ed3c2263cf6660d9aa60e6\"><span data-lake-id=\"ue41c7417\" id=\"ue41c7417\"> （2）最大限度减少关键资源的数量：删除它们，延迟它们的下载，将它们标记为异步等。</span></p><p data-lake-id=\"707f229079891085d1a6b1cd527e3318\" id=\"707f229079891085d1a6b1cd527e3318\"><span data-lake-id=\"ube4d9936\" id=\"ube4d9936\"> （3）优化关键字节数以缩短下载时间（往返次数）。</span></p><p data-lake-id=\"19e9fee16396599a676589220481c408\" id=\"19e9fee16396599a676589220481c408\"><span data-lake-id=\"ua4b25532\" id=\"ua4b25532\"> （4）优化其余关键资源的加载顺序：您需要尽早下载所有关键资产，以缩短关键路径长度</span></p><h3 data-lake-id=\"4a36b3739d67c39f94e60e6dbb6754b9\" id=\"4a36b3739d67c39f94e60e6dbb6754b9\"><span data-lake-id=\"u6cd48cf8\" id=\"u6cd48cf8\">7. 什么情况会阻塞渲染？</span></h3><p data-lake-id=\"b569dae260e29361f054d11a0f2945ae\" id=\"b569dae260e29361f054d11a0f2945ae\"><span data-lake-id=\"u8cd67ca5\" id=\"u8cd67ca5\">首先渲染的前提是生成渲染树，所以 HTML 和 CSS 肯定会阻塞渲染。如果你想渲染的越快，你越应该降低一开始需要渲染的文件大小，并且扁平层级，优化选择器。然后当浏览器在解析到 script 标签时，会暂停构建 DOM，完成后才会从暂停的地方重新开始。也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件，这也是都建议将 script 标签放在 body 标签底部的原因。</span></p><p data-lake-id=\"a66d47c27dc7282b7ba6f8e12b997297\" id=\"a66d47c27dc7282b7ba6f8e12b997297\"><br></p><p data-lake-id=\"25257b29e9ef113d5aea824bc9bf633c\" id=\"25257b29e9ef113d5aea824bc9bf633c\"><span data-lake-id=\"u41dea2c4\" id=\"u41dea2c4\">当然在当下，并不是说 script 标签必须放在底部，因为你可以给 script 标签添加 defer 或者 async 属性。当 script 标签加上 defer 属性以后，表示该 JS 文件会并行下载，但是会放到 HTML 解析完成后顺序执行，所以对于这种情况你可以把 script 标签放在任意位置。对于没有任何依赖的 JS 文件可以加上 async 属性，表示 JS 文件下载和解析不会阻塞渲染。</span></p><p data-lake-id=\"u69599b91\" id=\"u69599b91\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673895372846-d4c6f77d-78ca-45f7-a4c2-2bf52a65e062.png%22%2C%22taskId%22%3A%22u9b007860-bcce-44f9-96d8-a6ba73fa1e7%22%2C%22clientId%22%3A%22u99f2bd58-2b6a-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u148ac41e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h2 data-lake-id=\"a4d170f36bde519199a4e337624987bd\" id=\"a4d170f36bde519199a4e337624987bd\"><span data-lake-id=\"u42c9b219\" id=\"u42c9b219\">六、浏览器本地存储</span></h2><h3 data-lake-id=\"e2708baddfbe8d490b0eb7dfcf56bd2b\" id=\"e2708baddfbe8d490b0eb7dfcf56bd2b\"><span data-lake-id=\"u507e164b\" id=\"u507e164b\">1. 浏览器本地存储方式及使用场景</span></h3><h4 data-lake-id=\"00d8515845d52e9c4db1439f1aaaeedb\" id=\"00d8515845d52e9c4db1439f1aaaeedb\"><span data-lake-id=\"u5be4ceef\" id=\"u5be4ceef\">（1）Cookie</span></h4><p data-lake-id=\"4f97e0d4d83cd0c0728140a46dd80bcd\" id=\"4f97e0d4d83cd0c0728140a46dd80bcd\"><span data-lake-id=\"u3783de11\" id=\"u3783de11\">Cookie是最早被提出来的本地存储方式，在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie就出现了。Cookie的大小只有4kb，它是一种纯文本文件，每次发起HTTP请求都会携带Cookie。</span></p><p data-lake-id=\"bdfc2bca0804c6324bd48294a0bf231b\" id=\"bdfc2bca0804c6324bd48294a0bf231b\"><br></p><p data-lake-id=\"cba01b064bb0ff27beb4c439056cb5af\" id=\"cba01b064bb0ff27beb4c439056cb5af\"><strong><span data-lake-id=\"uc46cbab2\" id=\"uc46cbab2\">Cookie的特性：</span></strong></p><ul list=\"ue6c6650d\"><li fid=\"u260dbfde\" data-lake-id=\"0e7009af368fd65e9c5849ab51fc73f5\" id=\"0e7009af368fd65e9c5849ab51fc73f5\"><span data-lake-id=\"u8b77922c\" id=\"u8b77922c\">Cookie一旦创建成功，名称就无法修改</span></li><li fid=\"u260dbfde\" data-lake-id=\"1151dced9613e68f8fe596668a0076c8\" id=\"1151dced9613e68f8fe596668a0076c8\"><span data-lake-id=\"uaa9c6410\" id=\"uaa9c6410\">Cookie是无法跨域名的，也就是说a域名和b域名下的cookie是无法共享的，这也是由Cookie的隐私安全性决定的，这样就能够阻止非法获取其他网站的Cookie</span></li><li fid=\"u260dbfde\" data-lake-id=\"24eff9888591428e50a6dd60673bc1e6\" id=\"24eff9888591428e50a6dd60673bc1e6\"><span data-lake-id=\"u05923d3b\" id=\"u05923d3b\">每个域名下Cookie的数量不能超过20个，每个Cookie的大小不能超过4kb</span></li><li fid=\"u260dbfde\" data-lake-id=\"6819c9426efa304490f788508224b6a7\" id=\"6819c9426efa304490f788508224b6a7\"><span data-lake-id=\"u2acfb78b\" id=\"u2acfb78b\">有安全问题，如果Cookie被拦截了，那就可获得session的所有信息，即使加密也于事无补，无需知道cookie的意义，只要转发cookie就能达到目的</span></li><li fid=\"u260dbfde\" data-lake-id=\"93314da2004a4d869f7ec94da33ce122\" id=\"93314da2004a4d869f7ec94da33ce122\"><span data-lake-id=\"u7df7547b\" id=\"u7df7547b\">Cookie在请求一个新的页面的时候都会被发送过去</span></li></ul><p data-lake-id=\"8e019fec765c391085d1eaed819112ac\" id=\"8e019fec765c391085d1eaed819112ac\"><br></p><p data-lake-id=\"0c0b90165516e0d88338ccb9e40ac35b\" id=\"0c0b90165516e0d88338ccb9e40ac35b\"><span data-lake-id=\"u895ec0e3\" id=\"u895ec0e3\">如果需要域名之间跨域共享Cookie，有两种方法：</span></p><ol list=\"u831b3408\"><li fid=\"u39db56f3\" data-lake-id=\"58649c8a1dcc12aff43d199c20aa4d60\" id=\"58649c8a1dcc12aff43d199c20aa4d60\"><span data-lake-id=\"udf42c9c4\" id=\"udf42c9c4\">使用Nginx反向代理</span></li><li fid=\"u39db56f3\" data-lake-id=\"f8314a1f4e34219c76066059495b852a\" id=\"f8314a1f4e34219c76066059495b852a\"><span data-lake-id=\"uf6e7e1f2\" id=\"uf6e7e1f2\">在一个站点登陆之后，往其他网站写Cookie。服务端的Session存储到一个节点，Cookie存储sessionId</span></li></ol><p data-lake-id=\"074e3558cc3beccf179e817b94f817e7\" id=\"074e3558cc3beccf179e817b94f817e7\"><br></p><p data-lake-id=\"4dc5fee63db56ba9df61c65b6fbbf7e5\" id=\"4dc5fee63db56ba9df61c65b6fbbf7e5\"><strong><span data-lake-id=\"u6e187ea6\" id=\"u6e187ea6\">Cookie的使用场景：</span></strong></p><ul list=\"u33f13fc7\"><li fid=\"u5bc58545\" data-lake-id=\"dfe7af13d142a415419a69d3cd8c7f6c\" id=\"dfe7af13d142a415419a69d3cd8c7f6c\"><span data-lake-id=\"u57152c77\" id=\"u57152c77\">最常见的使用场景就是Cookie和session结合使用，我们将sessionId存储到Cookie中，每次发请求都会携带这个sessionId，这样服务端就知道是谁发起的请求，从而响应相应的信息。</span></li><li fid=\"u5bc58545\" data-lake-id=\"3c3f7695ce531ef73cfe55e938f29d02\" id=\"3c3f7695ce531ef73cfe55e938f29d02\"><span data-lake-id=\"u6308ce2b\" id=\"u6308ce2b\">可以用来统计页面的点击次数</span></li></ul><h4 data-lake-id=\"27ca92d53e6f2c41efa974ff68d64c17\" id=\"27ca92d53e6f2c41efa974ff68d64c17\"><span data-lake-id=\"ue6960345\" id=\"ue6960345\">（2）LocalStorage</span></h4><p data-lake-id=\"4db770a97f82040513a306c8929c2f61\" id=\"4db770a97f82040513a306c8929c2f61\"><span data-lake-id=\"u3af8bf23\" id=\"u3af8bf23\">LocalStorage是HTML5新引入的特性，由于有的时候我们存储的信息较大，Cookie就不能满足我们的需求，这时候LocalStorage就派上用场了。</span></p><p data-lake-id=\"68895e2710d7fafcc2aa24795941db33\" id=\"68895e2710d7fafcc2aa24795941db33\"><br></p><p data-lake-id=\"b76403eb232c1f0878596eb1170699aa\" id=\"b76403eb232c1f0878596eb1170699aa\"><strong><span data-lake-id=\"u3307ad73\" id=\"u3307ad73\">LocalStorage的优点：</span></strong></p><ul list=\"u81cba9ed\"><li fid=\"u5b981837\" data-lake-id=\"c061678d6d564b0302351a47a66f796a\" id=\"c061678d6d564b0302351a47a66f796a\"><span data-lake-id=\"uf0f507ca\" id=\"uf0f507ca\">在大小方面，LocalStorage的大小一般为5MB，可以储存更多的信息</span></li><li fid=\"u5b981837\" data-lake-id=\"29a19ddb3936926e210ad95694569a6a\" id=\"29a19ddb3936926e210ad95694569a6a\"><span data-lake-id=\"u07fd5d72\" id=\"u07fd5d72\">LocalStorage是持久储存，并不会随着页面的关闭而消失，除非主动清理，不然会永久存在</span></li><li fid=\"u5b981837\" data-lake-id=\"136252765e958c094019dad1e6153921\" id=\"136252765e958c094019dad1e6153921\"><span data-lake-id=\"u46430782\" id=\"u46430782\">仅储存在本地，不像Cookie那样每次HTTP请求都会被携带</span></li></ul><p data-lake-id=\"31b954b17d3bb181e0ca40a0f02166e4\" id=\"31b954b17d3bb181e0ca40a0f02166e4\"><br></p><p data-lake-id=\"f14e6833789a163108d68cabd92ecb1a\" id=\"f14e6833789a163108d68cabd92ecb1a\"><strong><span data-lake-id=\"ub2e9658f\" id=\"ub2e9658f\">LocalStorage的缺点：</span></strong></p><ul list=\"u9a30dd99\"><li fid=\"u5004820f\" data-lake-id=\"e87eb57d4f033efb3c88cc64181b0461\" id=\"e87eb57d4f033efb3c88cc64181b0461\"><span data-lake-id=\"u015600a4\" id=\"u015600a4\">存在浏览器兼容问题，IE8以下版本的浏览器不支持</span></li><li fid=\"u5004820f\" data-lake-id=\"2c3b9a601a12132ae59e85fdf07d5d59\" id=\"2c3b9a601a12132ae59e85fdf07d5d59\"><span data-lake-id=\"u4397e7f1\" id=\"u4397e7f1\">如果浏览器设置为隐私模式，那我们将无法读取到LocalStorage</span></li><li fid=\"u5004820f\" data-lake-id=\"48cc53013658b391875f64e84d4295e5\" id=\"48cc53013658b391875f64e84d4295e5\"><span data-lake-id=\"u7494b33a\" id=\"u7494b33a\">LocalStorage受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问</span></li></ul><p data-lake-id=\"dfda5a15012f3baa9a3e1b6814bad30f\" id=\"dfda5a15012f3baa9a3e1b6814bad30f\"><br></p><p data-lake-id=\"b44e6e91c7fd8342f84192d29ddeaf8b\" id=\"b44e6e91c7fd8342f84192d29ddeaf8b\"><strong><span data-lake-id=\"u6c24734c\" id=\"u6c24734c\">LocalStorage的</span></strong><strong><span data-lake-id=\"ud6d039ad\" id=\"ud6d039ad\">常用API：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%20localStorage%5CnlocalStorage.setItem('key'%2C%20'value')%3B%5Cn%5Cn%2F%2F%20%E4%BB%8E%20localStorage%20%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%5Cnlet%20data%20%3D%20localStorage.getItem('key')%3B%5Cn%5Cn%2F%2F%20%E4%BB%8E%20localStorage%20%E5%88%A0%E9%99%A4%E4%BF%9D%E5%AD%98%E7%9A%84%E6%95%B0%E6%8D%AE%5CnlocalStorage.removeItem('key')%3B%5Cn%5Cn%2F%2F%20%E4%BB%8E%20localStorage%20%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E4%BF%9D%E5%AD%98%E7%9A%84%E6%95%B0%E6%8D%AE%5CnlocalStorage.clear()%3B%5Cn%5Cn%2F%2F%20%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E7%B4%A2%E5%BC%95%E7%9A%84Key%5CnlocalStorage.key(index)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22de52ed5f%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"68644965d570a8fa0094bb60281049fa\" id=\"68644965d570a8fa0094bb60281049fa\"><strong><span data-lake-id=\"u8e235f0e\" id=\"u8e235f0e\">LocalStorage的</span></strong><strong><span data-lake-id=\"u75140ee9\" id=\"u75140ee9\">使用场景：</span></strong></p><ul list=\"u620dd6c0\"><li fid=\"u49ce78e3\" data-lake-id=\"d0ff01537f3a0f2cc48c71622d4cb99c\" id=\"d0ff01537f3a0f2cc48c71622d4cb99c\"><span data-lake-id=\"u3d6b3e88\" id=\"u3d6b3e88\">有些网站有换肤的功能，这时候就可以将换肤的信息存储在本地的LocalStorage中，当需要换肤的时候，直接操作LocalStorage即可</span></li><li fid=\"u49ce78e3\" data-lake-id=\"b1a73f8f4ae73651657c2d1b2be42ae8\" id=\"b1a73f8f4ae73651657c2d1b2be42ae8\"><span data-lake-id=\"uf8546137\" id=\"uf8546137\">在网站中的用户浏览信息也会存储在LocalStorage中，还有网站的一些不常变动的个人信息等也可以存储在本地的LocalStorage中</span></li></ul><h4 data-lake-id=\"4df9a2b2b60e9a6a52d3ce264bc28559\" id=\"4df9a2b2b60e9a6a52d3ce264bc28559\"><span data-lake-id=\"u101a2654\" id=\"u101a2654\">（3）SessionStorage</span></h4><p data-lake-id=\"0a4a6bd3a7c25085b432caa74c98bb92\" id=\"0a4a6bd3a7c25085b432caa74c98bb92\"><span data-lake-id=\"u2c106505\" id=\"u2c106505\">SessionStorage和LocalStorage都是在HTML5才提出来的存储方案，SessionStorage 主要用于临时保存同一窗口(或标签页)的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。</span></p><p data-lake-id=\"9e90d7d5131ebaba4e02262a9419034d\" id=\"9e90d7d5131ebaba4e02262a9419034d\"><br></p><p data-lake-id=\"53ddc01a9454cab81397930a95caf9b4\" id=\"53ddc01a9454cab81397930a95caf9b4\"><strong><span data-lake-id=\"uef1dec64\" id=\"uef1dec64\">SessionStorage</span></strong><strong><span data-lake-id=\"u8c21e079\" id=\"u8c21e079\">与LocalStorage对比：</span></strong></p><ul list=\"u875420f4\"><li fid=\"ub26e068f\" data-lake-id=\"dba37440b285f7d00103007615edc570\" id=\"dba37440b285f7d00103007615edc570\"><span data-lake-id=\"ueb45cb6f\" id=\"ueb45cb6f\">SessionStorage和LocalStorage都在</span><strong><span data-lake-id=\"u41cd1776\" id=\"u41cd1776\">本地进行数据存储</span></strong><span data-lake-id=\"u8f4d5f64\" id=\"u8f4d5f64\">；</span></li><li fid=\"ub26e068f\" data-lake-id=\"d968338093850ede05e056c4d4de622f\" id=\"d968338093850ede05e056c4d4de622f\"><span data-lake-id=\"u013ffada\" id=\"u013ffada\">SessionStorage也有同源策略的限制，但是SessionStorage有一条更加严格的限制，SessionStorage</span><strong><span data-lake-id=\"u5befaec9\" id=\"u5befaec9\">只有在同一浏览器的同一窗口下才能够共享</span></strong><span data-lake-id=\"uda5012f6\" id=\"uda5012f6\">；</span></li><li fid=\"ub26e068f\" data-lake-id=\"6996d05c9ce13cadfd5a1926b3bbafce\" id=\"6996d05c9ce13cadfd5a1926b3bbafce\"><span data-lake-id=\"ud1126855\" id=\"ud1126855\">LocalStorage和SessionStorage</span><strong><span data-lake-id=\"ufc34f0d8\" id=\"ufc34f0d8\">都不能被爬虫爬取</span></strong><span data-lake-id=\"u129475b6\" id=\"u129475b6\">；</span></li></ul><p data-lake-id=\"efdb71e914d8be3288165ff68f748883\" id=\"efdb71e914d8be3288165ff68f748883\"><br></p><p data-lake-id=\"4a76146285b2183ceb4bde456f307f44\" id=\"4a76146285b2183ceb4bde456f307f44\"><strong><span data-lake-id=\"ubf2efa93\" id=\"ubf2efa93\">SessionStorage的</span></strong><strong><span data-lake-id=\"u6e7e9bdd\" id=\"u6e7e9bdd\">常用API：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%20sessionStorage%5CnsessionStorage.setItem('key'%2C%20'value')%3B%5Cn%5Cn%2F%2F%20%E4%BB%8E%20sessionStorage%20%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%5Cnlet%20data%20%3D%20sessionStorage.getItem('key')%3B%5Cn%5Cn%2F%2F%20%E4%BB%8E%20sessionStorage%20%E5%88%A0%E9%99%A4%E4%BF%9D%E5%AD%98%E7%9A%84%E6%95%B0%E6%8D%AE%5CnsessionStorage.removeItem('key')%3B%5Cn%5Cn%2F%2F%20%E4%BB%8E%20sessionStorage%20%E5%88%A0%E9%99%A4%E6%89%80%E6%9C%89%E4%BF%9D%E5%AD%98%E7%9A%84%E6%95%B0%E6%8D%AE%5CnsessionStorage.clear()%3B%5Cn%5Cn%2F%2F%20%E8%8E%B7%E5%8F%96%E6%9F%90%E4%B8%AA%E7%B4%A2%E5%BC%95%E7%9A%84Key%5CnsessionStorage.key(index)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22a80b90c6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"5ebe5937d98c9ca147302f7d60dae16a\" id=\"5ebe5937d98c9ca147302f7d60dae16a\"><strong><span data-lake-id=\"u69915c75\" id=\"u69915c75\">SessionStorage的</span></strong><strong><span data-lake-id=\"u93716fd0\" id=\"u93716fd0\">使用场景</span></strong></p><ul list=\"u355a792c\"><li fid=\"u4a0f5fe6\" data-lake-id=\"3cdbe8904b5f19f3e398be44d643cbfe\" id=\"3cdbe8904b5f19f3e398be44d643cbfe\"><span data-lake-id=\"ubb9262e9\" id=\"ubb9262e9\">由于SessionStorage具有时效性，所以可以用来存储一些网站的游客登录的信息，还有临时的浏览记录的信息。当关闭网站之后，这些信息也就随之消除了。</span></li></ul><h3 data-lake-id=\"dbc3e021261bf65dab92f640c456006a\" id=\"dbc3e021261bf65dab92f640c456006a\"><span data-lake-id=\"u34704049\" id=\"u34704049\">2. </span><span data-lake-id=\"u54adff8c\" id=\"u54adff8c\" style=\"color: #262626\">Cookie有哪些字段，作用分别是什么</span></h3><p data-lake-id=\"8235772c893a8dba8d23e63c6df2fd1e\" id=\"8235772c893a8dba8d23e63c6df2fd1e\"><strong><span data-lake-id=\"uf0ca1512\" id=\"uf0ca1512\">Cookie由以下字段组成：</span></strong></p><ul list=\"u9a968307\"><li fid=\"u5d5f6b53\" data-lake-id=\"e6959114e511e21a30d55f561843d00c\" id=\"e6959114e511e21a30d55f561843d00c\"><strong><span data-lake-id=\"u802e8d42\" id=\"u802e8d42\">Name</span></strong><span data-lake-id=\"u34975fd7\" id=\"u34975fd7\">：cookie的名称</span></li><li fid=\"u5d5f6b53\" data-lake-id=\"15f8ad950e0a90a3e37862db8efe679a\" id=\"15f8ad950e0a90a3e37862db8efe679a\"><strong><span data-lake-id=\"u171a0057\" id=\"u171a0057\">Value</span></strong><span data-lake-id=\"u9e16bbac\" id=\"u9e16bbac\">：cookie的值，对于认证cookie，value值包括web服务器所提供的访问令牌；</span></li><li fid=\"u5d5f6b53\" data-lake-id=\"4a288e788f7b9200ce65f201cff085ab\" id=\"4a288e788f7b9200ce65f201cff085ab\"><strong><span data-lake-id=\"u0e4eeded\" id=\"u0e4eeded\">Size</span></strong><span data-lake-id=\"ua5794b5b\" id=\"ua5794b5b\">： cookie的大小</span></li><li fid=\"u5d5f6b53\" data-lake-id=\"77ba5acf0e416e84657f592d402603a7\" id=\"77ba5acf0e416e84657f592d402603a7\"><strong><span data-lake-id=\"ue85717d0\" id=\"ue85717d0\">Path</span></strong><span data-lake-id=\"u8f2c5df6\" id=\"u8f2c5df6\">：可以访问此cookie的页面路径。 比如domain是abc.com，path是</span><code data-lake-id=\"uf6c96ed5\" id=\"uf6c96ed5\"><span data-lake-id=\"u19cf2722\" id=\"u19cf2722\">/test</span></code><span data-lake-id=\"u978713de\" id=\"u978713de\">，那么只有</span><code data-lake-id=\"u5500d14d\" id=\"u5500d14d\"><span data-lake-id=\"u9ec2efeb\" id=\"u9ec2efeb\">/test</span></code><span data-lake-id=\"ub35e3e3c\" id=\"ub35e3e3c\">路径下的页面可以读取此cookie。</span></li><li fid=\"u5d5f6b53\" data-lake-id=\"4be48e98c75fc62194d2ec438e8c9d17\" id=\"4be48e98c75fc62194d2ec438e8c9d17\"><strong><span data-lake-id=\"ua2bf5bfe\" id=\"ua2bf5bfe\">Secure</span></strong><span data-lake-id=\"ue4e801cc\" id=\"ue4e801cc\">： 指定是否使用HTTPS安全协议发送Cookie。使用HTTPS安全协议，可以保护Cookie在浏览器和Web服务器间的传输过程中不被窃取和篡改。该方法也可用于Web站点的身份鉴别，即在HTTPS的连接建立阶段，浏览器会检查Web网站的SSL证书的有效性。但是基于兼容性的原因（比如有些网站使用自签署的证书）在检测到SSL证书无效时，浏览器并不会立即终止用户的连接请求，而是显示安全风险信息，用户仍可以选择继续访问该站点。</span></li><li fid=\"u5d5f6b53\" data-lake-id=\"f3925d696d08b0d00437cf02d08d459d\" id=\"f3925d696d08b0d00437cf02d08d459d\"><strong><span data-lake-id=\"u56a41cdb\" id=\"u56a41cdb\">Domain</span></strong><span data-lake-id=\"u066db04e\" id=\"u066db04e\">：可以访问该cookie的域名，Cookie 机制并未遵循严格的同源策略，允许一个子域可以设置或获取其父域的 Cookie。当需要实现单点登录方案时，Cookie 的上述特性非常有用，然而也增加了 Cookie受攻击的危险，比如攻击者可以借此发动会话定置攻击。因而，浏览器禁止在 Domain 属性中设置.org、.com 等通用顶级域名、以及在国家及地区顶级域下注册的二级域名，以减小攻击发生的范围。</span></li><li fid=\"u5d5f6b53\" data-lake-id=\"712e29597161ab74eb88d2ff5ef69927\" id=\"712e29597161ab74eb88d2ff5ef69927\"><strong><span data-lake-id=\"ud74d75e2\" id=\"ud74d75e2\">HTTP</span></strong><span data-lake-id=\"ub6b1e7cb\" id=\"ub6b1e7cb\">： 该字段包含</span><code data-lake-id=\"u46844b02\" id=\"u46844b02\"><span data-lake-id=\"ud78d3ecd\" id=\"ud78d3ecd\">HTTPOnly</span></code><span data-lake-id=\"u95a3c1e0\" id=\"u95a3c1e0\"> 属性 ，该属性用来设置cookie能否通过脚本来访问，默认为空，即可以通过脚本访问。在客户端是不能通过js代码去设置一个httpOnly类型的cookie的，这种类型的cookie只能通过服务端来设置。该属性用于防止客户端脚本通过</span><code data-lake-id=\"ue462b045\" id=\"ue462b045\"><span data-lake-id=\"u72676ec6\" id=\"u72676ec6\">document.cookie</span></code><span data-lake-id=\"u2b5a3b76\" id=\"u2b5a3b76\">属性访问Cookie，有助于保护Cookie不被跨站脚本攻击窃取或篡改。但是，HTTPOnly的应用仍存在局限性，一些浏览器可以阻止客户端脚本对Cookie的读操作，但允许写操作；此外大多数浏览器仍允许通过XMLHTTP对象读取HTTP响应中的Set-Cookie头。</span></li><li fid=\"u5d5f6b53\" data-lake-id=\"47a8077105563f1e34e35ae13ff29267\" id=\"47a8077105563f1e34e35ae13ff29267\"><strong><span data-lake-id=\"u2c0f4657\" id=\"u2c0f4657\">Expires/Max-size</span></strong><span data-lake-id=\"u2affc765\" id=\"u2affc765\"> ： 此cookie的超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，意思是cookie会和session一起失效。当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。</span></li></ul><p data-lake-id=\"d751a0c168db239313f8233d41669fc0\" id=\"d751a0c168db239313f8233d41669fc0\"><br></p><p data-lake-id=\"e3573d4b22f2fbc9b5a323ad911a5783\" id=\"e3573d4b22f2fbc9b5a323ad911a5783\"><strong><span data-lake-id=\"u433c42a7\" id=\"u433c42a7\">总结：</span></strong></p><p data-lake-id=\"1319912fefcd9b6b5eed4b4904dbef4f\" id=\"1319912fefcd9b6b5eed4b4904dbef4f\"><span data-lake-id=\"u93bec5f8\" id=\"u93bec5f8\" class=\"lake-fontsize-11\" style=\"color: #262626\">服务器端可以使用 Set-Cookie 的响应头部来配置 cookie 信息。一条cookie 包括了5个属性值 expires、domain、path、secure、HttpOnly。其中 expires 指定了 cookie 失效的时间，domain 是域名、path是路径，domain 和 path 一起限制了 cookie 能够被哪些 url 访问。secure 规定了 cookie 只能在确保安全的情况下传输，HttpOnly 规定了这个 cookie 只能被服务器访问，不能使用 js 脚本访问。</span></p><h3 data-lake-id=\"3bad8ede4c7263e2e951b0cbc29f00dc\" id=\"3bad8ede4c7263e2e951b0cbc29f00dc\"><span data-lake-id=\"u221ddaac\" id=\"u221ddaac\">3. Cookie、LocalStorage、SessionStorage区别</span></h3><p data-lake-id=\"8e7fb17482327148bd7ff626876c9d95\" id=\"8e7fb17482327148bd7ff626876c9d95\"><span data-lake-id=\"u24fb234d\" id=\"u24fb234d\">浏览器端常用的存储技术是 cookie 、localStorage 和 sessionStorage。</span></p><ul list=\"u1417bef9\"><li fid=\"u9e359d55\" data-lake-id=\"d19291625988de96866d2c5561812fca\" id=\"d19291625988de96866d2c5561812fca\"><strong><span data-lake-id=\"u8f445cff\" id=\"u8f445cff\">cookie：</span></strong><span data-lake-id=\"ubaccde52\" id=\"ubaccde52\">其实最开始是服务器端用于记录用户状态的一种方式，由服务器设置，在客户端存储，然后每次发起同源请求时，发送给服务器端。cookie 最多能存储 4 k 数据，它的生存时间由 expires 属性指定，并且 cookie 只能被同源的页面访问共享。</span></li><li fid=\"u9e359d55\" data-lake-id=\"25bf1f81dbbd4f8b35c3d56863f1da48\" id=\"25bf1f81dbbd4f8b35c3d56863f1da48\"><strong><span data-lake-id=\"ua680416c\" id=\"ua680416c\">sessionStorage：</span></strong><span data-lake-id=\"uc072c6b2\" id=\"uc072c6b2\">html5 提供的一种浏览器本地存储的方法，它借鉴了服务器端 session 的概念，代表的是一次会话中所保存的数据。它一般能够存储 5M 或者更大的数据，它在当前窗口关闭后就失效了，并且 sessionStorage 只能被同一个窗口的同源页面所访问共享。</span></li><li fid=\"u9e359d55\" data-lake-id=\"671ff441164484c905d83980729d7bdf\" id=\"671ff441164484c905d83980729d7bdf\"><strong><span data-lake-id=\"uf5e53a91\" id=\"uf5e53a91\">localStorage：</span></strong><span data-lake-id=\"u408fcf6e\" id=\"u408fcf6e\">html5 提供的一种浏览器本地存储的方法，它一般也能够存储 5M 或者更大的数据。它和 sessionStorage 不同的是，除非手动删除它，否则它不会失效，并且 localStorage 也只能被同源页面所访问共享。</span></li></ul><p data-lake-id=\"f60c53882fbfc12aa0309b83baa9170f\" id=\"f60c53882fbfc12aa0309b83baa9170f\"><br></p><p data-lake-id=\"1b28a02dd372ab344475f82e6a78636e\" id=\"1b28a02dd372ab344475f82e6a78636e\"><span data-lake-id=\"u311be68f\" id=\"u311be68f\">上面三种方式都是存储少量数据的时候的存储方式，当需要在本地存储大量数据的时候，我们可以使用浏览器的 indexDB 这是浏览器提供的一种本地的数据库存储机制。它不是关系型数据库，它内部采用对象仓库的形式存储数据，它更接近 NoSQL 数据库。</span></p><p data-lake-id=\"e8ec61d705d1bcd86b3a0c82eda62a8c\" id=\"e8ec61d705d1bcd86b3a0c82eda62a8c\"><span data-lake-id=\"u4eaeebce\" id=\"u4eaeebce\">​</span><br></p><p data-lake-id=\"e5f638b92cdcb0f0a67461395729fc89\" id=\"e5f638b92cdcb0f0a67461395729fc89\"><span data-lake-id=\"u98c16505\" id=\"u98c16505\">​</span><br></p><p data-lake-id=\"6c255a78bcfb84046cfd28de4b8a8d24\" id=\"6c255a78bcfb84046cfd28de4b8a8d24\"><strong><span data-lake-id=\"u67abfcae\" id=\"u67abfcae\">Web Storage 和 cookie 的区别总结如下：</span></strong></p><ul list=\"u5825c88c\"><li fid=\"u49d7e267\" data-lake-id=\"998fd6c0f19f4ff71854bc34461730a3\" id=\"998fd6c0f19f4ff71854bc34461730a3\"><span data-lake-id=\"u9b9f9c82\" id=\"u9b9f9c82\">Web Storage</span><span data-lake-id=\"u07d4e1f2\" id=\"u07d4e1f2\">是为了更大容量存储设计的。Cookie 的大小是受限的，并且每次你请求一个新的页面的时候 Cookie 都会被发送过去，这样无形中浪费了带宽；</span></li><li fid=\"u49d7e267\" data-lake-id=\"f988150f230d31b4659cf61f0ff30408\" id=\"f988150f230d31b4659cf61f0ff30408\"><span data-lake-id=\"ueb52387c\" id=\"ueb52387c\">cookie 需要指定作用域，不可以跨域调用；</span></li><li fid=\"u49d7e267\" data-lake-id=\"73965c063827000a2fa862199cad2a29\" id=\"73965c063827000a2fa862199cad2a29\"><span data-lake-id=\"ub1892d75\" id=\"ub1892d75\">Web Storage 拥有 setItem,getItem,removeItem,clear 等方法，不像 cookie 需要前端开发者自己封装 setCookie，getCookie；</span></li><li fid=\"u49d7e267\" data-lake-id=\"7c92b3a1f15650a9e44fe88897242db8\" id=\"7c92b3a1f15650a9e44fe88897242db8\"><span data-lake-id=\"ufd194081\" id=\"ufd194081\">Cookie 也是不可以或缺的：Cookie 的作用是与服务器进行交互，作为 HTTP 规范的一部分而存在 ，而 Web Storage 仅仅是为了在本地“存储”数据而生。</span></li></ul><h3 data-lake-id=\"GheSh\" id=\"GheSh\"><span data-lake-id=\"u82a8af11\" id=\"u82a8af11\">4. 前端储存的⽅式有哪些？</span></h3><ul list=\"ub6280c5f\"><li fid=\"ub8458324\" data-lake-id=\"uaaf3fc9b\" id=\"uaaf3fc9b\"><span data-lake-id=\"u4b6b6279\" id=\"u4b6b6279\">cookies： 在HTML5标准前本地储存的主要⽅式，优点是兼容性好，请求头⾃带cookie⽅便，缺点是⼤⼩只有4k，⾃动请求头加⼊cookie浪费流量，每个domain限制20个cookie，使⽤起来麻烦，需要⾃⾏封装；</span></li><li fid=\"ub8458324\" data-lake-id=\"uc732e37f\" id=\"uc732e37f\"><span data-lake-id=\"u85b14bd6\" id=\"u85b14bd6\">localStorage：HTML5加⼊的以键值对(Key-Value)为标准的⽅式，优点是操作⽅便，永久性储存（除⾮⼿动删除），⼤⼩为5M，兼容IE8+ ；</span></li><li fid=\"ub8458324\" data-lake-id=\"uef201f9e\" id=\"uef201f9e\"><span data-lake-id=\"u4f72daa2\" id=\"u4f72daa2\">sessionStorage：与localStorage基本类似，区别是sessionStorage当⻚⾯关闭后会被清理，⽽且与cookie、localStorage不同，他不能在所有同源窗⼝中共享，是会话级别的储存⽅式； </span></li><li fid=\"ub8458324\" data-lake-id=\"u26cda719\" id=\"u26cda719\"><span data-lake-id=\"u5b6614ac\" id=\"u5b6614ac\">Web SQL：2010年被W3C废弃的本地数据库数据存储⽅案，但是主流浏览器（⽕狐除外）都已经有了相关的实现，web sql类似于SQLite，是真正意义上的关系型数据库，⽤sql进⾏操作，当我们⽤JavaScript时要进⾏转换，较为繁琐； </span></li><li fid=\"ub8458324\" data-lake-id=\"u58580c75\" id=\"u58580c75\"><span data-lake-id=\"u6fc7dfb5\" id=\"u6fc7dfb5\">IndexedDB： 是被正式纳⼊HTML5标准的数据库储存⽅案，它是NoSQL数据库，⽤键值对进⾏储存，可以进⾏快速读取操作，⾮常适合web场景，同时⽤JavaScript进⾏操作会⾮常便。 </span></li></ul><h3 data-lake-id=\"AUOTj\" id=\"AUOTj\"><span data-lake-id=\"uf1c668fb\" id=\"uf1c668fb\">5. IndexedDB有哪些特点？</span></h3><p data-lake-id=\"u5505a96a\" id=\"u5505a96a\"><span data-lake-id=\"u74010e74\" id=\"u74010e74\">IndexedDB 具有以下特点：</span></p><ul list=\"uf565f24b\"><li fid=\"u434fe1ed\" data-lake-id=\"udb45d400\" id=\"udb45d400\"><strong><span data-lake-id=\"ua9692023\" id=\"ua9692023\">键值对储存</span></strong><span data-lake-id=\"u90bf0b0d\" id=\"u90bf0b0d\">：IndexedDB 内部采用对象仓库（object store）存放数据。所有类型的数据都可以直接存入，包括 JavaScript 对象。对象仓库中，数据以&quot;键值对&quot;的形式保存，每一个数据记录都有对应的主键，主键是独一无二的，不能有重复，否则会抛出一个错误。</span></li><li fid=\"u434fe1ed\" data-lake-id=\"ud47f8433\" id=\"ud47f8433\"><strong><span data-lake-id=\"u83706e6b\" id=\"u83706e6b\">异步</span></strong><span data-lake-id=\"ue4e4862e\" id=\"ue4e4862e\">：IndexedDB 操作时不会锁死浏览器，用户依然可以进行其他操作，这与 LocalStorage 形成对比，后者的操作是同步的。异步设计是为了防止大量数据的读写，拖慢网页的表现。</span></li><li fid=\"u434fe1ed\" data-lake-id=\"u189bb435\" id=\"u189bb435\"><strong><span data-lake-id=\"ud5fc44c4\" id=\"ud5fc44c4\">支持事务</span></strong><span data-lake-id=\"u49985677\" id=\"u49985677\">：IndexedDB 支持事务（transaction），这意味着一系列操作步骤之中，只要有一步失败，整个事务就都取消，数据库回滚到事务发生之前的状态，不存在只改写一部分数据的情况。</span></li><li fid=\"u434fe1ed\" data-lake-id=\"u9efc2eef\" id=\"u9efc2eef\"><strong><span data-lake-id=\"ubc0ecdb7\" id=\"ubc0ecdb7\">同源限制：</span></strong><span data-lake-id=\"u9ce41ef4\" id=\"u9ce41ef4\">IndexedDB 受到同源限制，每一个数据库对应创建它的域名。网页只能访问自身域名下的数据库，而不能访问跨域的数据库。</span></li><li fid=\"u434fe1ed\" data-lake-id=\"u8c1af0a3\" id=\"u8c1af0a3\"><strong><span data-lake-id=\"ud875f810\" id=\"ud875f810\">储存空间大</span></strong><span data-lake-id=\"ucaa1dd7d\" id=\"ucaa1dd7d\">：IndexedDB 的储存空间比 LocalStorage 大得多，一般来说不少于 250MB，甚至没有上限。</span></li><li fid=\"u434fe1ed\" data-lake-id=\"ue4e76f08\" id=\"ue4e76f08\"><strong><span data-lake-id=\"u69a94b48\" id=\"u69a94b48\">支持二进制储存</span></strong><span data-lake-id=\"u9c787f0b\" id=\"u9c787f0b\">：IndexedDB 不仅可以储存字符串，还可以储存二进制数据（ArrayBuffer 对象和 Blob 对象）。</span></li></ul><h2 data-lake-id=\"a564f2ff4e7255769c752b47e89aa3b3\" id=\"a564f2ff4e7255769c752b47e89aa3b3\"><span data-lake-id=\"u315a7b76\" id=\"u315a7b76\">七、浏览器同源策略</span></h2><h3 data-lake-id=\"90c883be88117fa4927d030a2e909072\" id=\"90c883be88117fa4927d030a2e909072\"><span data-lake-id=\"uef36a967\" id=\"uef36a967\">1. 什么是同源策略</span></h3><p data-lake-id=\"8c31bd8c9474523dc97a69fb7649ec05\" id=\"8c31bd8c9474523dc97a69fb7649ec05\"><span data-lake-id=\"u89f78df4\" id=\"u89f78df4\">跨域问题其实就是浏览器的同源策略造成的。</span></p><blockquote data-lake-id=\"uf6631666\" id=\"uf6631666\"><p data-lake-id=\"725c8cb83341d8b9aa4b9962d418c5bc\" id=\"725c8cb83341d8b9aa4b9962d418c5bc\"><span data-lake-id=\"u448a58fa\" id=\"u448a58fa\">同源策略限制了从同一个源加载的文档或脚本如何与另一个源的资源进行交互。这是浏览器的一个用于隔离潜在恶意文件的重要的安全机制。同源指的是：</span><strong><span data-lake-id=\"u16354717\" id=\"u16354717\">协议</span></strong><span data-lake-id=\"ub9c1388b\" id=\"ub9c1388b\">、</span><strong><span data-lake-id=\"u21696e04\" id=\"u21696e04\">端口号</span></strong><span data-lake-id=\"udd879e4c\" id=\"udd879e4c\">、</span><strong><span data-lake-id=\"u08f163a7\" id=\"u08f163a7\">域名</span></strong><span data-lake-id=\"u3ffdcacb\" id=\"u3ffdcacb\">必须一致。</span></p></blockquote><p data-lake-id=\"7da0e0f8626cb916b51406fc4e106b43\" id=\"7da0e0f8626cb916b51406fc4e106b43\"><br></p><p data-lake-id=\"b4da4814ae3f5662c33d115e71e5d8fa\" id=\"b4da4814ae3f5662c33d115e71e5d8fa\"><span data-lake-id=\"uc5d39dbc\" id=\"uc5d39dbc\">下表给出了与 URL </span><a href=\"http://store.company.com/dir/page.html\" target=\"_blank\" data-lake-id=\"uc8577cc1\" id=\"uc8577cc1\"><span data-lake-id=\"u7adc7251\" id=\"u7adc7251\">http://store.company.com/dir/page.html</span></a><span data-lake-id=\"udaecbe85\" id=\"udaecbe85\"> 的源进行对比的示例:</span></p><table data-lake-id=\"352a6bf9\" id=\"352a6bf9\" margin=\"true\" class=\"lake-table\" style=\"width: 755px\"><colgroup><col width=\"380\"><col width=\"93\"><col width=\"282\"></colgroup><tbody><tr data-lake-id=\"uf1504366\" id=\"uf1504366\" style=\"height: 33px\"><td data-lake-id=\"u5b39fc83\" id=\"u5b39fc83\"><p data-lake-id=\"ufc892d63\" id=\"ufc892d63\"><span data-lake-id=\"u819e1f43\" id=\"u819e1f43\">URL</span></p></td><td data-lake-id=\"u27672c43\" id=\"u27672c43\"><p data-lake-id=\"u9b74a6ff\" id=\"u9b74a6ff\" style=\"text-align: center\"><span data-lake-id=\"u3b7491cf\" id=\"u3b7491cf\">是否跨域</span></p></td><td data-lake-id=\"u20d27896\" id=\"u20d27896\"><p data-lake-id=\"u3b526dd7\" id=\"u3b526dd7\"><span data-lake-id=\"u894eb678\" id=\"u894eb678\">原因</span></p></td></tr><tr data-lake-id=\"u01080c76\" id=\"u01080c76\" style=\"height: 33px\"><td data-lake-id=\"uf80ab938\" id=\"uf80ab938\"><p data-lake-id=\"uc6c679bd\" id=\"uc6c679bd\"><a href=\"http://store.company.com/dir/page.html\" target=\"_blank\" data-lake-id=\"u4a4a5b78\" id=\"u4a4a5b78\"><span data-lake-id=\"u47163c3f\" id=\"u47163c3f\">http://store.company.com/dir/page.html</span></a></p></td><td data-lake-id=\"u782720db\" id=\"u782720db\"><p data-lake-id=\"ua4e6229c\" id=\"ua4e6229c\" style=\"text-align: center\"><span data-lake-id=\"u13bbbe3d\" id=\"u13bbbe3d\">同源</span></p></td><td data-lake-id=\"u861d1ea1\" id=\"u861d1ea1\"><p data-lake-id=\"u1168598b\" id=\"u1168598b\"><span data-lake-id=\"u0a7e1a4b\" id=\"u0a7e1a4b\">完全相同</span></p></td></tr><tr data-lake-id=\"u44252307\" id=\"u44252307\" style=\"height: 33px\"><td data-lake-id=\"u4193bab7\" id=\"u4193bab7\"><p data-lake-id=\"uf0f4ad57\" id=\"uf0f4ad57\"><a href=\"http://store.company.com/dir/inner/another.html\" target=\"_blank\" data-lake-id=\"u2b56c9b5\" id=\"u2b56c9b5\"><span data-lake-id=\"u6f0eec2f\" id=\"u6f0eec2f\">http://store.company.com/dir/inner/another.html</span></a></p></td><td data-lake-id=\"u34c3c6b6\" id=\"u34c3c6b6\"><p data-lake-id=\"u69fd2de2\" id=\"u69fd2de2\" style=\"text-align: center\"><span data-lake-id=\"uff0772a7\" id=\"uff0772a7\">同源</span></p></td><td data-lake-id=\"u7f2093d2\" id=\"u7f2093d2\"><p data-lake-id=\"uaca797ab\" id=\"uaca797ab\"><span data-lake-id=\"u70db62b3\" id=\"u70db62b3\">只有路径不同</span></p></td></tr><tr data-lake-id=\"u901ca544\" id=\"u901ca544\" style=\"height: 33px\"><td data-lake-id=\"u84c0c654\" id=\"u84c0c654\"><p data-lake-id=\"u80d12783\" id=\"u80d12783\"><a href=\"https://store.company.com/secure.html\" target=\"_blank\" data-lake-id=\"u4a9b8eae\" id=\"u4a9b8eae\"><span data-lake-id=\"u97c1f409\" id=\"u97c1f409\">https://store.company.com/secure.html</span></a></p></td><td data-lake-id=\"u102f9594\" id=\"u102f9594\"><p data-lake-id=\"u77474d5e\" id=\"u77474d5e\" style=\"text-align: center\"><span data-lake-id=\"u83a121d0\" id=\"u83a121d0\">跨域</span></p></td><td data-lake-id=\"uc9d5f412\" id=\"uc9d5f412\"><p data-lake-id=\"u483b2c12\" id=\"u483b2c12\"><span data-lake-id=\"u1ccffc5e\" id=\"u1ccffc5e\">协议不同</span></p></td></tr><tr data-lake-id=\"u734a13f0\" id=\"u734a13f0\" style=\"height: 33px\"><td data-lake-id=\"u67bb3876\" id=\"u67bb3876\"><p data-lake-id=\"u05d44100\" id=\"u05d44100\"><a href=\"http://store.company.com:81/dir/etc.html\" target=\"_blank\" data-lake-id=\"udcb502c6\" id=\"udcb502c6\"><span data-lake-id=\"u05153538\" id=\"u05153538\">http://store.company.com:81/dir/etc.html</span></a></p></td><td data-lake-id=\"udb50fbc1\" id=\"udb50fbc1\"><p data-lake-id=\"u59595bdb\" id=\"u59595bdb\" style=\"text-align: center\"><span data-lake-id=\"udedda690\" id=\"udedda690\">跨域</span></p></td><td data-lake-id=\"u303335f6\" id=\"u303335f6\"><p data-lake-id=\"ua6414d1d\" id=\"ua6414d1d\"><span data-lake-id=\"u10af887b\" id=\"u10af887b\">端口不同 ( http:// 默认端口是80)</span></p></td></tr><tr data-lake-id=\"u32ccd9f5\" id=\"u32ccd9f5\" style=\"height: 33px\"><td data-lake-id=\"ubd83ca64\" id=\"ubd83ca64\"><p data-lake-id=\"u56a58b82\" id=\"u56a58b82\"><a href=\"http://news.company.com/dir/other.html\" target=\"_blank\" data-lake-id=\"u306e9bef\" id=\"u306e9bef\"><span data-lake-id=\"u6b110dd8\" id=\"u6b110dd8\">http://news.company.com/dir/other.html</span></a></p></td><td data-lake-id=\"u26563445\" id=\"u26563445\"><p data-lake-id=\"uc1a70369\" id=\"uc1a70369\" style=\"text-align: center\"><span data-lake-id=\"u1a91bc3b\" id=\"u1a91bc3b\">跨域</span></p></td><td data-lake-id=\"u844cc4b0\" id=\"u844cc4b0\"><p data-lake-id=\"u6853916b\" id=\"u6853916b\"><span data-lake-id=\"u7377c3bb\" id=\"u7377c3bb\">主机不同</span></p></td></tr></tbody></table><p data-lake-id=\"27d9f0eaae7c016198f3c1b7d9bf0fd1\" id=\"27d9f0eaae7c016198f3c1b7d9bf0fd1\"><strong><span data-lake-id=\"u6b1c331a\" id=\"u6b1c331a\">同源策略：protocol（协议）、domain（域名）、port（端口）三者必须一致。</span></strong></p><p data-lake-id=\"76949d1d512816a7eda9f4d7b12ebb66\" id=\"76949d1d512816a7eda9f4d7b12ebb66\"><br></p><p data-lake-id=\"01b94c40a5c3896ba2794a68ec2e4ae1\" id=\"01b94c40a5c3896ba2794a68ec2e4ae1\"><strong><span data-lake-id=\"u825a5e66\" id=\"u825a5e66\">同源政策主要限制了三个方面：</span></strong></p><ul list=\"u40e2ed7e\"><li fid=\"u6e3e2c88\" data-lake-id=\"7a0e20c5f62f7a70c2032c29f25c6b56\" id=\"7a0e20c5f62f7a70c2032c29f25c6b56\"><span data-lake-id=\"uf7beb65d\" id=\"uf7beb65d\">当前域下的 js 脚本不能够访问其他域下的 cookie、localStorage 和 indexDB。</span></li><li fid=\"u6e3e2c88\" data-lake-id=\"8b13b925fcdc771b241fc8a9fa86154e\" id=\"8b13b925fcdc771b241fc8a9fa86154e\"><span data-lake-id=\"ua913b031\" id=\"ua913b031\">当前域下的 js 脚本不能够操作访问操作其他域下的 DOM。</span></li><li fid=\"u6e3e2c88\" data-lake-id=\"c50a366f3c20f16f8f9a96e2e7f05b61\" id=\"c50a366f3c20f16f8f9a96e2e7f05b61\"><span data-lake-id=\"u07b1a8ca\" id=\"u07b1a8ca\">当前域下 ajax 无法发送跨域请求。</span></li></ul><p data-lake-id=\"46bd9445075a627e49d5d7f13a7323d7\" id=\"46bd9445075a627e49d5d7f13a7323d7\"><br></p><p data-lake-id=\"b05489642317fecd62aa34421554d770\" id=\"b05489642317fecd62aa34421554d770\"><span data-lake-id=\"u445e9020\" id=\"u445e9020\">同源政策的目的主要是为了保证用户的信息安全，它只是对 js 脚本的一种限制，并不是对浏览器的限制，对于一般的 img、或者script 脚本请求都不会有跨域的限制，这是因为这些操作都不会通过响应结果来进行可能出现安全问题的操作。</span></p><h3 data-lake-id=\"b7f040b6256fb6bbc4a533c821df7326\" id=\"b7f040b6256fb6bbc4a533c821df7326\"><span data-lake-id=\"uc1dcd951\" id=\"uc1dcd951\">2. 如何解决跨越问题</span></h3><h4 data-lake-id=\"6021a78d25337d5e07310383cfbab31d\" id=\"6021a78d25337d5e07310383cfbab31d\"><span data-lake-id=\"u2442258f\" id=\"u2442258f\">（1）CORS</span></h4><p data-lake-id=\"39888c9a499c9412fa57bfdf65a4c1c4\" id=\"39888c9a499c9412fa57bfdf65a4c1c4\"><span data-lake-id=\"u6b130a92\" id=\"u6b130a92\">下面是MDN对于CORS的定义：</span></p><blockquote data-lake-id=\"uc7bfe043\" id=\"uc7bfe043\"><p data-lake-id=\"d70bd9301548bc7407edd9b15570a3f4\" id=\"d70bd9301548bc7407edd9b15570a3f4\"><span data-lake-id=\"u8827c8d9\" id=\"u8827c8d9\">跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器  让运行在一个 origin (domain)上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域HTTP 请求。</span></p></blockquote><p data-lake-id=\"d4aa6ce838ff9bd00d259082f743292d\" id=\"d4aa6ce838ff9bd00d259082f743292d\"><span data-lake-id=\"u9b7fc398\" id=\"u9b7fc398\">CORS需要浏览器和服务器同时支持，整个CORS过程都是浏览器完成的，无需用户参与。因此实现</span><strong><span data-lake-id=\"u1018b2d4\" id=\"u1018b2d4\">CORS的关键就是服务器，只要服务器实现了CORS请求</span></strong><span data-lake-id=\"u049c41ae\" id=\"u049c41ae\">，就可以跨源通信了。</span></p><p data-lake-id=\"bef3d0274f6a9d6014537d093521f487\" id=\"bef3d0274f6a9d6014537d093521f487\"><br></p><p data-lake-id=\"a4270f0ab5217830ffc1df4a1b9ef67f\" id=\"a4270f0ab5217830ffc1df4a1b9ef67f\"><span data-lake-id=\"ua475cd89\" id=\"ua475cd89\">浏览器将CORS分为</span><strong><span data-lake-id=\"u6a7eccd8\" id=\"u6a7eccd8\">简单请求</span></strong><span data-lake-id=\"uaff8ca63\" id=\"uaff8ca63\">和</span><strong><span data-lake-id=\"u6ededc49\" id=\"u6ededc49\">非简单请求</span></strong><span data-lake-id=\"u14a51b80\" id=\"u14a51b80\">：</span></p><p data-lake-id=\"97147012ce1285d458558748612aa43f\" id=\"97147012ce1285d458558748612aa43f\"><br></p><p data-lake-id=\"48f7effc3add6f93f97f9848b91c8f7a\" id=\"48f7effc3add6f93f97f9848b91c8f7a\"><span data-lake-id=\"u8e321200\" id=\"u8e321200\">简单请求不会触发CORS预检请求。若该请求满足以下两个条件，就可以看作是简单请求：</span></p><p data-lake-id=\"acf8d76c53a5ab15bb43b6e28e24d294\" id=\"acf8d76c53a5ab15bb43b6e28e24d294\"><strong><span data-lake-id=\"ude95327c\" id=\"ude95327c\">1）请求方法是以下三种方法之一：</span></strong></p><ul list=\"u8efce623\"><li fid=\"u1f6e0e31\" data-lake-id=\"8fc566f43787165350b93a5b53079ed7\" id=\"8fc566f43787165350b93a5b53079ed7\"><span data-lake-id=\"uf94cc8b0\" id=\"uf94cc8b0\">HEAD</span></li><li fid=\"u1f6e0e31\" data-lake-id=\"27fdde1315cebe891dc467a5ba1925df\" id=\"27fdde1315cebe891dc467a5ba1925df\"><span data-lake-id=\"u143ab1ad\" id=\"u143ab1ad\">GET</span></li><li fid=\"u1f6e0e31\" data-lake-id=\"3ecac20a8208ec7e717cf61803febde2\" id=\"3ecac20a8208ec7e717cf61803febde2\"><span data-lake-id=\"u0a6eaa63\" id=\"u0a6eaa63\">POST</span></li></ul><p data-lake-id=\"113734c245d7f01762bd2bfb287ff3a3\" id=\"113734c245d7f01762bd2bfb287ff3a3\"><strong><span data-lake-id=\"u42432a1a\" id=\"u42432a1a\">2）HTTP的头信息不超出以下几种字段：</span></strong></p><ul list=\"ueb02b5d1\"><li fid=\"ue26eda9e\" data-lake-id=\"3f6c73407ee5f1e850a82e9b6821cfe1\" id=\"3f6c73407ee5f1e850a82e9b6821cfe1\"><span data-lake-id=\"u46983292\" id=\"u46983292\">Accept</span></li><li fid=\"ue26eda9e\" data-lake-id=\"64a7249f062d0e034dcaae90f3b4fd47\" id=\"64a7249f062d0e034dcaae90f3b4fd47\"><span data-lake-id=\"ubf903f7f\" id=\"ubf903f7f\">Accept-Language</span></li><li fid=\"ue26eda9e\" data-lake-id=\"f1fffdf01255b35810e58e9d7a75eafd\" id=\"f1fffdf01255b35810e58e9d7a75eafd\"><span data-lake-id=\"u5407521a\" id=\"u5407521a\">Content-Language</span></li><li fid=\"ue26eda9e\" data-lake-id=\"192e15a057d1baa81dc84a9cbfbd0b19\" id=\"192e15a057d1baa81dc84a9cbfbd0b19\"><span data-lake-id=\"u7af20c73\" id=\"u7af20c73\">Last-Event-ID</span></li><li fid=\"ue26eda9e\" data-lake-id=\"29184f45de95e1cceefb7cc3d3ae2170\" id=\"29184f45de95e1cceefb7cc3d3ae2170\"><span data-lake-id=\"ueba75221\" id=\"ueba75221\">Content-Type：只限于三个值application/x-www-form-urlencoded、multipart/form-data、text/plain</span></li></ul><p data-lake-id=\"0a1265408f97b5c9cb211861ff93e5af\" id=\"0a1265408f97b5c9cb211861ff93e5af\"><span data-lake-id=\"ufd8c86bc\" id=\"ufd8c86bc\">若不满足以上条件，就属于非简单请求了。</span></p><p data-lake-id=\"372a899a9d826b6b7fc61d7086b599f2\" id=\"372a899a9d826b6b7fc61d7086b599f2\"><br></p><p data-lake-id=\"8465d3c4c00d6be0f4f2816aa2134dbc\" id=\"8465d3c4c00d6be0f4f2816aa2134dbc\"><strong><span data-lake-id=\"ub1b3ed2a\" id=\"ub1b3ed2a\">（1）简单请求过程：</span></strong></p><p data-lake-id=\"0c8300a3a1d44b1f36d168d38effbb29\" id=\"0c8300a3a1d44b1f36d168d38effbb29\"><span data-lake-id=\"ucfeaa057\" id=\"ucfeaa057\">对于简单请求，浏览器会直接发出CORS请求，它会在请求的头信息中增加一个Orign字段，该字段用来说明本次请求来自哪个源（协议+端口+域名），服务器会根据这个值来决定是否同意这次请求。如果Orign指定的域名在许可范围之内，服务器返回的响应就会多出以下信息头：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Access-Control-Allow-Origin%3A%20http%3A%2F%2Fapi.bob.com%20%20%2F%2F%20%E5%92%8COrign%E4%B8%80%E7%9B%B4%5CnAccess-Control-Allow-Credentials%3A%20true%20%20%20%2F%2F%20%E8%A1%A8%E7%A4%BA%E6%98%AF%E5%90%A6%E5%85%81%E8%AE%B8%E5%8F%91%E9%80%81Cookie%5CnAccess-Control-Expose-Headers%3A%20FooBar%20%20%20%2F%2F%20%E6%8C%87%E5%AE%9A%E8%BF%94%E5%9B%9E%E5%85%B6%E4%BB%96%E5%AD%97%E6%AE%B5%E7%9A%84%E5%80%BC%5CnContent-Type%3A%20text%2Fhtml%3B%20charset%3Dutf-8%20%20%20%2F%2F%20%E8%A1%A8%E7%A4%BA%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22da5528bb%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"731e1829cab062c77f5ea5658a18197d\" id=\"731e1829cab062c77f5ea5658a18197d\"><span data-lake-id=\"uf425d898\" id=\"uf425d898\">如果Orign指定的域名不在许可范围之内，服务器会返回一个正常的HTTP回应，浏览器发现没有上面的Access-Control-Allow-Origin头部信息，就知道出错了。这个错误无法通过状态码识别，因为返回的状态码可能是200。</span></p><p data-lake-id=\"4894193ffdc2a612221b8ea05067bebe\" id=\"4894193ffdc2a612221b8ea05067bebe\"><br></p><p data-lake-id=\"6e761e831c32ec450d78dc1a5f234321\" id=\"6e761e831c32ec450d78dc1a5f234321\"><strong><span data-lake-id=\"u5b569129\" id=\"u5b569129\">在简单请求中，在服务器内，至少需要设置字段：</span></strong><code data-lake-id=\"uf9f209f0\" id=\"uf9f209f0\"><strong><span data-lake-id=\"u5cd4d948\" id=\"u5cd4d948\">Access-Control-Allow-Origin</span></strong></code></p><p data-lake-id=\"e55e956a9079717d72df551e5d7f3c34\" id=\"e55e956a9079717d72df551e5d7f3c34\"><br></p><p data-lake-id=\"1afc667dfa5d8acc8e86691e094d552d\" id=\"1afc667dfa5d8acc8e86691e094d552d\"><strong><span data-lake-id=\"u89a5d3b3\" id=\"u89a5d3b3\">（2）非简单请求过程</span></strong></p><p data-lake-id=\"1c7ed632b78063e75deff847488df343\" id=\"1c7ed632b78063e75deff847488df343\"><span data-lake-id=\"uefeff53e\" id=\"uefeff53e\">非简单请求是对服务器有特殊要求的请求，比如请求方法为DELETE或者PUT等。非简单请求的CORS请求会在正式通信之前进行一次HTTP查询请求，</span><strong><span data-lake-id=\"u1574a086\" id=\"u1574a086\">称为预检请求</span></strong><span data-lake-id=\"u7c68db79\" id=\"u7c68db79\">。</span></p><p data-lake-id=\"a0cd74c9d0af86fcceef58cd93505bac\" id=\"a0cd74c9d0af86fcceef58cd93505bac\"><br></p><p data-lake-id=\"5104737342dc6e1474da3ad5e23db1ae\" id=\"5104737342dc6e1474da3ad5e23db1ae\"><span data-lake-id=\"u9134743e\" id=\"u9134743e\">浏览器会询问服务器，当前所在的网页是否在服务器允许访问的范围内，以及可以使用哪些HTTP请求方式和头信息字段，只有得到肯定的回复，才会进行正式的HTTP请求，否则就会报错。</span></p><p data-lake-id=\"c12f9c31091536c1d68147cf6717f87b\" id=\"c12f9c31091536c1d68147cf6717f87b\"><br></p><p data-lake-id=\"3c984dee8f111ef604074af3fbf5b21b\" id=\"3c984dee8f111ef604074af3fbf5b21b\"><span data-lake-id=\"u3c002d09\" id=\"u3c002d09\">预检请求使用的</span><strong><span data-lake-id=\"ufa2a23cd\" id=\"ufa2a23cd\">请求方法是OPTIONS</span></strong><span data-lake-id=\"u4811cfcb\" id=\"u4811cfcb\">，表示这个请求是来询问的。他的头信息中的关键字段是Orign，表示请求来自哪个源。除此之外，头信息中还包括两个字段：</span></p><ul list=\"uddb099dd\"><li fid=\"u4438cff3\" data-lake-id=\"23d2a23e5896344b585cc457528a7ac9\" id=\"23d2a23e5896344b585cc457528a7ac9\"><strong><span data-lake-id=\"u4632d504\" id=\"u4632d504\">Access-Control-Request-Method</span></strong><span data-lake-id=\"u28195db0\" id=\"u28195db0\">：该字段是必须的，用来列出浏览器的CORS请求会用到哪些HTTP方法。</span></li><li fid=\"u4438cff3\" data-lake-id=\"074a6e1796052b173f1bfb88c2e1d254\" id=\"074a6e1796052b173f1bfb88c2e1d254\"><strong><span data-lake-id=\"u7545172f\" id=\"u7545172f\">Access-Control-Request-Headers</span></strong><span data-lake-id=\"u23955154\" id=\"u23955154\">： 该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段。</span></li></ul><p data-lake-id=\"2852da6edd5f5dcac5f127e4cbf53d6e\" id=\"2852da6edd5f5dcac5f127e4cbf53d6e\"><br></p><p data-lake-id=\"0cb201a5ea71b8a4437e86c0b983301d\" id=\"0cb201a5ea71b8a4437e86c0b983301d\"><span data-lake-id=\"ua4b49f5d\" id=\"ua4b49f5d\">服务器在收到浏览器的预检请求之后，会根据头信息的三个字段来进行判断，如果返回的头信息在中有Access-Control-Allow-Origin这个字段就是允许跨域请求，如果没有，就是不同意这个预检请求，就会报错。</span></p><p data-lake-id=\"8724cbb54d9298166797f8b6a6ba2d19\" id=\"8724cbb54d9298166797f8b6a6ba2d19\"><br></p><p data-lake-id=\"7931f7461214611aaaaf8cff40e832a2\" id=\"7931f7461214611aaaaf8cff40e832a2\"><span data-lake-id=\"ua07a9cc5\" id=\"ua07a9cc5\">服务器回应的CORS的字段如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22Access-Control-Allow-Origin%3A%20http%3A%2F%2Fapi.bob.com%20%20%2F%2F%20%E5%85%81%E8%AE%B8%E8%B7%A8%E5%9F%9F%E7%9A%84%E6%BA%90%E5%9C%B0%E5%9D%80%5CnAccess-Control-Allow-Methods%3A%20GET%2C%20POST%2C%20PUT%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E7%9A%84%E6%96%B9%E6%B3%95%5CnAccess-Control-Allow-Headers%3A%20X-Custom-Header%20%20%2F%2F%20%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%94%AF%E6%8C%81%E7%9A%84%E6%89%80%E6%9C%89%E5%A4%B4%E4%BF%A1%E6%81%AF%E5%AD%97%E6%AE%B5%5CnAccess-Control-Allow-Credentials%3A%20true%20%20%20%2F%2F%20%E8%A1%A8%E7%A4%BA%E6%98%AF%E5%90%A6%E5%85%81%E8%AE%B8%E5%8F%91%E9%80%81Cookie%5CnAccess-Control-Max-Age%3A%201728000%20%20%2F%2F%20%E7%94%A8%E6%9D%A5%E6%8C%87%E5%AE%9A%E6%9C%AC%E6%AC%A1%E9%A2%84%E6%A3%80%E8%AF%B7%E6%B1%82%E7%9A%84%E6%9C%89%E6%95%88%E6%9C%9F%EF%BC%8C%E5%8D%95%E4%BD%8D%E4%B8%BA%E7%A7%92%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22c17a4fbe%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"d5d527da25cb9a196fb173b9bff3ff60\" id=\"d5d527da25cb9a196fb173b9bff3ff60\"><span data-lake-id=\"ua1c59b51\" id=\"ua1c59b51\">只要服务器通过了预检请求，在以后每次的CORS请求都会自带一个Origin头信息字段。服务器的回应，也都会有一个Access-Control-Allow-Origin头信息字段。</span></p><p data-lake-id=\"20959e3c182f61030c3269966e477d10\" id=\"20959e3c182f61030c3269966e477d10\"><br></p><p data-lake-id=\"324897c272c933e8b808a621839e6716\" id=\"324897c272c933e8b808a621839e6716\"><strong><span data-lake-id=\"ue88c9c96\" id=\"ue88c9c96\">在非简单请求中，至少需要设置以下字段：</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22'Access-Control-Allow-Origin'%20%20%5Cn'Access-Control-Allow-Methods'%5Cn'Access-Control-Allow-Headers'%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22d0139b13%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h5 data-lake-id=\"23067c4d971a5baf70f57232780a1458\" id=\"23067c4d971a5baf70f57232780a1458\"><span data-lake-id=\"u47938b32\" id=\"u47938b32\">减少OPTIONS请求次数：</span></h5><p data-lake-id=\"6c44f1084fa8afe4affd5a4536f5f443\" id=\"6c44f1084fa8afe4affd5a4536f5f443\"><span data-lake-id=\"u5f77420c\" id=\"u5f77420c\">OPTIONS请求次数过多就会损耗页面加载的性能，降低用户体验度。所以尽量要减少OPTIONS请求次数，可以后端在请求的返回头部添加：Access-Control-Max-Age：number。它表示预检请求的返回结果可以被缓存多久，单位是秒。该字段只对完全一样的URL的缓存设置生效，所以设置了缓存时间，在这个时间范围内，再次发送请求就不需要进行预检请求了。</span></p><h5 data-lake-id=\"9f173596803ee2ce0f6734b78bc18d30\" id=\"9f173596803ee2ce0f6734b78bc18d30\"><br></h5><h5 data-lake-id=\"960355e50265646524f4253c6e6a42b5\" id=\"960355e50265646524f4253c6e6a42b5\"><span data-lake-id=\"ufd26a175\" id=\"ufd26a175\">CORS中Cookie相关问题：</span></h5><p data-lake-id=\"d8f4d0ec0c5748b8dcb4ba300fd56966\" id=\"d8f4d0ec0c5748b8dcb4ba300fd56966\"><span data-lake-id=\"u792aa064\" id=\"u792aa064\">在CORS请求中，如果想要传递Cookie，就要满足以下三个条件：</span></p><ul list=\"u42d348f7\"><li fid=\"uebbe6445\" data-lake-id=\"c52597f5713f39889bb913fa554a2d33\" id=\"c52597f5713f39889bb913fa554a2d33\"><strong><span data-lake-id=\"ua45b0211\" id=\"ua45b0211\">在请求中设置 </span></strong><code data-lake-id=\"u18566edb\" id=\"u18566edb\"><strong><span data-lake-id=\"u570dee3f\" id=\"u570dee3f\">withCredentials</span></strong></code></li></ul><p data-lake-id=\"632de271697ebb4f036fcbb9aeef8b6e\" id=\"632de271697ebb4f036fcbb9aeef8b6e\"><br></p><p data-lake-id=\"989a81a45d89b7571e1ad64cb9eb006e\" id=\"989a81a45d89b7571e1ad64cb9eb006e\"><span data-lake-id=\"u29483f17\" id=\"u29483f17\">默认情况下在跨域请求，浏览器是不带 cookie 的。但是我们可以通过设置 withCredentials 来进行传递 cookie.</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E5%8E%9F%E7%94%9F%20xml%20%E7%9A%84%E8%AE%BE%E7%BD%AE%E6%96%B9%E5%BC%8F%5Cnvar%20xhr%20%3D%20new%20XMLHttpRequest()%3B%5Cnxhr.withCredentials%20%3D%20true%3B%5Cn%2F%2F%20axios%20%E8%AE%BE%E7%BD%AE%E6%96%B9%E5%BC%8F%5Cnaxios.defaults.withCredentials%20%3D%20true%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22cbf40c5a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u74203043\"><li fid=\"uea39981f\" data-lake-id=\"02c4668fad2f9f1104d55d787d143ad6\" id=\"02c4668fad2f9f1104d55d787d143ad6\"><strong><span data-lake-id=\"u3f8d64e2\" id=\"u3f8d64e2\">Access-Control-Allow-Credentials 设置为 true</span></strong></li><li fid=\"uea39981f\" data-lake-id=\"a18e1715a46e37c615e1655f0471e187\" id=\"a18e1715a46e37c615e1655f0471e187\"><strong><span data-lake-id=\"u4df7a092\" id=\"u4df7a092\">Access-Control-Allow-Origin 设置为非 </span></strong><code data-lake-id=\"u5f19b1ed\" id=\"u5f19b1ed\"><strong><span data-lake-id=\"u3a41158b\" id=\"u3a41158b\">*</span></strong></code></li></ul><h4 data-lake-id=\"1c5c311f397ee92e4d8e91845125b84c\" id=\"1c5c311f397ee92e4d8e91845125b84c\"><span data-lake-id=\"ub350c9e8\" id=\"ub350c9e8\">（2）JSONP</span></h4><p data-lake-id=\"8dcc47cf9a80d0d8584646517bd19fa3\" id=\"8dcc47cf9a80d0d8584646517bd19fa3\"><strong><span data-lake-id=\"ub5846ab1\" id=\"ub5846ab1\">jsonp</span></strong><span data-lake-id=\"ub7e2c51d\" id=\"ub7e2c51d\">的原理就是利用</span><code data-lake-id=\"uf96efe8c\" id=\"uf96efe8c\"><span data-lake-id=\"ub57ed71b\" id=\"ub57ed71b\">&lt;script&gt;</span></code><span data-lake-id=\"uab30cb87\" id=\"uab30cb87\">标签没有跨域限制，通过</span><code data-lake-id=\"uf1c92903\" id=\"uf1c92903\"><span data-lake-id=\"u46aa7807\" id=\"u46aa7807\">&lt;script&gt;</span></code><span data-lake-id=\"uecb2e2db\" id=\"uecb2e2db\">标签src属性，发送带有callback参数的GET请求，服务端将接口返回数据拼凑到callback函数中，返回给浏览器，浏览器解析执行，从而前端拿到callback函数返回的数据。</span></p><p data-lake-id=\"9ec64130d820b235d65c35c7aec6e829\" id=\"9ec64130d820b235d65c35c7aec6e829\"><span data-lake-id=\"uc3e09f28\" id=\"uc3e09f28\">1）原生JS实现：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%20%20%20%20var%20script%20%3D%20document.createElement('script')%3B%5Cn%20%20%20%20script.type%20%3D%20'text%2Fjavascript'%3B%5Cn%20%20%20%20%2F%2F%20%E4%BC%A0%E5%8F%82%E4%B8%80%E4%B8%AA%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E5%90%8D%E7%BB%99%E5%90%8E%E7%AB%AF%EF%BC%8C%E6%96%B9%E4%BE%BF%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9E%E6%97%B6%E6%89%A7%E8%A1%8C%E8%BF%99%E4%B8%AA%E5%9C%A8%E5%89%8D%E7%AB%AF%E5%AE%9A%E4%B9%89%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%5Cn%20%20%20%20script.src%20%3D%20'http%3A%2F%2Fwww.domain2.com%3A8080%2Flogin%3Fuser%3Dadmin%26callback%3DhandleCallback'%3B%5Cn%20%20%20%20document.head.appendChild(script)%3B%5Cn%20%20%20%20%2F%2F%20%E5%9B%9E%E8%B0%83%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%5Cn%20%20%20%20function%20handleCallback(res)%20%7B%5Cn%20%20%20%20%20%20%20%20alert(JSON.stringify(res))%3B%5Cn%20%20%20%20%7D%5Cn%20%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22iQ7or%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"140bb8c0d91b5a869af8bd226e2154ec\" id=\"140bb8c0d91b5a869af8bd226e2154ec\"><span data-lake-id=\"u2fa37da7\" id=\"u2fa37da7\">服务端返回如下（返回时即执行全局函数）：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22handleCallback(%7B%5C%22success%5C%22%3A%20true%2C%20%5C%22user%5C%22%3A%20%5C%22admin%5C%22%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22RzkXR%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"4acde23d6cbd6bca17eea30e18a9ed29\" id=\"4acde23d6cbd6bca17eea30e18a9ed29\"><span data-lake-id=\"u537041a9\" id=\"u537041a9\">2）Vue axios实现：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22this.%24http%20%3D%20axios%3B%5Cnthis.%24http.jsonp('http%3A%2F%2Fwww.domain2.com%3A8080%2Flogin'%2C%20%7B%5Cn%20%20%20%20params%3A%20%7B%7D%2C%5Cn%20%20%20%20jsonp%3A%20'handleCallback'%5Cn%7D).then((res)%20%3D%3E%20%7B%5Cn%20%20%20%20console.log(res)%3B%20%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OlOwq%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"7857760fecc54bf537b9bd178cf0dada\" id=\"7857760fecc54bf537b9bd178cf0dada\"><span data-lake-id=\"ued371bfe\" id=\"ued371bfe\">后端node.js代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20querystring%20%3D%20require('querystring')%3B%5Cnvar%20http%20%3D%20require('http')%3B%5Cnvar%20server%20%3D%20http.createServer()%3B%5Cnserver.on('request'%2C%20function(req%2C%20res)%20%7B%5Cn%20%20%20%20var%20params%20%3D%20querystring.parse(req.url.split('%3F')%5B1%5D)%3B%5Cn%20%20%20%20var%20fn%20%3D%20params.callback%3B%5Cn%20%20%20%20%2F%2F%20jsonp%E8%BF%94%E5%9B%9E%E8%AE%BE%E7%BD%AE%5Cn%20%20%20%20res.writeHead(200%2C%20%7B%20'Content-Type'%3A%20'text%2Fjavascript'%20%7D)%3B%5Cn%20%20%20%20res.write(fn%20%2B%20'('%20%2B%20JSON.stringify(params)%20%2B%20')')%3B%5Cn%20%20%20%20res.end()%3B%5Cn%7D)%3B%5Cnserver.listen('8080')%3B%5Cnconsole.log('Server%20is%20running%20at%20port%208080...')%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22jVsK0%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"a29c40c589f49dac60dffa43ecec4831\" id=\"a29c40c589f49dac60dffa43ecec4831\"><strong><span data-lake-id=\"u969c5b6b\" id=\"u969c5b6b\">JSONP的缺点：</span></strong></p><ul list=\"ue1335b49\"><li fid=\"u2d02ac37\" data-lake-id=\"e1d5f4b86b0e9c2634887c006fd53913\" id=\"e1d5f4b86b0e9c2634887c006fd53913\"><span data-lake-id=\"u279de76d\" id=\"u279de76d\">具有局限性， 仅支持get方法</span></li><li fid=\"u2d02ac37\" data-lake-id=\"df7468426fc71f1a3c43fd2c52c0f6d8\" id=\"df7468426fc71f1a3c43fd2c52c0f6d8\"><span data-lake-id=\"uc320bb26\" id=\"uc320bb26\">不安全，可能会遭受XSS攻击</span></li></ul><h4 data-lake-id=\"4dd351dceaafd9363b284daa22650e42\" id=\"4dd351dceaafd9363b284daa22650e42\"><span data-lake-id=\"u12878588\" id=\"u12878588\">（3）</span><span data-lake-id=\"u71df2bab\" id=\"u71df2bab\">postMessage 跨域</span></h4><p data-lake-id=\"ae36bb1b1afd8c45cd65f63194b540fd\" id=\"ae36bb1b1afd8c45cd65f63194b540fd\"><span data-lake-id=\"u5dd66a77\" id=\"u5dd66a77\">postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</span></p><ul list=\"u13caebee\"><li fid=\"udf2d22f1\" data-lake-id=\"eed3bc54622c3c4a3d135070b7faa56b\" id=\"eed3bc54622c3c4a3d135070b7faa56b\"><span data-lake-id=\"u3e6a5e96\" id=\"u3e6a5e96\">页面和其打开的新窗口的数据传递</span></li><li fid=\"udf2d22f1\" data-lake-id=\"225d00619db0db75a0fbbb2e396e5c81\" id=\"225d00619db0db75a0fbbb2e396e5c81\"><span data-lake-id=\"ua2c89de8\" id=\"ua2c89de8\">多窗口之间消息传递</span></li><li fid=\"udf2d22f1\" data-lake-id=\"1158551534a9ea1145770d31e635f538\" id=\"1158551534a9ea1145770d31e635f538\"><span data-lake-id=\"uea2ed5e9\" id=\"uea2ed5e9\">页面与嵌套的iframe消息传递</span></li><li fid=\"udf2d22f1\" data-lake-id=\"43b53bd73f284fb5e6ac07efdeb45d1e\" id=\"43b53bd73f284fb5e6ac07efdeb45d1e\"><span data-lake-id=\"u1acfa217\" id=\"u1acfa217\">上面三个场景的跨域数据传递</span></li></ul><p data-lake-id=\"be9a7b34d9a3385e04c2877e95abdd86\" id=\"be9a7b34d9a3385e04c2877e95abdd86\"><br></p><p data-lake-id=\"5b12756171a01d8e8ac0d689ccf6f937\" id=\"5b12756171a01d8e8ac0d689ccf6f937\"><span data-lake-id=\"uebd90ef0\" id=\"uebd90ef0\">用法：postMessage(data,origin)方法接受两个参数：</span></p><ul list=\"u44647306\"><li fid=\"u5224d85c\" data-lake-id=\"6a73cdeb3d2289e60d56cc97390fe6cd\" id=\"6a73cdeb3d2289e60d56cc97390fe6cd\"><strong><span data-lake-id=\"u20ce3401\" id=\"u20ce3401\">data</span></strong><span data-lake-id=\"u59b034d4\" id=\"u59b034d4\">： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。</span></li><li fid=\"u5224d85c\" data-lake-id=\"5a22e4ac7fd46b3aefc7b7187b4cc0e2\" id=\"5a22e4ac7fd46b3aefc7b7187b4cc0e2\"><strong><span data-lake-id=\"u3e556af4\" id=\"u3e556af4\">origin</span></strong><span data-lake-id=\"u8eb675f6\" id=\"u8eb675f6\">： 协议+主机+端口号，也可以设置为&quot;*&quot;，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为&quot;/&quot;。</span></li></ul><p data-lake-id=\"3b775f5983aea82efe8294e664980bc3\" id=\"3b775f5983aea82efe8294e664980bc3\"><br></p><p data-lake-id=\"1f86ef0375ebf6a3fa56a4bb6d8b12cf\" id=\"1f86ef0375ebf6a3fa56a4bb6d8b12cf\"><span data-lake-id=\"u68bb5a60\" id=\"u68bb5a60\">1）a.html：(</span><span data-lake-id=\"uf1782dcf\" id=\"uf1782dcf\">domain1.com/a.html</span><span data-lake-id=\"u4ca49071\" id=\"u4ca49071\">)</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ciframe%20id%3D%5C%22iframe%5C%22%20src%3D%5C%22http%3A%2F%2Fwww.domain2.com%2Fb.html%5C%22%20style%3D%5C%22display%3Anone%3B%5C%22%3E%3C%2Fiframe%3E%5Cn%3Cscript%3E%20%20%20%20%20%20%20%5Cn%20%20%20%20var%20iframe%20%3D%20document.getElementById('iframe')%3B%5Cn%20%20%20%20iframe.onload%20%3D%20function()%20%7B%5Cn%20%20%20%20%20%20%20%20var%20data%20%3D%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20name%3A%20'aym'%5Cn%20%20%20%20%20%20%20%20%7D%3B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%90%91domain2%E4%BC%A0%E9%80%81%E8%B7%A8%E5%9F%9F%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20iframe.contentWindow.postMessage(JSON.stringify(data)%2C%20'http%3A%2F%2Fwww.domain2.com')%3B%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20%2F%2F%20%E6%8E%A5%E5%8F%97domain2%E8%BF%94%E5%9B%9E%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20window.addEventListener('message'%2C%20function(e)%20%7B%5Cn%20%20%20%20%20%20%20%20alert('data%20from%20domain2%20---%3E%20'%20%2B%20e.data)%3B%5Cn%20%20%20%20%7D%2C%20false)%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TQkR6%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"fa15a831c380cf751f39b6c1623d91ce\" id=\"fa15a831c380cf751f39b6c1623d91ce\"><span data-lake-id=\"ua3b5adf4\" id=\"ua3b5adf4\">2）b.html：(</span><span data-lake-id=\"u6b5f86fb\" id=\"u6b5f86fb\">domain2.com/b.html</span><span data-lake-id=\"u0cda7be4\" id=\"u0cda7be4\">)</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%20%20%20%20%2F%2F%20%E6%8E%A5%E6%94%B6domain1%E7%9A%84%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20window.addEventListener('message'%2C%20function(e)%20%7B%5Cn%20%20%20%20%20%20%20%20alert('data%20from%20domain1%20---%3E%20'%20%2B%20e.data)%3B%5Cn%20%20%20%20%20%20%20%20var%20data%20%3D%20JSON.parse(e.data)%3B%5Cn%20%20%20%20%20%20%20%20if%20(data)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20data.number%20%3D%2016%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E5%A4%84%E7%90%86%E5%90%8E%E5%86%8D%E5%8F%91%E5%9B%9Edomain1%5Cn%20%20%20%20%20%20%20%20%20%20%20%20window.parent.postMessage(JSON.stringify(data)%2C%20'http%3A%2F%2Fwww.domain1.com')%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%2C%20false)%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22XXhax%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"14d606802ad75caaaf6438a689bb5ebd\" id=\"14d606802ad75caaaf6438a689bb5ebd\"><span data-lake-id=\"u41219fa0\" id=\"u41219fa0\">（4）nginx代理跨域</span></h4><p data-lake-id=\"fdc25a3f13ab40be40016ea06b4225fd\" id=\"fdc25a3f13ab40be40016ea06b4225fd\"><span data-lake-id=\"u384f8c69\" id=\"u384f8c69\">nginx代理跨域，实质和CORS跨域原理一样，通过配置文件设置请求响应头Access-Control-Allow-Origin…等字段。</span></p><p data-lake-id=\"efc9ce8792ae78b743e16a18f32b241b\" id=\"efc9ce8792ae78b743e16a18f32b241b\"><br></p><p data-lake-id=\"8a6bc5ab44b0ecd3dead7583cb1e38b1\" id=\"8a6bc5ab44b0ecd3dead7583cb1e38b1\"><span data-lake-id=\"u2311bd8d\" id=\"u2311bd8d\">1）nginx配置解决iconfont跨域</span></p><p data-lake-id=\"8f4c5681a025aee642fefed755e89c37\" id=\"8f4c5681a025aee642fefed755e89c37\"><span data-lake-id=\"u0a25bb1c\" id=\"u0a25bb1c\">浏览器跨域访问js、css、img等常规静态资源被同源策略许可，但iconfont字体文件(eot|otf|ttf|woff|svg)例外，此时可在nginx的静态资源服务器中加入以下配置。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22http%22%2C%22code%22%3A%22location%20%2F%20%7B%5Cn%20%20add_header%20Access-Control-Allow-Origin%20*%3B%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22LvMqE%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"0214471aeccdf9f60ae2224c5928d85c\" id=\"0214471aeccdf9f60ae2224c5928d85c\"><br></p><p data-lake-id=\"3fc57ec69a046a29a5c8039edb1df3ea\" id=\"3fc57ec69a046a29a5c8039edb1df3ea\"><span data-lake-id=\"uf850d83b\" id=\"uf850d83b\">2）nginx反向代理接口跨域</span></p><p data-lake-id=\"197e35f6e6f8570b72b31db5b1770c79\" id=\"197e35f6e6f8570b72b31db5b1770c79\"><span data-lake-id=\"u132b251a\" id=\"u132b251a\">跨域问题：同源策略仅是针对浏览器的安全策略。服务器端调用HTTP接口只是使用HTTP协议，不需要同源策略，也就不存在跨域问题。</span></p><p data-lake-id=\"5f02718dee9805be518fb572bea570e1\" id=\"5f02718dee9805be518fb572bea570e1\"><span data-lake-id=\"u215ccb33\" id=\"u215ccb33\">实现思路：通过Nginx配置一个代理服务器域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域访问。</span></p><p data-lake-id=\"f5ac1edbc686c41c0f66bb674ac15f45\" id=\"f5ac1edbc686c41c0f66bb674ac15f45\"><br></p><p data-lake-id=\"b2beef780a9caf993734ab00525aac4d\" id=\"b2beef780a9caf993734ab00525aac4d\"><span data-lake-id=\"ufff01ed6\" id=\"ufff01ed6\">nginx具体配置：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%23proxy%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cnserver%20%7B%5Cn%20%20%20%20listen%20%20%20%20%20%20%2081%3B%5Cn%20%20%20%20server_name%20%20www.domain1.com%3B%5Cn%20%20%20%20location%20%2F%20%7B%5Cn%20%20%20%20%20%20%20%20proxy_pass%20%20%20http%3A%2F%2Fwww.domain2.com%3A8080%3B%20%20%23%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%5Cn%20%20%20%20%20%20%20%20proxy_cookie_domain%20www.domain2.com%20www.domain1.com%3B%20%23%E4%BF%AE%E6%94%B9cookie%E9%87%8C%E5%9F%9F%E5%90%8D%5Cn%20%20%20%20%20%20%20%20index%20%20index.html%20index.htm%3B%5Cn%20%20%20%20%20%20%20%20%23%20%E5%BD%93%E7%94%A8webpack-dev-server%E7%AD%89%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%BB%A3%E7%90%86%E6%8E%A5%E5%8F%A3%E8%AE%BF%E9%97%AEnignx%E6%97%B6%EF%BC%8C%E6%AD%A4%E6%97%B6%E6%97%A0%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%82%E4%B8%8E%EF%BC%8C%E6%95%85%E6%B2%A1%E6%9C%89%E5%90%8C%E6%BA%90%E9%99%90%E5%88%B6%EF%BC%8C%E4%B8%8B%E9%9D%A2%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%85%8D%E7%BD%AE%E5%8F%AF%E4%B8%8D%E5%90%AF%E7%94%A8%5Cn%20%20%20%20%20%20%20%20add_header%20Access-Control-Allow-Origin%20http%3A%2F%2Fwww.domain1.com%3B%20%20%23%E5%BD%93%E5%89%8D%E7%AB%AF%E5%8F%AA%E8%B7%A8%E5%9F%9F%E4%B8%8D%E5%B8%A6cookie%E6%97%B6%EF%BC%8C%E5%8F%AF%E4%B8%BA*%5Cn%20%20%20%20%20%20%20%20add_header%20Access-Control-Allow-Credentials%20true%3B%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22zWzJu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"883ee10db1e85eb360f6db1a4f22e671\" id=\"883ee10db1e85eb360f6db1a4f22e671\"><span data-lake-id=\"u3ce600b9\" id=\"u3ce600b9\">（5）nodejs 中间件代理跨域</span></h4><p data-lake-id=\"7ce7e063c19311fe6cde1607a3e16997\" id=\"7ce7e063c19311fe6cde1607a3e16997\"><span data-lake-id=\"ua713927a\" id=\"ua713927a\">node中间件实现跨域代理，原理大致与nginx相同，都是通过启一个代理服务器，实现数据的转发，也可以通过设置cookieDomainRewrite参数修改响应头中cookie中域名，实现当前域的cookie写入，方便接口登录认证。</span></p><p data-lake-id=\"d6cd0026a2565f157ca4e0b230d60df7\" id=\"d6cd0026a2565f157ca4e0b230d60df7\"><br></p><p data-lake-id=\"f5931a988c2183374367870fe90e73bc\" id=\"f5931a988c2183374367870fe90e73bc\"><strong><span data-lake-id=\"u7d50cd57\" id=\"u7d50cd57\">1）非vue框架的跨域</span></strong></p><p data-lake-id=\"ea464b8cd8b6fae9c07a2180e16bcc10\" id=\"ea464b8cd8b6fae9c07a2180e16bcc10\"><span data-lake-id=\"u7be464b2\" id=\"u7be464b2\">使用node + express + http-proxy-middleware搭建一个proxy服务器。</span></p><ul list=\"uefc00ead\"><li fid=\"u7e5be762\" data-lake-id=\"e93877a3d1612b4d478ade564fdd6600\" id=\"e93877a3d1612b4d478ade564fdd6600\"><span data-lake-id=\"ue2f3e22b\" id=\"ue2f3e22b\">前端代码：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20xhr%20%3D%20new%20XMLHttpRequest()%3B%5Cn%2F%2F%20%E5%89%8D%E7%AB%AF%E5%BC%80%E5%85%B3%EF%BC%9A%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%90%A6%E8%AF%BB%E5%86%99cookie%5Cnxhr.withCredentials%20%3D%20true%3B%5Cn%2F%2F%20%E8%AE%BF%E9%97%AEhttp-proxy-middleware%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8%5Cnxhr.open('get'%2C%20'http%3A%2F%2Fwww.domain1.com%3A3000%2Flogin%3Fuser%3Dadmin'%2C%20true)%3B%5Cnxhr.send()%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22RzWrr%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><ul list=\"u35d0e205\"><li fid=\"u2edd373b\" data-lake-id=\"f52c9d8983b917f96b13e45f714e22a0\" id=\"f52c9d8983b917f96b13e45f714e22a0\"><span data-lake-id=\"u076017ec\" id=\"u076017ec\">中间件服务器代码：</span></li></ul><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20express%20%3D%20require('express')%3B%5Cnvar%20proxy%20%3D%20require('http-proxy-middleware')%3B%5Cnvar%20app%20%3D%20express()%3B%5Cnapp.use('%2F'%2C%20proxy(%7B%5Cn%20%20%20%20%2F%2F%20%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F%E7%9B%AE%E6%A0%87%E6%8E%A5%E5%8F%A3%5Cn%20%20%20%20target%3A%20'http%3A%2F%2Fwww.domain2.com%3A8080'%2C%5Cn%20%20%20%20changeOrigin%3A%20true%2C%5Cn%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E5%93%8D%E5%BA%94%E5%A4%B4%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E5%B9%B6%E5%85%81%E8%AE%B8%E5%B8%A6cookie%5Cn%20%20%20%20onProxyRes%3A%20function(proxyRes%2C%20req%2C%20res)%20%7B%5Cn%20%20%20%20%20%20%20%20res.header('Access-Control-Allow-Origin'%2C%20'http%3A%2F%2Fwww.domain1.com')%3B%5Cn%20%20%20%20%20%20%20%20res.header('Access-Control-Allow-Credentials'%2C%20'true')%3B%5Cn%20%20%20%20%7D%2C%5Cn%20%20%20%20%2F%2F%20%E4%BF%AE%E6%94%B9%E5%93%8D%E5%BA%94%E4%BF%A1%E6%81%AF%E4%B8%AD%E7%9A%84cookie%E5%9F%9F%E5%90%8D%5Cn%20%20%20%20cookieDomainRewrite%3A%20'www.domain1.com'%20%20%2F%2F%20%E5%8F%AF%E4%BB%A5%E4%B8%BAfalse%EF%BC%8C%E8%A1%A8%E7%A4%BA%E4%B8%8D%E4%BF%AE%E6%94%B9%5Cn%7D))%3B%5Cnapp.listen(3000)%3B%5Cnconsole.log('Proxy%20server%20is%20listen%20at%20port%203000...')%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22TAOwS%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"8c63ce8a9f061461dfceb397a02b8f38\" id=\"8c63ce8a9f061461dfceb397a02b8f38\"><strong><span data-lake-id=\"u4d58fae0\" id=\"u4d58fae0\">2）vue框架的跨域</span></strong></p><p data-lake-id=\"6fcaa5095a4c039918d02908b89f7735\" id=\"6fcaa5095a4c039918d02908b89f7735\"><span data-lake-id=\"u420ddb98\" id=\"u420ddb98\">node + vue + webpack + webpack-dev-server搭建的项目，跨域请求接口，直接修改webpack.config.js配置。开发环境下，vue渲染服务和接口代理服务都是webpack-dev-server同一个，所以页面与代理接口之间不再跨域。</span></p><p data-lake-id=\"d58b0433c6c363d750d9d1b57b3d694a\" id=\"d58b0433c6c363d750d9d1b57b3d694a\"><br></p><p data-lake-id=\"0b800b46231a44c9f31894b4ffccd0df\" id=\"0b800b46231a44c9f31894b4ffccd0df\"><span data-lake-id=\"u0c9f0b82\" id=\"u0c9f0b82\">webpack.config.js部分配置：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22module.exports%20%3D%20%7B%5Cn%20%20%20%20entry%3A%20%7B%7D%2C%5Cn%20%20%20%20module%3A%20%7B%7D%2C%5Cn%20%20%20%20...%5Cn%20%20%20%20devServer%3A%20%7B%5Cn%20%20%20%20%20%20%20%20historyApiFallback%3A%20true%2C%5Cn%20%20%20%20%20%20%20%20proxy%3A%20%5B%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20context%3A%20'%2Flogin'%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20target%3A%20'http%3A%2F%2Fwww.domain2.com%3A8080'%2C%20%20%2F%2F%20%E4%BB%A3%E7%90%86%E8%B7%A8%E5%9F%9F%E7%9B%AE%E6%A0%87%E6%8E%A5%E5%8F%A3%5Cn%20%20%20%20%20%20%20%20%20%20%20%20changeOrigin%3A%20true%2C%5Cn%20%20%20%20%20%20%20%20%20%20%20%20secure%3A%20false%2C%20%20%2F%2F%20%E5%BD%93%E4%BB%A3%E7%90%86%E6%9F%90%E4%BA%9Bhttps%E6%9C%8D%E5%8A%A1%E6%8A%A5%E9%94%99%E6%97%B6%E7%94%A8%5Cn%20%20%20%20%20%20%20%20%20%20%20%20cookieDomainRewrite%3A%20'www.domain1.com'%20%20%2F%2F%20%E5%8F%AF%E4%BB%A5%E4%B8%BAfalse%EF%BC%8C%E8%A1%A8%E7%A4%BA%E4%B8%8D%E4%BF%AE%E6%94%B9%5Cn%20%20%20%20%20%20%20%20%7D%5D%2C%5Cn%20%20%20%20%20%20%20%20noInfo%3A%20true%5Cn%20%20%20%20%7D%5Cn%7D%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22e4c0e%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"3640726e27cab2e05e54347bd0899c83\" id=\"3640726e27cab2e05e54347bd0899c83\"><span data-lake-id=\"ud31fe22a\" id=\"ud31fe22a\">（6）document.domain + iframe跨域</span></h4><p data-lake-id=\"fc587d3227db39ef6bbdc92456cc5e9a\" id=\"fc587d3227db39ef6bbdc92456cc5e9a\"><span data-lake-id=\"u79a23db8\" id=\"u79a23db8\">此方案仅限主域相同，子域不同的跨域应用场景。实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。</span></p><p data-lake-id=\"b45cc432477a7dfcfde0b82ea092386e\" id=\"b45cc432477a7dfcfde0b82ea092386e\"><span data-lake-id=\"u8b5ba2c7\" id=\"u8b5ba2c7\">1）父窗口：(</span><span data-lake-id=\"ubc338843\" id=\"ubc338843\">domain.com/a.html</span><span data-lake-id=\"u6edd3805\" id=\"u6edd3805\">)</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ciframe%20id%3D%5C%22iframe%5C%22%20src%3D%5C%22http%3A%2F%2Fchild.domain.com%2Fb.html%5C%22%3E%3C%2Fiframe%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20document.domain%20%3D%20'domain.com'%3B%5Cn%20%20%20%20var%20user%20%3D%20'admin'%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22hOhm3%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"7eb870f5bb54bb3e4c27fc2af6d4d640\" id=\"7eb870f5bb54bb3e4c27fc2af6d4d640\"><span data-lake-id=\"u2382afa2\" id=\"u2382afa2\">1）子窗口：(</span><span data-lake-id=\"u5a6eb310\" id=\"u5a6eb310\">child.domain.com/a.html</span><span data-lake-id=\"ua908361d\" id=\"ua908361d\">)</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%20%20%20%20document.domain%20%3D%20'domain.com'%3B%5Cn%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E7%88%B6%E7%AA%97%E5%8F%A3%E4%B8%AD%E5%8F%98%E9%87%8F%5Cn%20%20%20%20console.log('get%20js%20data%20from%20parent%20---%3E%20'%20%2B%20window.parent.user)%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22xZKFo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"26c7a1b576577ffc86636e4345dc1b4e\" id=\"26c7a1b576577ffc86636e4345dc1b4e\"><span data-lake-id=\"u6f4101f0\" id=\"u6f4101f0\">（7）location.hash + iframe跨域</span></h4><p data-lake-id=\"322ac1772d00cc082dd3f6f649aa1e48\" id=\"322ac1772d00cc082dd3f6f649aa1e48\"><span data-lake-id=\"ufc2fe4f4\" id=\"ufc2fe4f4\">实现原理：a欲与b跨域相互通信，通过中间页c来实现。 三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。</span></p><p data-lake-id=\"11ef0a746e7613d61dab55d9ab74c35b\" id=\"11ef0a746e7613d61dab55d9ab74c35b\"><br></p><p data-lake-id=\"5c32e43d792dd7b56fa91e8beeba4363\" id=\"5c32e43d792dd7b56fa91e8beeba4363\"><span data-lake-id=\"u7aa628c0\" id=\"u7aa628c0\">具体实现：A域：a.html -&gt; B域：b.html -&gt; A域：c.html，a与b不同域只能通过hash值单向通信，b与c也不同域也只能单向通信，但c与a同域，所以c可通过parent.parent访问a页面所有对象。</span></p><p data-lake-id=\"dd6104df515f8c091d4b5646c5ad48f4\" id=\"dd6104df515f8c091d4b5646c5ad48f4\"><br></p><p data-lake-id=\"a3f048076290b8b1ccb4c029f381d081\" id=\"a3f048076290b8b1ccb4c029f381d081\"><span data-lake-id=\"u1f62b05f\" id=\"u1f62b05f\">1）a.html：(</span><span data-lake-id=\"ue81467e9\" id=\"ue81467e9\">domain1.com/a.html</span><span data-lake-id=\"u0a56316e\" id=\"u0a56316e\">)</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Ciframe%20id%3D%5C%22iframe%5C%22%20src%3D%5C%22http%3A%2F%2Fwww.domain2.com%2Fb.html%5C%22%20style%3D%5C%22display%3Anone%3B%5C%22%3E%3C%2Fiframe%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20var%20iframe%20%3D%20document.getElementById('iframe')%3B%5Cn%20%20%20%20%2F%2F%20%E5%90%91b.html%E4%BC%A0hash%E5%80%BC%5Cn%20%20%20%20setTimeout(function()%20%7B%5Cn%20%20%20%20%20%20%20%20iframe.src%20%3D%20iframe.src%20%2B%20'%23user%3Dadmin'%3B%5Cn%20%20%20%20%7D%2C%201000)%3B%5Cn%20%20%20%20%5Cn%20%20%20%20%2F%2F%20%E5%BC%80%E6%94%BE%E7%BB%99%E5%90%8C%E5%9F%9Fc.html%E7%9A%84%E5%9B%9E%E8%B0%83%E6%96%B9%E6%B3%95%5Cn%20%20%20%20function%20onCallback(res)%20%7B%5Cn%20%20%20%20%20%20%20%20alert('data%20from%20c.html%20---%3E%20'%20%2B%20res)%3B%5Cn%20%20%20%20%7D%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22VJ1Ld%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"0a6e33477c400c69324f3b3ccf1834fe\" id=\"0a6e33477c400c69324f3b3ccf1834fe\"><span data-lake-id=\"u1cbd76f4\" id=\"u1cbd76f4\">2）b.html：(</span><span data-lake-id=\"u0f6ec491\" id=\"u0f6ec491\" style=\"color: transparent; background-color: transparent\">.</span><span data-lake-id=\"u472750e6\" id=\"u472750e6\">domain2.com/b.html</span><span data-lake-id=\"u246d8fb7\" id=\"u246d8fb7\">)</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22plain%22%2C%22code%22%3A%22%3Ciframe%20id%3D%5C%22iframe%5C%22%20src%3D%5C%22http%3A%2F%2Fwww.domain1.com%2Fc.html%5C%22%20style%3D%5C%22display%3Anone%3B%5C%22%3E%3C%2Fiframe%3E%5Cn%3Cscript%3E%5Cn%20%20%20%20var%20iframe%20%3D%20document.getElementById('iframe')%3B%5Cn%20%20%20%20%2F%2F%20%E7%9B%91%E5%90%ACa.html%E4%BC%A0%E6%9D%A5%E7%9A%84hash%E5%80%BC%EF%BC%8C%E5%86%8D%E4%BC%A0%E7%BB%99c.html%5Cn%20%20%20%20window.onhashchange%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20iframe.src%20%3D%20iframe.src%20%2B%20location.hash%3B%5Cn%20%20%20%20%7D%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%222nd41%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f6b31756ceaf91e30cc5c611c5bd2671\" id=\"f6b31756ceaf91e30cc5c611c5bd2671\"><span data-lake-id=\"u49565943\" id=\"u49565943\">3）c.html：(</span><a href=\"https://link.zhihu.com/?target=http%3A//www.domain1.com/c.html\" target=\"_blank\" data-lake-id=\"u0a6b5092\" id=\"u0a6b5092\"><span data-lake-id=\"u752f5ace\" id=\"u752f5ace\" style=\"color: transparent; background-color: transparent\">http://www.</span><span data-lake-id=\"u7209b3bb\" id=\"u7209b3bb\">domain1.com/c.html</span></a><span data-lake-id=\"uc2c1ac90\" id=\"uc2c1ac90\">)</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%20%20%20%20%2F%2F%20%E7%9B%91%E5%90%ACb.html%E4%BC%A0%E6%9D%A5%E7%9A%84hash%E5%80%BC%5Cn%20%20%20%20window.onhashchange%20%3D%20function%20()%20%7B%5Cn%20%20%20%20%20%20%20%20%2F%2F%20%E5%86%8D%E9%80%9A%E8%BF%87%E6%93%8D%E4%BD%9C%E5%90%8C%E5%9F%9Fa.html%E7%9A%84js%E5%9B%9E%E8%B0%83%EF%BC%8C%E5%B0%86%E7%BB%93%E6%9E%9C%E4%BC%A0%E5%9B%9E%5Cn%20%20%20%20%20%20%20%20window.parent.parent.onCallback('hello%3A%20'%20%2B%20location.hash.replace('%23user%3D'%2C%20''))%3B%5Cn%20%20%20%20%7D%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%228nnnp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h4 data-lake-id=\"c2c64452f2e09833358b26a3947fd8e7\" id=\"c2c64452f2e09833358b26a3947fd8e7\"><span data-lake-id=\"u1807691b\" id=\"u1807691b\">（8）window.name + iframe跨域</span></h4><p data-lake-id=\"cef59a0c4c7b828bb03e8363fab07710\" id=\"cef59a0c4c7b828bb03e8363fab07710\"><span data-lake-id=\"uaf7ade26\" id=\"uaf7ade26\">window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。</span></p><p data-lake-id=\"8ae091a34ff8b091abebd1ca5b82fb21\" id=\"8ae091a34ff8b091abebd1ca5b82fb21\"><br></p><p data-lake-id=\"4847fe45e099c5d5634bdc69239e73a5\" id=\"4847fe45e099c5d5634bdc69239e73a5\"><span data-lake-id=\"u3b36256a\" id=\"u3b36256a\">1）a.html：(</span><span data-lake-id=\"uc899ebf0\" id=\"uc899ebf0\">domain1.com/a.html</span><span data-lake-id=\"u6793fb28\" id=\"u6793fb28\">)</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20proxy%20%3D%20function(url%2C%20callback)%20%7B%5Cn%20%20%20%20var%20state%20%3D%200%3B%5Cn%20%20%20%20var%20iframe%20%3D%20document.createElement('iframe')%3B%5Cn%20%20%20%20%2F%2F%20%E5%8A%A0%E8%BD%BD%E8%B7%A8%E5%9F%9F%E9%A1%B5%E9%9D%A2%5Cn%20%20%20%20iframe.src%20%3D%20url%3B%5Cn%20%20%20%20%2F%2F%20onload%E4%BA%8B%E4%BB%B6%E4%BC%9A%E8%A7%A6%E5%8F%912%E6%AC%A1%EF%BC%8C%E7%AC%AC1%E6%AC%A1%E5%8A%A0%E8%BD%BD%E8%B7%A8%E5%9F%9F%E9%A1%B5%EF%BC%8C%E5%B9%B6%E7%95%99%E5%AD%98%E6%95%B0%E6%8D%AE%E4%BA%8Ewindow.name%5Cn%20%20%20%20iframe.onload%20%3D%20function()%20%7B%5Cn%20%20%20%20%20%20%20%20if%20(state%20%3D%3D%3D%201)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%AC%AC2%E6%AC%A1onload(%E5%90%8C%E5%9F%9Fproxy%E9%A1%B5)%E6%88%90%E5%8A%9F%E5%90%8E%EF%BC%8C%E8%AF%BB%E5%8F%96%E5%90%8C%E5%9F%9Fwindow.name%E4%B8%AD%E6%95%B0%E6%8D%AE%5Cn%20%20%20%20%20%20%20%20%20%20%20%20callback(iframe.contentWindow.name)%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20destoryFrame()%3B%5Cn%20%20%20%20%20%20%20%20%7D%20else%20if%20(state%20%3D%3D%3D%200)%20%7B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20%2F%2F%20%E7%AC%AC1%E6%AC%A1onload(%E8%B7%A8%E5%9F%9F%E9%A1%B5)%E6%88%90%E5%8A%9F%E5%90%8E%EF%BC%8C%E5%88%87%E6%8D%A2%E5%88%B0%E5%90%8C%E5%9F%9F%E4%BB%A3%E7%90%86%E9%A1%B5%E9%9D%A2%5Cn%20%20%20%20%20%20%20%20%20%20%20%20iframe.contentWindow.location%20%3D%20'http%3A%2F%2Fwww.domain1.com%2Fproxy.html'%3B%5Cn%20%20%20%20%20%20%20%20%20%20%20%20state%20%3D%201%3B%5Cn%20%20%20%20%20%20%20%20%7D%5Cn%20%20%20%20%7D%3B%5Cn%20%20%20%20document.body.appendChild(iframe)%3B%5Cn%20%20%20%20%2F%2F%20%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E4%BB%A5%E5%90%8E%E9%94%80%E6%AF%81%E8%BF%99%E4%B8%AAiframe%EF%BC%8C%E9%87%8A%E6%94%BE%E5%86%85%E5%AD%98%EF%BC%9B%E8%BF%99%E4%B9%9F%E4%BF%9D%E8%AF%81%E4%BA%86%E5%AE%89%E5%85%A8%EF%BC%88%E4%B8%8D%E8%A2%AB%E5%85%B6%E4%BB%96%E5%9F%9Fframe%20js%E8%AE%BF%E9%97%AE%EF%BC%89%5Cn%20%20%20%20function%20destoryFrame()%20%7B%5Cn%20%20%20%20%20%20%20%20iframe.contentWindow.document.write('')%3B%5Cn%20%20%20%20%20%20%20%20iframe.contentWindow.close()%3B%5Cn%20%20%20%20%20%20%20%20document.body.removeChild(iframe)%3B%5Cn%20%20%20%20%7D%5Cn%7D%3B%5Cn%2F%2F%20%E8%AF%B7%E6%B1%82%E8%B7%A8%E5%9F%9Fb%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE%5Cnproxy('http%3A%2F%2Fwww.domain2.com%2Fb.html'%2C%20function(data)%7B%5Cn%20%20%20%20alert(data)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%220RdkW%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"458067e11b25a1e8b4db0861a5cbccc3\" id=\"458067e11b25a1e8b4db0861a5cbccc3\"><span data-lake-id=\"ude4d7a57\" id=\"ude4d7a57\">2）proxy.html：(</span><span data-lake-id=\"u12dab608\" id=\"u12dab608\">domain1.com/proxy.html</span><span data-lake-id=\"u68657fc4\" id=\"u68657fc4\">)</span></p><p data-lake-id=\"3fec8195df4f9786bc3fb359f0de7e82\" id=\"3fec8195df4f9786bc3fb359f0de7e82\"><br></p><p data-lake-id=\"fcd8f3df8134f4734d0de8aad5cfc2c5\" id=\"fcd8f3df8134f4734d0de8aad5cfc2c5\"><span data-lake-id=\"ua450990d\" id=\"ua450990d\">中间代理页，与a.html同域，内容为空即可。</span></p><p data-lake-id=\"fe6d17be4bc626ea0471b5af831cf904\" id=\"fe6d17be4bc626ea0471b5af831cf904\"><span data-lake-id=\"u7f2f171b\" id=\"u7f2f171b\">3）b.html：(</span><span data-lake-id=\"u792f6fef\" id=\"u792f6fef\">domain2.com/b.html</span><span data-lake-id=\"uca84c58c\" id=\"uca84c58c\">)</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cscript%3E%5Cn%20%20%20%20window.name%20%3D%20'This%20is%20domain2%20data!'%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%224WaRO%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"659e48aba21883ee4096d3753ec88976\" id=\"659e48aba21883ee4096d3753ec88976\"><span data-lake-id=\"ubb811b64\" id=\"ubb811b64\">通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</span></p><h4 data-lake-id=\"9b15f27773a2dcf8416a8d2e02363572\" id=\"9b15f27773a2dcf8416a8d2e02363572\"><span data-lake-id=\"u69ae7349\" id=\"u69ae7349\">（9）WebSocket协议跨域</span></h4><p data-lake-id=\"860ddf8d368b5e652d4dc443323f37cf\" id=\"860ddf8d368b5e652d4dc443323f37cf\"><span data-lake-id=\"ua50ab83f\" id=\"ua50ab83f\">WebSocket protocol是HTML5一种新的协议。它实现了浏览器与服务器全双工通信，同时允许跨域通讯，是server push技术的一种很好的实现。</span></p><p data-lake-id=\"c3299ed6be4276b1fae7483add645183\" id=\"c3299ed6be4276b1fae7483add645183\"><br></p><p data-lake-id=\"270c6958f264bb59acf76d6da2d02e6e\" id=\"270c6958f264bb59acf76d6da2d02e6e\"><span data-lake-id=\"u1b5794a7\" id=\"u1b5794a7\">原生WebSocket API使用起来不太方便，我们使用</span><span data-lake-id=\"u7b1ea238\" id=\"u7b1ea238\">Socket.io</span><span data-lake-id=\"uffdda3c2\" id=\"uffdda3c2\">，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。</span></p><p data-lake-id=\"88a4c5d7bab2cb8b7de1e796919b2538\" id=\"88a4c5d7bab2cb8b7de1e796919b2538\"><br></p><p data-lake-id=\"5696e9d436dced24120a20921c751b19\" id=\"5696e9d436dced24120a20921c751b19\"><span data-lake-id=\"u446be501\" id=\"u446be501\">1）前端代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%3Cdiv%3Euser%20input%EF%BC%9A%3Cinput%20type%3D%5C%22text%5C%22%3E%3C%2Fdiv%3E%5Cn%3Cscript%20src%3D%5C%22https%3A%2F%2Fcdn.bootcss.com%2Fsocket.io%2F2.2.0%2Fsocket.io.js%5C%22%3E%3C%2Fscript%3E%5Cn%3Cscript%3E%5Cnvar%20socket%20%3D%20io('http%3A%2F%2Fwww.domain2.com%3A8080')%3B%5Cn%2F%2F%20%E8%BF%9E%E6%8E%A5%E6%88%90%E5%8A%9F%E5%A4%84%E7%90%86%5Cnsocket.on('connect'%2C%20function()%20%7B%5Cn%20%20%20%20%2F%2F%20%E7%9B%91%E5%90%AC%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B6%88%E6%81%AF%5Cn%20%20%20%20socket.on('message'%2C%20function(msg)%20%7B%5Cn%20%20%20%20%20%20%20%20console.log('data%20from%20server%3A%20---%3E%20'%20%2B%20msg)%3B%20%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20%2F%2F%20%E7%9B%91%E5%90%AC%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%85%B3%E9%97%AD%5Cn%20%20%20%20socket.on('disconnect'%2C%20function()%20%7B%20%5Cn%20%20%20%20%20%20%20%20console.log('Server%20socket%20has%20closed.')%3B%20%5Cn%20%20%20%20%7D)%3B%5Cn%7D)%3B%5Cndocument.getElementsByTagName('input')%5B0%5D.onblur%20%3D%20function()%20%7B%5Cn%20%20%20%20socket.send(this.value)%3B%5Cn%7D%3B%5Cn%3C%2Fscript%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22QYauw%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"c893029c6162acdaef5c4d6ee4c96005\" id=\"c893029c6162acdaef5c4d6ee4c96005\"><span data-lake-id=\"ud11a8c14\" id=\"ud11a8c14\">2）Nodejs socket后台：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22var%20http%20%3D%20require('http')%3B%5Cnvar%20socket%20%3D%20require('socket.io')%3B%5Cn%2F%2F%20%E5%90%AFhttp%E6%9C%8D%E5%8A%A1%5Cnvar%20server%20%3D%20http.createServer(function(req%2C%20res)%20%7B%5Cn%20%20%20%20res.writeHead(200%2C%20%7B%5Cn%20%20%20%20%20%20%20%20'Content-type'%3A%20'text%2Fhtml'%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20res.end()%3B%5Cn%7D)%3B%5Cnserver.listen('8080')%3B%5Cnconsole.log('Server%20is%20running%20at%20port%208080...')%3B%5Cn%2F%2F%20%E7%9B%91%E5%90%ACsocket%E8%BF%9E%E6%8E%A5%5Cnsocket.listen(server).on('connection'%2C%20function(client)%20%7B%5Cn%20%20%20%20%2F%2F%20%E6%8E%A5%E6%94%B6%E4%BF%A1%E6%81%AF%5Cn%20%20%20%20client.on('message'%2C%20function(msg)%20%7B%5Cn%20%20%20%20%20%20%20%20client.send('hello%EF%BC%9A'%20%2B%20msg)%3B%5Cn%20%20%20%20%20%20%20%20console.log('data%20from%20client%3A%20---%3E%20'%20%2B%20msg)%3B%5Cn%20%20%20%20%7D)%3B%5Cn%20%20%20%20%2F%2F%20%E6%96%AD%E5%BC%80%E5%A4%84%E7%90%86%5Cn%20%20%20%20client.on('disconnect'%2C%20function()%20%7B%5Cn%20%20%20%20%20%20%20%20console.log('Client%20socket%20has%20closed.')%3B%20%5Cn%20%20%20%20%7D)%3B%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22YtlBp%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"efeacb1929c56b71998564836cfc05cb\" id=\"efeacb1929c56b71998564836cfc05cb\"><span data-lake-id=\"u4042bcc5\" id=\"u4042bcc5\">3. 正向代理和反向代理的区别</span></h3><ul list=\"u80ca0046\"><li fid=\"u6e6c625f\" data-lake-id=\"68941f16826c98df5209e6d72b68eb66\" id=\"68941f16826c98df5209e6d72b68eb66\"><strong><span data-lake-id=\"uae4cd086\" id=\"uae4cd086\">正向代理：</span></strong></li></ul><p data-lake-id=\"eaf4fc6c1135a0dce9797f4a5c7e5cbd\" id=\"eaf4fc6c1135a0dce9797f4a5c7e5cbd\" style=\"text-align: justify\"><span data-lake-id=\"ud13eb37a\" id=\"ud13eb37a\">客户端想获得一个服务器的数据，但是因为种种原因无法直接获取。于是客户端设置了一个代理服务器，并且指定目标服务器，之后代理服务器向目标服务器转交请求并将获得的内容发送给客户端。这样本质上起到了对真实服务器隐藏真实客户端的目的。实现正向代理需要修改客户端，比如修改浏览器配置。</span></p><ul list=\"u0799d6e8\"><li fid=\"u729dacd9\" data-lake-id=\"a59999f2e52b2e81988e8de1e4a70bfc\" id=\"a59999f2e52b2e81988e8de1e4a70bfc\"><strong><span data-lake-id=\"u668c242f\" id=\"u668c242f\">反向代理：</span></strong></li></ul><p data-lake-id=\"8472feac9a7cbfef139b58e7b7e03c7e\" id=\"8472feac9a7cbfef139b58e7b7e03c7e\" style=\"text-align: justify\"><span data-lake-id=\"ue6f86539\" id=\"ue6f86539\">服务器为了能够将工作负载分不到多个服务器来提高网站性能 (负载均衡)等目的，当其受到请求后，会首先根据转发规则来确定请求应该被转发到哪个服务器上，然后将请求转发到对应的真实服务器上。这样本质上起到了对客户端隐藏真实服务器的作用。</span></p><p data-lake-id=\"4224d78876cd3272c3f7b2bba15b425b\" id=\"4224d78876cd3272c3f7b2bba15b425b\" style=\"text-align: justify\"><span data-lake-id=\"u1234ecad\" id=\"u1234ecad\">一般使用反向代理后，需要通过修改 DNS 让域名解析到代理服务器 IP，这时浏览器无法察觉到真正服务器的存在，当然也就不需要修改配置了。</span></p><p data-lake-id=\"0959ecfe4bf3420887c58e1dc13dfbec\" id=\"0959ecfe4bf3420887c58e1dc13dfbec\" style=\"text-align: justify\"><br></p><p data-lake-id=\"7c0f1f902b049a9bd8742acae870f248\" id=\"7c0f1f902b049a9bd8742acae870f248\" style=\"text-align: justify\"><span data-lake-id=\"u1fe53dd5\" id=\"u1fe53dd5\">两者区别如图示：</span></p><p data-lake-id=\"012afb779f581728805dba4122ccfe7d\" id=\"012afb779f581728805dba4122ccfe7d\" style=\"text-align: justify\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2020%2Fjpeg%2F1500604%2F1605256274960-50bd9e69-dde9-4782-b2c0-6afc8188fca2.jpeg%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A522%2C%22height%22%3A660%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A522%2C%22originHeight%22%3A660%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23f9faf7%22%2C%22id%22%3A%22DgpO2%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"b9b2dbccbd50aaf8690d8a0694f85c7a\" id=\"b9b2dbccbd50aaf8690d8a0694f85c7a\" style=\"text-align: justify\"><span data-lake-id=\"ua3b4aa02\" id=\"ua3b4aa02\">正向代理和反向代理的结构是一样的，都是 client-proxy-server 的结构，它们主要的区别就在于中间这个 proxy 是哪一方设置的。在正向代理中，proxy 是 client 设置的，用来隐藏 client；而在反向代理中，proxy 是 server 设置的，用来隐藏 server。</span></p><h3 data-lake-id=\"32161b18c1afcd295ed5dcb42202d83b\" id=\"32161b18c1afcd295ed5dcb42202d83b\"><span data-lake-id=\"u75245d36\" id=\"u75245d36\">4. Nginx的概念及其工作原理</span></h3><p data-lake-id=\"a1e5a0b154266620b8df186f83b2ac86\" id=\"a1e5a0b154266620b8df186f83b2ac86\"><span data-lake-id=\"u2f2a2134\" id=\"u2f2a2134\">Nginx 是一款轻量级的 Web 服务器，也可以用于反向代理、负载平衡和 HTTP 缓存等。Nginx 使用异步事件驱动的方法来处理请求，是一款面向性能设计的 HTTP 服务器。</span></p><p data-lake-id=\"4a52a5a9089ab2867656f38d9d4eabc1\" id=\"4a52a5a9089ab2867656f38d9d4eabc1\" style=\"text-align: justify\"><br></p><p data-lake-id=\"b93b4bd62bf858e03b1f94f510957703\" id=\"b93b4bd62bf858e03b1f94f510957703\" style=\"text-align: justify\"><span data-lake-id=\"u128f4070\" id=\"u128f4070\">传统的 Web 服务器如 Apache 是 process-based 模型的，而 Nginx 是基于event-driven模型的。正是这个主要的区别带给了 Nginx 在性能上的优势。</span></p><p data-lake-id=\"b72c74267c01e7d864d9d05f44d6c66e\" id=\"b72c74267c01e7d864d9d05f44d6c66e\" style=\"text-align: justify\"><br></p><p data-lake-id=\"4a16ab930619ad006d4c891bd9781e41\" id=\"4a16ab930619ad006d4c891bd9781e41\" style=\"text-align: justify\"><span data-lake-id=\"u46209979\" id=\"u46209979\">Nginx 架构的最顶层是一个 master process，这个 master process 用于产生其他的 worker process，这一点和Apache 非常像，但是 Nginx 的 worker process 可以同时处理大量的HTTP请求，而每个 Apache process 只能处理一个。</span></p><h2 data-lake-id=\"efecae2d2be2f3c5b76b94df90b52dce\" id=\"efecae2d2be2f3c5b76b94df90b52dce\"><span data-lake-id=\"uea812c95\" id=\"uea812c95\">八、浏览器事件机制</span></h2><h3 data-lake-id=\"c28c4e5aa4da5b00f793321b4976d11c\" id=\"c28c4e5aa4da5b00f793321b4976d11c\"><span data-lake-id=\"u1c7a980a\" id=\"u1c7a980a\">1. 事件是什么？事件模型？</span></h3><p data-lake-id=\"4b4b3a77b22dab149e377c6f5f49d8f5\" id=\"4b4b3a77b22dab149e377c6f5f49d8f5\"><span data-lake-id=\"u9d13aba7\" id=\"u9d13aba7\" class=\"lake-fontsize-12\" style=\"color: #24292E\">事件是用户操作网页时发生的交互动作，比如 click/move， 事件除了用户触发的动作外，还可以是文档加载，窗口滚动和大小调整。事件被封装成一个 event 对象，包含了该事件发生时的所有相关信息（ event 的属性）以及可以对事件进行的操作（ event 的方法）。</span></p><p data-lake-id=\"2804cb35b66bec2bbcaa74630ddabc98\" id=\"2804cb35b66bec2bbcaa74630ddabc98\"><br></p><p data-lake-id=\"ed1e4100f379b8a5d4e761357732be8a\" id=\"ed1e4100f379b8a5d4e761357732be8a\"><span data-lake-id=\"u4321bb6e\" id=\"u4321bb6e\">事件是用户操作网页时发生的交互动作或者网页本身的一些操作，现代浏览器一共有三种事件模型：</span></p><ul list=\"uf51b8202\"><li fid=\"uaa1e120f\" data-lake-id=\"7191ae11c75b89a60d3a7b40fa4c3277\" id=\"7191ae11c75b89a60d3a7b40fa4c3277\"><strong><span data-lake-id=\"u1bc3e0e1\" id=\"u1bc3e0e1\">DOM0 级事件模型</span></strong><span data-lake-id=\"ub5f213e4\" id=\"ub5f213e4\">，这种模型不会传播，所以没有事件流的概念，但是现在有的浏览器支持以冒泡的方式实现，它可以在网页中直接定义监听函数，也可以通过 js 属性来指定监听函数。所有浏览器都兼容这种方式。</span><span data-lake-id=\"uf4947a9f\" id=\"uf4947a9f\" style=\"color: #3A4145\">直接在dom对象上注册事件名称，就是DOM0写法。</span></li><li fid=\"uaa1e120f\" data-lake-id=\"322af51c0e8608ebbe7ed784e8d8538f\" id=\"322af51c0e8608ebbe7ed784e8d8538f\"><strong><span data-lake-id=\"u4f4c2539\" id=\"u4f4c2539\">IE 事件模型</span></strong><span data-lake-id=\"u121505fe\" id=\"u121505fe\">，在该事件模型中，一次事件共有两个过程，事件处理阶段和事件冒泡阶段。事件处理阶段会首先执行目标元素绑定的监听事件。然后是事件冒泡阶段，冒泡指的是事件从目标元素冒泡到 document，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。这种模型通过attachEvent 来添加监听函数，可以添加多个监听函数，会按顺序依次执行。</span></li><li fid=\"uaa1e120f\" data-lake-id=\"0eae1d7c9eca77efbf3354a84f8df445\" id=\"0eae1d7c9eca77efbf3354a84f8df445\"><strong><span data-lake-id=\"u23d46e76\" id=\"u23d46e76\">DOM2 级事件模型</span></strong><span data-lake-id=\"u5652a17f\" id=\"u5652a17f\">，在该事件模型中，一次事件共有三个过程，第一个过程是事件捕获阶段。捕获指的是事件从 document 一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行。后面两个阶段和 IE 事件模型的两个阶段相同。这种事件模型，事件绑定的函数是addEventListener，其中第三个参数可以指定事件是否在捕获阶段执行。</span></li></ul><h3 data-lake-id=\"273ed8b0cec48596c508595298b5932b\" id=\"273ed8b0cec48596c508595298b5932b\"><span data-lake-id=\"u00a6fa81\" id=\"u00a6fa81\">2. 如何阻止事件冒泡</span></h3><ul list=\"u94ca90b3\"><li fid=\"uc9693e6e\" data-lake-id=\"c60444fcd9dd70c8d1f34f4b315cbc57\" id=\"c60444fcd9dd70c8d1f34f4b315cbc57\"><span data-lake-id=\"uabc81f7a\" id=\"uabc81f7a\" class=\"lake-fontsize-12\" style=\"color: #24292E\">普通浏览器使用：event.stopPropagation() </span></li><li fid=\"uc9693e6e\" data-lake-id=\"acfd22dc999322773ee3a612557881ea\" id=\"acfd22dc999322773ee3a612557881ea\"><span data-lake-id=\"ubfeee3c9\" id=\"ubfeee3c9\" class=\"lake-fontsize-12\" style=\"color: #24292E\">IE浏览器使用：event.cancelBubble = true;</span></li></ul><h3 data-lake-id=\"f6bcc6442d51dcb840a33ee87102c203\" id=\"f6bcc6442d51dcb840a33ee87102c203\"><span data-lake-id=\"u6b729a3e\" id=\"u6b729a3e\">3. 对事件委托的理解</span></h3><h4 data-lake-id=\"27db4efc47c263b1fb5bc6b8f379e5af\" id=\"27db4efc47c263b1fb5bc6b8f379e5af\"><span data-lake-id=\"uf4ce76f0\" id=\"uf4ce76f0\">（1）事件委托的概念</span></h4><p data-lake-id=\"d900df3dda0271ec8cb514062912ecbe\" id=\"d900df3dda0271ec8cb514062912ecbe\"><span data-lake-id=\"u80f23147\" id=\"u80f23147\">事件委托本质上是利用了</span><strong><span data-lake-id=\"uc8814d82\" id=\"uc8814d82\">浏览器事件冒泡</span></strong><span data-lake-id=\"ua4cc8d69\" id=\"ua4cc8d69\">的机制。因为事件在冒泡过程中会上传到父节点，父节点可以通过事件对象获取到目标节点，因此可以把子节点的监听函数定义在父节点上，由父节点的监听函数统一处理多个子元素的事件，这种方式称为事件委托（事件代理）。</span></p><p data-lake-id=\"a8218a43237400247004e9dec020b31d\" id=\"a8218a43237400247004e9dec020b31d\"><br></p><p data-lake-id=\"ea56eb78c67cc284b31e3469c311841b\" id=\"ea56eb78c67cc284b31e3469c311841b\"><span data-lake-id=\"u5d281fc2\" id=\"u5d281fc2\">使用事件委托可以不必要为每一个子元素都绑定一个监听事件，这样减少了内存上的消耗。并且使用事件代理还可以实现事件的动态绑定，比如说新增了一个子节点，并不需要单独地为它添加一个监听事件，它绑定的事件会交给父元素中的监听函数来处理。</span></p><h4 data-lake-id=\"3f97684b763bb87ac3737424cfd21d5a\" id=\"3f97684b763bb87ac3737424cfd21d5a\"><span data-lake-id=\"ud336798b\" id=\"ud336798b\">（2）事件委托的特点</span></h4><ul list=\"u8d2ed4c7\"><li fid=\"u083dd55a\" data-lake-id=\"4d17ac10a4ee19eaaead2a0a7ea9f9ce\" id=\"4d17ac10a4ee19eaaead2a0a7ea9f9ce\"><strong><span data-lake-id=\"uebf2b7e8\" id=\"uebf2b7e8\"> 减少内存消耗</span></strong></li></ul><p data-lake-id=\"618ab05c62ad37585760b0c029e69612\" id=\"618ab05c62ad37585760b0c029e69612\"><span data-lake-id=\"ua73d9060\" id=\"ua73d9060\">如果有一个列表，列表之中有大量的列表项，需要在点击列表项的时候响应一个事件：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22html%22%2C%22code%22%3A%22%3Cul%20id%3D%5C%22list%5C%22%3E%5Cn%20%20%3Cli%3Eitem%201%3C%2Fli%3E%5Cn%20%20%3Cli%3Eitem%202%3C%2Fli%3E%5Cn%20%20%3Cli%3Eitem%203%3C%2Fli%3E%5Cn%20%20......%5Cn%20%20%3Cli%3Eitem%20n%3C%2Fli%3E%5Cn%3C%2Ful%3E%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22QnseZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"080f155932425cb4069f11e347dfdfac\" id=\"080f155932425cb4069f11e347dfdfac\"><span data-lake-id=\"udc29e200\" id=\"udc29e200\">如果给每个列表项一一都绑定一个函数，那对于内存消耗是非常大的，效率上需要消耗很多性能。因此，比较好的方法就是把这个点击事件绑定到他的父层，也就是 ul 上，然后在执行事件时再去匹配判断目标元素，所以事件委托可以减少大量的内存消耗，节约效率。</span></p><ul list=\"u3eea559f\"><li fid=\"u6392ca84\" data-lake-id=\"01f91e562ce081327f651d5b38aa9361\" id=\"01f91e562ce081327f651d5b38aa9361\"><strong><span data-lake-id=\"u3fba68b8\" id=\"u3fba68b8\">动态绑定事件</span></strong></li></ul><p data-lake-id=\"fd4c05bdf8d43dba84ba7ee24d1bbe93\" id=\"fd4c05bdf8d43dba84ba7ee24d1bbe93\"><span data-lake-id=\"u1684649e\" id=\"u1684649e\">给上述的例子中每个列表项都绑定事件，在很多时候，需要通过 AJAX 或者用户操作动态的增加或者去除列表项元素，那么在每一次改变的时候都需要重新给新增的元素绑定事件，给即将删去的元素解绑事件；如果用了事件委托就没有这种麻烦了，因为事件是绑定在父层的，和目标元素的增减是没有关系的，执行到目标元素是在真正响应执行事件函数的过程中去匹配的，所以使用事件在动态绑定事件的情况下是可以减少很多重复工作的。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%8A%8A%20%23list%20%E4%B8%8B%E7%9A%84%20li%20%E5%85%83%E7%B4%A0%E7%9A%84%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E5%A7%94%E6%89%98%E5%88%B0%E5%AE%83%E7%9A%84%E7%88%B6%E5%B1%82%E5%85%83%E7%B4%A0%E4%B9%9F%E5%B0%B1%E6%98%AF%20%23list%20%E4%B8%8A%EF%BC%9A%5Cn%2F%2F%20%E7%BB%99%E7%88%B6%E5%B1%82%E5%85%83%E7%B4%A0%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%5Cndocument.getElementById('list').addEventListener('click'%2C%20function%20(e)%20%7B%5Cn%20%20%2F%2F%20%E5%85%BC%E5%AE%B9%E6%80%A7%E5%A4%84%E7%90%86%5Cn%20%20var%20event%20%3D%20e%20%7C%7C%20window.event%3B%5Cn%20%20var%20target%20%3D%20event.target%20%7C%7C%20event.srcElement%3B%5Cn%20%20%2F%2F%20%E5%88%A4%E6%96%AD%E6%98%AF%E5%90%A6%E5%8C%B9%E9%85%8D%E7%9B%AE%E6%A0%87%E5%85%83%E7%B4%A0%5Cn%20%20if%20(target.nodeName.toLocaleLowerCase%20%3D%3D%3D%20'li')%20%7B%5Cn%20%20%20%20console.log('the%20content%20is%3A%20'%2C%20target.innerHTML)%3B%5Cn%20%20%7D%5Cn%7D)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mc5Bo%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"e8c853c05747d593d7d77de55083fcb9\" id=\"e8c853c05747d593d7d77de55083fcb9\"><span data-lake-id=\"u72782bc5\" id=\"u72782bc5\">在上述代码中， target 元素则是在 #list 元素之下具体被点击的元素，然后通过判断 target 的一些属性（比如：nodeName，id 等等）可以更精确地匹配到某一类 #list li 元素之上；</span></p><h4 data-lake-id=\"3a1cefdcefbfbabda926f34c2c2c79b0\" id=\"3a1cefdcefbfbabda926f34c2c2c79b0\"><span data-lake-id=\"u6feaf995\" id=\"u6feaf995\">（3）局限性</span></h4><p data-lake-id=\"d03256e84176c2f5a3463767bc7199e3\" id=\"d03256e84176c2f5a3463767bc7199e3\"><span data-lake-id=\"u91359221\" id=\"u91359221\">当然，事件委托也是有局限的。比如 focus、blur 之类的事件没有事件冒泡机制，所以无法实现事件委托；mousemove、mouseout 这样的事件，虽然有事件冒泡，但是只能不断通过位置去计算定位，对性能消耗高，因此也是不适合于事件委托的。</span></p><p data-lake-id=\"319b9739f487dea4c52242d749e0030d\" id=\"319b9739f487dea4c52242d749e0030d\"><br></p><p data-lake-id=\"fbdfbd9625cb89603f6314728c878782\" id=\"fbdfbd9625cb89603f6314728c878782\"><span data-lake-id=\"u0c72ee88\" id=\"u0c72ee88\">当然事件委托不是只有优点，它也是有</span><strong><span data-lake-id=\"uab73ba5f\" id=\"uab73ba5f\">缺点</span></strong><span data-lake-id=\"u44c6427d\" id=\"u44c6427d\">的，事件委托会影响页面性能，主要影响因素有：</span></p><ul list=\"u54616f11\"><li fid=\"uc910d79b\" data-lake-id=\"a247546ced4df05e4957e79fcfa35eb6\" id=\"a247546ced4df05e4957e79fcfa35eb6\"><span data-lake-id=\"u95b62802\" id=\"u95b62802\">元素中，绑定事件委托的次数；</span></li><li fid=\"uc910d79b\" data-lake-id=\"9bef97b5325b67bab6b71f0a6ec3ae9e\" id=\"9bef97b5325b67bab6b71f0a6ec3ae9e\"><span data-lake-id=\"u7bc34a58\" id=\"u7bc34a58\">点击的最底层元素，到绑定事件元素之间的</span><code data-lake-id=\"uc246809a\" id=\"uc246809a\"><span data-lake-id=\"ub3ccb99c\" id=\"ub3ccb99c\">DOM</span></code><span data-lake-id=\"u5e1d4918\" id=\"u5e1d4918\">层数；</span></li></ul><p data-lake-id=\"6783115827401b9d7c53c6981c0dcd47\" id=\"6783115827401b9d7c53c6981c0dcd47\"><br></p><p data-lake-id=\"5ab893b9fde3b5689e4e97714ac61a49\" id=\"5ab893b9fde3b5689e4e97714ac61a49\"><span data-lake-id=\"uc15233ea\" id=\"uc15233ea\">在必须使用事件委托的地方，可以进行如下的处理：</span></p><ul list=\"u8b5c10cf\"><li fid=\"uf0378013\" data-lake-id=\"409c2278523fc6ec356f585cf4769b40\" id=\"409c2278523fc6ec356f585cf4769b40\"><span data-lake-id=\"u799a1567\" id=\"u799a1567\">只在必须的地方，使用事件委托，比如：</span><code data-lake-id=\"ud67bc654\" id=\"ud67bc654\"><span data-lake-id=\"ueb188032\" id=\"ueb188032\">ajax</span></code><span data-lake-id=\"u97ec72d5\" id=\"u97ec72d5\">的局部刷新区域</span></li><li fid=\"uf0378013\" data-lake-id=\"c84f2f4b3f13f38df796f9cea016307c\" id=\"c84f2f4b3f13f38df796f9cea016307c\"><span data-lake-id=\"u5886ae56\" id=\"u5886ae56\">尽量的减少绑定的层级，不在</span><code data-lake-id=\"u2947da46\" id=\"u2947da46\"><span data-lake-id=\"u94936510\" id=\"u94936510\">body</span></code><span data-lake-id=\"u23917853\" id=\"u23917853\">元素上，进行绑定</span></li><li fid=\"uf0378013\" data-lake-id=\"3bec923d764b2672f5ec1ae5e00b7df7\" id=\"3bec923d764b2672f5ec1ae5e00b7df7\"><span data-lake-id=\"u554e7285\" id=\"u554e7285\">减少绑定的次数，如果可以，那么把多个事件的绑定，合并到一次事件委托中去，由这个事件委托的回调，来进行分发。</span></li></ul><h3 data-lake-id=\"bb0da78421051255db7287df976e98d8\" id=\"bb0da78421051255db7287df976e98d8\"><span data-lake-id=\"u0e9c507e\" id=\"u0e9c507e\">4. 事件委托的使用场景</span></h3><p data-lake-id=\"61cd5690ca25a3402409db822d44ee58\" id=\"61cd5690ca25a3402409db822d44ee58\"><span data-lake-id=\"u9b18ca28\" id=\"u9b18ca28\">场景：给页面的所有的a标签添加click事件，代码如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22document.addEventListener(%5C%22click%5C%22%2C%20function(e)%20%7B%5Cn%5Ctif%20(e.target.nodeName%20%3D%3D%20%5C%22A%5C%22)%5Cn%5Ct%5Ctconsole.log(%5C%22a%5C%22)%3B%5Cn%7D%2C%20false)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22V0jNG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"adb2b2c26d1c3b55f935a3ac3d81c46c\" id=\"adb2b2c26d1c3b55f935a3ac3d81c46c\"><span data-lake-id=\"uce42faa8\" id=\"uce42faa8\">但是这些a标签可能包含一些像span、img等元素，如果点击到了这些a标签中的元素，就不会触发click事件，因为事件绑定上在a标签元素上，而触发这些内部的元素时，</span><span data-lake-id=\"u5414056a\" id=\"u5414056a\" class=\"lake-fontsize-11\" style=\"color: #333333\">e.target指向的是触发click事件的元素</span><span data-lake-id=\"ubce9ddf3\" id=\"ubce9ddf3\" class=\"lake-fontsize-11\" style=\"color: #333333\">（</span><span data-lake-id=\"ue6bdbbcc\" id=\"ue6bdbbcc\" class=\"lake-fontsize-11\" style=\"color: #333333\">span、img等其他元素</span><span data-lake-id=\"u8878302a\" id=\"u8878302a\" class=\"lake-fontsize-11\" style=\"color: #333333\">）。</span></p><p data-lake-id=\"00542f3c8ce79d9806e3537e6f12fae0\" id=\"00542f3c8ce79d9806e3537e6f12fae0\"><br></p><p data-lake-id=\"937dc46d9b4642c8f864ae310d8d020f\" id=\"937dc46d9b4642c8f864ae310d8d020f\"><span data-lake-id=\"u202b2792\" id=\"u202b2792\">这种情况下就可以使用事件委托来处理，将事件绑定在a标签的内部元素上，当点击它的时候，就会逐级向上查找，知道找到a标签为止，代码如下：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22document.addEventListener(%5C%22click%5C%22%2C%20function(e)%20%7B%5Cn%5Ctvar%20node%20%3D%20e.target%3B%5Cn%5Ctwhile%20(node.parentNode.nodeName%20!%3D%20%5C%22BODY%5C%22)%20%7B%5Cn%5Ct%5Ctif%20(node.nodeName%20%3D%3D%20%5C%22A%5C%22)%20%7B%5Cn%5Ct%5Ct%5Ctconsole.log(%5C%22a%5C%22)%3B%5Cn%5Ct%5Ct%5Ctbreak%3B%5Cn%5Ct%5Ct%7D%5Cn%5Ct%5Ctnode%20%3D%20node.parentNode%3B%5Cn%5Ct%7D%5Cn%7D%2C%20false)%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22mnXYT%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h3 data-lake-id=\"e05316071cd14195d780e8f8b9942491\" id=\"e05316071cd14195d780e8f8b9942491\"><span data-lake-id=\"u87e58d57\" id=\"u87e58d57\">5. 同步和异步的区别</span></h3><ul list=\"uae6812d0\"><li fid=\"u0da3f37b\" data-lake-id=\"b970a6158e7b4655631b1d7c64eb79ae\" id=\"b970a6158e7b4655631b1d7c64eb79ae\"><strong><span data-lake-id=\"u28f0cff5\" id=\"u28f0cff5\">同步</span></strong><span data-lake-id=\"u204e661a\" id=\"u204e661a\">指的是当一个进程在执行某个请求时，如果这个请求需要等待一段时间才能返回，那么这个进程会一直等待下去，直到消息返回为止再继续向下执行。</span></li><li fid=\"u0da3f37b\" data-lake-id=\"656ce1cb4892acccc60256013dd156dc\" id=\"656ce1cb4892acccc60256013dd156dc\"><strong><span data-lake-id=\"u189dfbe0\" id=\"u189dfbe0\">异步</span></strong><span data-lake-id=\"ueb2a9d6e\" id=\"ueb2a9d6e\">指的是当一个进程在执行某个请求时，如果这个请求需要等待一段时间才能返回，这个时候进程会继续往下执行，不会阻塞等待消息的返回，当消息返回时系统再通知进程进行处理。</span></li></ul><h3 data-lake-id=\"a749f3035609d95dbdd1ee99d6f14b02\" id=\"a749f3035609d95dbdd1ee99d6f14b02\"><span data-lake-id=\"u4cecc8a4\" id=\"u4cecc8a4\">6. 对事件循环的理解</span></h3><p data-lake-id=\"4742791fa85d3466e1abe0f0585da124\" id=\"4742791fa85d3466e1abe0f0585da124\"><span data-lake-id=\"u0cc15590\" id=\"u0cc15590\">因为 js 是单线程运行的，在代码执行时，通过将不同函数的执行上下文压入执行栈中来保证代码的有序执行。在执行同步代码时，如果遇到异步事件，js 引擎并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当异步事件执行完毕后，再将异步事件对应的回调加入到一个任务队列中等待执行。任务队列可以分为宏任务队列和微任务队列，当当前执行栈中的事件执行完毕后，js 引擎首先会判断微任务队列中是否有任务可以执行，如果有就将微任务队首的事件压入栈中执行。当微任务队列中的任务都执行完成后再去执行宏任务队列中的任务。</span></p><p data-lake-id=\"8938886251b87edb44a48d4242e0de67\" id=\"8938886251b87edb44a48d4242e0de67\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615476500217-472563e1-de67-403f-baa7-0fd574d0e618.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A322%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A3161%2C%22originHeight%22%3A1274%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fefdfb%22%2C%22id%22%3A%22LQHPd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"57d24dd418c5bce1f7d5f6a91c5af715\" id=\"57d24dd418c5bce1f7d5f6a91c5af715\"><span data-lake-id=\"u319b6867\" id=\"u319b6867\">Event Loop 执行顺序如下所示：</span></p><ul list=\"uc716fb91\"><li fid=\"ub06f0587\" data-lake-id=\"df16fb0e00acfc87845e2ac80f04ba6d\" id=\"df16fb0e00acfc87845e2ac80f04ba6d\"><span data-lake-id=\"u93945693\" id=\"u93945693\">首先执行同步代码，这属于宏任务</span></li><li fid=\"ub06f0587\" data-lake-id=\"12de12ed08cb82cd2aeb38176b118521\" id=\"12de12ed08cb82cd2aeb38176b118521\"><span data-lake-id=\"udd585692\" id=\"udd585692\">当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行</span></li><li fid=\"ub06f0587\" data-lake-id=\"2428fbfb5dbaf8b0bbdff4243fb948f9\" id=\"2428fbfb5dbaf8b0bbdff4243fb948f9\"><span data-lake-id=\"uce14da31\" id=\"uce14da31\">执行所有微任务</span></li><li fid=\"ub06f0587\" data-lake-id=\"46725c404f28c442ea92e8ca965bec92\" id=\"46725c404f28c442ea92e8ca965bec92\"><span data-lake-id=\"u666b90db\" id=\"u666b90db\">当执行完所有微任务后，如有必要会渲染页面</span></li><li fid=\"ub06f0587\" data-lake-id=\"ba0b3b14164e04598729e61bcfa2953a\" id=\"ba0b3b14164e04598729e61bcfa2953a\"><span data-lake-id=\"u9566c038\" id=\"u9566c038\">然后开始下一轮 Event Loop，执行宏任务中的异步代码</span></li></ul><h3 data-lake-id=\"86a2a8c2e8658a6063546dc5dcf66c9e\" id=\"86a2a8c2e8658a6063546dc5dcf66c9e\"><span data-lake-id=\"u4f3a4dab\" id=\"u4f3a4dab\">7. 宏任务和微任务分别有哪些</span></h3><ul list=\"u245b0858\"><li fid=\"u59d4cd7e\" data-lake-id=\"76ad6fe498c86c81190c5bf981d6d46c\" id=\"76ad6fe498c86c81190c5bf981d6d46c\"><span data-lake-id=\"u1ce13457\" id=\"u1ce13457\">微任务包括： promise 的回调、node 中的 process.nextTick 、对 Dom 变化监听的 MutationObserver。</span></li><li fid=\"u59d4cd7e\" data-lake-id=\"61bfd9bd38f9c9aceea317ef2b63a222\" id=\"61bfd9bd38f9c9aceea317ef2b63a222\"><span data-lake-id=\"u12d57f3b\" id=\"u12d57f3b\">宏任务包括： script 脚本的执行、setTimeout ，setInterval ，setImmediate 一类的定时事件，还有如 I/O 操作、UI 渲染等。</span></li></ul><h3 data-lake-id=\"256b92769d243f475592a0c9f1a3e817\" id=\"256b92769d243f475592a0c9f1a3e817\"><span data-lake-id=\"u3ee45d2f\" id=\"u3ee45d2f\">8. 什么是执行栈</span></h3><p data-lake-id=\"0232a247ce97423055409551c2a60d7c\" id=\"0232a247ce97423055409551c2a60d7c\"><span data-lake-id=\"uac538be8\" id=\"uac538be8\">可以把执行栈认为是一个存储函数调用的</span><strong><span data-lake-id=\"u42a42eb5\" id=\"u42a42eb5\">栈结构</span></strong><span data-lake-id=\"ue0de35e7\" id=\"ue0de35e7\">，遵循先进后出的原则。</span></p><p data-lake-id=\"a14eba810231c31129ec5d633d52d47a\" id=\"a14eba810231c31129ec5d633d52d47a\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fgif%2F1500604%2F1615476375478-4f0a93a1-de5e-4536-9bbe-4e69c1f91773.gif%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A800%2C%22height%22%3A412%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A1211%2C%22originHeight%22%3A623%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcfaf9%22%2C%22id%22%3A%22h5D8v%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"649dff03b266f067deb35c66c37397a7\" id=\"649dff03b266f067deb35c66c37397a7\"><span data-lake-id=\"u061081eb\" id=\"u061081eb\">当开始执行 JS 代码时，根据先进后出的原则，后执行的函数会先弹出栈，可以看到，</span><code data-lake-id=\"ua51eb9fe\" id=\"ua51eb9fe\"><span data-lake-id=\"u279685b8\" id=\"u279685b8\">foo</span></code><span data-lake-id=\"u4cd5a087\" id=\"u4cd5a087\"> 函数后执行，当执行完毕后就从栈中弹出了。</span></p><p data-lake-id=\"96627c447a4b025f78798d9b723e5791\" id=\"96627c447a4b025f78798d9b723e5791\"><br></p><p data-lake-id=\"4e2b53cac2020d2e4d47c5721db9767d\" id=\"4e2b53cac2020d2e4d47c5721db9767d\"><span data-lake-id=\"u608a766e\" id=\"u608a766e\">平时在开发中，可以在报错中找到执行栈的痕迹：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20foo()%20%7B%5Cn%20%20throw%20new%20Error('error')%5Cn%7D%5Cnfunction%20bar()%20%7B%5Cn%20%20foo()%5Cn%7D%5Cnbar()%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%224xcKQ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"531cf71382d0f1e96fc7f08b7eec5acf\" id=\"531cf71382d0f1e96fc7f08b7eec5acf\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615476375462-269c6a54-a21d-460c-aa82-a713ef9a2999.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A614%2C%22height%22%3A121%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A614%2C%22originHeight%22%3A121%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23feeaeb%22%2C%22id%22%3A%22vFMvg%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"8ebd5b071a8591d0a10fba1947f2125e\" id=\"8ebd5b071a8591d0a10fba1947f2125e\"><span data-lake-id=\"u296bfd66\" id=\"u296bfd66\">可以看到报错在 </span><code data-lake-id=\"u550fc079\" id=\"u550fc079\"><span data-lake-id=\"u3943001a\" id=\"u3943001a\">foo</span></code><span data-lake-id=\"u5cee4a10\" id=\"u5cee4a10\"> 函数，</span><code data-lake-id=\"u95581149\" id=\"u95581149\"><span data-lake-id=\"ue2782b5c\" id=\"ue2782b5c\">foo</span></code><span data-lake-id=\"u045b2bdd\" id=\"u045b2bdd\"> 函数又是在 </span><code data-lake-id=\"u58a0968a\" id=\"u58a0968a\"><span data-lake-id=\"ub664a371\" id=\"ub664a371\">bar</span></code><span data-lake-id=\"u9d6792b4\" id=\"u9d6792b4\"> 函数中调用的。当使用递归时，因为栈可存放的函数是有</span><strong><span data-lake-id=\"u97773339\" id=\"u97773339\">限制</span></strong><span data-lake-id=\"u38a1eaa0\" id=\"u38a1eaa0\">的，一旦存放了过多的函数且没有得到释放的话，就会出现爆栈的问题</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22function%20bar()%20%7B%5Cn%20%20bar()%5Cn%7D%5Cnbar()%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%225Uf8c%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"270f89fcd55a3cb235978701b01a46eb\" id=\"270f89fcd55a3cb235978701b01a46eb\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615476375388-2867ba62-cf27-4740-91fd-485f0ae12986.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A511%2C%22height%22%3A158%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A511%2C%22originHeight%22%3A158%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fee5e6%22%2C%22id%22%3A%22YIsxC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><h3 data-lake-id=\"0959206796e486e0ca7cb5da9414e37b\" id=\"0959206796e486e0ca7cb5da9414e37b\"><span data-lake-id=\"ubc9de17f\" id=\"ubc9de17f\">9. Node 中的 Event Loop 和浏览器中的有什么区别？process.nextTick 执行顺序？</span></h3><p data-lake-id=\"a542f9012a4f8e69a3f92239083e20d3\" id=\"a542f9012a4f8e69a3f92239083e20d3\"><span data-lake-id=\"u36aecc0f\" id=\"u36aecc0f\">Node 中的 Event Loop 和浏览器中的是完全不相同的东西。</span></p><p data-lake-id=\"076be03264fda358597f0fb131e6bc5a\" id=\"076be03264fda358597f0fb131e6bc5a\"><br></p><p data-lake-id=\"31823d387ec2b87a88bc51b4f4c1c9aa\" id=\"31823d387ec2b87a88bc51b4f4c1c9aa\"><span data-lake-id=\"u915408fb\" id=\"u915408fb\">Node 的 Event Loop 分为 6 个阶段，它们会按照</span><strong><span data-lake-id=\"ua907aa96\" id=\"ua907aa96\">顺序</span></strong><span data-lake-id=\"uc43bd45e\" id=\"uc43bd45e\">反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当队列为空或者执行的回调函数数量到达系统设定的阈值，就会进入下一阶段。</span></p><p data-lake-id=\"7f77b0d89d37ca4c63527273be8597b2\" id=\"7f77b0d89d37ca4c63527273be8597b2\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615476641904-a9763034-9114-4a7c-aa50-1bdb612f2f5e.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A745%2C%22height%22%3A442%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A745%2C%22originHeight%22%3A442%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%232f2f2f%22%2C%22id%22%3A%22Iu20r%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><p data-lake-id=\"u9b6caa69\" id=\"u9b6caa69\"><span data-lake-id=\"u7a287601\" id=\"u7a287601\">（1）</span><strong><span data-lake-id=\"u03302134\" id=\"u03302134\">Timers（计时器阶段）</span></strong><span data-lake-id=\"u41bea2ae\" id=\"u41bea2ae\">：初次进入事件循环，会从计时器阶段开始。此阶段会判断是否存在过期的计时器回调（包含 setTimeout 和 setInterval），如果存在则会执行所有过期的计时器回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Pending callbacks 阶段。</span></p><p data-lake-id=\"u8dfa746f\" id=\"u8dfa746f\"><span data-lake-id=\"uaab7353c\" id=\"uaab7353c\">（2）</span><strong><span data-lake-id=\"u404ec38e\" id=\"u404ec38e\">Pending callbacks</span></strong><span data-lake-id=\"u8663f2f2\" id=\"u8663f2f2\">：执行推迟到下一个循环迭代的I / O回调（系统调用相关的回调）。</span></p><p data-lake-id=\"u8d038c29\" id=\"u8d038c29\"><span data-lake-id=\"ufb6745ef\" id=\"ufb6745ef\">（3）</span><strong><span data-lake-id=\"uaf7e7c75\" id=\"uaf7e7c75\">Idle/Prepare</span></strong><span data-lake-id=\"u3ac42f0e\" id=\"u3ac42f0e\">：仅供内部使用。</span></p><p data-lake-id=\"u107e40a5\" id=\"u107e40a5\"><span data-lake-id=\"u99ba499a\" id=\"u99ba499a\">（4）</span><strong><span data-lake-id=\"u8aa98ef4\" id=\"u8aa98ef4\">Poll（轮询阶段）</span></strong><span data-lake-id=\"uae2777bf\" id=\"uae2777bf\">：</span></p><ul list=\"u75ebca16\"><li fid=\"u867849fa\" data-lake-id=\"uf961a042\" id=\"uf961a042\"><span data-lake-id=\"u603ad0e6\" id=\"u603ad0e6\">当回调队列不为空时：会执行回调，若回调中触发了相应的微任务，这里的微任务执行时机和其他地方有所不同，不会等到所有回调执行完毕后才执行，而是针对每一个回调执行完毕后，就执行相应微任务。执行完所有的回调后，变为下面的情况。</span></li><li fid=\"u867849fa\" data-lake-id=\"u3e47183d\" id=\"u3e47183d\"><span data-lake-id=\"u196f09de\" id=\"u196f09de\">当回调队列为空时（没有回调或所有回调执行完毕）：但如果存在有计时器（setTimeout、setInterval和setImmediate）没有执行，会结束轮询阶段，进入 Check 阶段。否则会阻塞并等待任何正在执行的I/O操作完成，并马上执行相应的回调，直到所有回调执行完毕。</span></li></ul><p data-lake-id=\"u38521dd1\" id=\"u38521dd1\"><span data-lake-id=\"ucdcf2abc\" id=\"ucdcf2abc\">（5）</span><strong><span data-lake-id=\"uf75f4f95\" id=\"uf75f4f95\">Check（查询阶段）</span></strong><span data-lake-id=\"u5529f5a5\" id=\"u5529f5a5\">：会检查是否存在 setImmediate 相关的回调，如果存在则执行所有回调，执行完毕后，如果回调中触发了相应的微任务，会接着执行所有微任务，执行完微任务后再进入 Close callbacks 阶段。</span></p><p data-lake-id=\"u5cc5acfc\" id=\"u5cc5acfc\"><span data-lake-id=\"u2c37f4bd\" id=\"u2c37f4bd\">（6）</span><strong><span data-lake-id=\"u2d1a3e63\" id=\"u2d1a3e63\">Close callbacks</span></strong><span data-lake-id=\"u28eccafb\" id=\"u28eccafb\">：执行一些关闭回调，比如socket.on('close', ...)等。</span></p><p data-lake-id=\"0da2499474b8c7616984e43e4839b086\" id=\"0da2499474b8c7616984e43e4839b086\"><br></p><p data-lake-id=\"e616d8c5448b5d00c7379348d3babe55\" id=\"e616d8c5448b5d00c7379348d3babe55\"><span data-lake-id=\"u22331153\" id=\"u22331153\">下面来看一个例子，首先在有些情况下，定时器的执行顺序其实是</span><strong><span data-lake-id=\"ue21eb571\" id=\"ue21eb571\">随机</span></strong><span data-lake-id=\"udd20b3a9\" id=\"udd20b3a9\">的</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log('setTimeout')%5Cn%7D%2C%200)%5CnsetImmediate(()%20%3D%3E%20%7B%5Cn%20%20%20%20console.log('setImmediate')%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22OypXZ%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"f772fa0804a6130cd70c0f189caba966\" id=\"f772fa0804a6130cd70c0f189caba966\"><span data-lake-id=\"ub65cb6df\" id=\"ub65cb6df\">对于以上代码来说，</span><code data-lake-id=\"u5e5dd119\" id=\"u5e5dd119\"><span data-lake-id=\"uf8a08654\" id=\"uf8a08654\">setTimeout</span></code><span data-lake-id=\"u7c5165aa\" id=\"u7c5165aa\"> 可能执行在前，也可能执行在后</span></p><ul list=\"u3cc97cd3\"><li fid=\"u3caa6721\" data-lake-id=\"93ae4e3ff89e53abbade0ca00ff821f6\" id=\"93ae4e3ff89e53abbade0ca00ff821f6\"><span data-lake-id=\"uced22337\" id=\"uced22337\">首先 </span><code data-lake-id=\"u3ff15b78\" id=\"u3ff15b78\"><span data-lake-id=\"u33ec7876\" id=\"u33ec7876\">setTimeout(fn, 0) === setTimeout(fn, 1)</span></code><span data-lake-id=\"u5b63b4ad\" id=\"u5b63b4ad\">，这是由源码决定的</span></li><li fid=\"u3caa6721\" data-lake-id=\"a23f3cfb4da3e8c5ce165505f13751dd\" id=\"a23f3cfb4da3e8c5ce165505f13751dd\"><span data-lake-id=\"u045e01d8\" id=\"u045e01d8\">进入事件循环也是需要成本的，如果在准备时候花费了大于 1ms 的时间，那么在 timer 阶段就会直接执行 </span><code data-lake-id=\"u8367a30d\" id=\"u8367a30d\"><span data-lake-id=\"ucb602fab\" id=\"ucb602fab\">setTimeout</span></code><span data-lake-id=\"u2458f2f2\" id=\"u2458f2f2\"> 回调</span></li><li fid=\"u3caa6721\" data-lake-id=\"0f8dd05f5f2477242c9e09edeafc14ea\" id=\"0f8dd05f5f2477242c9e09edeafc14ea\"><span data-lake-id=\"ue4ceabbf\" id=\"ue4ceabbf\">那么如果准备时间花费小于 1ms，那么就是 </span><code data-lake-id=\"uba2db7e8\" id=\"uba2db7e8\"><span data-lake-id=\"u6b31d203\" id=\"u6b31d203\">setImmediate</span></code><span data-lake-id=\"u10bfdec6\" id=\"u10bfdec6\"> 回调先执行了</span></li></ul><p data-lake-id=\"ae77d47911743aba2234ddeb4badb319\" id=\"ae77d47911743aba2234ddeb4badb319\"><span data-lake-id=\"u552d1a5f\" id=\"u552d1a5f\">当然在某些情况下，他们的执行顺序一定是固定的，比如以下代码：</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22const%20fs%20%3D%20require('fs')%5Cnfs.readFile(__filename%2C%20()%20%3D%3E%20%7B%5Cn%20%20%20%20setTimeout(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20console.log('timeout')%3B%5Cn%20%20%20%20%7D%2C%200)%5Cn%20%20%20%20setImmediate(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20%20console.log('immediate')%5Cn%20%20%20%20%7D)%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22vO0b8%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"7e5fcaf1043e85fc0395988ca7b66718\" id=\"7e5fcaf1043e85fc0395988ca7b66718\"><span data-lake-id=\"u341ce532\" id=\"u341ce532\">在上述代码中，</span><code data-lake-id=\"ud043208f\" id=\"ud043208f\"><span data-lake-id=\"uecccbded\" id=\"uecccbded\">setImmediate</span></code><span data-lake-id=\"u06aecd6e\" id=\"u06aecd6e\"> 永远</span><strong><span data-lake-id=\"u194bd27d\" id=\"u194bd27d\">先执行</span></strong><span data-lake-id=\"u862ea52b\" id=\"u862ea52b\">。因为两个代码写在 IO 回调中，IO 回调是在 poll 阶段执行，当回调执行完毕后队列为空，发现存在 </span><code data-lake-id=\"ud4433bd1\" id=\"ud4433bd1\"><span data-lake-id=\"ufe1a1404\" id=\"ufe1a1404\">setImmediate</span></code><span data-lake-id=\"u3451a389\" id=\"u3451a389\"> 回调，所以就直接跳转到 check 阶段去执行回调了。</span></p><p data-lake-id=\"24ee4ce335b5491e1da439765b18f32e\" id=\"24ee4ce335b5491e1da439765b18f32e\"><br></p><p data-lake-id=\"9e4f4fdb86cf29ead2021df86b8f1fdc\" id=\"9e4f4fdb86cf29ead2021df86b8f1fdc\"><span data-lake-id=\"u62b85d02\" id=\"u62b85d02\">上面都是 macrotask 的执行情况，对于 microtask 来说，它会在以上每个阶段完成前</span><strong><span data-lake-id=\"u059717ca\" id=\"u059717ca\">清空</span></strong><span data-lake-id=\"u3b8c5e0d\" id=\"u3b8c5e0d\"> microtask 队列，下图中的 Tick 就代表了 microtask</span></p><p data-lake-id=\"05ec4229312381d6172f1ec2d40c114b\" id=\"05ec4229312381d6172f1ec2d40c114b\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2021%2Fpng%2F1500604%2F1615476641927-75409d91-38a1-4797-aa75-cb02dd95d732.png%22%2C%22originalType%22%3A%22binary%22%2C%22width%22%3A644%2C%22height%22%3A1227%2C%22linkTarget%22%3A%22_blank%22%2C%22size%22%3A0%2C%22originWidth%22%3A644%2C%22originHeight%22%3A1227%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%22%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%23fcfbfa%22%2C%22id%22%3A%22anu6V%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22setTimeout(()%20%3D%3E%20%7B%5Cn%20%20console.log('timer21')%5Cn%7D%2C%200)%5CnPromise.resolve().then(function()%20%7B%5Cn%20%20console.log('promise1')%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22KUulG%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"6daf2c43a5dfae3d0a8b66e355a83fee\" id=\"6daf2c43a5dfae3d0a8b66e355a83fee\"><span data-lake-id=\"u03bc61c3\" id=\"u03bc61c3\">对于以上代码来说，其实和浏览器中的输出是一样的，microtask 永远执行在 macrotask 前面。</span></p><p data-lake-id=\"eaff56b40bb5ccf30ea976cc6eb2a13d\" id=\"eaff56b40bb5ccf30ea976cc6eb2a13d\"><br></p><p data-lake-id=\"64849892186200b9fcb5ff36248151b9\" id=\"64849892186200b9fcb5ff36248151b9\"><span data-lake-id=\"u09fffa44\" id=\"u09fffa44\">最后来看 Node 中的 </span><code data-lake-id=\"u981b6130\" id=\"u981b6130\"><span data-lake-id=\"uffa8e54f\" id=\"uffa8e54f\">process.nextTick</span></code><span data-lake-id=\"ua70192b4\" id=\"ua70192b4\">，这个函数其实是独立于 Event Loop 之外的，它有一个自己的队列，当每个阶段完成后，如果存在 nextTick 队列，就会</span><strong><span data-lake-id=\"ue4ac7d4f\" id=\"ue4ac7d4f\">清空队列中的所有回调函数</span></strong><span data-lake-id=\"ue0b965bd\" id=\"ue0b965bd\">，并且优先于其他 microtask 执行。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22setTimeout(()%20%3D%3E%20%7B%5Cn%20console.log('timer1')%5Cn%20Promise.resolve().then(function()%20%7B%5Cn%20%20%20console.log('promise1')%5Cn%20%7D)%5Cn%7D%2C%200)%5Cnprocess.nextTick(()%20%3D%3E%20%7B%5Cn%20console.log('nextTick')%5Cn%20process.nextTick(()%20%3D%3E%20%7B%5Cn%20%20%20console.log('nextTick')%5Cn%20%20%20process.nextTick(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20console.log('nextTick')%5Cn%20%20%20%20%20process.nextTick(()%20%3D%3E%20%7B%5Cn%20%20%20%20%20%20%20console.log('nextTick')%5Cn%20%20%20%20%20%7D)%5Cn%20%20%20%7D)%5Cn%20%7D)%5Cn%7D)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%220kBcu%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"7aca01a8239a38399b29bb83eba0bec4\" id=\"7aca01a8239a38399b29bb83eba0bec4\"><span data-lake-id=\"u5bc70d38\" id=\"u5bc70d38\">对于以上代码，永远都是先把 nextTick 全部打印出来。</span></p><h3 data-lake-id=\"1fa8ce9c0edcc5c62cf6dfcc2bfdd895\" id=\"1fa8ce9c0edcc5c62cf6dfcc2bfdd895\"><span data-lake-id=\"u7e1d74f5\" id=\"u7e1d74f5\">10. 事件触发的过程是怎样的 </span></h3><p data-lake-id=\"1d4d21e8ef7e4a8827516b190e896f86\" id=\"1d4d21e8ef7e4a8827516b190e896f86\"><span data-lake-id=\"u7d5aa123\" id=\"u7d5aa123\">事件触发有三个阶段：</span></p><ul list=\"u38209757\"><li fid=\"uf04c7abe\" data-lake-id=\"d8ad86ccbf0fdb97e2afec2af4fcb253\" id=\"d8ad86ccbf0fdb97e2afec2af4fcb253\"><code data-lake-id=\"u87fc2828\" id=\"u87fc2828\"><span data-lake-id=\"u61dedccd\" id=\"u61dedccd\">window</span></code><span data-lake-id=\"u355f1642\" id=\"u355f1642\"> 往事件触发处传播，遇到注册的捕获事件会触发</span></li><li fid=\"uf04c7abe\" data-lake-id=\"67b5aeb71561b36b98a40035acc53b33\" id=\"67b5aeb71561b36b98a40035acc53b33\"><span data-lake-id=\"u855b195c\" id=\"u855b195c\">传播到事件触发处时触发注册的事件</span></li><li fid=\"uf04c7abe\" data-lake-id=\"7d7e62aacccdffd3b5c5b9b93ca6967f\" id=\"7d7e62aacccdffd3b5c5b9b93ca6967f\"><span data-lake-id=\"ue8fc5375\" id=\"ue8fc5375\">从事件触发处往 </span><code data-lake-id=\"ucc417b1d\" id=\"ucc417b1d\"><span data-lake-id=\"ue46ed84d\" id=\"ue46ed84d\">window</span></code><span data-lake-id=\"uc06b1d39\" id=\"uc06b1d39\"> 传播，遇到注册的冒泡事件会触发</span></li></ul><p data-lake-id=\"ec20badf4da856807f2890a97c3b2845\" id=\"ec20badf4da856807f2890a97c3b2845\"><br></p><p data-lake-id=\"5d9206ae32f453e708d9aa8b6f36807d\" id=\"5d9206ae32f453e708d9aa8b6f36807d\"><span data-lake-id=\"u8c3b32a2\" id=\"u8c3b32a2\">事件触发一般来说会按照上面的顺序进行，但是也有特例，</span><strong><span data-lake-id=\"u3c4e121c\" id=\"u3c4e121c\">如果给一个 </span></strong><code data-lake-id=\"ube51a3ae\" id=\"ube51a3ae\"><strong><span data-lake-id=\"u95224614\" id=\"u95224614\">body</span></strong></code><strong><span data-lake-id=\"u48228cbe\" id=\"u48228cbe\"> 中的子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行。</span></strong></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22%2F%2F%20%E4%BB%A5%E4%B8%8B%E4%BC%9A%E5%85%88%E6%89%93%E5%8D%B0%E5%86%92%E6%B3%A1%E7%84%B6%E5%90%8E%E6%98%AF%E6%8D%95%E8%8E%B7%5Cnnode.addEventListener(%5Cn%20%20'click'%2C%5Cn%20%20event%20%3D%3E%20%7B%5Cn%20%20%20%20console.log('%E5%86%92%E6%B3%A1')%5Cn%20%20%7D%2C%5Cn%20%20false%5Cn)%5Cnnode.addEventListener(%5Cn%20%20'click'%2C%5Cn%20%20event%20%3D%3E%20%7B%5Cn%20%20%20%20console.log('%E6%8D%95%E8%8E%B7%20')%5Cn%20%20%7D%2C%5Cn%20%20true%5Cn)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22Pmvw1%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"738b9ec858171e38b7d96c82020cebbb\" id=\"738b9ec858171e38b7d96c82020cebbb\"><span data-lake-id=\"u791b374c\" id=\"u791b374c\">通常使用 </span><code data-lake-id=\"uce8f9868\" id=\"uce8f9868\"><span data-lake-id=\"ue6a224ea\" id=\"ue6a224ea\">addEventListener</span></code><span data-lake-id=\"u0f269b20\" id=\"u0f269b20\"> 注册事件，该函数的第三个参数可以是布尔值，也可以是对象。对于布尔值 </span><code data-lake-id=\"u10977329\" id=\"u10977329\"><span data-lake-id=\"u2a506596\" id=\"u2a506596\">useCapture</span></code><span data-lake-id=\"u9ebea472\" id=\"u9ebea472\"> 参数来说，该参数默认值为 </span><code data-lake-id=\"u8cb84769\" id=\"u8cb84769\"><span data-lake-id=\"u639f6ea7\" id=\"u639f6ea7\">false</span></code><span data-lake-id=\"u76033f56\" id=\"u76033f56\"> ，</span><code data-lake-id=\"uaf808155\" id=\"uaf808155\"><span data-lake-id=\"u63a7c961\" id=\"u63a7c961\">useCapture</span></code><span data-lake-id=\"ub3ff2f25\" id=\"ub3ff2f25\"> 决定了注册的事件是捕获事件还是冒泡事件。对于对象参数来说，可以使用以下几个属性：</span></p><ul list=\"u9644ee02\"><li fid=\"ub57da765\" data-lake-id=\"8ad5db98705cd6d132ff2193bf24870c\" id=\"8ad5db98705cd6d132ff2193bf24870c\"><code data-lake-id=\"ue9ddeacb\" id=\"ue9ddeacb\"><span data-lake-id=\"u0fcd7293\" id=\"u0fcd7293\">capture</span></code><span data-lake-id=\"u87298128\" id=\"u87298128\">：布尔值，和 </span><code data-lake-id=\"ue4887ff8\" id=\"ue4887ff8\"><span data-lake-id=\"uaac4d5cd\" id=\"uaac4d5cd\">useCapture</span></code><span data-lake-id=\"u1578818f\" id=\"u1578818f\"> 作用一样</span></li><li fid=\"ub57da765\" data-lake-id=\"7d745379bfbfa2aa30dc230d1156257b\" id=\"7d745379bfbfa2aa30dc230d1156257b\"><code data-lake-id=\"u3a137bcc\" id=\"u3a137bcc\"><span data-lake-id=\"u8291328b\" id=\"u8291328b\">once</span></code><span data-lake-id=\"u6b6057bc\" id=\"u6b6057bc\">：布尔值，值为 </span><code data-lake-id=\"u10901706\" id=\"u10901706\"><span data-lake-id=\"u9c9ee37f\" id=\"u9c9ee37f\">true</span></code><span data-lake-id=\"uda7f1aff\" id=\"uda7f1aff\"> 表示该回调只会调用一次，调用后会移除监听</span></li><li fid=\"ub57da765\" data-lake-id=\"81ea56e2846d6c34eb531307f7931478\" id=\"81ea56e2846d6c34eb531307f7931478\"><code data-lake-id=\"uc0ca89ff\" id=\"uc0ca89ff\"><span data-lake-id=\"u7920fc21\" id=\"u7920fc21\">passive</span></code><span data-lake-id=\"ubfece3d5\" id=\"ubfece3d5\">：布尔值，表示永远不会调用 </span><code data-lake-id=\"ue503e8ab\" id=\"ue503e8ab\"><span data-lake-id=\"u37e126e6\" id=\"u37e126e6\">preventDefault</span></code></li></ul><p data-lake-id=\"9108bf83221b1b978782c8b780d364ee\" id=\"9108bf83221b1b978782c8b780d364ee\"><br></p><p data-lake-id=\"9005dac152e4112437d94c097c549526\" id=\"9005dac152e4112437d94c097c549526\"><span data-lake-id=\"u36c8f246\" id=\"u36c8f246\">一般来说，如果只希望事件只触发在目标上，这时候可以使用 </span><code data-lake-id=\"u130a341e\" id=\"u130a341e\"><span data-lake-id=\"uc4ce1324\" id=\"uc4ce1324\">stopPropagation</span></code><span data-lake-id=\"uc5cd918c\" id=\"uc5cd918c\"> 来阻止事件的进一步传播。通常认为 </span><code data-lake-id=\"u2074f976\" id=\"u2074f976\"><span data-lake-id=\"u14266493\" id=\"u14266493\">stopPropagation</span></code><span data-lake-id=\"u2d1bf49a\" id=\"u2d1bf49a\"> 是用来阻止事件冒泡的，其实该函数也可以阻止捕获事件。</span></p><p data-lake-id=\"b1ca3c479cda67ae5eebf29ccb0a6b19\" id=\"b1ca3c479cda67ae5eebf29ccb0a6b19\"><br></p><p data-lake-id=\"34c6dc601bed5a009a78d80a8bdcc343\" id=\"34c6dc601bed5a009a78d80a8bdcc343\"><code data-lake-id=\"u12a2ed86\" id=\"u12a2ed86\"><span data-lake-id=\"u93410b90\" id=\"u93410b90\">stopImmediatePropagation</span></code><span data-lake-id=\"u6f7036fa\" id=\"u6f7036fa\"> 同样也能实现阻止事件，但是还能阻止该事件目标执行别的注册事件。</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22node.addEventListener(%5Cn%20%20'click'%2C%5Cn%20%20event%20%3D%3E%20%7B%5Cn%20%20%20%20event.stopImmediatePropagation()%5Cn%20%20%20%20console.log('%E5%86%92%E6%B3%A1')%5Cn%20%20%7D%2C%5Cn%20%20false%5Cn)%5Cn%2F%2F%20%E7%82%B9%E5%87%BB%20node%20%E5%8F%AA%E4%BC%9A%E6%89%A7%E8%A1%8C%E4%B8%8A%E9%9D%A2%E7%9A%84%E5%87%BD%E6%95%B0%EF%BC%8C%E8%AF%A5%E5%87%BD%E6%95%B0%E4%B8%8D%E4%BC%9A%E6%89%A7%E8%A1%8C%5Cnnode.addEventListener(%5Cn%20%20'click'%2C%5Cn%20%20event%20%3D%3E%20%7B%5Cn%20%20%20%20console.log('%E6%8D%95%E8%8E%B7%20')%5Cn%20%20%7D%2C%5Cn%20%20true%5Cn)%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22qvNWC%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><h2 data-lake-id=\"51068cf21c1ca3a0f10b47ecfacf7f79\" id=\"51068cf21c1ca3a0f10b47ecfacf7f79\"><span data-lake-id=\"udf40107a\" id=\"udf40107a\">九、浏览器垃圾回收机制</span></h2><h3 data-lake-id=\"bd01b713eafd1e78aaa4fe08ef811680\" id=\"bd01b713eafd1e78aaa4fe08ef811680\"><span data-lake-id=\"u8112428c\" id=\"u8112428c\">1. V8的垃圾回收机制是怎样的</span></h3><p data-lake-id=\"3b93bacd71767121153c83ede6a38cbd\" id=\"3b93bacd71767121153c83ede6a38cbd\"><span data-lake-id=\"u9282c632\" id=\"u9282c632\">V8 实现了准确式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。</span></p><p data-lake-id=\"f4ab9ce2671a80df7743e97ca5a6de2f\" id=\"f4ab9ce2671a80df7743e97ca5a6de2f\"><strong><span data-lake-id=\"ue7cd4e93\" id=\"ue7cd4e93\">（1）新生代算法</span></strong></p><p data-lake-id=\"e1697692999becbf7024b6d1a2c17e53\" id=\"e1697692999becbf7024b6d1a2c17e53\"><span data-lake-id=\"u0adcb1c3\" id=\"u0adcb1c3\">新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。</span></p><p data-lake-id=\"9f46de96fdd5b30686b0f414b69e7393\" id=\"9f46de96fdd5b30686b0f414b69e7393\"><br></p><p data-lake-id=\"b237f399091f6a96436b79045aa586f4\" id=\"b237f399091f6a96436b79045aa586f4\"><span data-lake-id=\"uaa4efb28\" id=\"uaa4efb28\">在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。</span></p><p data-lake-id=\"cfd73173057c56174bc43e46e882cc30\" id=\"cfd73173057c56174bc43e46e882cc30\"><br></p><p data-lake-id=\"1e0878d325f534e091d7297add8c07b6\" id=\"1e0878d325f534e091d7297add8c07b6\"><strong><span data-lake-id=\"ubb4e3c32\" id=\"ubb4e3c32\">（2）老生代算法</span></strong></p><p data-lake-id=\"f1d8e50a24506567f6dbd7d021483eef\" id=\"f1d8e50a24506567f6dbd7d021483eef\"><span data-lake-id=\"ud8f5c466\" id=\"ud8f5c466\">老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。</span></p><p data-lake-id=\"1c73536f73b890d7cd4d9a10cd9ffe26\" id=\"1c73536f73b890d7cd4d9a10cd9ffe26\"><br></p><p data-lake-id=\"0602cf7bcecd66b7e99ce341df5d92b3\" id=\"0602cf7bcecd66b7e99ce341df5d92b3\"><span data-lake-id=\"u95f2cebe\" id=\"u95f2cebe\">先来说下什么情况下对象会出现在老生代空间中：</span></p><ul list=\"u2e896589\"><li fid=\"u26beb07e\" data-lake-id=\"0b59f464b54f8602bdd9bc89012e8341\" id=\"0b59f464b54f8602bdd9bc89012e8341\"><span data-lake-id=\"ucc140d58\" id=\"ucc140d58\">新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。</span></li><li fid=\"u26beb07e\" data-lake-id=\"564b94d6fee168501c816c2409019094\" id=\"564b94d6fee168501c816c2409019094\"><span data-lake-id=\"u682f5401\" id=\"u682f5401\">To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。</span></li></ul><p data-lake-id=\"06446fa200bdb806c64ad7809f119dc7\" id=\"06446fa200bdb806c64ad7809f119dc7\"><br></p><p data-lake-id=\"6e66ed9d7aea214623b44518e92beef4\" id=\"6e66ed9d7aea214623b44518e92beef4\"><span data-lake-id=\"u4735f660\" id=\"u4735f660\">老生代中的空间很复杂，有如下几个空间</span></p><card type=\"inline\" name=\"codeblock\" value=\"data:%7B%22mode%22%3A%22javascript%22%2C%22code%22%3A%22enum%20AllocationSpace%20%7B%5Cn%20%20%2F%2F%20TODO(v8%3A7464)%3A%20Actually%20map%20this%20space's%20memory%20as%20read-only.%5Cn%20%20RO_SPACE%2C%20%20%20%20%2F%2F%20%E4%B8%8D%E5%8F%98%E7%9A%84%E5%AF%B9%E8%B1%A1%E7%A9%BA%E9%97%B4%5Cn%20%20NEW_SPACE%2C%20%20%20%2F%2F%20%E6%96%B0%E7%94%9F%E4%BB%A3%E7%94%A8%E4%BA%8E%20GC%20%E5%A4%8D%E5%88%B6%E7%AE%97%E6%B3%95%E7%9A%84%E7%A9%BA%E9%97%B4%5Cn%20%20OLD_SPACE%2C%20%20%20%2F%2F%20%E8%80%81%E7%94%9F%E4%BB%A3%E5%B8%B8%E9%A9%BB%E5%AF%B9%E8%B1%A1%E7%A9%BA%E9%97%B4%5Cn%20%20CODE_SPACE%2C%20%20%2F%2F%20%E8%80%81%E7%94%9F%E4%BB%A3%E4%BB%A3%E7%A0%81%E5%AF%B9%E8%B1%A1%E7%A9%BA%E9%97%B4%5Cn%20%20MAP_SPACE%2C%20%20%20%2F%2F%20%E8%80%81%E7%94%9F%E4%BB%A3%20map%20%E5%AF%B9%E8%B1%A1%5Cn%20%20LO_SPACE%2C%20%20%20%20%2F%2F%20%E8%80%81%E7%94%9F%E4%BB%A3%E5%A4%A7%E7%A9%BA%E9%97%B4%E5%AF%B9%E8%B1%A1%5Cn%20%20NEW_LO_SPACE%2C%20%20%2F%2F%20%E6%96%B0%E7%94%9F%E4%BB%A3%E5%A4%A7%E7%A9%BA%E9%97%B4%E5%AF%B9%E8%B1%A1%5Cn%20%20FIRST_SPACE%20%3D%20RO_SPACE%2C%5Cn%20%20LAST_SPACE%20%3D%20NEW_LO_SPACE%2C%5Cn%20%20FIRST_GROWABLE_PAGED_SPACE%20%3D%20OLD_SPACE%2C%5Cn%20%20LAST_GROWABLE_PAGED_SPACE%20%3D%20MAP_SPACE%5Cn%7D%3B%22%2C%22autoWrap%22%3Afalse%2C%22lineNumbers%22%3Atrue%2C%22heightLimit%22%3Atrue%2C%22collapsed%22%3Afalse%2C%22hideToolbar%22%3Afalse%2C%22name%22%3A%22%22%2C%22tabSize%22%3Anull%2C%22indentWithTab%22%3Afalse%2C%22lightLines%22%3A%5B%5D%2C%22foldLines%22%3A%5B%5D%2C%22theme%22%3A%22default%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22GK2Cs%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card><p data-lake-id=\"b7825e924af24a63dc6a8b64f0d1515c\" id=\"b7825e924af24a63dc6a8b64f0d1515c\"><span data-lake-id=\"uc4515189\" id=\"uc4515189\">在老生代中，以下情况会先启动标记清除算法：</span></p><ul list=\"u1031bd8a\"><li fid=\"u88bdac1c\" data-lake-id=\"9e032a142227839eebbd9fabd47490c2\" id=\"9e032a142227839eebbd9fabd47490c2\"><span data-lake-id=\"u21affe4d\" id=\"u21affe4d\">某一个空间没有分块的时候</span></li><li fid=\"u88bdac1c\" data-lake-id=\"30444b81a60fea64d75e40efa555b0a3\" id=\"30444b81a60fea64d75e40efa555b0a3\"><span data-lake-id=\"uee19832a\" id=\"uee19832a\">空间中被对象超过一定限制</span></li><li fid=\"u88bdac1c\" data-lake-id=\"45cf31d1b7a7c28cef0d1760c2bbb984\" id=\"45cf31d1b7a7c28cef0d1760c2bbb984\"><span data-lake-id=\"u5de9765a\" id=\"u5de9765a\">空间不能保证新生代中的对象移动到老生代中</span></li></ul><p data-lake-id=\"5473145dbd5d5a80ace4024107a95f9e\" id=\"5473145dbd5d5a80ace4024107a95f9e\"><br></p><p data-lake-id=\"d12d9ab83e03ecae07bc07a021dc51af\" id=\"d12d9ab83e03ecae07bc07a021dc51af\"><span data-lake-id=\"ue059eddb\" id=\"ue059eddb\">在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行。</span></p><p data-lake-id=\"c2b6a434f1b424099afbb51bbd3adc91\" id=\"c2b6a434f1b424099afbb51bbd3adc91\"><br></p><p data-lake-id=\"2c699eae050fd16779999b9fbb0c0a21\" id=\"2c699eae050fd16779999b9fbb0c0a21\"><span data-lake-id=\"udfc61e9d\" id=\"udfc61e9d\">清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象向一端移动，直到所有对象都移动完成然后清理掉不需要的内存。</span></p><h3 data-lake-id=\"6b5ac962a33d8ab5031eec3b4dd58b07\" id=\"6b5ac962a33d8ab5031eec3b4dd58b07\"><span data-lake-id=\"u96a90d9c\" id=\"u96a90d9c\">2. 哪些操作会造成内存泄漏？</span></h3><ul list=\"ud7b39c75\"><li fid=\"u188f5a8a\" data-lake-id=\"0cd1a8edf89b634d8bd471fc0bc30d23\" id=\"0cd1a8edf89b634d8bd471fc0bc30d23\"><span data-lake-id=\"u45720cf7\" id=\"u45720cf7\">第一种情况是由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</span></li><li fid=\"u188f5a8a\" data-lake-id=\"4aa1f6657232a265670bc4c3d38b1729\" id=\"4aa1f6657232a265670bc4c3d38b1729\"><span data-lake-id=\"uad517bd6\" id=\"uad517bd6\">第二种情况是设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</span></li><li fid=\"u188f5a8a\" data-lake-id=\"9da8868a305d6ee1b8520c4fbc8b010b\" id=\"9da8868a305d6ee1b8520c4fbc8b010b\"><span data-lake-id=\"u5b710760\" id=\"u5b710760\">第三种情况是获取一个 DOM 元素的引用，而后面这个元素被删除，由于我们一直保留了对这个元素的引用，所以它也无法被回收。</span></li><li fid=\"u188f5a8a\" data-lake-id=\"52772010ca35b5c1af46f79c20c30fed\" id=\"52772010ca35b5c1af46f79c20c30fed\"><span data-lake-id=\"u745977ff\" id=\"u745977ff\">第四种情况是不合理的使用闭包，从而导致某些变量一直被留在内存当中。</span></li></ul><p data-lake-id=\"u8384e9b9\" id=\"u8384e9b9\"><card type=\"inline\" name=\"image\" value=\"data:%7B%22src%22%3A%22https%3A%2F%2Fcdn.nlark.com%2Fyuque%2F0%2F2023%2Fpng%2F1500604%2F1673895394803-2d8d0f4a-fe34-4ff1-8155-bf574e402090.png%22%2C%22taskId%22%3A%22u23a2d5ad-57f4-4038-b732-cc8a6561e1e%22%2C%22clientId%22%3A%22u99f2bd58-2b6a-4%22%2C%22originalType%22%3A%22binary%22%2C%22linkTarget%22%3A%22_blank%22%2C%22name%22%3A%22%E5%85%AC%E4%BC%97%E5%8F%B7.png%22%2C%22size%22%3A96968%2C%22from%22%3A%22ui%22%2C%22originWidth%22%3A900%2C%22originHeight%22%3A500%2C%22ratio%22%3A1%2C%22status%22%3A%22done%22%2C%22style%22%3A%22shadow%22%2C%22search%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%20%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%20%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%20%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%20%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%2C%22ocrLocations%22%3A%5B%7B%22x%22%3A123.38725%2C%22y%22%3A112.777725%2C%22width%22%3A336.99663%2C%22height%22%3A86.69984499999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E6%96%B0%E9%97%BB%22%7D%2C%7B%22x%22%3A129.7904%2C%22y%22%3A197.01118%2C%22width%22%3A405.65217000000007%2C%22height%22%3A106.74355%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E8%BF%9B%E9%98%B6%E4%BA%BA%22%7D%2C%7B%22x%22%3A640.70355%2C%22y%22%3A235.86761%2C%22width%22%3A36.184150000000045%2C%22height%22%3A7.758409999999998%2C%22text%22%3A%22%E5%89%8D%E7%AB%AF%E5%85%85%E7%94%B5%E5%AE%9D%22%7D%2C%7B%22x%22%3A156.7012%2C%22y%22%3A334.17084%2C%22width%22%3A305.91913%2C%22height%22%3A26.283810000000017%2C%22text%22%3A%22%E4%BA%A4%E6%B5%81%E7%BE%A4%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E9%9D%A2%E8%AF%95%E6%8A%80%E5%B7%A7%22%7D%2C%7B%22x%22%3A541.58527%2C%22y%22%3A363.85507%2C%22width%22%3A235.1079699999999%2C%22height%22%3A24.23885999999999%2C%22text%22%3A%22%E5%BE%AE%E4%BF%A1%E6%89%AB%E7%A0%81%E5%85%B3%E6%B3%A8%E5%85%AC%E4%BC%97%E5%8F%B7%22%7D%5D%2C%22showTitle%22%3Afalse%2C%22title%22%3A%22%22%2C%22rotation%22%3A0%2C%22crop%22%3A%5B0%2C0%2C1%2C1%5D%2C%22averageHue%22%3A%22%2370ad8e%22%2C%22id%22%3A%22u8a2439dd%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%7D\"></card></p>",
        "selected_at": null,
        "editor_meta": "{\"image\":17,\"codeblock\":40}",
        "editor_meta_draft": "{\"image\":17,\"codeblock\":40}",
        "meta": {
            "show_author_option": 0,
            "privacy_migrated": true,
            "premium_migrated": true
        },
        "marked": true,
        "mark": {
            "action_name": "mark_doc",
            "id": 110332311754,
            "created_at": "2023-07-03T10:20:06.000Z",
            "updated_at": "2023-07-03T10:20:06.000Z",
            "space_id": 0,
            "action_type": "mark",
            "action_option": "doc",
            "action_setting_type": "default",
            "user_id": 38384436,
            "organization_id": 0,
            "target_type": "Doc",
            "target_id": 23474284,
            "target_book_id": 6862641,
            "target_group_id": 1500604,
            "title": "前端面试题之浏览器原理篇"
        },
        "region": "北京",
        "indexed_level": 1,
        "privacy_migrated": true,
        "user": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T06:27:51.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "last_editor": {
            "id": 1500604,
            "type": "User",
            "login": "cuggz",
            "name": "CUGGZ",
            "description": "🛰公号：前端充电宝",
            "avatar": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "avatar_url": "https://cdn.nlark.com/yuque/0/2022/png/1500604/1641785019489-avatar/f0c57a90-7ba8-43a7-9361-7fa8eb5bb6b6.png",
            "followers_count": 4183,
            "following_count": 7,
            "role": 1,
            "status": 1,
            "public": 1,
            "scene": null,
            "source": null,
            "created_at": "2020-05-27T03:53:45.000Z",
            "updated_at": "2023-07-21T06:27:51.000Z",
            "expired_at": "2025-10-16T15:59:59.000Z",
            "isPaid": true,
            "member_level": 2,
            "memberLevelName": "超级会员",
            "hasMemberLevel": true,
            "isTopLevel": true,
            "isNewbie": false,
            "members_count": 0,
            "profile": null,
            "organizationUser": null,
            "_serializer": "web.user"
        },
        "_serializer": "web.doc_detail"
    }
}